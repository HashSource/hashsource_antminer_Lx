;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 7B34B37E650C203A4922E80FEFEE39EAD292697FBAB0BA9458C68EE45278F151
; Input MD5    : 4D534D2713E7B3F00B9C59F8E22C142F
; Input CRC32  : EC54DFB0
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/hashsource_antminer_Lx/bitmain_firmware/_binaries/cgminer_7b34b37e650c203a
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libpthread.so.0'
; Needed Library 'libm.so.6'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD _start+1            ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x48B84             ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1A                ; Number of entries in SHT
DCW 0x19                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0x46950             ; File offset
DCD unk_56950           ; Virtual address
DCD 0x56950             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10154             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0x4695C             ; Size in file image
DCD 0x4695C             ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x46F00             ; File offset
DCD off_66F00           ; Virtual address
DCD 0x66F00             ; Physical address
DCD 0x1B64              ; Size in file image
DCD 0xF9A4              ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x46F08             ; File offset
DCD stru_66F08          ; Virtual address
DCD 0x66F08             ; Physical address
DCD 0xF8                ; Size in file image
DCD 0xF8                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0x46F00             ; File offset
DCD off_66F00           ; Virtual address
DCD 0x66F00             ; Physical address
DCD 0x100               ; Size in file image
DCD 0x100               ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0x70, 0x9A, 0x12, 9, 0xDE, 0xB2, 0xE4 ; Desc
DCB 0x12, 0x63, 0x45, 0x1D, 0x98, 0x97, 0xC6
DCB 0x59, 0x1A, 0xE7, 0x65, 0xDA, 4
; ELF Hash Table
elf_hash_nbucket DCD 0x83
elf_hash_nchain DCD 0xA6
elf_hash_bucket DCD 0x64, 0x40, 0x5D, 0x86, 0x68, 0, 0x75
DCD 0x3A, 0xD, 0x14, 0, 0x90, 0x51, 0x65
DCD 0x7F, 0, 0, 0, 0x15, 0x45, 0, 0, 0x89
DCD 0x98, 0x70, 0, 0x52, 0, 0x54, 0x69, 0x77
DCD 0, 0, 0xA5, 0, 0x78, 0xB, 0x8A, 0x6D
DCD 0xA2, 0x88, 0x80, 0x9F, 0xA3, 0x72, 0x42
DCD 0, 0, 0, 0, 0, 0, 0x4D, 0x37, 0x95, 0x2D
DCD 0, 0x5B, 0x58, 0x2A, 0x9A, 0x66, 0x87
DCD 0x7A, 0x76, 0, 0x8E, 0, 0x85, 0, 0x3E
DCD 0, 0, 0x28, 0x9E, 0x63, 0, 0, 0, 0x7D
DCD 0xA4, 0x8D, 0x82, 0x29, 0, 0, 0x62, 0
DCD 2, 0x84, 0x96, 0x6B, 0x92, 0, 0x38, 0
DCD 0, 0x61, 0xF, 0x60, 0, 0, 0x41, 0, 0xA1
DCD 0, 0x57, 0x8C, 0xA0, 0, 0, 0x6A, 0x6E
DCD 8, 0x99, 0x3B, 0x8B, 0x5E, 0, 0x7C, 0x7E
DCD 0x94, 0x93, 0x91, 0x97, 0, 0x5F, 0x46
DCD 0x9B, 0x9D, 0x6C
elf_hash_chain DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCD 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x13
DCD 0, 0, 7, 0, 0, 0, 0, 0x11, 0, 0x16, 0
DCD 0x1B, 0x19, 0xE, 9, 0x1A, 0, 0, 0, 0
DCD 1, 0, 0, 0x23, 0x21, 0, 0, 0, 0x30, 0
DCD 6, 0, 0, 0xA, 0x31, 0, 0, 0, 0, 0, 0x35
DCD 0, 0x24, 0, 0x2C, 0x22, 0x17, 0, 0x2B
DCD 0, 0x2F, 0, 0, 0x18, 0, 0x4A, 0x4E, 0
DCD 0, 0x1D, 0, 0x25, 0x49, 0x10, 0x32, 0
DCD 0, 0x36, 0x3D, 0x50, 0x4C, 4, 0, 0x1F
DCD 0x33, 0, 0x59, 0x39, 0, 0, 0, 0, 0, 0
DCD 0, 0x12, 0, 0x5C, 0x47, 0, 0, 0, 0, 0x48
DCD 0x3F, 0x20, 0, 0, 0xC, 0, 0, 0x53, 0
DCD 0, 0, 0, 0, 0x5A, 0x26, 0x56, 0x3C, 0x2E
DCD 0, 0x73, 0x44, 0x1C, 0x27, 0x81, 0x71
DCD 0x79, 0x1E, 0x83, 0, 0, 0x34, 0x4B, 0
DCD 3, 0x6F, 0x8F, 0, 0x7B, 0, 0x74, 0, 0x55
DCD 0x4F, 0x67, 0x9C, 0x43, 5
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aPthreadMutexUn - byte_110C0,\ ; "pthread_mutex_unlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFdopen - byte_110C0, 0, 0, \ ; "fdopen"
           0x12, 0, 0>
Elf32_Sym <aCalloc - byte_110C0, 0, 0, \ ; "calloc"
           0x12, 0, 0>
Elf32_Sym <aStrstr - byte_110C0, 0, 0, \ ; "strstr"
           0x12, 0, 0>
Elf32_Sym <aRaise - byte_110C0, 0, 0, \ ; "raise"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondBro - byte_110C0,\ ; "pthread_cond_broadcast"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSemWait - byte_110C0, 0, 0, \ ; "sem_wait"
           0x12, 0, 0>
Elf32_Sym <aPthreadRegiste - byte_110C0,\ ; "__pthread_register_cancel"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrcmp - byte_110C0, 0, 0, \ ; "strcmp"
           0x12, 0, 0>
Elf32_Sym <aStrtol - byte_110C0, 0, 0, \ ; "strtol"
           0x12, 0, 0>
Elf32_Sym <aSemPost - byte_110C0, 0, 0, \ ; "sem_post"
           0x12, 0, 0>
Elf32_Sym <aItmDeregistert - byte_110C0,\ ; "_ITM_deregisterTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aSetsockopt - byte_110C0, 0, \ ; "setsockopt"
           0, 0x12, 0, 0>
Elf32_Sym <aStrcspn - byte_110C0, 0, 0, \ ; "strcspn"
           0x12, 0, 0>
Elf32_Sym <aVfprintf+2 - byte_110C0, 0, \ ; "printf"
           0, 0x12, 0, 0>
Elf32_Sym <aFread+1 - byte_110C0, 0, 0, \ ; "read"
           0x12, 0, 0>
Elf32_Sym <aPthreadMutexDe - byte_110C0,\ ; "pthread_mutex_destroy"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFflush - byte_110C0, 0, 0, \ ; "fflush"
           0x12, 0, 0>
Elf32_Sym <aMemmove - byte_110C0, 0, 0, \ ; "memmove"
           0x12, 0, 0>
Elf32_Sym <aPthreadRwlockI - byte_110C0,\ ; "pthread_rwlock_init"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFree - byte_110C0, free, 0, \ ; "free"
           0x12, 0, 0>
Elf32_Sym <aFgets - byte_110C0, 0, 0, \ ; "fgets"
           0x12, 0, 0>
Elf32_Sym <aPthreadMutexLo - byte_110C0,\ ; "pthread_mutex_lock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadDetach - byte_110C0, \ ; "pthread_detach"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aClockNanosleep+6 - byte_110C0,\ ; "nanosleep"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aInetPton - byte_110C0, 0, 0,\ ; "inet_pton"
           0x12, 0, 0>
Elf32_Sym <aClockGettime - byte_110C0, \ ; "clock_gettime"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadSelf - byte_110C0, 0,\ ; "pthread_self"
           0, 0x12, 0, 0>
Elf32_Sym <aMemcpy - byte_110C0, 0, 0, \ ; "memcpy"
           0x12, 0, 0>
Elf32_Sym <aPthreadMutexIn - byte_110C0,\ ; "pthread_mutex_init"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadCondSig+0xD - byte_110C0,\ ; "signal"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aLocaltime+5 - byte_110C0, 0,\ ; "time"
           0, 0x12, 0, 0>
Elf32_Sym <aSetlogmask - byte_110C0, 0, \ ; "setlogmask"
           0, 0x12, 0, 0>
Elf32_Sym <aPthreadMutexTr - byte_110C0,\ ; "pthread_mutex_trylock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aMemcmp - byte_110C0, 0, 0, \ ; "memcmp"
           0x12, 0, 0>
Elf32_Sym <aSelect - byte_110C0, 0, 0, \ ; "select"
           0x12, 0, 0>
Elf32_Sym <aClockNanosleep+0xA - byte_110C0,\ ; "sleep"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStpcpy - byte_110C0, 0, 0, \ ; "stpcpy"
           0x12, 0, 0>
Elf32_Sym <aPthreadRwlockW - byte_110C0,\ ; "pthread_rwlock_wrlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aRecvfrom - byte_110C0, 0, 0,\ ; "recvfrom"
           0x12, 0, 0>
Elf32_Sym <aPthreadSetcanc - byte_110C0,\ ; "pthread_setcancelstate"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadRwlockR - byte_110C0,\ ; "pthread_rwlock_rdlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadCondIni - byte_110C0,\ ; "pthread_cond_init"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSysconf - byte_110C0, 0, 0, \ ; "sysconf"
           0x12, 0, 0>
Elf32_Sym <aDup2 - byte_110C0, 0, 0, \ ; "dup2"
           0x12, 0, 0>
Elf32_Sym <aRealloc - byte_110C0, 0, 0, \ ; "realloc"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondDes - byte_110C0,\ ; "pthread_cond_destroy"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrcasecmp - byte_110C0, 0, \ ; "strcasecmp"
           0, 0x12, 0, 0>
Elf32_Sym <aPerror - byte_110C0, 0, 0, \ ; "perror"
           0x12, 0, 0>
Elf32_Sym <aAccept - byte_110C0, 0, 0, \ ; "accept"
           0x12, 0, 0>
Elf32_Sym <aSigaction - byte_110C0, 0, \ ; "sigaction"
           0, 0x12, 0, 0>
Elf32_Sym <aStderr - byte_110C0, stderr,\ ; "stderr"
           4, 0x11, 0, 0x17>
Elf32_Sym <aFwrite - byte_110C0, 0, 0, \ ; "fwrite"
           0x12, 0, 0>
Elf32_Sym <aStrcat - byte_110C0, 0, 0, \ ; "strcat"
           0x12, 0, 0>
Elf32_Sym <aGetsockopt - byte_110C0, 0, \ ; "getsockopt"
           0, 0x12, 0, 0>
Elf32_Sym <aStrtoll - byte_110C0, 0, 0, \ ; "strtoll"
           0x12, 0, 0>
Elf32_Sym <aUsleep - byte_110C0, 0, 0, \ ; "usleep"
           0x12, 0, 0>
Elf32_Sym <aStrcpy - byte_110C0, 0, 0, \ ; "strcpy"
           0x12, 0, 0>
Elf32_Sym <aGettimeofday - byte_110C0, \ ; "gettimeofday"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFread - byte_110C0, 0, 0, \ ; "fread"
           0x12, 0, 0>
Elf32_Sym <aSchedYield - byte_110C0, \ ; "sched_yield"
           sched_yield, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadCreate - byte_110C0, \ ; "pthread_create"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFloor - byte_110C0, 0, 0, \ ; "floor"
           0x12, 0, 0>
Elf32_Sym <aStrtof - byte_110C0, 0, 0, \ ; "strtof"
           0x12, 0, 0>
Elf32_Sym <aFopen64+1 - byte_110C0, 0, \ ; "open64"
           0, 0x12, 0, 0>
Elf32_Sym <aGetenv - byte_110C0, 0, 0, \ ; "getenv"
           0x12, 0, 0>
Elf32_Sym <aPuts - byte_110C0, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aSysinfo - byte_110C0, 0, 0, \ ; "sysinfo"
           0x12, 0, 0>
Elf32_Sym <aMalloc - byte_110C0, malloc,\ ; "malloc"
           0, 0x12, 0, 0>
Elf32_Sym <aLog10 - byte_110C0, 0, 0, \ ; "log10"
           0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_110C0, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrerror - byte_110C0, 0, 0,\ ; "strerror"
           0x12, 0, 0>
Elf32_Sym <aLocaltime - byte_110C0, 0, \ ; "localtime"
           0, 0x12, 0, 0>
Elf32_Sym <aCtypeTolowerLo - byte_110C0,\ ; "__ctype_tolower_loc"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aDirname - byte_110C0, 0, 0, \ ; "dirname"
           0x12, 0, 0>
Elf32_Sym <aCtypeToupperLo - byte_110C0,\ ; "__ctype_toupper_loc"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_110C0, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aSemTrywait - byte_110C0, 0, \ ; "sem_trywait"
           0, 0x12, 0, 0>
Elf32_Sym <aKill - byte_110C0, 0, 0, \ ; "kill"
           0x12, 0, 0>
Elf32_Sym <aCtypeBLoc - byte_110C0, 0, \ ; "__ctype_b_loc"
           0, 0x12, 0, 0>
Elf32_Sym <aGetpid - byte_110C0, 0, 0, \ ; "getpid"
           0x12, 0, 0>
Elf32_Sym <aExit - byte_110C0, 0, 0, \ ; "exit"
           0x12, 0, 0>
Elf32_Sym <aSemTimedwait - byte_110C0, \ ; "sem_timedwait"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrlen - byte_110C0, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aRound - byte_110C0, 0, 0, \ ; "round"
           0x12, 0, 0>
Elf32_Sym <aStrchr - byte_110C0, 0, 0, \ ; "strchr"
           0x12, 0, 0>
Elf32_Sym <aPthreadSetcanc_0 - byte_110C0,\ ; "pthread_setcanceltype"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aNice - byte_110C0, 0, 0, \ ; "nice"
           0x12, 0, 0>
Elf32_Sym <aVfprintf+1 - byte_110C0, 0, \ ; "fprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aStdin - byte_110C0, stdin, \ ; "stdin"
           4, 0x11, 0, 0x17>
Elf32_Sym <aFcntl - byte_110C0, 0, 0, \ ; "fcntl"
           0x12, 0, 0>
Elf32_Sym <aExecv - byte_110C0, 0, 0, \ ; "execv"
           0x12, 0, 0>
Elf32_Sym <aErrnoLocation - byte_110C0, \ ; "__errno_location"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrncasecmp - byte_110C0, 0,\ ; "strncasecmp"
           0, 0x12, 0, 0>
Elf32_Sym <aVsnprintf+1 - byte_110C0, 0,\ ; "snprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aIsoc99Sscanf - byte_110C0, \ ; "__isoc99_sscanf"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrdup - byte_110C0, 0, 0, \ ; "__strdup"
           0x12, 0, 0>
Elf32_Sym <aMkdir - byte_110C0, 0, 0, \ ; "mkdir"
           0x12, 0, 0>
Elf32_Sym <aBind - byte_110C0, 0, 0, \ ; "bind"
           0x12, 0, 0>
Elf32_Sym <aSemInit - byte_110C0, 0, 0, \ ; "sem_init"
           0x12, 0, 0>
Elf32_Sym <aMemset - byte_110C0, 0, 0, \ ; "memset"
           0x12, 0, 0>
Elf32_Sym <aPthreadUnregis - byte_110C0,\ ; "__pthread_unregister_cancel"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadRwlockU - byte_110C0,\ ; "pthread_rwlock_unlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrncpy - byte_110C0, 0, 0, \ ; "strncpy"
           0x12, 0, 0>
Elf32_Sym <aPthreadCancel - byte_110C0, \ ; "pthread_cancel"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFgetc - byte_110C0, fgetc, \ ; "fgetc"
           0, 0x12, 0, 0>
Elf32_Sym <aPrctl - byte_110C0, 0, 0, \ ; "prctl"
           0x12, 0, 0>
Elf32_Sym <aStrtod - byte_110C0, 0, 0, \ ; "strtod"
           0x12, 0, 0>
Elf32_Sym <aFwrite+1 - byte_110C0, 0, 0,\ ; "write"
           0x12, 0, 0>
Elf32_Sym <aFileno - byte_110C0, 0, 0, \ ; "fileno"
           0x12, 0, 0>
Elf32_Sym <aPthreadUnwindN - byte_110C0,\ ; "__pthread_unwind_next"
           0, 0, 0x22, 0, 0>
Elf32_Sym <aMemchr - byte_110C0, 0, 0, \ ; "memchr"
           0x12, 0, 0>
Elf32_Sym <aAccess - byte_110C0, 0, 0, \ ; "access"
           0x12, 0, 0>
Elf32_Sym <aStdout - byte_110C0, stdout,\ ; "stdout"
           4, 0x11, 0, 0x17>
Elf32_Sym <aFclose - byte_110C0, 0, 0, \ ; "fclose"
           0x12, 0, 0>
Elf32_Sym <aPipe - byte_110C0, 0, 0, \ ; "pipe"
           0x12, 0, 0>
Elf32_Sym <aStrtok - byte_110C0, 0, 0, \ ; "strtok"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondTim - byte_110C0,\ ; "pthread_cond_timedwait"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSendto - byte_110C0, 0, 0, \ ; "sendto"
           0x12, 0, 0>
Elf32_Sym <aShutdown - byte_110C0, 0, 0,\ ; "shutdown"
           0x12, 0, 0>
Elf32_Sym <aSigemptyset - byte_110C0, 0,\ ; "sigemptyset"
           0, 0x12, 0, 0>
Elf32_Sym <aPopen - byte_110C0, 0, 0, \ ; "popen"
           0x12, 0, 0>
Elf32_Sym <aPthreadRwlockD - byte_110C0,\ ; "pthread_rwlock_destroy"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFork - byte_110C0, 0, 0, \ ; "fork"
           0x12, 0, 0>
Elf32_Sym <aErrx - byte_110C0, 0, 0, \ ; "errx"
           0x12, 0, 0>
Elf32_Sym <aGetnameinfo - byte_110C0, 0,\ ; "getnameinfo"
           0, 0x12, 0, 0>
Elf32_Sym <aExecl - byte_110C0, 0, 0, \ ; "execl"
           0x12, 0, 0>
Elf32_Sym <aListen - byte_110C0, 0, 0, \ ; "listen"
           0x12, 0, 0>
Elf32_Sym <aVfprintf - byte_110C0, 0, 0,\ ; "vfprintf"
           0x12, 0, 0>
Elf32_Sym <aPthreadJoin - byte_110C0, 0,\ ; "pthread_join"
           0, 0x12, 0, 0>
Elf32_Sym <aSigsetjmp - byte_110C0, 0, \ ; "__sigsetjmp"
           0, 0x12, 0, 0>
Elf32_Sym <aLldiv - byte_110C0, 0, 0, \ ; "lldiv"
           0x12, 0, 0>
Elf32_Sym <aFputc - byte_110C0, 0, 0, \ ; "fputc"
           0x12, 0, 0>
Elf32_Sym <aSyslog - byte_110C0, 0, 0, \ ; "syslog"
           0x12, 0, 0>
Elf32_Sym <aIsoc99Sscanf+9 - byte_110C0,\ ; "sscanf"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aLocaleconv - byte_110C0, 0, \ ; "localeconv"
           0, 0x12, 0, 0>
Elf32_Sym <aSprintf - byte_110C0, 0, 0, \ ; "sprintf"
           0x12, 0, 0>
Elf32_Sym <aOpenlog - byte_110C0, 0, 0, \ ; "openlog"
           0x12, 0, 0>
Elf32_Sym <aExp - byte_110C0, 0, 0, \ ; "exp"
           0x12, 0, 0>
Elf32_Sym <aVsnprintf - byte_110C0, 0, \ ; "vsnprintf"
           0, 0x12, 0, 0>
Elf32_Sym <aFopen64 - byte_110C0, 0, 0, \ ; "fopen64"
           0x12, 0, 0>
Elf32_Sym <aQsort - byte_110C0, 0, 0, \ ; "qsort"
           0x12, 0, 0>
Elf32_Sym <aStrpbrk - byte_110C0, 0, 0, \ ; "strpbrk"
           0x12, 0, 0>
Elf32_Sym <aPthreadRwlockT - byte_110C0,\ ; "pthread_rwlock_trywrlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aPthreadCondWai - byte_110C0,\ ; "pthread_cond_wait"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFreeaddrinfo - byte_110C0, \ ; "freeaddrinfo"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGetaddrinfo - byte_110C0, 0,\ ; "getaddrinfo"
           0, 0x12, 0, 0>
Elf32_Sym <aSocket - byte_110C0, 0, 0, \ ; "socket"
           0x12, 0, 0>
Elf32_Sym <aClockNanosleep - byte_110C0,\ ; "clock_nanosleep"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aItmRegistertmc - byte_110C0,\ ; "_ITM_registerTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aInetAddr - byte_110C0, 0, 0,\ ; "inet_addr"
           0x12, 0, 0>
Elf32_Sym <aPthreadTestcan - byte_110C0,\ ; "pthread_testcancel"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrncat - byte_110C0, 0, 0, \ ; "strncat"
           0x12, 0, 0>
Elf32_Sym <aSemDestroy - byte_110C0, 0, \ ; "sem_destroy"
           0, 0x12, 0, 0>
Elf32_Sym <aIsatty - byte_110C0, 0, 0, \ ; "isatty"
           0x12, 0, 0>
Elf32_Sym <aStrncmp - byte_110C0, 0, 0, \ ; "strncmp"
           0x12, 0, 0>
Elf32_Sym <aPthreadCondSig - byte_110C0,\ ; "pthread_cond_signal"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aAbort - byte_110C0, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aMemmem - byte_110C0, memmem,\ ; "memmem"
           0x2E8, 0x12, 0, 0xD>
Elf32_Sym <aRecv - byte_110C0, 0, 0, \ ; "recv"
           0x12, 0, 0>
Elf32_Sym <aFclose+1 - byte_110C0, 0, 0,\ ; "close"
           0x12, 0, 0>
Elf32_Sym <aSend - byte_110C0, 0, 0, \ ; "send"
           0x12, 0, 0>
Elf32_Sym <aConnect - byte_110C0, 0, 0, \ ; "connect"
           0x12, 0, 0>
Elf32_Sym <aAssertFail - byte_110C0, 0, \ ; "__assert_fail"
           0, 0x12, 0, 0>
Elf32_Sym <aPclose - byte_110C0, 0, 0, \ ; "pclose"
           0x12, 0, 0>
; ELF String Table
byte_110C0 DCB 0
aLibpthreadSo0 DCB "libpthread.so.0",0
aItmDeregistert DCB "_ITM_deregisterTMCloneTable",0
aItmRegistertmc DCB "_ITM_registerTMCloneTable",0
aSemPost DCB "sem_post",0
aSigaction DCB "sigaction",0
aSemTrywait DCB "sem_trywait",0
aRecvfrom DCB "recvfrom",0
aSemInit DCB "sem_init",0
aPthreadMutexUn DCB "pthread_mutex_unlock",0
aPthreadRwlockR DCB "pthread_rwlock_rdlock",0
aPthreadJoin DCB "pthread_join",0
aPthreadCreate DCB "pthread_create",0
aPthreadCancel DCB "pthread_cancel",0
aSendto DCB "sendto",0
aPthreadSetcanc DCB "pthread_setcancelstate",0
aPthreadRwlockW DCB "pthread_rwlock_wrlock",0
aErrnoLocation DCB "__errno_location",0
aPthreadUnwindN DCB "__pthread_unwind_next",0
aConnect DCB "connect",0
aSend DCB "send",0
aPthreadCondSig DCB "pthread_cond_signal",0
aPthreadMutexLo DCB "pthread_mutex_lock",0
aPthreadRegiste DCB "__pthread_register_cancel",0
aPthreadSelf DCB "pthread_self",0
aPthreadMutexTr DCB "pthread_mutex_trylock",0
aPthreadRwlockI DCB "pthread_rwlock_init",0
aPthreadMutexDe DCB "pthread_mutex_destroy",0
aPthreadCondWai DCB "pthread_cond_wait",0
aAccept DCB "accept",0
aSemTimedwait DCB "sem_timedwait",0
aPthreadCondDes DCB "pthread_cond_destroy",0
aPthreadRwlockU DCB "pthread_rwlock_unlock",0
aPthreadCondTim DCB "pthread_cond_timedwait",0
aPthreadDetach DCB "pthread_detach",0
aPthreadSetcanc_0 DCB "pthread_setcanceltype",0
aSemWait DCB "sem_wait",0
aRecv DCB "recv",0
aPthreadUnregis DCB "__pthread_unregister_cancel",0
aPthreadRwlockT DCB "pthread_rwlock_trywrlock",0
aPthreadCondIni DCB "pthread_cond_init",0
aSemDestroy DCB "sem_destroy",0
aPthreadRwlockD DCB "pthread_rwlock_destroy",0
aPthreadCondBro DCB "pthread_cond_broadcast",0
aPthreadTestcan DCB "pthread_testcancel",0
aFcntl DCB "fcntl",0
aPthreadMutexIn DCB "pthread_mutex_init",0
aLibmSo6 DCB "libm.so.6",0
aGmonStart DCB "__gmon_start__",0
aFloor DCB "floor",0
aRound DCB "round",0
aLog10 DCB "log10",0
aExp DCB "exp",0
aRaise DCB "raise",0
aLibcSo6 DCB "libc.so.6",0
aSocket DCB "socket",0
aFflush DCB "fflush",0
aStrcpy DCB "strcpy",0
aExit DCB "exit",0
aExecl DCB "execl",0
aExecv DCB "execv",0
aSprintf DCB "sprintf",0
aStrncmp DCB "strncmp",0
aPipe DCB "pipe",0
aStrdup DCB "__strdup",0
aPerror DCB "perror",0
aIsoc99Sscanf DCB "__isoc99_sscanf",0
aStrncpy DCB "strncpy",0
aPuts DCB "puts",0
aFork DCB "fork",0
aListen DCB "listen",0
aSelect DCB "select",0
aMkdir DCB "mkdir",0
aRealloc DCB "realloc",0
aAbort DCB "abort",0
aStdin DCB "stdin",0
aStrtoll DCB "strtoll",0
aMemchr DCB "memchr",0
aStrpbrk DCB "strpbrk",0
aPopen DCB "popen",0
aGetpid DCB "getpid",0
aKill DCB "kill",0
aInetPton DCB "inet_pton",0
aAssertFail DCB "__assert_fail",0
aStrtod DCB "strtod",0
aStrtof DCB "strtof",0
aStrtok DCB "strtok",0
aStrtol DCB "strtol",0
aIsatty DCB "isatty",0
aSchedYield DCB "sched_yield",0
aSyslog DCB "syslog",0
aFgetc DCB "fgetc",0
aFgets DCB "fgets",0
aClockNanosleep DCB "clock_nanosleep",0
aCalloc DCB "calloc",0
aStrlen DCB "strlen",0
aPrctl DCB "prctl",0
aSetlogmask DCB "setlogmask",0
aSigemptyset DCB "sigemptyset",0
aOpenlog DCB "openlog",0
aGetaddrinfo DCB "getaddrinfo",0
aMemset DCB "memset",0
aDirname DCB "dirname",0
aLocaleconv DCB "localeconv",0
aStrstr DCB "strstr",0
aStrcspn DCB "strcspn",0
aBind DCB "bind",0
aMemcmp DCB "memcmp",0
aGetnameinfo DCB "getnameinfo",0
aGetsockopt DCB "getsockopt",0
aDup2 DCB "dup2",0
aShutdown DCB "shutdown",0
aVsnprintf DCB "vsnprintf",0
aSigsetjmp DCB "__sigsetjmp",0
aStdout DCB "stdout",0
aFputc DCB "fputc",0
aInetAddr DCB "inet_addr",0
aMemcpy DCB "memcpy",0
aFclose DCB "fclose",0
aSetsockopt DCB "setsockopt",0
aMalloc DCB "malloc",0
aStrcat DCB "strcat",0
aStrcasecmp DCB "strcasecmp",0
aCtypeBLoc DCB "__ctype_b_loc",0
aGetenv DCB "getenv",0
aNice DCB "nice",0
aStderr DCB "stderr",0
aStrncasecmp DCB "strncasecmp",0
aStrncat DCB "strncat",0
aFileno DCB "fileno",0
aPclose DCB "pclose",0
aUsleep DCB "usleep",0
aFwrite DCB "fwrite",0
aFread DCB "fread",0
aGettimeofday DCB "gettimeofday",0
aClockGettime DCB "clock_gettime",0
aLldiv DCB "lldiv",0
aLocaltime DCB "localtime",0
aStrchr DCB "strchr",0
aFdopen DCB "fdopen",0
aQsort DCB "qsort",0
aCtypeToupperLo DCB "__ctype_toupper_loc",0
aCtypeTolowerLo DCB "__ctype_tolower_loc",0
aFreeaddrinfo DCB "freeaddrinfo",0
aErrx DCB "errx",0
aMemmove DCB "memmove",0
aFopen64 DCB "fopen64",0
aAccess DCB "access",0
aMemmem DCB "memmem",0
aSysinfo DCB "sysinfo",0
aStrcmp DCB "strcmp",0
aStrerror DCB "strerror",0
aLibcStartMain DCB "__libc_start_main",0
aStpcpy DCB "stpcpy",0
aVfprintf DCB "vfprintf",0
aSysconf DCB "sysconf",0
aFree DCB "free",0
aGlibc24 DCB "GLIBC_2.4",0
aGlibc27 DCB "GLIBC_2.7",0
aGlibc217 DCB "GLIBC_2.17",0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; pthread_mutex_unlock@@GLIBC_2.4
DCW 3                   ; fdopen@@GLIBC_2.4
DCW 3                   ; calloc@@GLIBC_2.4
DCW 3                   ; strstr@@GLIBC_2.4
DCW 2                   ; raise@@GLIBC_2.4
DCW 2                   ; pthread_cond_broadcast@@GLIBC_2.4
DCW 2                   ; sem_wait@@GLIBC_2.4
DCW 2                   ; __pthread_register_cancel@@GLIBC_2.4
DCW 3                   ; strcmp@@GLIBC_2.4
DCW 3                   ; strtol@@GLIBC_2.4
DCW 2                   ; sem_post@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_deregisterTMCloneTable
DCW 3                   ; setsockopt@@GLIBC_2.4
DCW 3                   ; strcspn@@GLIBC_2.4
DCW 3                   ; printf@@GLIBC_2.4
DCW 2                   ; read@@GLIBC_2.4
DCW 2                   ; pthread_mutex_destroy@@GLIBC_2.4
DCW 3                   ; fflush@@GLIBC_2.4
DCW 3                   ; memmove@@GLIBC_2.4
DCW 2                   ; pthread_rwlock_init@@GLIBC_2.4
DCW 3                   ; free@@GLIBC_2.4
DCW 3                   ; fgets@@GLIBC_2.4
DCW 2                   ; pthread_mutex_lock@@GLIBC_2.4
DCW 2                   ; pthread_detach@@GLIBC_2.4
DCW 2                   ; nanosleep@@GLIBC_2.4
DCW 3                   ; inet_pton@@GLIBC_2.4
DCW 4                   ; clock_gettime@@GLIBC_2.17
DCW 2                   ; pthread_self@@GLIBC_2.4
DCW 3                   ; memcpy@@GLIBC_2.4
DCW 2                   ; pthread_mutex_init@@GLIBC_2.4
DCW 3                   ; signal@@GLIBC_2.4
DCW 3                   ; time@@GLIBC_2.4
DCW 3                   ; setlogmask@@GLIBC_2.4
DCW 2                   ; pthread_mutex_trylock@@GLIBC_2.4
DCW 3                   ; memcmp@@GLIBC_2.4
DCW 3                   ; select@@GLIBC_2.4
DCW 3                   ; sleep@@GLIBC_2.4
DCW 3                   ; stpcpy@@GLIBC_2.4
DCW 2                   ; pthread_rwlock_wrlock@@GLIBC_2.4
DCW 2                   ; recvfrom@@GLIBC_2.4
DCW 2                   ; pthread_setcancelstate@@GLIBC_2.4
DCW 2                   ; pthread_rwlock_rdlock@@GLIBC_2.4
DCW 2                   ; pthread_cond_init@@GLIBC_2.4
DCW 3                   ; sysconf@@GLIBC_2.4
DCW 3                   ; dup2@@GLIBC_2.4
DCW 3                   ; realloc@@GLIBC_2.4
DCW 2                   ; pthread_cond_destroy@@GLIBC_2.4
DCW 3                   ; strcasecmp@@GLIBC_2.4
DCW 3                   ; perror@@GLIBC_2.4
DCW 2                   ; accept@@GLIBC_2.4
DCW 2                   ; sigaction@@GLIBC_2.4
DCW 3                   ; stderr@@GLIBC_2.4
DCW 3                   ; fwrite@@GLIBC_2.4
DCW 3                   ; strcat@@GLIBC_2.4
DCW 3                   ; getsockopt@@GLIBC_2.4
DCW 3                   ; strtoll@@GLIBC_2.4
DCW 3                   ; usleep@@GLIBC_2.4
DCW 3                   ; strcpy@@GLIBC_2.4
DCW 3                   ; gettimeofday@@GLIBC_2.4
DCW 3                   ; fread@@GLIBC_2.4
DCW 3                   ; sched_yield@@GLIBC_2.4
DCW 2                   ; pthread_create@@GLIBC_2.4
DCW 5                   ; floor@@GLIBC_2.4
DCW 3                   ; strtof@@GLIBC_2.4
DCW 2                   ; open64@@GLIBC_2.4
DCW 3                   ; getenv@@GLIBC_2.4
DCW 3                   ; puts@@GLIBC_2.4
DCW 3                   ; sysinfo@@GLIBC_2.4
DCW 3                   ; malloc@@GLIBC_2.4
DCW 5                   ; log10@@GLIBC_2.4
DCW 3                   ; __libc_start_main@@GLIBC_2.4
DCW 3                   ; strerror@@GLIBC_2.4
DCW 3                   ; localtime@@GLIBC_2.4
DCW 3                   ; __ctype_tolower_loc@@GLIBC_2.4
DCW 3                   ; dirname@@GLIBC_2.4
DCW 3                   ; __ctype_toupper_loc@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 2                   ; sem_trywait@@GLIBC_2.4
DCW 3                   ; kill@@GLIBC_2.4
DCW 3                   ; __ctype_b_loc@@GLIBC_2.4
DCW 3                   ; getpid@@GLIBC_2.4
DCW 3                   ; exit@@GLIBC_2.4
DCW 2                   ; sem_timedwait@@GLIBC_2.4
DCW 3                   ; strlen@@GLIBC_2.4
DCW 5                   ; round@@GLIBC_2.4
DCW 3                   ; strchr@@GLIBC_2.4
DCW 2                   ; pthread_setcanceltype@@GLIBC_2.4
DCW 3                   ; nice@@GLIBC_2.4
DCW 3                   ; fprintf@@GLIBC_2.4
DCW 3                   ; stdin@@GLIBC_2.4
DCW 2                   ; fcntl@@GLIBC_2.4
DCW 3                   ; execv@@GLIBC_2.4
DCW 2                   ; __errno_location@@GLIBC_2.4
DCW 3                   ; strncasecmp@@GLIBC_2.4
DCW 3                   ; snprintf@@GLIBC_2.4
DCW 6                   ; __isoc99_sscanf@@GLIBC_2.7
DCW 3                   ; __strdup@@GLIBC_2.4
DCW 3                   ; mkdir@@GLIBC_2.4
DCW 3                   ; bind@@GLIBC_2.4
DCW 2                   ; sem_init@@GLIBC_2.4
DCW 3                   ; memset@@GLIBC_2.4
DCW 2                   ; __pthread_unregister_cancel@@GLIBC_2.4
DCW 2                   ; pthread_rwlock_unlock@@GLIBC_2.4
DCW 3                   ; strncpy@@GLIBC_2.4
DCW 2                   ; pthread_cancel@@GLIBC_2.4
DCW 3                   ; fgetc@@GLIBC_2.4
DCW 3                   ; prctl@@GLIBC_2.4
DCW 3                   ; strtod@@GLIBC_2.4
DCW 2                   ; write@@GLIBC_2.4
DCW 3                   ; fileno@@GLIBC_2.4
DCW 2                   ; __pthread_unwind_next@@GLIBC_2.4
DCW 3                   ; memchr@@GLIBC_2.4
DCW 3                   ; access@@GLIBC_2.4
DCW 3                   ; stdout@@GLIBC_2.4
DCW 3                   ; fclose@@GLIBC_2.4
DCW 3                   ; pipe@@GLIBC_2.4
DCW 3                   ; strtok@@GLIBC_2.4
DCW 2                   ; pthread_cond_timedwait@@GLIBC_2.4
DCW 2                   ; sendto@@GLIBC_2.4
DCW 3                   ; shutdown@@GLIBC_2.4
DCW 3                   ; sigemptyset@@GLIBC_2.4
DCW 3                   ; popen@@GLIBC_2.4
DCW 2                   ; pthread_rwlock_destroy@@GLIBC_2.4
DCW 3                   ; fork@@GLIBC_2.4
DCW 3                   ; errx@@GLIBC_2.4
DCW 3                   ; getnameinfo@@GLIBC_2.4
DCW 3                   ; execl@@GLIBC_2.4
DCW 3                   ; listen@@GLIBC_2.4
DCW 3                   ; vfprintf@@GLIBC_2.4
DCW 2                   ; pthread_join@@GLIBC_2.4
DCW 3                   ; __sigsetjmp@@GLIBC_2.4
DCW 3                   ; lldiv@@GLIBC_2.4
DCW 3                   ; fputc@@GLIBC_2.4
DCW 3                   ; syslog@@GLIBC_2.4
DCW 3                   ; sscanf@@GLIBC_2.4
DCW 3                   ; localeconv@@GLIBC_2.4
DCW 3                   ; sprintf@@GLIBC_2.4
DCW 3                   ; openlog@@GLIBC_2.4
DCW 5                   ; exp@@GLIBC_2.4
DCW 3                   ; vsnprintf@@GLIBC_2.4
DCW 3                   ; fopen64@@GLIBC_2.4
DCW 3                   ; qsort@@GLIBC_2.4
DCW 3                   ; strpbrk@@GLIBC_2.4
DCW 2                   ; pthread_rwlock_trywrlock@@GLIBC_2.4
DCW 2                   ; pthread_cond_wait@@GLIBC_2.4
DCW 3                   ; freeaddrinfo@@GLIBC_2.4
DCW 3                   ; getaddrinfo@@GLIBC_2.4
DCW 3                   ; socket@@GLIBC_2.4
DCW 4                   ; clock_nanosleep@@GLIBC_2.17
DCW 0                   ; local  symbol: _ITM_registerTMCloneTable
DCW 3                   ; inet_addr@@GLIBC_2.4
DCW 2                   ; pthread_testcancel@@GLIBC_2.4
DCW 3                   ; strncat@@GLIBC_2.4
DCW 2                   ; sem_destroy@@GLIBC_2.4
DCW 3                   ; isatty@@GLIBC_2.4
DCW 3                   ; strncmp@@GLIBC_2.4
DCW 2                   ; pthread_cond_signal@@GLIBC_2.4
DCW 3                   ; abort@@GLIBC_2.4
DCW 1                   ; global symbol: memmem
DCW 2                   ; recv@@GLIBC_2.4
DCW 2                   ; close@@GLIBC_2.4
DCW 2                   ; send@@GLIBC_2.4
DCW 2                   ; connect@@GLIBC_2.4
DCW 3                   ; __assert_fail@@GLIBC_2.4
DCW 3                   ; pclose@@GLIBC_2.4
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libm.so.6"
               aLibmSo6 - byte_110C0, \
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 5, \ ; "GLIBC_2.4"
               aGlibc24 - byte_110C0, 0>
Elf32_Verneed <1, 3, \  ; "libc.so.6"
               aLibcSo6 - byte_110C0, \
               0x10, 0x40>
Elf32_Vernaux <0xD696917, 0, 6, \ ; "GLIBC_2.7"
               aGlibc27 - byte_110C0, \
               0x10>
Elf32_Vernaux <0x6969197, 0, 4, \ ; "GLIBC_2.17"
               aGlibc217 - byte_110C0, \
               0x10>
Elf32_Vernaux <0xD696914, 0, 3, \ ; "GLIBC_2.4"
               aGlibc24 - byte_110C0, 0>
Elf32_Verneed <1, 1, \  ; "libpthread.so.0"
               aLibpthreadSo0 - byte_110C0,\
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_110C0, 0>
; ELF REL Relocation Table
Elf32_Rel <0x67288, 0x4D15> ; R_ARM_GLOB_DAT __gmon_start__
Elf32_Rel <0x68A68, 0x3414> ; R_ARM_COPY stderr
Elf32_Rel <0x68A70, 0x5A14> ; R_ARM_COPY stdin
Elf32_Rel <0x68A74, 0x7214> ; R_ARM_COPY stdout
; ELF JMPREL Relocation Table
Elf32_Rel <0x6700C, 0x116> ; R_ARM_JUMP_SLOT pthread_mutex_unlock
Elf32_Rel <0x67010, 0x216> ; R_ARM_JUMP_SLOT fdopen
Elf32_Rel <0x67014, 0x316> ; R_ARM_JUMP_SLOT calloc
Elf32_Rel <0x67018, 0x416> ; R_ARM_JUMP_SLOT strstr
Elf32_Rel <0x6701C, 0x516> ; R_ARM_JUMP_SLOT raise
Elf32_Rel <0x67020, 0x616> ; R_ARM_JUMP_SLOT pthread_cond_broadcast
Elf32_Rel <0x67024, 0x716> ; R_ARM_JUMP_SLOT sem_wait
Elf32_Rel <0x67028, 0x816> ; R_ARM_JUMP_SLOT __pthread_register_cancel
Elf32_Rel <0x6702C, 0x916> ; R_ARM_JUMP_SLOT strcmp
Elf32_Rel <0x67030, 0xA16> ; R_ARM_JUMP_SLOT strtol
Elf32_Rel <0x67034, 0xB16> ; R_ARM_JUMP_SLOT sem_post
Elf32_Rel <0x67038, 0xD16> ; R_ARM_JUMP_SLOT setsockopt
Elf32_Rel <0x6703C, 0xE16> ; R_ARM_JUMP_SLOT strcspn
Elf32_Rel <0x67040, 0xF16> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x67044, 0x1016> ; R_ARM_JUMP_SLOT read
Elf32_Rel <0x67048, 0x1116> ; R_ARM_JUMP_SLOT pthread_mutex_destroy
Elf32_Rel <0x6704C, 0x1216> ; R_ARM_JUMP_SLOT fflush
Elf32_Rel <0x67050, 0x1316> ; R_ARM_JUMP_SLOT memmove
Elf32_Rel <0x67054, 0x1416> ; R_ARM_JUMP_SLOT pthread_rwlock_init
Elf32_Rel <0x67058, 0x1516> ; R_ARM_JUMP_SLOT free
Elf32_Rel <0x6705C, 0x1616> ; R_ARM_JUMP_SLOT fgets
Elf32_Rel <0x67060, 0x1716> ; R_ARM_JUMP_SLOT pthread_mutex_lock
Elf32_Rel <0x67064, 0x1816> ; R_ARM_JUMP_SLOT pthread_detach
Elf32_Rel <0x67068, 0x1916> ; R_ARM_JUMP_SLOT nanosleep
Elf32_Rel <0x6706C, 0x1A16> ; R_ARM_JUMP_SLOT inet_pton
Elf32_Rel <0x67070, 0x1B16> ; R_ARM_JUMP_SLOT clock_gettime
Elf32_Rel <0x67074, 0x1C16> ; R_ARM_JUMP_SLOT pthread_self
Elf32_Rel <0x67078, 0x1D16> ; R_ARM_JUMP_SLOT memcpy
Elf32_Rel <0x6707C, 0x1E16> ; R_ARM_JUMP_SLOT pthread_mutex_init
Elf32_Rel <0x67080, 0x1F16> ; R_ARM_JUMP_SLOT signal
Elf32_Rel <0x67084, 0x2016> ; R_ARM_JUMP_SLOT time
Elf32_Rel <0x67088, 0x2116> ; R_ARM_JUMP_SLOT setlogmask
Elf32_Rel <0x6708C, 0x2216> ; R_ARM_JUMP_SLOT pthread_mutex_trylock
Elf32_Rel <0x67090, 0x2316> ; R_ARM_JUMP_SLOT memcmp
Elf32_Rel <0x67094, 0x2416> ; R_ARM_JUMP_SLOT select
Elf32_Rel <0x67098, 0x2516> ; R_ARM_JUMP_SLOT sleep
Elf32_Rel <0x6709C, 0x2616> ; R_ARM_JUMP_SLOT stpcpy
Elf32_Rel <0x670A0, 0x2716> ; R_ARM_JUMP_SLOT pthread_rwlock_wrlock
Elf32_Rel <0x670A4, 0x2816> ; R_ARM_JUMP_SLOT recvfrom
Elf32_Rel <0x670A8, 0x2916> ; R_ARM_JUMP_SLOT pthread_setcancelstate
Elf32_Rel <0x670AC, 0x2A16> ; R_ARM_JUMP_SLOT pthread_rwlock_rdlock
Elf32_Rel <0x670B0, 0x2B16> ; R_ARM_JUMP_SLOT pthread_cond_init
Elf32_Rel <0x670B4, 0x2C16> ; R_ARM_JUMP_SLOT sysconf
Elf32_Rel <0x670B8, 0x2D16> ; R_ARM_JUMP_SLOT dup2
Elf32_Rel <0x670BC, 0x2E16> ; R_ARM_JUMP_SLOT realloc
Elf32_Rel <0x670C0, 0x2F16> ; R_ARM_JUMP_SLOT pthread_cond_destroy
Elf32_Rel <0x670C4, 0x3016> ; R_ARM_JUMP_SLOT strcasecmp
Elf32_Rel <0x670C8, 0x3116> ; R_ARM_JUMP_SLOT perror
Elf32_Rel <0x670CC, 0x3216> ; R_ARM_JUMP_SLOT accept
Elf32_Rel <0x670D0, 0x3316> ; R_ARM_JUMP_SLOT sigaction
Elf32_Rel <0x670D4, 0x3516> ; R_ARM_JUMP_SLOT fwrite
Elf32_Rel <0x670D8, 0x3616> ; R_ARM_JUMP_SLOT strcat
Elf32_Rel <0x670DC, 0x3716> ; R_ARM_JUMP_SLOT getsockopt
Elf32_Rel <0x670E0, 0x3816> ; R_ARM_JUMP_SLOT strtoll
Elf32_Rel <0x670E4, 0x3916> ; R_ARM_JUMP_SLOT usleep
Elf32_Rel <0x670E8, 0x3A16> ; R_ARM_JUMP_SLOT strcpy
Elf32_Rel <0x670EC, 0x3B16> ; R_ARM_JUMP_SLOT gettimeofday
Elf32_Rel <0x670F0, 0x3C16> ; R_ARM_JUMP_SLOT fread
Elf32_Rel <0x670F4, 0x3D16> ; R_ARM_JUMP_SLOT sched_yield
Elf32_Rel <0x670F8, 0x3E16> ; R_ARM_JUMP_SLOT pthread_create
Elf32_Rel <0x670FC, 0x3F16> ; R_ARM_JUMP_SLOT floor
Elf32_Rel <0x67100, 0x4016> ; R_ARM_JUMP_SLOT strtof
Elf32_Rel <0x67104, 0x4116> ; R_ARM_JUMP_SLOT open64
Elf32_Rel <0x67108, 0x4216> ; R_ARM_JUMP_SLOT getenv
Elf32_Rel <0x6710C, 0x4316> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x67110, 0x4416> ; R_ARM_JUMP_SLOT sysinfo
Elf32_Rel <0x67114, 0x4516> ; R_ARM_JUMP_SLOT malloc
Elf32_Rel <0x67118, 0x4616> ; R_ARM_JUMP_SLOT log10
Elf32_Rel <0x6711C, 0x4716> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x67120, 0x4816> ; R_ARM_JUMP_SLOT strerror
Elf32_Rel <0x67124, 0x4916> ; R_ARM_JUMP_SLOT localtime
Elf32_Rel <0x67128, 0x4A16> ; R_ARM_JUMP_SLOT __ctype_tolower_loc
Elf32_Rel <0x6712C, 0x4B16> ; R_ARM_JUMP_SLOT dirname
Elf32_Rel <0x67130, 0x4C16> ; R_ARM_JUMP_SLOT __ctype_toupper_loc
Elf32_Rel <0x67134, 0x4D16> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x67138, 0x4E16> ; R_ARM_JUMP_SLOT sem_trywait
Elf32_Rel <0x6713C, 0x4F16> ; R_ARM_JUMP_SLOT kill
Elf32_Rel <0x67140, 0x5016> ; R_ARM_JUMP_SLOT __ctype_b_loc
Elf32_Rel <0x67144, 0x5116> ; R_ARM_JUMP_SLOT getpid
Elf32_Rel <0x67148, 0x5216> ; R_ARM_JUMP_SLOT exit
Elf32_Rel <0x6714C, 0x5316> ; R_ARM_JUMP_SLOT sem_timedwait
Elf32_Rel <0x67150, 0x5416> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x67154, 0x5516> ; R_ARM_JUMP_SLOT round
Elf32_Rel <0x67158, 0x5616> ; R_ARM_JUMP_SLOT strchr
Elf32_Rel <0x6715C, 0x5716> ; R_ARM_JUMP_SLOT pthread_setcanceltype
Elf32_Rel <0x67160, 0x5816> ; R_ARM_JUMP_SLOT nice
Elf32_Rel <0x67164, 0x5916> ; R_ARM_JUMP_SLOT fprintf
Elf32_Rel <0x67168, 0x5B16> ; R_ARM_JUMP_SLOT fcntl
Elf32_Rel <0x6716C, 0x5C16> ; R_ARM_JUMP_SLOT execv
Elf32_Rel <0x67170, 0x5D16> ; R_ARM_JUMP_SLOT __errno_location
Elf32_Rel <0x67174, 0x5E16> ; R_ARM_JUMP_SLOT strncasecmp
Elf32_Rel <0x67178, 0x5F16> ; R_ARM_JUMP_SLOT snprintf
Elf32_Rel <0x6717C, 0x6016> ; R_ARM_JUMP_SLOT __isoc99_sscanf
Elf32_Rel <0x67180, 0x6116> ; R_ARM_JUMP_SLOT __strdup
Elf32_Rel <0x67184, 0x6216> ; R_ARM_JUMP_SLOT mkdir
Elf32_Rel <0x67188, 0x6316> ; R_ARM_JUMP_SLOT bind
Elf32_Rel <0x6718C, 0x6416> ; R_ARM_JUMP_SLOT sem_init
Elf32_Rel <0x67190, 0x6516> ; R_ARM_JUMP_SLOT memset
Elf32_Rel <0x67194, 0x6616> ; R_ARM_JUMP_SLOT __pthread_unregister_cancel
Elf32_Rel <0x67198, 0x6716> ; R_ARM_JUMP_SLOT pthread_rwlock_unlock
Elf32_Rel <0x6719C, 0x6816> ; R_ARM_JUMP_SLOT strncpy
Elf32_Rel <0x671A0, 0x6916> ; R_ARM_JUMP_SLOT pthread_cancel
Elf32_Rel <0x671A4, 0x6A16> ; R_ARM_JUMP_SLOT fgetc
Elf32_Rel <0x671A8, 0x6B16> ; R_ARM_JUMP_SLOT prctl
Elf32_Rel <0x671AC, 0x6C16> ; R_ARM_JUMP_SLOT strtod
Elf32_Rel <0x671B0, 0x6D16> ; R_ARM_JUMP_SLOT write
Elf32_Rel <0x671B4, 0x6E16> ; R_ARM_JUMP_SLOT fileno
Elf32_Rel <0x671B8, 0x6F16> ; R_ARM_JUMP_SLOT __pthread_unwind_next
Elf32_Rel <0x671BC, 0x7016> ; R_ARM_JUMP_SLOT memchr
Elf32_Rel <0x671C0, 0x7116> ; R_ARM_JUMP_SLOT access
Elf32_Rel <0x671C4, 0x7316> ; R_ARM_JUMP_SLOT fclose
Elf32_Rel <0x671C8, 0x7416> ; R_ARM_JUMP_SLOT pipe
Elf32_Rel <0x671CC, 0x7516> ; R_ARM_JUMP_SLOT strtok
Elf32_Rel <0x671D0, 0x7616> ; R_ARM_JUMP_SLOT pthread_cond_timedwait
Elf32_Rel <0x671D4, 0x7716> ; R_ARM_JUMP_SLOT sendto
Elf32_Rel <0x671D8, 0x7816> ; R_ARM_JUMP_SLOT shutdown
Elf32_Rel <0x671DC, 0x7916> ; R_ARM_JUMP_SLOT sigemptyset
Elf32_Rel <0x671E0, 0x7A16> ; R_ARM_JUMP_SLOT popen
Elf32_Rel <0x671E4, 0x7B16> ; R_ARM_JUMP_SLOT pthread_rwlock_destroy
Elf32_Rel <0x671E8, 0x7C16> ; R_ARM_JUMP_SLOT fork
Elf32_Rel <0x671EC, 0x7D16> ; R_ARM_JUMP_SLOT errx
Elf32_Rel <0x671F0, 0x7E16> ; R_ARM_JUMP_SLOT getnameinfo
Elf32_Rel <0x671F4, 0x7F16> ; R_ARM_JUMP_SLOT execl
Elf32_Rel <0x671F8, 0x8016> ; R_ARM_JUMP_SLOT listen
Elf32_Rel <0x671FC, 0x8116> ; R_ARM_JUMP_SLOT vfprintf
Elf32_Rel <0x67200, 0x8216> ; R_ARM_JUMP_SLOT pthread_join
Elf32_Rel <0x67204, 0x8316> ; R_ARM_JUMP_SLOT __sigsetjmp
Elf32_Rel <0x67208, 0x8416> ; R_ARM_JUMP_SLOT lldiv
Elf32_Rel <0x6720C, 0x8516> ; R_ARM_JUMP_SLOT fputc
Elf32_Rel <0x67210, 0x8616> ; R_ARM_JUMP_SLOT syslog
Elf32_Rel <0x67214, 0x8716> ; R_ARM_JUMP_SLOT sscanf
Elf32_Rel <0x67218, 0x8816> ; R_ARM_JUMP_SLOT localeconv
Elf32_Rel <0x6721C, 0x8916> ; R_ARM_JUMP_SLOT sprintf
Elf32_Rel <0x67220, 0x8A16> ; R_ARM_JUMP_SLOT openlog
Elf32_Rel <0x67224, 0x8B16> ; R_ARM_JUMP_SLOT exp
Elf32_Rel <0x67228, 0x8C16> ; R_ARM_JUMP_SLOT vsnprintf
Elf32_Rel <0x6722C, 0x8D16> ; R_ARM_JUMP_SLOT fopen64
Elf32_Rel <0x67230, 0x8E16> ; R_ARM_JUMP_SLOT qsort
Elf32_Rel <0x67234, 0x8F16> ; R_ARM_JUMP_SLOT strpbrk
Elf32_Rel <0x67238, 0x9016> ; R_ARM_JUMP_SLOT pthread_rwlock_trywrlock
Elf32_Rel <0x6723C, 0x9116> ; R_ARM_JUMP_SLOT pthread_cond_wait
Elf32_Rel <0x67240, 0x9216> ; R_ARM_JUMP_SLOT freeaddrinfo
Elf32_Rel <0x67244, 0x9316> ; R_ARM_JUMP_SLOT getaddrinfo
Elf32_Rel <0x67248, 0x9416> ; R_ARM_JUMP_SLOT socket
Elf32_Rel <0x6724C, 0x9516> ; R_ARM_JUMP_SLOT clock_nanosleep
Elf32_Rel <0x67250, 0x9716> ; R_ARM_JUMP_SLOT inet_addr
Elf32_Rel <0x67254, 0x9816> ; R_ARM_JUMP_SLOT pthread_testcancel
Elf32_Rel <0x67258, 0x9916> ; R_ARM_JUMP_SLOT strncat
Elf32_Rel <0x6725C, 0x9A16> ; R_ARM_JUMP_SLOT sem_destroy
Elf32_Rel <0x67260, 0x9B16> ; R_ARM_JUMP_SLOT isatty
Elf32_Rel <0x67264, 0x9C16> ; R_ARM_JUMP_SLOT strncmp
Elf32_Rel <0x67268, 0x9D16> ; R_ARM_JUMP_SLOT pthread_cond_signal
Elf32_Rel <0x6726C, 0x9E16> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x67270, 0xA016> ; R_ARM_JUMP_SLOT recv
Elf32_Rel <0x67274, 0xA116> ; R_ARM_JUMP_SLOT close
Elf32_Rel <0x67278, 0xA216> ; R_ARM_JUMP_SLOT send
Elf32_Rel <0x6727C, 0xA316> ; R_ARM_JUMP_SLOT connect
Elf32_Rel <0x67280, 0xA416> ; R_ARM_JUMP_SLOT __assert_fail
Elf32_Rel <0x67284, 0xA516> ; R_ARM_JUMP_SLOT pclose
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x11E64
CODE32



; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              sub_15A70
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x11E70
CODE32



; void sub_11E70()
sub_11E70
PUSH            {LR}
LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x11E80)
ADD             LR, PC, LR ; _GLOBAL_OFFSET_TABLE_
LDR             PC, [LR,#(off_67008 - 0x67000)]!
; End of function sub_11E70

off_11E80 DCD _GLOBAL_OFFSET_TABLE_ - 0x11E80
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_unlock]
; [0000000C BYTES: COLLAPSED FUNCTION fdopen]
; [0000000C BYTES: COLLAPSED FUNCTION calloc]
; [0000000C BYTES: COLLAPSED FUNCTION strstr]
; [0000000C BYTES: COLLAPSED FUNCTION raise]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_broadcast]
; [0000000C BYTES: COLLAPSED FUNCTION sem_wait]
; [0000000C BYTES: COLLAPSED FUNCTION __pthread_register_cancel]
; [0000000C BYTES: COLLAPSED FUNCTION strcmp]
; [0000000C BYTES: COLLAPSED FUNCTION strtol]
; [0000000C BYTES: COLLAPSED FUNCTION sem_post]
; [0000000C BYTES: COLLAPSED FUNCTION setsockopt]
; [0000000C BYTES: COLLAPSED FUNCTION strcspn]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION read]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION fflush]
; [0000000C BYTES: COLLAPSED FUNCTION memmove]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_init]
; [0000000C BYTES: COLLAPSED FUNCTION free]
; [0000000C BYTES: COLLAPSED FUNCTION fgets]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_lock]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_detach]
; [0000000C BYTES: COLLAPSED FUNCTION nanosleep]
; [0000000C BYTES: COLLAPSED FUNCTION inet_pton]
; [0000000C BYTES: COLLAPSED FUNCTION clock_gettime]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_self]
; [0000000C BYTES: COLLAPSED FUNCTION memcpy]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_init]
; [0000000C BYTES: COLLAPSED FUNCTION signal]
; [0000000C BYTES: COLLAPSED FUNCTION time]
; [0000000C BYTES: COLLAPSED FUNCTION setlogmask]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_trylock]
; [0000000C BYTES: COLLAPSED FUNCTION memcmp]
; [0000000C BYTES: COLLAPSED FUNCTION select]
; [0000000C BYTES: COLLAPSED FUNCTION sleep]
; [0000000C BYTES: COLLAPSED FUNCTION stpcpy]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_wrlock]
; [0000000C BYTES: COLLAPSED FUNCTION recvfrom]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_setcancelstate]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_rdlock]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_init]
; [0000000C BYTES: COLLAPSED FUNCTION sysconf]
; [0000000C BYTES: COLLAPSED FUNCTION dup2]
; [0000000C BYTES: COLLAPSED FUNCTION realloc]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION strcasecmp]
; [0000000C BYTES: COLLAPSED FUNCTION perror]
; [0000000C BYTES: COLLAPSED FUNCTION accept]
; [0000000C BYTES: COLLAPSED FUNCTION sigaction]
; [0000000C BYTES: COLLAPSED FUNCTION fwrite]
; [0000000C BYTES: COLLAPSED FUNCTION strcat]
; [0000000C BYTES: COLLAPSED FUNCTION getsockopt]
; [0000000C BYTES: COLLAPSED FUNCTION strtoll]
; [0000000C BYTES: COLLAPSED FUNCTION usleep]
; [0000000C BYTES: COLLAPSED FUNCTION strcpy]
; [0000000C BYTES: COLLAPSED FUNCTION gettimeofday]
; [0000000C BYTES: COLLAPSED FUNCTION fread]
; [0000000C BYTES: COLLAPSED FUNCTION sched_yield]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_create]
; [0000000C BYTES: COLLAPSED FUNCTION floor]
; [0000000C BYTES: COLLAPSED FUNCTION strtof]
; [0000000C BYTES: COLLAPSED FUNCTION open64]
; [0000000C BYTES: COLLAPSED FUNCTION getenv]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION sysinfo]
; [0000000C BYTES: COLLAPSED FUNCTION malloc]
; [0000000C BYTES: COLLAPSED FUNCTION log10]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION strerror]
; [0000000C BYTES: COLLAPSED FUNCTION localtime]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_tolower_loc]
; [0000000C BYTES: COLLAPSED FUNCTION dirname]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_toupper_loc]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION sem_trywait]
; [0000000C BYTES: COLLAPSED FUNCTION kill]
; [0000000C BYTES: COLLAPSED FUNCTION __ctype_b_loc]
; [0000000C BYTES: COLLAPSED FUNCTION getpid]
; [0000000C BYTES: COLLAPSED FUNCTION exit]
; [0000000C BYTES: COLLAPSED FUNCTION sem_timedwait]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION round]
; [0000000C BYTES: COLLAPSED FUNCTION strchr]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_setcanceltype]
; [0000000C BYTES: COLLAPSED FUNCTION nice]
; [0000000C BYTES: COLLAPSED FUNCTION fprintf]
; [0000000C BYTES: COLLAPSED FUNCTION fcntl]
; [0000000C BYTES: COLLAPSED FUNCTION execv]
; [0000000C BYTES: COLLAPSED FUNCTION __errno_location]
; [0000000C BYTES: COLLAPSED FUNCTION strncasecmp]
; [0000000C BYTES: COLLAPSED FUNCTION snprintf]
; [0000000C BYTES: COLLAPSED FUNCTION __isoc99_sscanf]
; [0000000C BYTES: COLLAPSED FUNCTION __strdup]
; [0000000C BYTES: COLLAPSED FUNCTION mkdir]
; [0000000C BYTES: COLLAPSED FUNCTION bind]
; [0000000C BYTES: COLLAPSED FUNCTION sem_init]
; [0000000C BYTES: COLLAPSED FUNCTION memset]
; [0000000C BYTES: COLLAPSED FUNCTION __pthread_unregister_cancel]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_unlock]
; [0000000C BYTES: COLLAPSED FUNCTION strncpy]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cancel]
; [0000000C BYTES: COLLAPSED FUNCTION fgetc]
; [0000000C BYTES: COLLAPSED FUNCTION prctl]
; [0000000C BYTES: COLLAPSED FUNCTION strtod]
; [0000000C BYTES: COLLAPSED FUNCTION write]
; [0000000C BYTES: COLLAPSED FUNCTION fileno]
; [0000000C BYTES: COLLAPSED FUNCTION __pthread_unwind_next]
; [0000000C BYTES: COLLAPSED FUNCTION memchr]
; [0000000C BYTES: COLLAPSED FUNCTION access]
; [0000000C BYTES: COLLAPSED FUNCTION fclose]
; [0000000C BYTES: COLLAPSED FUNCTION pipe]
; [0000000C BYTES: COLLAPSED FUNCTION strtok]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_timedwait]
; [0000000C BYTES: COLLAPSED FUNCTION sendto]
; [0000000C BYTES: COLLAPSED FUNCTION shutdown]
; [0000000C BYTES: COLLAPSED FUNCTION sigemptyset]
; [0000000C BYTES: COLLAPSED FUNCTION popen]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION fork]
; [0000000C BYTES: COLLAPSED FUNCTION errx]
; [0000000C BYTES: COLLAPSED FUNCTION getnameinfo]
; [0000000C BYTES: COLLAPSED FUNCTION execl]
; [0000000C BYTES: COLLAPSED FUNCTION listen]
; [0000000C BYTES: COLLAPSED FUNCTION vfprintf]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_join]
; [0000000C BYTES: COLLAPSED FUNCTION __sigsetjmp]
; [0000000C BYTES: COLLAPSED FUNCTION lldiv]
; [0000000C BYTES: COLLAPSED FUNCTION fputc]
; [0000000C BYTES: COLLAPSED FUNCTION syslog]
; [0000000C BYTES: COLLAPSED FUNCTION sscanf]
; [0000000C BYTES: COLLAPSED FUNCTION localeconv]
; [0000000C BYTES: COLLAPSED FUNCTION sprintf]
; [0000000C BYTES: COLLAPSED FUNCTION openlog]
; [0000000C BYTES: COLLAPSED FUNCTION exp]
; [0000000C BYTES: COLLAPSED FUNCTION vsnprintf]
; [0000000C BYTES: COLLAPSED FUNCTION fopen64]
; [0000000C BYTES: COLLAPSED FUNCTION qsort]
; [0000000C BYTES: COLLAPSED FUNCTION strpbrk]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_rwlock_trywrlock]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_wait]
; [0000000C BYTES: COLLAPSED FUNCTION freeaddrinfo]
; [0000000C BYTES: COLLAPSED FUNCTION getaddrinfo]
; [0000000C BYTES: COLLAPSED FUNCTION socket]
; [0000000C BYTES: COLLAPSED FUNCTION clock_nanosleep]
; [0000000C BYTES: COLLAPSED FUNCTION inet_addr]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_testcancel]
; [0000000C BYTES: COLLAPSED FUNCTION strncat]
; [0000000C BYTES: COLLAPSED FUNCTION sem_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION isatty]
; [0000000C BYTES: COLLAPSED FUNCTION strncmp]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_cond_signal]
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION recv]
; [0000000C BYTES: COLLAPSED FUNCTION close]
; [0000000C BYTES: COLLAPSED FUNCTION send]
; [0000000C BYTES: COLLAPSED FUNCTION connect]
; [0000000C BYTES: COLLAPSED FUNCTION __assert_fail]
; [0000000C BYTES: COLLAPSED FUNCTION pclose]

; Segment type: Pure code
AREA .text, CODE, ALIGN=3
; ORG 0x125F8
CODE32


; Attributes: bp-based frame fpd=0xFFFFFFD0

; int main(int, char **, char **)
main

var_2A14= -0x2A14
var_2A10= -0x2A10
var_2A0C= -0x2A0C
var_2A04= -0x2A04
var_19FC= -0x19FC
var_A04= -0xA04
var_9F4= -0x9F4
var_9F0= -0x9F0
var_9EC= -0x9EC
var_9E8= -0x9E8
var_9E4= -0x9E4
var_9E0= -0x9E0
var_9DC= -0x9DC
var_9D8= -0x9D8
var_9D4= -0x9D4
var_9D0= -0x9D0
var_9CC= -0x9CC
var_9C8= -0x9C8
format= -0x9C4
var_9C0= -0x9C0
var_9BC= -0x9BC
var_9B8= -0x9B8
var_9B4= -0x9B4
dest= -0x9B0
s= -0x990
var_980= -0x980
var_90C= -0x90C
var_900= -0x900
var_804= -0x804

PUSH            {R4-R11,LR}
MOVW            R3, #:lower16:byte_68AAC
VPUSH           {D8-D9}
ADD             R11, SP, #0x30
SUB             R4, R11, #-(-0x30+var_900)
MOV             R12, R1
MOVT            R3, #:upper16:byte_68AAC
MOV             R5, #0
SUB             SP, SP, #0xA00
SUB             R4, R4, #4
SUB             SP, SP, #4
MOV             R2, #0x100 ; n
STRB            R5, [R3]
STR             R0, [R11,#-0x30+var_9B8]
MOV             R0, R4  ; s
LDR             R8, [R12]
STR             R1, [R11,#-0x30+var_9C0]
MOV             R1, R5  ; c
STR             R3, [R11,#-0x30+var_9D0]
STR             R5, [R11,#-0x30+var_9B4]
BL              memset
MOV             R1, R5  ; c
MOV             R2, #0x40 ; '@' ; n
SUB             R0, R11, #-(-0x30+s) ; s
BL              memset
MOVW            R2, #:lower16:aPidofS ; "pidof %s"
MOV             R3, R8
MOVT            R2, #:upper16:aPidofS ; "pidof %s"
MOV             R1, #0x40 ; '@' ; maxlen
SUB             R0, R11, #-(-0x30+s) ; s
BL              snprintf
MOVW            R1, #:lower16:(aMiner+4) ; "r"
SUB             R0, R11, #-(-0x30+s) ; command
MOVT            R1, #:upper16:(aMiner+4) ; modes
BL              popen
SUBS            R9, R0, #0
BEQ             loc_12970
MOVW            R7, #:lower16:byte_68BD5
MOVW            R10, #:lower16:byte_74500
MOVW            R6, #:lower16:aStrlenIsD ; "strlen is: %d\n"
MOVT            R7, #:upper16:byte_68BD5
MOVT            R10, #:upper16:byte_74500
MOVT            R6, #:upper16:aStrlenIsD ; "strlen is: %d\n"

loc_126A4               ; stream
MOV             R2, R9
MOV             R1, #0x100 ; n
MOV             R0, R4  ; s
BL              fgets
CMP             R0, #0
BEQ             loc_127A8
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_126A4
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_126FC
MOV             R3, #byte_68BD4
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_126FC
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_12750

loc_126FC
SUB             R5, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aPidofSCommandR ; "pidof %s command result is: %s\n"
SUB             R5, R5, #4
MOV             R3, R8
MOVT            R2, #:upper16:aPidofSCommandR ; "pidof %s command result is: %s\n"
MOV             R1, #0x800 ; maxlen
STR             R4, [SP,#0xA04+var_A04]
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_126A4
LDRB            R3, [R10]
CMP             R3, #0
MOVEQ           R3, #byte_68BD4
BNE             loc_12778

loc_12750
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_12770
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_126A4

loc_12770
SUB             R5, R11, #-(-0x30+var_804+4)
SUB             R5, R5, #4

loc_12778               ; s
MOV             R0, R4
BL              strlen
MOV             R2, R6  ; format
MOV             R3, R0
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_126A4

loc_127A8
MOV             R3, R0
MOVW            R10, #:lower16:byte_68BD5
MOV             R0, R9  ; stream
MOV             R6, R3
MOV             R9, R3
MOVT            R10, #:upper16:byte_68BD5
BL              pclose
MOV             R7, R4
MOV             R5, #1
B               loc_127D4

loc_127D0
ADD             R5, R5, #1

loc_127D4               ; s
MOV             R0, R4
BL              strlen
CMP             R0, R5
BCC             loc_128C4
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
SUB             R0, R11, #-(-0x30+dest) ; s
BL              memset
BL              __ctype_b_loc
LDRB            R3, [R7],#1
LDR             R2, [R0]
MOV             R3, R3,LSL#1
LDRH            R3, [R2,R3]
TST             R3, #0x2000
BEQ             loc_127D0
SUB             R2, R5, R6
ADD             R1, R4, R6 ; src
SUB             R2, R2, #1 ; n
SUB             R0, R11, #-(-0x30+dest) ; dest
BL              strncpy
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
SUB             R0, R11, #-(-0x30+dest) ; nptr
BL              strtol
SUBS            R3, R0, #0
BLE             loc_128BC
LDRB            R2, [R10]
ADD             R9, R9, #1
CMP             R2, #0
BEQ             loc_128BC
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_12874
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_128A8

loc_12874
SUB             R6, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aParsedProcIdIs ; "Parsed proc id is: %d\n"
SUB             R6, R6, #4
MOVT            R2, #:upper16:aParsedProcIdIs ; "Parsed proc id is: %d\n"
MOV             R0, R6  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #7
MOV             R6, R5
BL              sub_20F58
B               loc_127D0

loc_128A8
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BGT             loc_12874

loc_128BC
MOV             R6, R5
B               loc_127D0

loc_128C4
CMP             R9, #0
BEQ             loc_129F0
MOV             R10, #byte_74500
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_128F4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_137FC

loc_128F4
SUB             R6, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aDInstanceOfSIs ; " %d instance of %s is  already Running "...
SUB             R6, R6, #4
MOVT            R2, #:upper16:aDInstanceOfSIs ; " %d instance of %s is  already Running "...
MOV             R1, #0x800 ; maxlen
STR             R8, [SP,#0xA04+var_A04]
MOV             R0, R6  ; s
MOV             R3, R9
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_12928
CMP             R9, #1
BEQ             loc_129F0
LDR             R3, [R11,#-0x30+var_9C0]
MOVW            R2, #:lower16:aSIsForbiddenTo ; "%s is forbidden to start twice, will ex"...
SUB             R0, R11, #-(-0x30+var_804+4)
MOVT            R2, #:upper16:aSIsForbiddenTo ; "%s is forbidden to start twice, will ex"...
MOV             R1, #0x800 ; maxlen
SUB             R0, R0, #4 ; s
LDR             R3, [R3]
BL              snprintf
SUB             R1, R11, #-(-0x30+var_804+4)
MOV             R0, #3
SUB             R1, R1, #4
MOV             R2, #1
BL              sub_20F58
MOV             R1, #0
MOV             R0, #0xFFFFFFFF
BL              sub_2E6B0

loc_12970
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_129F0
MOV             R10, #byte_74500
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_129C0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_129C0
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_129F0

loc_129C0
SUB             R6, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aAppServiceSNot ; " app-service:%s Not Found!!!"
SUB             R6, R6, #4
MOVT            R2, #:upper16:aAppServiceSNot ; " app-service:%s Not Found!!!"
MOV             R1, #0x800 ; maxlen
MOV             R3, R8
MOV             R0, R6  ; s
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_129F0
MOVW            R3, #:lower16:aBmminerLog ; "bmminer.log"
MOVW            LR, #:lower16:word_5406C
MOVT            R3, #:upper16:aBmminerLog ; "bmminer.log"
MOVT            LR, #:upper16:word_5406C
LDM             R3!, {R0-R2} ; "bmminer.log"
MOVW            R12, #:lower16:dword_68AD4
MOVW            R6, #:lower16:word_68AB4
MOVT            R12, #:upper16:dword_68AD4
LDRB            R3, [LR,#(byte_5406E - 0x5406C)]
MOVT            R6, #:upper16:word_68AB4
LDRH            R5, [LR]
STR             R2, [R12,#(dword_68ADC - 0x68AD4)]
STRB            R3, [R6,#(byte_68AB6 - 0x68AB4)]
STR             R0, [R12]
MOV             R0, #0x54 ; 'T' ; name
STR             R1, [R12,#(dword_68AD8 - 0x68AD4)]
STRH            R5, [R6]
STR             R6, [R11,#-0x30+var_9D8]
MOVW            R6, #:lower16:byte_68BD8
BL              sysconf
CMP             R0, #1
LDR             R0, [R11,#-0x30+var_9B8]
MOVWEQ          R3, #:lower16:off_67ED8
MOVWEQ          R2, #:lower16:sched_yield
MOVTEQ          R3, #:upper16:off_67ED8
MOVTEQ          R2, #:upper16:sched_yield
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, R0, #1
STREQ           R2, [R3]
MOVT            R6, #:upper16:byte_68BD8
MOVW            R3, #0x2E2B
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
MOV             R0, R0,LSL#2
STR             R6, [R11,#-0x30+var_9BC]
BL              sub_229BC
LDR             R3, [R11,#-0x30+var_9B8]
MOV             R5, R0
STR             R0, [R6,#(dword_69054 - 0x68BD8)]
CMP             R3, #0
BLE             loc_12AC0
LDR             R3, [R11,#-0x30+var_9C0]
SUB             R7, R0, #4
MOV             R6, #0
SUB             R8, R3, #4

loc_12AA4               ; s
LDR             R0, [R8,#4]!
ADD             R6, R6, #1
BL              __strdup
STR             R0, [R7,#4]!
LDR             R3, [R11,#-0x30+var_9B8]
CMP             R3, R6
BGT             loc_12AA4

loc_12AC0
MOV             R6, #0
MOVW            R0, #:lower16:stru_76838
STR             R6, [R5,R3,LSL#2]
MOVT            R0, #:upper16:stru_76838
MOVW            R3, #:lower16:byte_6ABD0
MOVW            R2, #0x2E34
LDR             R1, =aMain ; "main"
MOV             R5, R3
BL              sub_2EE90
MOVW            R0, #:lower16:stru_767C8
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_767C8
MOVW            R2, #0x2E35
BL              sub_2EE90
MOVW            R0, #:lower16:stru_766E4
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_766E4
MOVW            R2, #0x2E36
BL              sub_2EE90
MOVW            R0, #:lower16:stru_7453C
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_7453C
MOVW            R2, #0x2E37
BL              sub_2EF3C
MOVW            R0, #:lower16:stru_766C4
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_766C4
MOVW            R2, #0x2E38
BL              sub_2EE90
MOV             R3, R5
LDR             R1, =aMain ; "main"
MOVT            R3, #:upper16:byte_6ABD0
MOVW            R2, #0x2E39
LDR             R0, =stru_6918C
MOV             R5, R3
STR             R3, [R11,#-0x30+var_9C8]
BL              sub_2EE90
MOVW            R0, #:lower16:stru_74504
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_74504
MOVW            R2, #0x2E3A
BL              sub_2EF3C
LDR             R1, =aMain ; "main"
MOVW            R2, #0x2E3B
LDR             R0, =stru_690F0
BL              sub_2EE90
SUB             R0, R5, #0x510
LDR             R1, =aMain ; "main"
MOVW            R2, #0x2E3C
BL              sub_2EF14
MOVW            R0, #:lower16:stru_755A0
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_755A0
MOVW            R2, #0x2E3D
BL              sub_2EF14
MOVW            R0, #:lower16:stru_744A8
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_744A8
MOVW            R2, #0x2E3E
BL              sub_2EF14
MOVW            R0, #:lower16:stru_7680C
LDR             R1, =aMain ; "main"
MOVT            R0, #:upper16:stru_7680C
MOVW            R2, #0x2E3F
BL              sub_2EF14
LDR             R1, =aMain ; "main"
MOVW            R2, #0x2E41
LDR             R0, =stru_6910C
BL              sub_2EE90
MOV             R1, R6  ; cond_attr
LDR             R0, =cond ; cond
BL              pthread_cond_init
SUBS            R5, R0, #0
BNE             loc_138A4
MOVW            R0, #:lower16:stru_767F4
MOVW            R2, #0x2E48
MOVT            R0, #:upper16:stru_767F4
LDR             R1, =aMain ; "main"
BL              sub_2EE90
MOVW            R0, #:lower16:stru_76700
MOV             R1, R5  ; cond_attr
MOVT            R0, #:upper16:stru_76700 ; cond
BL              pthread_cond_init
SUBS            R6, R0, #0
BNE             loc_13E0C
MOVW            R0, #:lower16:stru_744D0
MOV             R1, R6  ; cond_attr
MOVT            R0, #:upper16:stru_744D0 ; cond
BL              pthread_cond_init
SUBS            R3, R0, #0
STR             R3, [R11,#-0x30+var_9D4]
BNE             loc_13E60
BL              sub_23300
MOVW            R3, #:lower16:dword_755E0
CMP             R0, #0
MOVT            R3, #:upper16:dword_755E0
MOV             R5, R0
STR             R0, [R3]
BEQ             loc_13CBC
LDR             R12, [R11,#-0x30+var_9BC]
MOVW            R1, #:lower16:a10 ; "1.0."
ADD             R5, R0, #0xC
MOVT            R1, #:upper16:a10 ; "1.0."
MOVW            R3, #:lower16:aCgminer_0 ; "cgminer"
MOVW            R2, #:lower16:aSS ; "%s %s"
STR             R1, [SP,#0xA04+var_A04]
MOVT            R3, #:upper16:aCgminer_0 ; "cgminer"
STR             R5, [R12,#(dword_69010 - 0x68BD8)]
MOV             R1, #0x100 ; maxlen
MOVT            R2, #:upper16:aSS ; "%s %s"
LDR             R0, =s  ; s
BL              snprintf
SUB             R2, R11, #-(-0x30+var_980)
MOVW            R6, #:lower16:dword_755C4
SUB             R2, R2, #4
MOVW            R3, #:lower16:sub_2E78C
SUB             R0, R2, #8 ; set
LDR             R2, [R11,#-0x30+var_9D4]
MOVT            R3, #:upper16:sub_2E78C
MOVT            R6, #:upper16:dword_755C4
STR             R3, [R11,#-0x30+s]
MOVW            R5, #:lower16:dword_7557C
STR             R2, [R11,#-0x30+var_90C]
MOVT            R5, #:upper16:dword_7557C
STR             R6, [R11,#-0x30+var_9DC]
MOVW            R9, #:lower16:word_51DD8
BL              sigemptyset
MOVW            R2, #:lower16:stru_755F8
SUB             R1, R11, #-(-0x30+s) ; act
MOVT            R2, #:upper16:stru_755F8 ; oact
MOV             R0, #0xF ; sig
BL              sigaction
MOVW            R2, #:lower16:stru_76730
SUB             R1, R11, #-(-0x30+s) ; act
MOVT            R2, #:upper16:stru_76730 ; oact
MOV             R0, #2  ; sig
BL              sigaction
MOVW            R2, #:lower16:stru_733D0
SUB             R1, R11, #-(-0x30+s) ; act
MOVT            R2, #:upper16:stru_733D0 ; oact
MOV             R0, #6  ; sig
BL              sigaction
MOVW            R3, #:lower16:aUsrBin ; "/usr/bin"
SUB             SP, SP, #0x1000
MOVT            R3, #:upper16:aUsrBin ; "/usr/bin"
SUB             SP, SP, #8
LDM             R3, {R0-R2} ; "/usr/bin"
ADD             R12, SP, #0x1A0C+var_19FC
MOV             R3, R12
SUB             SP, SP, #0x1000
SUB             SP, SP, #8
STR             R12, [R6]
ADD             R12, SP, #0x2A14+var_2A04
MOVT            R9, #:upper16:word_51DD8
STM             R3!, {R0,R1}
MOV             R6, #0x24 ; '$'
LDR             R1, [R11,#-0x30+var_9C0]
STR             R12, [R5]
STRB            R2, [R3]
LDR             R0, [R1] ; s
STR             R9, [R11,#-0x30+var_9E0]
BL              __strdup
LDR             R8, [R5]
MOV             R7, R0
BL              dirname
MOV             R1, R0  ; src
MOV             R0, R8  ; dest
BL              strcpy
MOV             R0, R7  ; ptr
BL              free
LDR             R5, [R5]
MOV             R0, R5  ; s
BL              strlen
LDRH            R1, [R9]
MOVW            R3, #0x2E77
LDR             R12, [R11,#-0x30+var_9C8]
MOV             R2, #aCgminerC ; "cgminer.c"
STRH            R1, [R5,R0]
MOV             R0, #9
STR             R3, [SP,#0x2A14+var_2A14]
MOV             R1, #1
LDR             R3, =aMain ; "main"
STR             R0, [R12,#(dword_6A94C - 0x6ABD0)]
MOV             R0, #0x68 ; 'h'
BL              sub_22A44
MOVW            R3, #:lower16:word_55AAC
MOV             R5, R0
MOVT            R3, #:upper16:word_55AAC
LDRH            R7, [R3]

loc_12DB8               ; s
MOV             R0, R5
BL              strlen
SUBS            R6, R6, #1
STRH            R7, [R5,R0]
BNE             loc_12DB8
ADD             R6, R0, #1
MOVW            R7, #0x79B9
CMP             R6, #0xB
MOVW            R12, #0xBEEF
MOVT            R7, #0x9E37
STR             R6, [R11,#-0x30+format]
MOVT            R12, #0xFEED
MOV             R3, R7
BLS             loc_13E00
ADD             R10, R5, #0xC
STR             R5, [R11,#-0x30+var_9CC]

loc_12DF8
LDRB            R2, [R10,#-6]
SUB             R6, R6, #0xC
LDRB            R8, [R10,#-7]
CMP             R6, #0xB
LDRB            R5, [R10,#-0xA]
LDRB            LR, [R10,#-2]
MOV             R2, R2,LSL#16
LDRB            R0, [R10,#-0xB]
LDRB            R1, [R10,#-3]
LDRB            R9, [R10,#-5]
ADD             R2, R2, R8,LSL#8
LDRB            R8, [R10,#-8]
MOV             R5, R5,LSL#16
MOV             LR, LR,LSL#16
ADD             R5, R5, R0,LSL#8
LDRB            R0, [R10,#-0xC]
ADD             R2, R2, R8
ADD             LR, LR, R1,LSL#8
LDRB            R8, [R10,#-9]
ADD             R2, R2, R9,LSL#24
LDRB            R1, [R10,#-4]
ADD             R0, R5, R0
LDRB            R9, [R10,#-1]
ADD             R2, R2, R7
ADD             R1, LR, R1
ADD             R8, R0, R8,LSL#24
MOV             R0, R10
ADD             R1, R1, R9,LSL#24
SUB             R8, R8, R2
ADD             R10, R10, #0xC
ADD             R12, R1, R12
SUB             R8, R8, R12
SUB             R2, R2, R12
ADD             R3, R8, R3
EOR             R3, R3, R12,LSR#13
SUB             R2, R2, R3
SUB             R12, R12, R3
EOR             R2, R2, R3,LSL#8
SUB             R12, R12, R2
SUB             R3, R3, R2
EOR             R12, R12, R2,LSR#13
SUB             R3, R3, R12
SUB             R7, R2, R12
EOR             R3, R3, R12,LSR#12
SUB             R7, R7, R3
SUB             R12, R12, R3
EOR             R7, R7, R3,LSL#16
SUB             R12, R12, R7
SUB             R3, R3, R7
EOR             R12, R12, R7,LSR#5
SUB             R3, R3, R12
SUB             R7, R7, R12
EOR             R3, R3, R12,LSR#3
SUB             R7, R7, R3
SUB             R12, R12, R3
EOR             R7, R7, R3,LSL#10
SUB             R12, R12, R7
EOR             R12, R12, R7,LSR#15
BHI             loc_12DF8
LDR             R5, [R11,#-0x30+var_9CC]
MOV             R2, R6

loc_12EEC
LDR             R1, [R11,#-0x30+format]
SUB             R2, R2, #1
ADD             R12, R12, R1
CMP             R2, #0xA ; switch 11 cases
LDRLS           PC, [PC,R2,LSL#2] ; switch jump
B               def_12EFC ; jumptable 00012EFC default case
jpt_12EFC DCD loc_12F80 ; jump table for switch statement
DCD loc_12F78
DCD loc_12F70
DCD loc_12F68
DCD loc_12F60
DCD loc_12F58
DCD loc_12F50
DCD loc_12F48
DCD loc_12F40
DCD loc_12F38
DCD loc_12F30

loc_12F30               ; jumptable 00012EFC case 10
LDRB            R2, [R0,#0xA]
ADD             R12, R12, R2,LSL#24

loc_12F38               ; jumptable 00012EFC case 9
LDRB            R2, [R0,#9]
ADD             R12, R12, R2,LSL#16

loc_12F40               ; jumptable 00012EFC case 8
LDRB            R2, [R0,#8]
ADD             R12, R12, R2,LSL#8

loc_12F48               ; jumptable 00012EFC case 7
LDRB            R2, [R0,#7]
ADD             R7, R7, R2,LSL#24

loc_12F50               ; jumptable 00012EFC case 6
LDRB            R2, [R0,#6]
ADD             R7, R7, R2,LSL#16

loc_12F58               ; jumptable 00012EFC case 5
LDRB            R2, [R0,#5]
ADD             R7, R7, R2,LSL#8

loc_12F60               ; jumptable 00012EFC case 4
LDRB            R2, [R0,#4]
ADD             R7, R7, R2

loc_12F68               ; jumptable 00012EFC case 3
LDRB            R2, [R0,#3]
ADD             R3, R3, R2,LSL#24

loc_12F70               ; jumptable 00012EFC case 2
LDRB            R2, [R0,#2]
ADD             R3, R3, R2,LSL#16

loc_12F78               ; jumptable 00012EFC case 1
LDRB            R2, [R0,#1]
ADD             R3, R3, R2,LSL#8

loc_12F80               ; jumptable 00012EFC case 0
LDRB            R2, [R0]
ADD             R3, R3, R2

def_12EFC               ; jumptable 00012EFC default case
SUB             R3, R3, R7
SUB             R7, R7, R12
SUB             R3, R3, R12
STR             R5, [R5,#0x58]
EOR             R3, R3, R12,LSR#13
MOV             R0, R5  ; s
SUB             R7, R7, R3
SUB             R12, R12, R3
EOR             R7, R7, R3,LSL#8
SUB             R2, R12, R7
SUB             R3, R3, R7
EOR             R2, R2, R7,LSR#13
SUB             R3, R3, R2
SUB             R1, R7, R2
EOR             R3, R3, R2,LSR#12
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R1, R1, R3,LSL#16
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#5
SUB             R3, R3, R2
SUB             R1, R1, R2
EOR             R3, R3, R2,LSR#3
SUB             R6, R1, R3
SUB             R2, R2, R3
EOR             R3, R6, R3,LSL#10
SUB             R6, R2, R3
EOR             R6, R6, R3,LSR#15
STR             R6, [R5,#0x60]
BL              strlen
LDR             R3, [R11,#-0x30+var_9C8]
STR             R0, [R5,#0x5C]
LDR             R7, [R3,#(dword_6A6E0 - 0x6ABD0)]
CMP             R7, #0
BEQ             loc_13D00
LDR             R3, [R7,#0x44]
MOV             R2, #0
STR             R2, [R5,#0x4C]
ADD             R8, R5, #0x44 ; 'D'
STR             R3, [R5,#0x44]
LDR             R2, [R7,#0x44]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R5,#0x48]
LDR             R3, [R7,#0x44]
LDR             R3, [R3,#0x10]
STR             R5, [R3,#8]
LDR             R3, [R7,#0x44]
STR             R8, [R3,#0x10]

loc_13054
LDR             R3, [R11,#-0x30+var_9C8]
MOV             R0, #0xC
MOV             R1, #0
LDR             R3, [R3,#(dword_6A6E0 - 0x6ABD0)]
LDR             R12, [R3,#0x44]
LDR             R2, [R12,#0xC]
ADD             R2, R2, #1
STR             R2, [R12,#0xC]
LDR             R2, [R3,#0x44]
LDM             R2, {R2,R12}
SUB             R12, R12, #1
AND             R6, R6, R12
MUL             R6, R0, R6
ADD             R2, R2, R6
LDR             R0, [R2,#4]
ADD             R0, R0, #1
STR             R0, [R2,#4]
LDR             R2, [R3,#0x44]
LDR             R2, [R2]
LDR             R2, [R2,R6]
STR             R1, [R5,#0x50]
STR             R2, [R5,#0x54]
LDR             R2, [R3,#0x44]
LDR             R1, [R2]
LDR             R1, [R1,R6]
CMP             R1, #0
STRNE           R8, [R1,#0xC]
LDRNE           R2, [R3,#0x44]
LDR             R1, [R2]
MOV             R2, #0xA
STR             R8, [R1,R6]
LDR             R3, [R3,#0x44]
LDR             R3, [R3]
ADD             R6, R3, R6
LDR             R1, [R6,#8]
LDR             R3, [R6,#4]
MLA             R2, R1, R2, R2
CMP             R3, R2
BCC             loc_13294
LDR             R3, [R5,#0x44]
LDR             R2, [R3,#0x24]
CMP             R2, #1
BEQ             loc_13294
LDR             R3, [R3,#4]
MOV             R0, #0x18
MOV             R1, #1  ; size
MUL             R0, R0, R3 ; nmemb
BL              calloc
SUBS            R8, R0, #0
BEQ             loc_13D20
LDR             R1, [R5,#0x44]
MOV             R0, #0
MOV             R10, R0
MOV             R9, R5
STR             R0, [R11,#-0x30+var_9CC]
LDR             R3, [R1,#4]
LDR             R2, [R1,#0xC]
LDR             R12, [R1,#8]
MOV             R3, R3,LSL#1
ADD             R12, R12, #1
SUB             R3, R3, #1
TST             R3, R2
MOVNE           R3, #1
MOVEQ           R3, R0
ADD             R3, R3, R2,LSR R12
STR             R3, [R1,#0x18]
LDR             R3, [R5,#0x44]
STR             R0, [R3,#0x1C]
LDR             R3, [R5,#0x44]

loc_13168               ; ptr
LDRD            R0, R1, [R3]
LDR             R2, [R11,#-0x30+var_9CC]
CMP             R1, R2
BLS             loc_13230
LDR             R1, [R11,#-0x30+var_9CC]
MOV             R2, #0xC
MUL             R1, R2, R1
LDR             R7, [R0,R1]
CMP             R7, #0
BEQ             loc_13220

loc_13190
LDR             R5, [R3,#4]
LDR             R3, [R7,#0x1C]
LDR             R6, [R7,#0x10]
MOV             R5, R5,LSL#1
SUB             R5, R5, #1
AND             R5, R5, R3
ADD             R5, R5, R5,LSL#1
ADD             R2, R8, R5,LSL#2
LDR             R3, [R2,#4]
ADD             R3, R3, #1
STR             R3, [R2,#4]
LDR             R1, [R9,#0x44]
LDR             R0, [R1,#0x18]
CMP             R3, R0
BLS             loc_131F4
LDR             R3, [R1,#0x1C]
STR             R2, [R11,#-0x30+format]
ADD             R3, R3, #1
STR             R3, [R1,#0x1C]
LDR             R3, [R9,#0x44]
LDR             R0, [R2,#4]
LDR             R1, [R3,#0x18]
BLX             __udivsi3
LDR             R2, [R11,#-0x30+format]
STR             R0, [R2,#8]

loc_131F4
STR             R10, [R7,#0xC]
LDR             R3, [R8,R5,LSL#2]
STR             R3, [R7,#0x10]
LDR             R3, [R8,R5,LSL#2]
CMP             R3, #0
STRNE           R7, [R3,#0xC]
CMP             R6, #0
STR             R7, [R8,R5,LSL#2]
MOV             R7, R6
LDR             R3, [R9,#0x44]
BNE             loc_13190

loc_13220
LDR             R2, [R11,#-0x30+var_9CC]
ADD             R2, R2, #1
STR             R2, [R11,#-0x30+var_9CC]
B               loc_13168

loc_13230
BL              free
LDR             R2, [R9,#0x44]
MOV             R5, R9
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R9,#0x44]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R9,#0x44]
STR             R8, [R3]
LDR             R3, [R9,#0x44]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R9,#0x44]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]

loc_13294
MOVW            R0, #:lower16:byte_73324
MOV             R1, R5  ; src
MOVT            R0, #:upper16:byte_73324 ; dest
BL              strcpy
MOVW            R3, #:lower16:dword_767C0
MOVW            R1, #:lower16:aOptionsForBoth ; "Options for both config file and comman"...
MOVW            R0, #:lower16:off_67FE0 ; "--version-file"
MOVT            R3, #:upper16:dword_767C0
MOVT            R1, #:upper16:aOptionsForBoth ; "Options for both config file and comman"...
MOVT            R0, #:upper16:off_67FE0 ; "--version-file"
STR             R3, [R3]
STR             R3, [R3,#(dword_767C4 - 0x767C0)]
BL              sub_409F8
MOVW            R1, #:lower16:aOptionsForComm ; "Options for command line only"
LDR             R0, =off_68760 ; "--config|-c"
MOVT            R1, #:upper16:aOptionsForComm ; "Options for command line only"
BL              sub_409F8
SUB             R3, R11, #-(-0x30+dest)
MOVW            R2, #:lower16:sub_2AA90
SUB             R3, R3, #4
LDR             R1, [R11,#-0x30+var_9C0]
SUB             R0, R3, #4
MOVT            R2, #:upper16:sub_2AA90
BL              sub_40ACC
LDR             R3, [R11,#-0x30+var_9B8]
CMP             R3, #1
BNE             loc_13850
LDR             R3, [R11,#-0x30+var_9BC]
LDRB            R3, [R3,#(byte_68EFC - 0x68BD8)]
CMP             R3, #0
BEQ             loc_13E58

loc_13310
LDR             R3, [R11,#-0x30+var_9BC]
LDRB            R3, [R3,#(byte_6917C - 0x68BD8)]
CMP             R3, #0
MOV             R3, #dword_766C0
STR             R3, [R11,#-0x30+var_9CC]
BNE             loc_13338
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_13444

loc_13338
BL              sub_324B8
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOV             R6, R0
MOVW            R3, #0x2E9B
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
MOV             R0, #0xFF
BL              sub_229BC
LDR             R3, [R11,#-0x30+var_9CC]
MOV             R2, R0
STR             R0, [R6,#0xA4]
LDR             R3, [R3]
CMP             R3, #0
MOVWNE          R3, #0x4194
MOVWEQ          R3, #0x41A0
MOVTNE          R3, #5
MOVTEQ          R3, #5
LDM             R3!, {R0,R1}
LDRH            R3, [R3]
STR             R0, [R2]
ADD             R0, R6, #0x30 ; '0' ; dest
STR             R1, [R2,#4]
MOVW            R1, #:lower16:asc_541AC ; "?"
STRH            R3, [R2,#8]
MOVT            R1, #:upper16:asc_541AC ; src
LDR             R3, [R6,#0xA4]
MOV             R2, #7  ; n
STR             R3, [R6,#0xAC]
STR             R3, [R6,#0xB0]
STR             R3, [R6,#0xA8]
STR             R3, [R6,#0x258]
BL              strncpy
LDR             R3, [R6,#0x64]
MOV             R2, #0
STRB            R2, [R6,#0x37]
CMP             R3, #1
BEQ             loc_133D4
ADD             R0, R6, #0x64 ; 'd'
BL              sub_2B664

loc_133D4
LDR             R9, =unk_691B0
MOV             R5, #0
MOVW            R8, #:lower16:a000000029c6bf4 ; "000000029c6bf469abe4ad37605c097a860cff3"...
MOVW            R7, #:lower16:a00000002c01f50 ; "00000002c01f502cb3e9fdb053230ec12a4954c"...
MOVW            R3, #:lower16:byte_68BD6
STRB            R5, [R6,#0x61]
MOVT            R8, #:upper16:a000000029c6bf4 ; "000000029c6bf469abe4ad37605c097a860cff3"...
MOVT            R7, #:upper16:a00000002c01f50 ; "00000002c01f502cb3e9fdb053230ec12a4954c"...
ADD             R6, R9, #0xA00
MOVT            R3, #:upper16:byte_68BD6
MOV             R2, #1
STRB            R2, [R3]

loc_13404
MOV             R2, #0xA0
ADD             R1, R8, R5
MOV             R0, R9
ADD             R9, R9, R2
BL              sub_22CD8
ADD             R1, R7, R5
MOV             R0, R6
MOV             R2, #0xA0
ADD             R5, R5, #0x144
BL              sub_22CD8
CMP             R5, #0x1440
ADD             R6, R6, #0xA0
BNE             loc_13404
VLDR            D0, =32.0
LDR             R0, =unk_6A950
BL              sub_2D950

loc_13444
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R3, [R3,#(dword_68DE8 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_13458
BL              sub_3FB54

loc_13458
LDR             R5, [R11,#-0x30+var_9BC]
LDR             R1, [R5,#(dword_68DD8 - 0x68BD8)] ; src
CMP             R1, #0
BEQ             loc_13928
LDR             R2, [R11,#-0x30+var_9D0]
MOVW            R0, #:lower16:dword_68AD4
MOV             R3, #1
MOVT            R0, #:upper16:dword_68AD4 ; dest
STRB            R3, [R2]
BL              strcpy
LDR             R1, [R5,#(dword_68DE4 - 0x68BD8)] ; src
CMP             R1, #0
BEQ             loc_13498
MOV             R0, #word_68AB4 ; dest
BL              strcpy

loc_13498
MOV             R10, #byte_74500
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_138EC
MOV             R3, #byte_68BD4
STR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_138EC
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #2
BGT             loc_138EC
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R5, [R3,#(dword_68DE0 - 0x68BD8)]
CMP             R5, #0
BNE             loc_13938

loc_134E8
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_13C54
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R3, [R3,#(dword_68EF4 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_135E4

loc_13504
LDR             R2, [R2]
CMP             R2, #4
BLE             loc_141A0
SUB             R6, R11, #-(-0x30+var_804+4)
SUB             R6, R6, #4

loc_13518
MOVW            R2, #:lower16:aLoadedConfigur ; "Loaded configuration file %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aLoadedConfigur ; "Loaded configuration file %s"
MOV             R0, R6  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R6
MOV             R0, #5
BL              sub_20F58
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R3, [R3,#(dword_68FC8 - 0x68BD8)]
CMN             R3, #1
BEQ             loc_13FA8

loc_1354C
CMP             R3, #0
BNE             loc_135D0
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_13F44
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_13F44
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_13F44

loc_13584
LDR             R3, [R2]
CMP             R3, #3
SUBGT           R6, R11, #-(-0x30+var_804+4)
SUBGT           R6, R6, #4
BLE             loc_135D0

loc_13598
MOVW            R12, #:lower16:aConfigurationF ; "Configuration file could not be used."
MOV             LR, R6
MOVT            R12, #:upper16:aConfigurationF ; "Configuration file could not be used."
LDM             R12!, {R0-R3} ; "Configuration file could not be used."
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "le could not be used."
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "used."
STR             R0, [LR],#4
MOV             R0, #4
STRH            R1, [LR]
MOV             R1, R6
BL              sub_20F58

loc_135D0
LDR             R4, [R11,#-0x30+var_9BC]
LDR             R0, [R4,#(dword_68EF4 - 0x68BD8)] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4,#(dword_68EF4 - 0x68BD8)]

loc_135E4
LDR             R3, [R11,#-0x30+var_9DC]
LDR             R4, [R3]
MOV             R0, R4  ; s
BL              strlen
LDR             R3, [R11,#-0x30+var_9E0]
LDRH            R2, [R3]
MOV             R3, #byte_73388
STRH            R2, [R4,R0]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_13DE4
LDR             R2, [R11,#-0x30+var_9C0]
MOV             R3, #1
STRB            R3, [R2]

loc_13620               ; mask
MOV             R0, #0xFF
BL              setlogmask

loc_13628
MOVW            R3, #:lower16:off_67FE0 ; "--version-file"
LDR             LR, [R11,#-0x30+var_9C8]
MOVT            R3, #:upper16:off_67FE0 ; "--version-file"
MOV             R12, #8
LDR             R2, [R3,#(dword_68754 - 0x67FE0)]
MOVW            R4, #:lower16:dword_75598
MOVW            R7, #:lower16:unk_73268
MOV             R0, R12
MOV             R1, #0x40 ; '@'
MOVT            R4, #:upper16:dword_75598
CMP             R2, #0
MOVT            R7, #:upper16:unk_73268
MOVLT           R2, #0x3C ; '<'
MOVW            R6, #:lower16:unk_731F0
STRLT           R2, [R3,#(dword_68754 - 0x67FE0)]
MOVW            R3, #0x2F3D
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x2A14+var_2A14]
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
STR             R12, [LR,#(dword_6AB84 - 0x6ABD0)]
LDR             R3, =aMain ; "main"
MOVT            R6, #:upper16:unk_731F0
STR             R4, [R11,#-0x30+var_9D0]
MOVW            R5, #:lower16:unk_73110
BL              sub_22A44
STR             R0, [R4]
MOV             R0, R7
BL              sub_3ECA0
MOVT            R5, #:upper16:unk_73110
MOV             R0, R6
MOVW            R4, #:lower16:unk_689C8
MOVW            R9, #:lower16:dword_75588
BL              sub_3ECA0
MOVT            R4, #:upper16:unk_689C8
MOV             R0, R5
BL              sub_3ECA0
MOVT            R9, #:upper16:dword_75588
MOV             R0, R4
STR             R9, [R11,#-0x30+format]
MOVW            R8, #:lower16:dword_755C0
BL              sub_3ECA0
LDR             R3, [R7,#(off_73274 - 0x73268)]
MOV             R0, #0
BLX             R3
LDR             R3, [R6,#(off_731FC - 0x731F0)]
MOV             R0, #0
BLX             R3
LDR             R3, [R5,#(off_7311C - 0x73110)]
MOV             R0, #0
BLX             R3
MOV             R5, #0
LDR             R3, [R4,#(off_689D4 - 0x689C8)] ; sub_42A18
MOV             R0, #0
MOVW            R6, #:lower16:dword_7346C
BLX             R3      ; sub_42A18
MOVT            R8, #:upper16:dword_755C0
STR             R5, [R9]
MOVT            R6, #:upper16:dword_7346C
B               loc_13724

loc_13714
LDR             R3, [R6]
LDR             R0, [R3,R5,LSL#2]
ADD             R5, R5, #1
BL              sub_3EEE8

loc_13724
LDR             R4, [R8]
CMP             R4, R5
BGT             loc_13714
CMP             R4, #0
BEQ             loc_140C4
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R0, [R3,#(dword_68FD4 - 0x68BD8)] ; s
LDR             R3, [R11,#-0x30+var_9C8]
CMP             R0, #0
STR             R4, [R3,#(dword_6A748 - 0x6ABD0)]
BEQ             loc_141B4
MOV             R9, #0
MOVW            R4, #:lower16:stru_7680C
MOVW            R5, #:lower16:dword_7346C
MOVW            R6, #:lower16:off_67ED8
MOVW            R1, #:lower16:(aUserS+0x10) ; ","
MOVT            R4, #:upper16:stru_7680C
MOV             R7, R9
MOVT            R5, #:upper16:dword_7346C
MOVT            R6, #:upper16:off_67ED8
MOVT            R1, #:upper16:(aUserS+0x10) ; delim
BL              strtok

loc_1377C
CMP             R0, #0
BEQ             loc_145BC
LDR             R3, [R8]
CMP             R3, R9
BLE             loc_14374
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
CMP             R0, #0xC8
MOV             R7, R0
BHI             loc_145A0
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_14AD0
LDR             R3, [R5]
MOV             R0, R4  ; rwlock
LDR             R3, [R3,R9,LSL#2]
STR             R7, [R3,#0xB8]
BL              pthread_rwlock_unlock
SUBS            R3, R0, #0
BNE             loc_14A1C
LDR             R2, [R6] ; sub_21C98
ADD             R9, R9, #1
STR             R3, [R11,#-0x30+var_9D8]
BLX             R2      ; sub_21C98
LDR             R3, [R11,#-0x30+var_9D8]
MOV             R1, #(aUserS+0x10) ; delim
MOV             R0, R3  ; s
BL              strtok
B               loc_1377C

loc_137FC
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #2
BGT             loc_128F4
B               loc_12928
ALIGN 8
dbl_13818 DCFD 32.0
off_13820 DCD stru_6918C
off_13824 DCD stru_690F0
off_13828 DCD stru_6910C
off_1382C DCD cond
off_13830 DCD off_68760 ; "--config|-c"
off_13834 DCD unk_691B0
off_13838 DCD unk_6A950
off_1383C DCD dword_6A978
off_13840 DCD byte_6AA7C
off_13844 DCD s
off_13848 DCD aLoadTempCutoff ; "load_temp_cutoffs"
off_1384C DCD aMain     ; "main"

loc_13850
MOVW            LR, #:lower16:aUnexpectedExtr ; "Unexpected extra commandline arguments"
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aUnexpectedExtr ; "Unexpected extra commandline arguments"
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "Unexpected extra commandline arguments"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " commandline arguments"
STM             R12!, {R0-R3}
MOV             R2, #1
LDM             LR, {R0,R1} ; "uments"
STR             R0, [R12],#4
MOV             R0, #3
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4

loc_13890
STRB            R3, [R12]
BL              sub_20F58
MOV             R1, #0
MOV             R0, #1
BL              sub_2E6B0

loc_138A4
MOVW            R12, #:lower16:aFailedToPthrea_0 ; "Failed to pthread_cond_init lp_cond"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aFailedToPthrea_0 ; "Failed to pthread_cond_init lp_cond"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Failed to pthread_cond_init lp_cond"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "d_cond_init lp_cond"
LDR             R12, [R12] ; "ond"
STM             LR!, {R0-R3}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
MOV             R0, #3
MOV             R2, #1
STR             R12, [LR]
BL              sub_20F58
MOV             R1, R6
MOV             R0, #1
BL              sub_2E6B0

loc_138EC
LDR             R1, [R11,#-0x30+var_9D8]
SUB             R6, R11, #-(-0x30+var_804+4)
SUB             R6, R6, #4
MOVW            R3, #:lower16:dword_68AD4
MOVW            R2, #:lower16:aLogFilePathSOp ; "Log file path: %s Open flag: %s"
MOV             R0, R6  ; s
STR             R1, [SP,#0x2A14+var_2A14]
MOVT            R2, #:upper16:aLogFilePathSOp ; "Log file path: %s Open flag: %s"
MOV             R1, #0x800 ; maxlen
MOVT            R3, #:upper16:dword_68AD4
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_13928
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R5, [R3,#(dword_68DE0 - 0x68BD8)]
CMP             R5, #0
BEQ             loc_13EAC

loc_13938               ; n
MOV             R2, #0x100
MOV             R1, #0  ; c
MOV             R0, R4  ; s
BL              memset
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R0, [R3,#(dword_68DDC - 0x68BD8)] ; nptr
CMP             R0, #0
BEQ             loc_13ED0
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_13DA4
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
SUB             R3, R0, #0x20 ; ' '
LDR             R2, [R11,#-0x30+var_9C8]
BIC             R3, R3, #0x20 ; ' '
CMP             R0, #1
CMPNE           R3, #0
STR             R0, [R2,#(dword_6A970 - 0x6ABD0)]
BNE             loc_1432C
MOV             R10, #byte_74500
LDRB            R3, [R10]
CMP             R3, #0
MOV             R3, #byte_68BD4
STR             R3, [R11,#-0x30+var_9C0]
BNE             loc_139CC
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_139CC
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_13A08

loc_139CC
LDR             R3, [R11,#-0x30+var_9BC]
SUB             R6, R11, #-(-0x30+var_804+4)
SUB             R6, R6, #4
MOV             R2, #aLogWorkPathSAs ; "Log work path: %s Asic num: %s"
MOV             R0, R6  ; s
LDR             R1, [R3,#(dword_68DDC - 0x68BD8)]
LDR             R3, [R3,#(dword_68DE0 - 0x68BD8)]
STR             R1, [SP,#0x2A14+var_2A14]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_13A08
LDR             R3, [R11,#-0x30+var_9BC]
MOV             R1, #aSTxt ; "%s.txt"
MOV             R0, R4  ; s
LDR             R2, [R3,#(dword_68DE0 - 0x68BD8)]
BL              sprintf
MOVW            R1, #:lower16:word_5406C
MOV             R0, R4
MOVT            R1, #:upper16:word_5406C
BL              fopen64
LDRB            R3, [R10]
LDR             R2, [R11,#-0x30+var_9C8]
CMP             R3, #0
STR             R0, [R2,#(dword_6A974 - 0x6ABD0)]
BNE             loc_13A68
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_13A68
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_13A98

loc_13A68
SUB             R6, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aLogWorkOpenFil ; "Log work open file %s"
SUB             R6, R6, #4
MOVT            R2, #:upper16:aLogWorkOpenFil ; "Log work open file %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R6  ; s
MOV             R3, R4
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_13A98
LDR             R3, [R11,#-0x30+var_9C8]
LDR             R3, [R3,#(dword_6A970 - 0x6ABD0)]
CMP             R3, #1
BEQ             loc_14104
SUB             R3, R3, #0x20 ; ' '
BICS            R3, R3, #0x20 ; ' '
BNE             loc_13B74
MOVW            R7, #:lower16:word_5406C
MOVW            R8, #:lower16:aS02d02dTxt ; "%s%02d_%02d.txt"
MOVT            R7, #:upper16:word_5406C
LDR             R9, =dword_6A978
STR             R7, [R11,#-0x30+format]
MOV             R5, R3
MOVT            R8, #:upper16:aS02d02dTxt ; "%s%02d_%02d.txt"
LDR             R7, [R11,#-0x30+var_9C8]
B               loc_13B68

loc_13AD8
LDR             R2, [R11,#-0x30+var_9BC]
MOV             R1, R8  ; format
STR             R5, [SP,#0x2A14+var_2A14]
MOV             R0, R4  ; s
LDR             R2, [R2,#(dword_68DE0 - 0x68BD8)]
BL              sprintf
LDR             R1, [R11,#-0x30+format]
MOV             R0, R4
BL              fopen64
LDRB            R3, [R10]
STR             R0, [R9,R5,LSL#2]
CMP             R3, #0
BNE             loc_13B30
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_13B30
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_13B64

loc_13B30
SUB             R6, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aLogWorkOpenAsi ; "Log work open asic %d file %s"
SUB             R6, R6, #4
STR             R4, [SP,#0x2A14+var_2A14]
MOVT            R2, #:upper16:aLogWorkOpenAsi ; "Log work open asic %d file %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R6  ; s
LDR             R3, [R7,#(dword_6A970 - 0x6ABD0)]
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_13B64
ADD             R5, R5, #1

loc_13B68
LDR             R3, [R7,#(dword_6A970 - 0x6ABD0)]
CMP             R3, R5
BGE             loc_13AD8

loc_13B74
LDR             R3, [R11,#-0x30+var_9C8]
LDRB            R3, [R3,#(byte_6AA7C - 0x6ABD0)]
CMP             R3, #0
BEQ             loc_13C38
LDR             R7, =byte_6AA7C
MOVW            R9, #:lower16:aSDiff02dTxt ; "%s_diff_%02d.txt"
MOVW            R8, #:lower16:word_5406C
MOVW            R3, #:lower16:aLogWorkOpenDif ; "Log work open diff file %s"
MOVT            R9, #:upper16:aSDiff02dTxt ; "%s_diff_%02d.txt"
MOVT            R8, #:upper16:word_5406C
MOV             R5, #0
MOVT            R3, #:upper16:aLogWorkOpenDif ; "Log work open diff file %s"
STR             R3, [R11,#-0x30+format]

loc_13BA8
LDR             R2, [R11,#-0x30+var_9BC]
MOV             R3, R5
MOV             R1, R9  ; format
MOV             R0, R4  ; s
LDR             R2, [R2,#(dword_68DE0 - 0x68BD8)]
BL              sprintf
MOV             R1, R8
MOV             R0, R4
BL              fopen64
LDRB            R3, [R10]
STR             R0, [R7,#4]!
CMP             R3, #0
BNE             loc_13C00
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_13C00
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_13C2C

loc_13C00
SUB             R6, R11, #-(-0x30+var_804+4)
LDR             R2, [R11,#-0x30+format] ; format
SUB             R6, R6, #4
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
MOV             R0, R6  ; s
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_13C2C
ADD             R5, R5, #1
CMP             R5, #0x41 ; 'A'
BNE             loc_13BA8

loc_13C38
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_13C54
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_13EC4

loc_13C54
SUB             R6, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aStartedS ; "Started %s"
SUB             R6, R6, #4
LDR             R3, =s
MOVT            R2, #:upper16:aStartedS ; "Started %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R6  ; s
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R3, [R3,#(dword_68EF4 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_135E4
LDRB            R2, [R10]
CMP             R2, #0
BNE             loc_13518
LDR             R2, [R11,#-0x30+var_9C0]
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_13518
MOV             R2, #dword_67DB4
B               loc_13504

loc_13CBC
MOVW            R12, #:lower16:aFailedToCreate_1 ; "Failed to create getq"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aFailedToCreate_1 ; "Failed to create getq"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Failed to create getq"
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1} ; " getq"
STR             R0, [LR],#4
MOV             R0, #3
STRH            R1, [LR]
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
BL              sub_20F58
MOV             R1, R5
MOV             R0, #1
BL              sub_2E6B0

loc_13D00
STR             R7, [R5,#0x4C]
MOV             R0, #0x2C ; ',' ; size
STR             R7, [R5,#0x48]
STR             R5, [R3,#(dword_6A6E0 - 0x6ABD0)]
BL              malloc
CMP             R0, #0
STR             R0, [R5,#0x44]
BNE             loc_13D28

loc_13D20               ; status
MOV             R0, #0xFFFFFFFF
BL              exit

loc_13D28               ; n
MOV             R2, #0x2C ; ','
MOV             R1, R7  ; c
MOV             R8, R5
BL              memset
LDR             R3, [R8,#0x44]!
MOV             R12, #0x20 ; ' '
MOV             R1, #5
MOV             R2, #0x44 ; 'D'
MOV             R0, #0x180 ; size
STR             R8, [R3,#0x10]
LDR             R3, [R5,#0x44]
STR             R12, [R3,#4]
LDR             R3, [R5,#0x44]
STR             R1, [R3,#8]
LDR             R3, [R5,#0x44]
STR             R2, [R3,#0x14]
LDR             R9, [R5,#0x44]
BL              malloc
STR             R0, [R9]
LDR             R3, [R5,#0x44]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_13D20
MOV             R2, #0x180 ; n
MOV             R1, R7  ; c
BL              memset
LDR             R2, [R5,#0x44]
MOV             R3, #0xA0111FE1
STR             R3, [R2,#0x28]
B               loc_13054

loc_13DA4
MOVW            R12, #:lower16:aLogWorkAsicNum_0 ; "Log work asic num empty"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aLogWorkAsicNum_0 ; "Log work asic num empty"
SUB             LR, LR, #4

loc_13DB4
LDM             R12!, {R0-R3}
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1}
STM             LR, {R0,R1}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4

loc_13DD0
MOV             R0, #3
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_13DE4
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_13620
MOV             R0, #0x3F ; '?' ; mask
BL              setlogmask
B               loc_13628

loc_13E00
MOV             R0, R5
LDR             R2, [R11,#-0x30+format]
B               loc_12EEC

loc_13E0C
MOVW            LR, #:lower16:aFailedToPthrea_1 ; "Failed to pthread_cond_init restart_con"...
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aFailedToPthrea_1 ; "Failed to pthread_cond_init restart_con"...
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "Failed to pthread_cond_init restart_con"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "d_cond_init restart_cond"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "art_cond"
STM             R12!, {R0,R1}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
STRB            R2, [R12]
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, R5
MOV             R0, #1
BL              sub_2E6B0

loc_13E58
BL              sub_2D8F0
B               loc_13310

loc_13E60
MOVW            R12, #:lower16:aFailedToPthrea_2 ; "Failed to pthread_cond_init gws_cond"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aFailedToPthrea_2 ; "Failed to pthread_cond_init gws_cond"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Failed to pthread_cond_init gws_cond"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "d_cond_init gws_cond"
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1} ; "cond"
STR             R0, [LR],#4
MOV             R0, #3
STRB            R1, [LR]
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
BL              sub_20F58
MOV             R1, R6
MOV             R0, #1
BL              sub_2E6B0

loc_13EAC
MOVW            R3, #:lower16:byte_68BD4
MOVW            R10, #:lower16:byte_74500
MOVT            R3, #:upper16:byte_68BD4
MOVT            R10, #:upper16:byte_74500
STR             R3, [R11,#-0x30+var_9C0]
B               loc_13C38

loc_13EC4
MOV             R2, #dword_67DB4
B               loc_134E8

loc_13ED0
MOV             R10, #byte_74500
LDRB            R3, [R10]
CMP             R3, #0
MOV             R3, #byte_68BD4
STR             R3, [R11,#-0x30+var_9C0]
BNE             loc_13F10
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_13F10
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_13A08

loc_13F10
SUB             R6, R11, #-(-0x30+var_804+4)
MOVW            R2, #:lower16:aLogWorkPathS ; "Log work path: %s"
SUB             R6, R6, #4
MOV             R3, R5
MOV             R0, R6  ; s
MOVT            R2, #:upper16:aLogWorkPathS ; "Log work path: %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
B               loc_13A08

loc_13F44
MOVW            R12, #:lower16:aFatalJsonError ; "Fatal JSON error in configuration file."
SUB             R6, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aFatalJsonError ; "Fatal JSON error in configuration file."
SUB             R6, R6, #4
LDM             R12!, {R0-R3} ; "Fatal JSON error in configuration file."
MOV             LR, R6
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " in configuration file."
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "n file."
STM             LR, {R0,R1}
MOV             R1, R6
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_13598
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
MOVEQ           R2, #dword_67DB4
BNE             loc_13598
B               loc_13584

loc_13FA8
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14048

loc_13FB4
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14040
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_14040
MOV             R4, #byte_74488
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_135D0

loc_13FEC
LDR             R3, [R2]
CMP             R3, #3
SUBGT           R6, R11, #-(-0x30+var_804+4)
SUBGT           R6, R6, #4
BLE             loc_135D0

loc_14000
MOVW            R12, #:lower16:aStartCgminerWi ; "Start cgminer with -T to see what faile"...
MOV             LR, R6
MOVT            R12, #:upper16:aStartCgminerWi ; "Start cgminer with -T to see what faile"...
LDM             R12!, {R0-R3} ; "Start cgminer with -T to see what faile"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "th -T to see what failed to load."
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "t failed to load."
LDR             R12, [R12] ; "."
STM             LR!, {R0-R3}
MOV             R1, R6
MOV             R2, #0
MOV             R0, #4
STRH            R12, [LR]
BL              sub_20F58
B               loc_135D0

loc_14040
SUB             R6, R11, #-(-0x30+var_804+4)
SUB             R6, R6, #4

loc_14048
MOVW            LR, #:lower16:aErrorInConfigu ; "Error in configuration file, partially "...
MOV             R12, R6
MOVT            LR, #:upper16:aErrorInConfigu ; "Error in configuration file, partially "...
MOVW            R4, #:lower16:byte_74488
LDM             LR!, {R0-R3} ; "Error in configuration file, partially "...
MOVT            R4, #:upper16:byte_74488
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "ration file, partially loaded."
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "tially loaded."
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R1, R6
MOV             R0, #4
STRB            LR, [R12]
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_135D0
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14000
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14000
MOV             R2, #dword_67DB4
B               loc_13FEC

loc_140C4
MOVW            LR, #:lower16:aAllDevicesDisa ; "All devices disabled, cannot mint!"
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aAllDevicesDisa ; "All devices disabled, cannot mint!"
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "All devices disabled, cannot mint!"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "bled, cannot mint!"
LDR             LR, [LR] ; "t!"
STM             R12!, {R0-R3}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
MOV             R2, #1
MOV             R0, #3
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
B               loc_13890

loc_14104
LDR             R2, [R11,#-0x30+var_9BC]
MOV             R1, #aS02dTxt ; "%s%02d.txt"
MOV             R0, R4  ; s
LDR             R2, [R2,#(dword_68DE0 - 0x68BD8)]
BL              sprintf
MOVW            R1, #:lower16:word_5406C
MOV             R0, R4
MOVT            R1, #:upper16:word_5406C
BL              fopen64
LDRB            R3, [R10]
LDR             R2, [R11,#-0x30+var_9C8]
CMP             R3, #0
STR             R0, [R2,#(dword_6A978 - 0x6ABD0)]
BNE             loc_14164
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14164
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_13B74

loc_14164
LDR             R3, [R11,#-0x30+var_9C8]
SUB             R6, R11, #-(-0x30+var_804+4)
SUB             R6, R6, #4
MOVW            R2, #:lower16:aLogWorkOpenAsi ; "Log work open asic %d file %s"
STR             R4, [SP,#0x2A14+var_2A14]
MOV             R0, R6  ; s
MOVT            R2, #:upper16:aLogWorkOpenAsi ; "Log work open asic %d file %s"
LDR             R3, [R3,#(dword_6A970 - 0x6ABD0)]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
B               loc_13B74

loc_141A0
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R3, [R3,#(dword_68FC8 - 0x68BD8)]
CMN             R3, #1
BNE             loc_1354C
B               loc_13FB4

loc_141B4               ; rwlock
MOV             R0, #stru_7680C
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_14AC4
MOVW            R3, #:lower16:dword_7346C
LDR             R1, [R8]
MOVT            R3, #:upper16:dword_7346C
MOV             LR, #0x5F ; '_'
STR             R3, [R11,#-0x30+var_9E0]
LDR             R12, [R3]
B               loc_141F8

loc_141E4
LDR             R3, [R12,R0,LSL#2]
ADD             R0, R0, #1
LDR             R2, [R3,#0xB8]
CMP             R2, #0
STREQ           LR, [R3,#0xB8]

loc_141F8
CMP             R0, R1
BLT             loc_141E4
MOVW            R0, #:lower16:stru_7680C
MOVW            R2, #0x548
MOVT            R0, #:upper16:stru_7680C
LDR             R1, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_2FB80

loc_14214
LDR             R3, [R11,#-0x30+var_9E0]
MOVW            R0, #0xE0FF
LDR             R1, [R8]
MOVT            R0, #0x5F5
LDR             R12, [R3]
MOV             R3, #0
B               loc_1423C

loc_14230
LDR             R2, [R12,R3,LSL#2]
ADD             R3, R3, #1
STR             R0, [R2,#0x138]

loc_1423C
CMP             R1, R3
BGT             loc_14230
MOVW            R3, #:lower16:byte_756B0
MOVW            R9, #:lower16:dword_733CC
MOVT            R3, #:upper16:byte_756B0
MOVT            R9, #:upper16:dword_733CC
LDRB            R3, [R3]
CMP             R3, #0
LDREQ           R1, [R11,#-0x30+var_9C8]
LDREQ           R3, [R1,#(dword_6A94C - 0x6ABD0)]
LDREQ           R2, [R1,#(dword_6A748 - 0x6ABD0)]
ADDEQ           R3, R3, R2
STREQ           R3, [R1,#(dword_6A94C - 0x6ABD0)]
LDR             R3, [R9]
CMP             R3, #0
BNE             loc_143C0
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_142B4
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_142B4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
SUBLE           R6, R11, #-(-0x30+var_804+4)
SUBLE           R6, R6, #4
BLE             loc_142F4

loc_142B4
MOVW            LR, #:lower16:aNeedToSpecifyA ; "Need to specify at least one pool serve"...
SUB             R6, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aNeedToSpecifyA ; "Need to specify at least one pool serve"...
SUB             R6, R6, #4
LDM             LR!, {R0-R3} ; "Need to specify at least one pool serve"...
MOV             R12, R6
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "at least one pool server."
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "l server."
STM             R12!, {R0,R1}
MOV             R1, R6
STRH            R2, [R12]
MOV             R0, #4
MOV             R2, #0
BL              sub_20F58

loc_142F4
MOVW            R12, #:lower16:aPoolSetupFaile ; "Pool setup failed"
MOV             LR, R6
MOVT            R12, #:upper16:aPoolSetupFaile ; "Pool setup failed"
LDM             R12!, {R0-R3} ; "Pool setup failed"
LDR             R12, [R12] ; "d"
STM             LR!, {R0-R3}
MOV             R1, R6
MOV             R0, #3
MOV             R2, #1
STRH            R12, [LR]
BL              sub_20F58
MOV             R1, #0
MOV             R0, #1
BL              sub_2E6B0

loc_1432C
MOVW            R12, #:lower16:aLogWorkAsicNum ; "Log work asic num must be 1, 32, 64"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aLogWorkAsicNum ; "Log work asic num must be 1, 32, 64"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Log work asic num must be 1, 32, 64"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "m must be 1, 32, 64"
LDR             R12, [R12] ; " 64"
STM             LR!, {R0-R3}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
MOV             R0, #3
MOV             R2, #1
STR             R12, [LR]
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_14374
MOVW            LR, #:lower16:aTooManyValuesP ; "Too many values passed to set temp cuto"...
SUB             R12, R11, #-(-0x30+var_804+4)
MOVT            LR, #:upper16:aTooManyValuesP ; "Too many values passed to set temp cuto"...
SUB             R12, R12, #4
LDM             LR!, {R0-R3} ; "Too many values passed to set temp cuto"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "passed to set temp cutoff"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "mp cutoff"
STM             R12!, {R0,R1}
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4
STRH            R2, [R12]
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_143C0
MOVW            R3, #:lower16:dword_744C8
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R7, #0xE0FF
MOVT            R3, #:upper16:dword_744C8
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
STR             R3, [R11,#-0x30+var_9D8]
MOVT            R7, #0x5F5
STR             R2, [R11,#-0x30+var_9DC]
MOV             R6, #0
B               loc_143EC

loc_143E8
ADD             R6, R6, #1

loc_143EC
LDR             R2, [R9]
LDR             R3, [R11,#-0x30+var_9D8]
CMP             R2, R6
LDR             R3, [R3]
BLE             loc_14480
LDR             R4, [R3,R6,LSL#2]
LDR             R3, [R4,#0xA8]
STR             R7, [R4,#0x194]
STR             R7, [R4,#0x1B8]
CMP             R3, #0
BNE             loc_143E8
LDR             R3, [R4,#0xB0]
CMP             R3, #0
BEQ             loc_14AB0

loc_14424               ; s
LDR             R0, [R4,#0xAC]
CMP             R0, #0
BEQ             loc_14A68
BL              strlen
MOV             R5, R0
LDR             R0, [R4,#0xB0] ; s
BL              strlen
ADD             R5, R5, R0
LDR             R1, [R11,#-0x30+var_9DC]
ADD             R5, R5, #2
MOVW            R3, #0x2FAB
LDR             R2, =aMain ; "main"
MOV             R0, R5
BL              sub_229BC
LDR             R3, [R4,#0xB0]
MOVW            R2, #:lower16:(aFailedToConnec+0x20) ; "%s:%s"
STR             R0, [R4,#0xA8]
MOV             R1, R5  ; maxlen
MOVT            R2, #:upper16:(aFailedToConnec+0x20) ; format
STR             R3, [SP,#0x2A14+var_2A14]
LDR             R3, [R4,#0xAC]
BL              snprintf
B               loc_143E8

loc_14480
LDRB            R2, [R10]
LDR             R3, [R3]
CMP             R2, #0
LDR             R2, [R11,#-0x30+var_9BC]
STR             R3, [R2,#(dword_69060 - 0x68BD8)]
BEQ             loc_144AC
MOVW            R0, #:lower16:aCgminer_0 ; "cgminer"
MOV             R2, #8  ; facility
MOVT            R0, #:upper16:aCgminer_0 ; "cgminer"
MOV             R1, #1  ; option
BL              openlog

loc_144AC
LDR             R3, [R11,#-0x30+var_9C8]
SUB             R6, R11, #-(-0x30+var_804+4)
SUB             R6, R6, #4
LDR             R3, [R3,#(dword_6AB88 - 0x6ABD0)]
CMP             R3, #0
BEQ             loc_145D4
MOV             R0, R6  ; pipedes
BL              pipe
CMP             R0, #0
BLT             loc_14B60
MOV             R3, #stderr
LDR             R0, [R3] ; stream
BL              fflush
MOV             R1, #2  ; fd2
LDR             R0, [R11,#-0x30+var_804+4] ; fd
BL              dup2
CMP             R0, #0
BLT             loc_14B88
LDR             R0, [R11,#-0x30+var_804+4] ; fd
BL              close
CMP             R0, #0
BLT             loc_14B74
MOV             R1, #1  ; handler
MOV             R0, #0xD ; sig
BL              signal
MOV             R1, #1  ; handler
MOV             R4, R0
MOV             R0, #0xD ; sig
BL              signal
CMN             R4, #1
CMNNE           R0, #1
BEQ             loc_15734
BL              fork
LDR             R3, [R11,#-0x30+var_9BC]
CMP             R0, #0
MOV             R4, R0
STR             R0, [R3,#(dword_68FFC - 0x68BD8)]
BLT             loc_15720
LDR             R0, [R11,#-0x30+var_804] ; fd
BNE             loc_14ADC
MOV             R1, R4  ; fd2
BL              dup2
CMP             R0, #0
BLT             loc_15610
LDR             R0, [R11,#-0x30+var_804] ; fd
BL              close
LDR             R3, [R11,#-0x30+var_9C8]
MOV             R1, #aBinBash ; "/bin/bash"
MOVW            R2, #:lower16:aC ; "-c"
STR             R4, [SP,#0x2A14+var_2A14]
MOV             R0, R1  ; path
LDR             R3, [R3,#(dword_6AB88 - 0x6ABD0)]
MOVT            R2, #:upper16:aC ; "-c"
BL              execl
MOV             R0, #aExeclInChildFa ; "execl - in child failed to exec user sp"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_145A0
MOVW            R12, #:lower16:aInvalidValuePa ; "Invalid value passed to set temp cutoff"
SUB             LR, R11, #-(-0x30+var_804+4)
MOVT            R12, #:upper16:aInvalidValuePa ; "Invalid value passed to set temp cutoff"
SUB             LR, LR, #4
LDM             R12!, {R0-R3} ; "Invalid value passed to set temp cutoff"
STM             LR!, {R0-R3}
B               loc_13DB4

loc_145BC
CMP             R9, #1
BLE             loc_14AFC
MOV             R3, #dword_7346C
STR             R3, [R11,#-0x30+var_9E0]
B               loc_14214

loc_145D4
LDR             R0, [R11,#-0x30+format]
MOV             R12, #dword_744A4
MOVW            R3, #0x2FBC
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x2A14+var_2A14]
MOV             R5, R12
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, =aMain ; "main"
MOV             R1, #4
LDR             R0, [R0]
MOVW            R4, #:lower16:aCgminerC ; "cgminer.c"
STR             R12, [R11,#-0x30+var_9E8]
MOVT            R4, #:upper16:aCgminerC ; "cgminer.c"
BL              sub_22A44
MOV             R7, #0x2FC0
STR             R0, [R5]
STR             R8, [R11,#-0x30+var_9DC]
MOV             R5, #0
B               loc_1464C

loc_14624
LDR             R3, [R11,#-0x30+var_9E8]
MOV             R2, R4
MOV             R1, #0x40 ; '@'
MOV             R0, #1
LDR             R8, [R3]
LDR             R3, =aMain ; "main"
STR             R7, [SP,#0x2A14+var_2A14]
BL              sub_22A44
STR             R0, [R8,R5,LSL#2]
ADD             R5, R5, #1

loc_1464C
LDR             R3, [R11,#-0x30+format]
LDR             R3, [R3]
CMP             R3, R5
BGT             loc_14624
MOVW            R2, #:lower16:byte_68BD5
MOV             R3, #0
MOVT            R2, #:upper16:byte_68BD5
LDR             R8, [R11,#-0x30+var_9DC]
STR             R3, [R11,#-0x30+var_9E4]
STR             R3, [R11,#-0x30+var_9DC]
STR             R2, [R11,#-0x30+var_9F0]
STR             R10, [R11,#-0x30+var_9EC]
STR             R9, [R11,#-0x30+var_9F4]

loc_14680
LDR             R3, [R8]
LDR             R2, [R11,#-0x30+var_9E4]
CMP             R3, R2
BLE             loc_1483C
LDR             R3, [R11,#-0x30+var_9E0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R12, [R11,#-0x30+var_9E4]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
MOVW            R9, #:lower16:sub_2B500
LDR             R0, [R3]
MOVW            R3, #0x2FC9
MOV             R4, #0
MOV             R10, R8
MOVT            R9, #:upper16:sub_2B500
MOV             R8, R6
LDR             R5, [R0,R12,LSL#2]
LDR             R0, [R5,#0x94]
ADD             R0, R0, #1
MOV             R0, R0,LSL#2
BL              sub_229BC
LDR             R2, [R5,#0x94]
MOV             R3, #4
STR             R0, [R5,#0x98]
STR             R4, [R0,R2,LSL#2]
STR             R3, [R5,#0x60]
B               loc_147D0

loc_146EC
MOV             R0, R6
BL              sub_31B04
STR             R6, [R0]
MOV             R7, R0
STR             R5, [R0,#0x24]
STR             R4, [R0,#4]
LDR             R3, [R5,#4]
LDR             R3, [R3,#0x2C]
BLX             R3
CMP             R0, #0
BEQ             loc_147CC
MOV             R3, R7
MOV             R2, R9
MOV             R1, #0
MOV             R0, R7
BL              sub_25164
CMP             R0, #0
BNE             loc_14808
LDR             R3, [R5,#0x98]
STR             R7, [R3,R4,LSL#2]
LDR             R3, [R5,#0x20]
CMP             R3, #1
BEQ             loc_147CC
LDR             R3, [R11,#-0x30+var_9F0]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_147B4
LDR             R3, [R11,#-0x30+var_9EC]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1478C
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1478C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_147B4

loc_1478C
MOVW            R2, #:lower16:aPushingSemPost ; "Pushing sem post to thread %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPushingSemPost ; "Pushing sem post to thread %d"
LDR             R3, [R7]
MOV             R0, R8  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R8
MOV             R0, #7
BL              sub_20F58

loc_147B4
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, R7, #0x10
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2FE5
LDR             R2, =aMain ; "main"
BL              sub_251AC

loc_147CC
ADD             R4, R4, #1

loc_147D0
LDR             R2, [R5,#0x94]
LDR             R3, [R11,#-0x30+var_9DC]
CMP             R2, R4
ADD             R6, R3, R4
BGT             loc_146EC
MOV             R3, R8
MOV             R8, R10
MOV             R10, R6
MOV             R6, R3
LDR             R3, [R11,#-0x30+var_9E4]
STR             R10, [R11,#-0x30+var_9DC]
ADD             R3, R3, #1
STR             R3, [R11,#-0x30+var_9E4]
B               loc_14680

loc_14808
MOVW            R2, #:lower16:aThreadDCreateF ; "thread %d create failed"
LDR             R3, [R7]
MOVT            R2, #:upper16:aThreadDCreateF ; "thread %d create failed"
MOV             R1, #0x800 ; maxlen
MOV             R0, R8  ; s
BL              snprintf
MOV             R1, R8
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #0
MOV             R0, #1
BL              sub_2E6B0

loc_1483C
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R10, [R11,#-0x30+var_9EC]
LDR             R9, [R11,#-0x30+var_9F4]
LDRB            R3, [R3,#(byte_6917C - 0x68BD8)]
CMP             R3, #0
BNE             loc_14868
LDR             R3, [R11,#-0x30+var_9CC]
LDR             R4, [R3]
CMP             R4, #0
MOVEQ           R7, #1
BEQ             loc_149E4

loc_14868
LDR             R0, =dbl_69088
MOV             R1, #dbl_756A8
MOV             R2, #0
MOV             R3, #0
STRD            R2, R3, [R1]
ADD             R1, R0, #0x60 ; '`'

loc_14884
STRD            R2, R3, [R0],#8
CMP             R1, R0
BNE             loc_14884
LDR             R2, [R11,#-0x30+var_9E0]
MOV             R3, #0
LDR             R12, [R8]
LDR             R1, [R11,#-0x30+var_9D4]
LDR             R0, [R2]
LDR             R2, [R11,#-0x30+var_9BC]
STR             R3, [R2,#(dword_690E8 - 0x68BD8)]
MOV             R2, #0
MOV             R3, #0
B               loc_148C8

loc_148B8
LDR             LR, [R0,R1,LSL#2]
ADD             R1, R1, #1
STRD            R2, R3, [LR,#0x50]
STRD            R2, R3, [LR,#0x30]

loc_148C8
CMP             R12, R1
BGT             loc_148B8
LDR             R0, =dword_69020
BL              sub_239A4
LDR             R0, =dword_69018
BL              sub_239A4
LDR             R0, =stru_6907C
BL              sub_239A4
LDR             R2, =dword_69020
MOV             R1, #0x28 ; '('
ADD             R0, R2, #8
BL              sub_2C610
LDR             R3, [R11,#-0x30+var_9D0]
MOVW            R2, #:lower16:sub_34DF4
LDR             LR, [R11,#-0x30+var_9BC]
MOV             R12, #2
MOVT            R2, #:upper16:sub_34DF4
LDR             R5, [R3]
MOV             R3, #0
MOV             R1, R3
STR             R12, [LR,#(dword_69058 - 0x68BD8)]
ADD             R0, R5, #0x80
BL              sub_25164
SUBS            R4, R0, #0
BNE             loc_157C8
LDR             R0, [R5,#0x8C] ; th
MOV             R8, #3
BL              pthread_detach
LDR             R3, [R11,#-0x30+var_9D0]
MOVW            R2, #:lower16:sub_38D3C
LDR             R0, [R11,#-0x30+var_9BC]
MOVT            R2, #:upper16:sub_38D3C
MOV             R1, R4
LDR             R5, [R3]
MOV             R3, R4
STR             R8, [R0,#(dword_6905C - 0x68BD8)]
ADD             R0, R5, #0xC0
BL              sub_25164
SUBS            R7, R0, #0
BNE             loc_15624
LDR             R0, [R5,#0xCC] ; th
BL              pthread_detach
LDR             R3, [R11,#-0x30+var_9D0]
MOV             R1, #5
LDR             R0, [R11,#-0x30+var_9BC]
MOV             R2, #0x2C1A4
LDR             R3, [R3]
STR             R1, [R0,#(dword_68FCC - 0x68BD8)]
MOV             R1, R7
ADD             R3, R3, #0x140
MOV             R0, R3
BL              sub_25164
SUBS            R4, R0, #0
BNE             loc_15660
LDR             R3, [R11,#-0x30+var_9C8]
LDR             R3, [R3,#(dword_6AB84 - 0x6ABD0)]
CMP             R3, #8
BEQ             loc_14B9C
MOVW            R2, #:lower16:aIncorrectTotal ; "incorrect total_control_threads (%d) sh"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aIncorrectTotal ; "incorrect total_control_threads (%d) sh"...
MOV             R0, R6  ; s
BL              snprintf
MOV             R1, R6
MOV             R0, R8
MOV             R2, #1
BL              sub_20F58
MOV             R1, R4
MOV             R0, #1
BL              sub_2E6B0

loc_149E4
LDR             R3, [R9]
CMP             R3, R4
BLE             loc_15530
LDR             R3, [R11,#-0x30+var_9D8]
LDR             R3, [R3]
LDR             R5, [R3,R4,LSL#2]
LDR             R3, [R5,#0x64]
ADD             R0, R5, #0x64 ; 'd'
CMP             R3, #1
BEQ             loc_14A10
BL              sub_2B664

loc_14A10
ADD             R4, R4, #1
STRB            R7, [R5,#0x61]
B               loc_149E4

loc_14A1C
BL              __errno_location
LDR             R1, =aLoadTempCutoff ; "load_temp_cutoffs"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x53A
STR             R3, [SP,#0x2A14+var_2A14]
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x2A14+var_2A10]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x2A14+var_2A0C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
SUB             R0, R11, #-(-0x30+var_804+4)
SUB             R0, R0, #4 ; s
BL              snprintf
SUB             R1, R11, #-(-0x30+var_804+4)
SUB             R1, R1, #4

loc_14A60
MOV             R2, #1
B               loc_13DD0

loc_14A68
LDR             R1, [R4,#0xA4]
MOV             R5, R0
MOVW            R2, #:lower16:aNoLoginCredent ; "No login credentials supplied for pool "...
SUB             R0, R11, #-(-0x30+var_804+4)
MOV             R3, R6
MOVT            R2, #:upper16:aNoLoginCredent ; "No login credentials supplied for pool "...
STR             R1, [SP,#0x2A14+var_2A14]
SUB             R0, R0, #4 ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
SUB             R1, R11, #-(-0x30+var_804+4)
MOV             R0, #3
SUB             R1, R1, #4
MOV             R2, #1
BL              sub_20F58
MOV             R1, R5
MOV             R0, #1
BL              sub_2E6B0

loc_14AB0               ; size
MOV             R1, #1
MOV             R0, R1  ; nmemb
BL              calloc
STR             R0, [R4,#0xB0]
B               loc_14424

loc_14AC4
MOVW            R1, #0x53F
LDR             R0, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_30138

loc_14AD0
MOVW            R1, #0x538
LDR             R0, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_30138

loc_14ADC
BL              close
CMP             R0, #0
BGE             loc_145D4
MOV             R0, #aCloseFailedToC ; "close - failed to close read end of pip"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_14AFC               ; rwlock
MOV             R0, #stru_7680C
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_14B54
MOVW            R3, #:lower16:dword_7346C
LDR             R2, [R8]
MOVT            R3, #:upper16:dword_7346C
STR             R3, [R11,#-0x30+var_9E0]
LDR             R3, [R3]
B               loc_14B34

loc_14B28
LDR             R1, [R3,R9,LSL#2]
ADD             R9, R9, #1
STR             R7, [R1,#0xB8]

loc_14B34
CMP             R9, R2
BLT             loc_14B28
MOVW            R0, #:lower16:stru_7680C
MOVW            R2, #0x555
MOVT            R0, #:upper16:stru_7680C
LDR             R1, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_2FB80
B               loc_14214

loc_14B54
MOVW            R1, #0x54F
LDR             R0, =aLoadTempCutoff ; "load_temp_cutoffs"
BL              sub_30138

loc_14B60
MOV             R0, #aPipeFailedToCr ; "pipe - failed to create pipe for --moni"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_14B74
MOV             R0, #aCloseFailedToC_0 ; "close - failed to close write end of pi"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_14B88
MOV             R0, #aDup2FailedToAl ; "dup2 - failed to alias stderr to write "...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_14B9C               ; inc
MOV             R0, #0xFFFFFFF6
BL              nice
CMP             R0, #0
BNE             loc_14C28
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_14C28
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_14BF0
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14BF0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_14C28

loc_14BF0
MOVW            R12, #:lower16:aUnableToSetThr ; "Unable to set thread to high priority"
MOV             LR, R6
MOVT            R12, #:upper16:aUnableToSetThr ; "Unable to set thread to high priority"
LDM             R12!, {R0-R3} ; "Unable to set thread to high priority"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "read to high priority"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "ority"
STR             R0, [LR],#4
MOV             R0, #7
STRH            R1, [LR]
MOV             R1, R6
BL              sub_20F58

loc_14C28
VLDR            D9, =32.0
MOVW            R3, #:lower16:byte_767F0
VLDR            D8, =0.0
MOVW            R8, #:lower16:byte_755D4
LDR             R5, [R11,#-0x30+var_9D8]
MOVT            R3, #:upper16:byte_767F0
MOVT            R8, #:upper16:byte_755D4
LDR             R4, [R11,#-0x30+var_9C8]
STR             R3, [R11,#-0x30+var_9D4]
STR             R10, [R11,#-0x30+var_9D0]
STR             R8, [R11,#-0x30+var_9C8]

loc_14C54
LDR             R3, [R11,#-0x30+var_9D4]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15484

loc_14C64
LDR             R2, [R11,#-0x30+var_9BC]
MOV             R3, #0
LDR             R0, [R2,#(dword_69010 - 0x68BD8)] ; mutex
LDR             R2, [R11,#-0x30+var_9D4]
STRB            R3, [R2]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_15460
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R3, [R3,#(dword_690EC - 0x68BD8)]
CMP             R3, #0
BEQ             loc_14CA4
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0xC]
CMP             R3, #1
BGT             loc_1569C

loc_14CA4
LDR             R3, [R11,#-0x30+var_9BC]
LDR             R0, [R3,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_152E4
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98

loc_14CC8
LDR             R3, [R11,#-0x30+var_9B4]
CMP             R3, #0
BEQ             loc_14CF0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
SUB             R0, R11, #-(-0x30+dest)
MOVW            R3, #0x30AA
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
SUB             R0, R0, #4
BL              sub_2CEA0

loc_14CF0
MOVW            R3, #:lower16:aSelectingPoolD ; "Selecting pool %d for work"
MOVW            R7, #:lower16:byte_68BD5
MOVT            R3, #:upper16:aSelectingPoolD ; "Selecting pool %d for work"
MOVT            R7, #:upper16:byte_68BD5
STR             R3, [R11,#-0x30+var_9D8]
BL              sub_2FD8C
STR             R0, [R11,#-0x30+var_9B4]
LDR             R0, =mutex ; mutex
BL              pthread_mutex_lock
B               loc_14E60

loc_14D18
CMP             R3, #3
LDREQ           R1, [R9]
MOVEQ           R3, #0
LDREQ           R0, [R5]
BEQ             loc_14E9C

loc_14D2C
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_14D90

loc_14D38
LDR             R3, [R11,#-0x30+var_9D0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14D6C
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14D6C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_14D90

loc_14D6C               ; format
LDR             R2, [R11,#-0x30+var_9D8]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R8]
MOV             R0, R6  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R6
MOV             R0, #7
BL              sub_20F58

loc_14D90
LDRB            R3, [R8,#0x61]
CMP             R3, #0
BNE             loc_14DA8
LDR             R3, [R8,#0x64]
CMP             R3, #1
BEQ             loc_1500C

loc_14DA8
MOV             R0, #0
BL              sub_34178
BL              sub_31FF4
LDR             R3, [R11,#-0x30+var_9BC]
MOV             R8, R0
LDR             R3, [R3,#(dword_68FD0 - 0x68BD8)]
CMP             R3, #4
BEQ             loc_152D8
CMP             R3, #3
LDREQ           R1, [R9]
MOVEQ           R3, #0
LDREQ           R0, [R5]
BEQ             loc_15164

loc_14DDC
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_14E40

loc_14DE8
LDR             R3, [R11,#-0x30+var_9D0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14E1C
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_14E1C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_14E40

loc_14E1C               ; format
LDR             R2, [R11,#-0x30+var_9D8]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R8]
MOV             R0, R6  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R6
MOV             R0, #7
BL              sub_20F58

loc_14E40
LDRB            R3, [R8,#0x61]
CMP             R3, #0
BNE             loc_14E58
LDR             R3, [R8,#0x64]
CMP             R3, #1
BEQ             loc_15294

loc_14E58
MOV             R0, #0xB
BL              sub_23B9C

loc_14E60
BL              sub_31FF4
LDR             R3, [R11,#-0x30+var_9BC]
MOV             R8, R0
LDR             R3, [R3,#(dword_68FD0 - 0x68BD8)]
CMP             R3, #4
BNE             loc_14D18
BL              sub_2B6A8
MOV             R8, R0
B               loc_14D2C

loc_14E84
LDR             R2, [R0,R3,LSL#2]
LDR             R12, [R2,#0x40]
LDR             R2, [R2,#0x3C]
CMP             R12, R2
BLT             loc_14ED8
ADD             R3, R3, #1

loc_14E9C
CMP             R3, R1
BLT             loc_14E84
MOV             R3, #0
MOV             R2, R3
B               loc_14EBC

loc_14EB0
LDR             R12, [R0,R3,LSL#2]
ADD             R3, R3, #1
STR             R2, [R12,#0x40]

loc_14EBC
CMP             R1, R3
BGT             loc_14EB0
LDR             R3, [R4,#(dword_6AB8C - 0x6ABD0)]
ADD             R3, R3, #1
CMP             R1, R3
MOVLE           R3, #0
STR             R3, [R4,#(dword_6AB8C - 0x6ABD0)]

loc_14ED8
MOV             R3, #0
MOV             R10, R5
B               loc_14F64

loc_14EE4
LDR             R3, [R10]
LDR             R1, [R4,#(dword_6AB8C - 0x6ABD0)]
LDR             R1, [R3,R1,LSL#2]
LDR             R3, [R1,#0x40]
LDR             R12, [R1,#0x3C]
ADD             R0, R3, #1
CMP             R3, R12
STR             R0, [R1,#0x40]
BGE             loc_14F44
LDRB            R3, [R1,#0x61]
CMP             R3, #0
BNE             loc_14F20
LDR             R3, [R1,#0x64]
CMP             R3, #1
BEQ             loc_152BC

loc_14F20
LDR             R3, [R11,#-0x30+var_9C8]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_14F44
MOV             R0, #0
BL              sub_2B7BC
LDR             R3, [R0,#0x40]
SUB             R3, R3, #1
STR             R3, [R0,#0x40]

loc_14F44
LDR             R3, [R4,#(dword_6AB8C - 0x6ABD0)]
LDR             R1, [R9]
ADD             R3, R3, #1
CMP             R3, R1
STR             R3, [R4,#(dword_6AB8C - 0x6ABD0)]
MOVGE           R3, #0
STRGE           R3, [R4,#(dword_6AB8C - 0x6ABD0)]
MOV             R3, R5

loc_14F64
LDR             R1, [R9]
ADD             R5, R3, #1
CMP             R3, R1
BLT             loc_14EE4
MOV             R5, R10
MOV             R10, #0
B               loc_14FC0
dbl_14F80 DCFD 32.0
dbl_14F88 DCFD 0.0
off_14F90 DCD dbl_69088
off_14F94 DCD dword_69020
off_14F98 DCD dword_69018
off_14F9C DCD stru_6907C
off_14FA0 DCD aLoadTempCutoff ; "load_temp_cutoffs"
off_14FA4 DCD aGetBenchmarkWo ; "get_benchmark_work"
off_14FA8 DCD unk_6A950
off_14FAC DCD mutex
off_14FB0 DCD stru_68FE0
off_14FB4 DCD aMain     ; "main"
off_14FB8 DCD aSignalWorkUpda ; "signal_work_update"

loc_14FBC
ADD             R10, R10, #1

loc_14FC0
LDR             R3, [R9]
CMP             R10, R3
BGE             loc_14D2C
MOV             R0, R10
BL              sub_2B7BC
LDRB            R3, [R0,#0x61]
MOV             R1, R0
CMP             R3, #0
BNE             loc_14FBC
LDR             R3, [R0,#0x64]
CMP             R3, #1
BNE             loc_14FBC
BL              sub_2B684
CMP             R0, #0
BNE             loc_14FBC
MOV             R8, R1

loc_15000
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_14D38

loc_1500C
MOV             R0, R8
BL              sub_2B684
CMP             R0, #0
BNE             loc_14DA8
LDR             R0, =mutex ; mutex
BL              pthread_mutex_unlock
LDRB            R3, [R8,#0x280]
CMP             R3, #0
BNE             loc_153C0
LDR             R0, =mutex ; mutex
BL              pthread_mutex_unlock
LDR             R3, [R11,#-0x30+var_9CC]
LDR             R3, [R3]
CMP             R3, #0
STR             R3, [R11,#-0x30+var_9D8]
BNE             loc_15324

loc_1504C
LDR             R3, [R11,#-0x30+var_9BC]
LDRB            R3, [R3,#(byte_6917C - 0x68BD8)]
CMP             R3, #0
BEQ             loc_14C54
LDR             R8, [R11,#-0x30+var_9B4]
MOVW            R1, #0x10A9
LDR             R12, =aGetBenchmarkWo ; "get_benchmark_work"
MOV             R3, #aCgminerC ; "cgminer.c"
MOV             R2, #0x20 ; ' '
VSTR            D9, [R8,#0x178]
ADD             R0, R8, #0xA0
STR             R12, [SP,#0x2A14+var_2A14]
ADD             R10, R8, #0x190
STR             R1, [SP,#0x2A14+var_2A10]
LDR             R1, =unk_6A950
BL              sub_254E8
LDR             R1, [R11,#-0x30+var_9D8]
MOV             R2, #1
LDR             R3, [R5]
MOV             R0, R10
STRB            R2, [R8,#0x11A]
STR             R1, [R8,#0xF4]
LDR             R3, [R3]
STR             R3, [R8,#0x104]
BL              sub_239A4
MOV             R1, R10
ADD             R0, R8, #0x198
BL              sub_257F8
LDRB            R3, [R7]
MOV             R2, #0x42 ; 'B'
STRB            R2, [R8,#0x1B8]
CMP             R3, #0
BEQ             loc_15138
LDR             R3, [R11,#-0x30+var_9D0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15108
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15108
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_15138

loc_15108
MOVW            LR, #:lower16:aGeneratedBench ; "Generated benchmark work"
MOV             R12, R6
MOVT            LR, #:upper16:aGeneratedBench ; "Generated benchmark work"

loc_15114
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR, {R0-R2}
STM             R12!, {R0,R1}
MOV             R1, R6
STRB            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_20F58

loc_15138
LDR             R0, [R11,#-0x30+var_9B4]
BL              sub_3D93C
MOV             R3, #0
STR             R3, [R11,#-0x30+var_9B4]
B               loc_14C54

loc_1514C
LDR             R2, [R0,R3,LSL#2]
LDR             R12, [R2,#0x40]
LDR             R2, [R2,#0x3C]
CMP             R12, R2
BLT             loc_151A0
ADD             R3, R3, #1

loc_15164
CMP             R3, R1
BLT             loc_1514C
MOV             R3, #0
MOV             R2, R3
B               loc_15184

loc_15178
LDR             R12, [R0,R3,LSL#2]
ADD             R3, R3, #1
STR             R2, [R12,#0x40]

loc_15184
CMP             R1, R3
BGT             loc_15178
LDR             R3, [R4,#(dword_6AB8C - 0x6ABD0)]
ADD             R3, R3, #1
CMP             R1, R3
MOVLE           R3, #0
STR             R3, [R4,#(dword_6AB8C - 0x6ABD0)]

loc_151A0
MOV             R3, #0
B               loc_151C8

loc_151A8
LDR             R3, [R4,#(dword_6AB8C - 0x6ABD0)]
LDR             R2, [R9]
ADD             R3, R3, #1
CMP             R3, R2
STR             R3, [R4,#(dword_6AB8C - 0x6ABD0)]
MOVGE           R3, #0
STRGE           R3, [R4,#(dword_6AB8C - 0x6ABD0)]
MOV             R3, R10

loc_151C8
LDR             R2, [R9]
ADD             R10, R3, #1
CMP             R3, R2
BGE             loc_1523C
LDR             R2, [R4,#(dword_6AB8C - 0x6ABD0)]
LDR             R3, [R5]
LDR             R1, [R3,R2,LSL#2]
LDR             R3, [R1,#0x40]
LDR             R0, [R1,#0x3C]
ADD             R2, R3, #1
CMP             R3, R0
STR             R2, [R1,#0x40]
BGE             loc_151A8
LDRB            R3, [R1,#0x61]
CMP             R3, #0
BNE             loc_15214
LDR             R3, [R1,#0x64]
CMP             R3, #1
BEQ             loc_152A8

loc_15214
LDR             R3, [R11,#-0x30+var_9C8]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_151A8
MOV             R0, #0
BL              sub_2B7BC
LDR             R3, [R0,#0x40]
SUB             R3, R3, #1
STR             R3, [R0,#0x40]
B               loc_151A8

loc_1523C
MOV             R10, #0
B               loc_15248

loc_15244
ADD             R10, R10, #1

loc_15248
LDR             R3, [R9]
CMP             R10, R3
BGE             loc_14DDC
MOV             R0, R10
BL              sub_2B7BC
LDRB            R3, [R0,#0x61]
MOV             R1, R0
CMP             R3, #0
BNE             loc_15244
LDR             R3, [R0,#0x64]
CMP             R3, #1
BNE             loc_15244
BL              sub_2B684
CMP             R0, #0
BNE             loc_15244

loc_15284
LDRB            R3, [R7]
MOV             R8, R1
CMP             R3, #0
BNE             loc_14DE8

loc_15294
MOV             R0, R8
BL              sub_2B684
CMP             R0, #0
BNE             loc_14E58
B               loc_14E60

loc_152A8
MOV             R0, R1
BL              sub_2B684
CMP             R0, #0
BNE             loc_15214
B               loc_15284

loc_152BC
MOV             R0, R1
BL              sub_2B684
CMP             R0, #0
BNE             loc_14F20
MOV             R5, R10
MOV             R8, R1
B               loc_15000

loc_152D8
BL              sub_2B6A8
MOV             R8, R0
B               loc_14DDC

loc_152E4
BL              __errno_location
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R1, =aMain ; "main"
MOVW            R12, #0x3096
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x2A14+var_2A10]

loc_15304               ; maxlen
MOV             R1, #0x800
STR             R3, [SP,#0x2A14+var_2A14]
STR             R12, [SP,#0x2A14+var_2A0C]

loc_15310
LDR             R3, [R0]
MOV             R0, R6  ; s
BL              snprintf
MOV             R1, R6
B               loc_14A60

loc_15324
LDR             R10, [R11,#-0x30+var_9B4]
MOV             R0, R10
ADD             R8, R10, #0x190
BL              sub_2EA28
LDR             R3, [R5]
MOV             R2, #1
STRB            R2, [R10,#0x11A]
MOV             R0, R8
LDR             R3, [R3]
STR             R3, [R10,#0x104]
BL              sub_239A4
MOV             R1, R8
ADD             R0, R10, #0x198
BL              sub_257F8
MOV             R3, #0x42 ; 'B'
MOV             R0, R10
STRB            R3, [R10,#0x1B8]
VMOV.F64        D0, D8
BL              sub_2B1B0
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_15138
LDR             R3, [R11,#-0x30+var_9D0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_153B0
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_153B0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_15138

loc_153B0
MOVW            LR, #:lower16:aGeneratedBench_0 ; "Generated benchfile work"
MOV             R12, R6
MOVT            LR, #:upper16:aGeneratedBench_0 ; "Generated benchfile work"
B               loc_15114

loc_153C0
MOV             R0, R8
LDR             R1, [R11,#-0x30+var_9B4]
BL              sub_360B0
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_15444
LDR             R3, [R11,#-0x30+var_9D0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1540C
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1540C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_15444

loc_1540C
MOVW            LR, #:lower16:aGeneratedStrat ; "Generated stratum work"
MOV             R12, R6
MOVT            LR, #:upper16:aGeneratedStrat ; "Generated stratum work"
LDM             LR!, {R0-R3} ; "Generated stratum work"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "m work"
STR             R0, [R12],#4
MOV             R0, #7
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R6
STRB            R3, [R12]
BL              sub_20F58

loc_15444
LDR             R0, [R11,#-0x30+var_9B4]
BL              sub_3D93C
MOV             R3, #0
LDR             R0, =mutex ; mutex
STR             R3, [R11,#-0x30+var_9B4]
BL              pthread_mutex_unlock
B               loc_14C54

loc_15460
BL              __errno_location
LDR             R1, =aMain ; "main"
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R12, #0x308B
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x2A14+var_2A10]
B               loc_15304

loc_15484
LDR             R3, [R11,#-0x30+var_9D0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_154B8
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_154B8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_154E8

loc_154B8
MOVW            LR, #:lower16:aWorkUpdateMess ; "Work update message received"
MOV             R12, R6
MOVT            LR, #:upper16:aWorkUpdateMess ; "Work update message received"
LDM             LR!, {R0-R3} ; "Work update message received"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "age received"
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             R1, R6
MOV             R0, #6
STRB            R3, [R12]
BL              sub_20F58

loc_154E8
LDR             R0, =stru_68FE0
BL              sub_239A4
MOV             R0, #stru_744A8 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_15770
LDR             R3, [R11,#-0x30+format]
MOV             R2, #1
LDR             R1, [R3]
LDR             R3, [R11,#-0x30+var_9E8]
LDR             R3, [R3]

loc_15518
CMP             R0, R1
BGE             loc_15748
LDR             R12, [R3,R0,LSL#2]
ADD             R0, R0, #1
STRB            R2, [R12,#0x3F]
B               loc_15518

loc_15530
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_15560
LDR             R3, [R11,#-0x30+var_9C0]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_15560
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #4
BLE             loc_15590

loc_15560
MOVW            LR, #:lower16:aProbingForAnAl ; "Probing for an alive pool"
MOV             R12, R6
MOVT            LR, #:upper16:aProbingForAnAl ; "Probing for an alive pool"
LDM             LR!, {R0-R3} ; "Probing for an alive pool"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "live pool"
STM             R12!, {R0,R1}
MOV             R1, R6
STRH            R2, [R12]
MOV             R0, #5
MOV             R2, #0
BL              sub_20F58

loc_15590
MOV             R4, #0
BL              sub_2B41C

loc_15598               ; seconds
MOV             R0, #1
ADD             R4, R4, R0
BL              sleep
LDR             R3, [R11,#-0x30+var_9BC]
LDRB            R3, [R3,#(byte_69170 - 0x68BD8)]
EOR             R3, R3, #1
CMP             R4, #0xB4
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
BNE             loc_15598
STR             R8, [R11,#-0x30+var_9DC]
MOVW            R7, #:lower16:aPoolDUrlSUserS ; "Pool: %d  URL: %s  User: %s  Password: "...
LDR             R8, [R11,#-0x30+var_9C0]
MOVW            R5, #:lower16:dword_67DB4
MOVT            R7, #:upper16:aPoolDUrlSUserS ; "Pool: %d  URL: %s  User: %s  Password: "...
MOVT            R5, #:upper16:dword_67DB4

loc_155DC
LDR             R2, [R11,#-0x30+var_9BC]
LDRB            R2, [R2,#(byte_69170 - 0x68BD8)]
CMP             R2, #0
BNE             loc_15A38
CMP             R3, #0
BEQ             loc_15854
MOV             R4, #byte_74488

loc_155FC
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_1580C

loc_15608
MOV             R3, #1
B               loc_155DC

loc_15610
MOV             R0, #aDup2InChildFai ; "dup2 - in child, failed to alias read e"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_15624
MOVW            LR, #:lower16:aWatchdogThread ; "watchdog thread create failed"
MOV             R12, R6
MOVT            LR, #:upper16:aWatchdogThread ; "watchdog thread create failed"
LDM             LR!, {R0-R3} ; "watchdog thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "create failed"
STM             R12!, {R0-R2}
MOV             R1, R6
MOV             R0, R8
MOV             R2, #1
STRH            R3, [R12]
BL              sub_20F58
MOV             R1, R4
MOV             R0, #1
BL              sub_2E6B0

loc_15660
MOVW            LR, #:lower16:aApiThreadCreat ; "API thread create failed"
MOV             R12, R6
MOVT            LR, #:upper16:aApiThreadCreat ; "API thread create failed"
LDM             LR!, {R0-R3} ; "API thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "e failed"
STM             R12!, {R0,R1}
MOV             R1, R6
STRB            R2, [R12]
MOV             R0, R8
MOV             R2, #1
BL              sub_20F58
MOV             R1, R7
MOV             R0, #1
BL              sub_2E6B0

loc_1569C
LDR             R7, [R11,#-0x30+var_9BC]
MOV             R0, #stru_744D0 ; cond
LDR             R1, [R7,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_cond_wait
LDR             R3, [R7,#(dword_690EC - 0x68BD8)]
CMP             R3, #0
BEQ             loc_14CA4
LDR             R3, [R3,#0x158]
LDR             R0, [R7,#(dword_69010 - 0x68BD8)] ; mutex
LDR             R7, [R3,#0xC]
BL              pthread_mutex_unlock
SUBS            R8, R0, #0
BNE             loc_152E4
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R7, #1
BLE             loc_14CC8
MOV             R0, R8
BL              sub_355FC
CMP             R0, #0
STR             R0, [R11,#-0x30+var_9B4]
BEQ             loc_14C54
SUB             R0, R11, #-(-0x30+dest)
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x30A2
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMain ; "main"
SUB             R0, R0, #4
BL              sub_2CEA0
B               loc_14C54

loc_15720
MOV             R0, #aForkFailedToFo ; "fork - failed to fork child process for"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_15734
MOV             R0, #aSignalFailedTo ; "signal - failed to edit signal mask for"...
BL              perror
MOV             R0, #1  ; status
BL              exit

loc_15748               ; rwlock
MOV             R0, #stru_744A8
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1579C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
B               loc_14C64

loc_15770
BL              __errno_location
LDR             R12, =aSignalWorkUpda ; "signal_work_update"
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x1583
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP,#0x2A14+var_2A0C]
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
MOV             R1, #0x800
B               loc_15310

loc_1579C
BL              __errno_location
LDR             R12, =aSignalWorkUpda ; "signal_work_update"
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x158A
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x2A14+var_2A0C]
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOV             R1, #0x800
B               loc_15310

loc_157C8
MOVW            LR, #:lower16:aWatchpoolThrea ; "watchpool thread create failed"
MOV             R12, R6
MOVT            LR, #:upper16:aWatchpoolThrea ; "watchpool thread create failed"
LDM             LR!, {R0-R3} ; "watchpool thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " create failed"
STM             R12!, {R0-R2}
MOV             R1, R6
MOV             LR, R3,LSR#16
MOV             R0, #3
MOV             R2, #1
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_20F58
MOV             R1, #0
MOV             R0, #1
BL              sub_2E6B0

loc_1580C
MOVW            LR, #:lower16:aNoServersCould ; "No servers could be used! Exiting."
MOV             R12, R6
MOVT            LR, #:upper16:aNoServersCould ; "No servers could be used! Exiting."
LDM             LR!, {R0-R3} ; "No servers could be used! Exiting."
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " be used! Exiting."
LDR             LR, [LR] ; "g."
STM             R12!, {R0-R3}
MOV             R1, R6
MOV             R0, #3
MOV             R2, #1
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58
MOV             R1, #0
MOV             R0, R1
BL              sub_2E6B0

loc_15854
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_15878
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_15878
LDR             R3, [R5]
CMP             R3, #2
BLE             loc_15A1C

loc_15878
MOVW            LR, #:lower16:aNoServersWereF ; "No servers were found that could be use"...
MOV             R12, R6
MOVT            LR, #:upper16:aNoServersWereF ; "No servers were found that could be use"...
LDM             LR!, {R0-R3} ; "No servers were found that could be use"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "found that could be used to get work fr"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " be used to get work from."
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "work from."
STM             R12!, {R0,R1}
MOV             R1, R6
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #3
STRB            R3, [R12]
MOV             R2, #0
BL              sub_20F58
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_158D8
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_15A1C

loc_158D8
MOVW            R1, #:lower16:aPleaseCheckThe ; "Please check the details from the list "...
MOV             R2, #0x4B ; 'K' ; n
MOVT            R1, #:upper16:aPleaseCheckThe ; "Please check the details from the list "...
MOV             R0, R6  ; dest
BL              memcpy
MOV             R2, #0
MOV             R1, R6
MOV             R0, #3
BL              sub_20F58
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_15914
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_15A28

loc_15914
MOVW            R1, #:lower16:aMostLikelyYouH ; "Most likely you have input the wrong UR"...
MOV             R2, #0x5E ; '^' ; n
MOVT            R1, #:upper16:aMostLikelyYouH ; "Most likely you have input the wrong UR"...
MOV             R0, R6  ; dest
BL              memcpy
MOV             R2, #0
MOV             R1, R6
MOV             R0, #3
BL              sub_20F58

loc_15938
MOV             R4, #0
B               loc_159B0

loc_15940
LDR             R3, [R11,#-0x30+var_9D8]
LDRB            R2, [R10]
LDR             R3, [R3]
CMP             R2, #0
LDR             R12, [R3,R4,LSL#2]
BNE             loc_15970
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_15970
LDR             R3, [R5]
CMP             R3, #3
BLE             loc_159AC

loc_15970
LDR             R0, [R12,#0xB0]
MOV             R2, R7  ; format
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
STR             R0, [SP,#0x2A14+var_2A0C]
MOV             R0, R6  ; s
LDR             LR, [R12,#0xAC]
STR             LR, [SP,#0x2A14+var_2A10]
LDR             R12, [R12,#0xA4]
STR             R12, [SP,#0x2A14+var_2A14]
BL              snprintf
MOV             R2, #0
MOV             R1, R6
MOV             R0, #4
BL              sub_20F58

loc_159AC
ADD             R4, R4, #1

loc_159B0
LDR             R3, [R9]
CMP             R3, R4
BGT             loc_15940
MOV             R4, #byte_74488
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_1580C
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_159F4
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_159F4
LDR             R3, [R5]
CMP             R3, #2
BLE             loc_15608

loc_159F4
MOVW            R1, #:lower16:aPressAnyKeyToE ; "Press any key to exit, or cgminer will "...
MOV             R2, #0x4C ; 'L' ; n
MOVT            R1, #:upper16:aPressAnyKeyToE ; "Press any key to exit, or cgminer will "...
MOV             R0, R6  ; dest
BL              memcpy
MOV             R2, #0
MOV             R1, R6
MOV             R0, #3
BL              sub_20F58
B               loc_155FC

loc_15A1C
LDR             R3, [R5]
CMP             R3, #2
BGT             loc_158D8

loc_15A28
LDR             R3, [R5]
CMP             R3, #2
BGT             loc_15914
B               loc_15938

loc_15A38
LDR             R8, [R11,#-0x30+var_9DC]
B               loc_14868
; End of function main

CODE16


; Attributes: noreturn info_from_lumina

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT _start
_start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(nullsub_10+1)
PUSH.W          {R12}   ; fini
LDR             R0, =main ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function _start

off_15A64 DCD nullsub_10+1
off_15A68 DCD main
off_15A6C DCD init+1
CODE32



; int sub_15A70()
sub_15A70
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x15A80)
LDR             R2, =(__gmon_start___ptr_0 - 0x67000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function sub_15A70

off_15A8C DCD _GLOBAL_OFFSET_TABLE_ - 0x15A80
off_15A90 DCD __gmon_start___ptr_0 - 0x67000
CODE16


; Attributes: info_from_lumina

; int deregister_tm_clones()
deregister_tm_clones
MOVW            R0, #0x8A64
MOVW            R3, #0x8A64
MOVT            R0, #6
MOVT            R3, #6
CMP             R3, R0
BEQ             locret_15AB4
MOV             R3, #0
CBZ             R3, locret_15AB4
BX              R3

locret_15AB4
BX              LR
; End of function deregister_tm_clones

ALIGN 4


; Attributes: info_from_lumina

; int register_tm_clones()
register_tm_clones
MOVW            R0, #0x8A64
MOVW            R1, #0x8A64
MOVT            R0, #6
MOVT            R1, #6
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_15AE0
MOV             R3, #0
CBZ             R3, locret_15AE0
BX              R3

locret_15AE0
BX              LR
; End of function register_tm_clones

ALIGN 4



; int sub_15AE4()
sub_15AE4
PUSH            {R4,LR}
MOV             R4, #byte_68A78
LDRB            R3, [R4]
CBNZ            R3, locret_15AFA
BL              deregister_tm_clones
MOVS            R3, #1
STRB            R3, [R4]

locret_15AFA
POP             {R4,PC}
; End of function sub_15AE4

; [00000002 BYTES: COLLAPSED FUNCTION j_register_tm_clones]
ALIGN 0x10
CODE32



; int __fastcall sub_15B00(unsigned int *, char *s)
sub_15B00
PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R0, R1  ; s
MOV             R6, R1
BL              strlen
MOV             R7, R0
LDMIB           R4, {R0,R2} ; ptr
LDR             R1, [R4]
SUB             R8, R2, R0
ADD             R3, R8, #0xC
ADD             R3, R3, R7
CMP             R1, R3
BCS             loc_15B54
ADD             R5, R1, #0x20000
CMP             R3, R5
BHI             loc_15B78

loc_15B40               ; size
MOV             R1, R5
BL              realloc
ADD             R2, R0, R8
STR             R5, [R4]
STMIB           R4, {R0,R2}

loc_15B54               ; src
MOV             R1, R6
MOV             R0, R2  ; dest
ADD             R2, R7, #1 ; n
BL              memcpy
LDR             R3, [R4,#8]
MOV             R0, #1
ADD             R7, R3, R7
STR             R7, [R4,#8]
POP             {R4-R8,PC}

loc_15B78
VMOV            S15, R3
VCVT.F32.U32    S15, S15, #0x10
VCVT.U32.F32    S15, S15
VMOV            R1, S15
ADD             R1, R1, #2
MOV             R5, R1,LSL#16
B               loc_15B40
; End of function sub_15B00




; int __fastcall sub_15B94(int, int, int, int)
sub_15B94
PUSH            {R4,LR}
CMP             R3, #0
LDR             R12, [R0,#4]
MOVNE           R3, #0
MOVWNE          R1, #0xA440
MOVWEQ          R1, #0xA450
MOVTNE          R1, #4
MOVTEQ          R1, #4  ; s
STRNE           R12, [R0,#8]
STREQ           R12, [R0,#8]
STRB            R3, [R12]
STRB            R3, [R0,#0xD]
BL              sub_15B00
MOVW            R3, #:lower16:byte_68A7C
MOV             R2, #1
MOVT            R3, #:upper16:byte_68A7C
STRB            R2, [R3]
STRB            R2, [R3,#(byte_68A7D - 0x68A7C)]
POP             {R4,PC}
; End of function sub_15B94




; int __fastcall sub_15BE0(int, int, int, int)
sub_15BE0
PUSH            {R4,LR}
CMP             R3, #0
LDR             R12, [R0,#4]
MOVNE           R3, #0
MOVWNE          R1, #0xA454
MOVWEQ          R1, #0xA468
MOVTNE          R1, #4
MOVTEQ          R1, #4  ; s
STRNE           R12, [R0,#8]
STREQ           R12, [R0,#8]
STRB            R3, [R12]
STRB            R3, [R0,#0xD]
BL              sub_15B00
MOVW            R3, #:lower16:byte_68A7C
MOV             R2, #1
MOVT            R3, #:upper16:byte_68A7C
STRB            R2, [R3]
STRB            R2, [R3,#(byte_68A7E - 0x68A7C)]
POP             {R4,PC}
; End of function sub_15BE0




; const char *__fastcall sub_15C2C(const char *s, int)
sub_15C2C

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4-R8,LR}
MOV             R5, R0
LDRB            R4, [R0]
SUB             SP, SP, #0x810
CMP             R4, #0
BEQ             loc_15CB0
MOV             R7, R1
MOV             R2, R0
MOV             R3, R4
MOV             R6, #0
B               loc_15C78

loc_15C58
CMP             R3, #0x22 ; '"'
BNE             loc_15CBC
CMP             R7, #0
BEQ             loc_15C6C

loc_15C68
ADD             R6, R6, #1

loc_15C6C
LDRB            R3, [R2,#1]!
CMP             R3, #0
BEQ             loc_15CA8

loc_15C78
CMP             R3, #0x3D ; '='
BEQ             loc_15C94
BLS             loc_15C58
CMP             R3, #0x5C ; '\'
BEQ             loc_15C68
CMP             R3, #0x7C ; '|'
BNE             loc_15C6C

loc_15C94
CMP             R7, #0
BEQ             loc_15C68

loc_15C9C
LDRB            R3, [R2,#1]!
CMP             R3, #0
BNE             loc_15C78

loc_15CA8
CMP             R6, #0
BNE             loc_15CD0

loc_15CB0
MOV             R0, R5
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_15CBC
CMP             R3, #0x2C ; ','
BNE             loc_15C6C
CMP             R7, #0
BNE             loc_15C9C
B               loc_15C68

loc_15CD0               ; s
MOV             R0, R5
ADD             R6, R6, #1
BL              strlen
ADD             R6, R0, R6
MOV             R0, R6  ; size
BL              malloc
SUBS            R8, R0, #0
BEQ             loc_15DB0

loc_15CF0
MOV             R3, R8
MOV             R12, #0x5C ; '\'
MOV             R0, #0x22 ; '"'
B               loc_15D2C

loc_15D00
CMP             R4, #0x22 ; '"'
BNE             loc_15D5C
CMP             R7, #0
ADD             R2, R3, #1
MOVNE           R1, R3
MOVNE           R3, R2
STRBNE          R12, [R1],#2
MOVNE           R2, R1
STRB            R0, [R3]
MOV             R3, R2

loc_15D28
LDRB            R4, [R5,#1]!

loc_15D2C
CMP             R4, #0
BEQ             loc_15D9C
CMP             R4, #0x3D ; '='
BEQ             loc_15D64
BLS             loc_15D00
CMP             R4, #0x5C ; '\'
BNE             loc_15D88
MOV             R2, R3
STRB            R4, [R2],#2
STRB            R4, [R3,#1]
MOV             R3, R2
B               loc_15D28

loc_15D5C
CMP             R4, #0x2C ; ','
BNE             loc_15D90

loc_15D64
CMP             R7, #0
ADD             R2, R3, #1
MOVEQ           R1, R3
MOVEQ           R3, R2
STRBEQ          R12, [R1],#2
MOVEQ           R2, R1
STRB            R4, [R3]
MOV             R3, R2
B               loc_15D28

loc_15D88
CMP             R4, #0x7C ; '|'
BEQ             loc_15D64

loc_15D90
STRB            R4, [R3]
ADD             R3, R3, #1
B               loc_15D28

loc_15D9C
MOV             R5, R8
STRB            R4, [R3]
MOV             R0, R5
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_15DB0
MOVW            R0, #:lower16:aEscapeString ; "escape_string"
MOVW            R1, #:lower16:(aSocketaApiC+8) ; "api.c"
MOV             R12, #0x344
MOVT            R0, #:upper16:aEscapeString ; "escape_string"
MOVT            R1, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aFailedToMalloc_0 ; "Failed to malloc escape buf %d in %s %s"...
MOV             R3, R6
STR             R12, [SP,#0x810+var_808]
STR             R0, [SP,#0x810+var_80C]
MOVT            R2, #:upper16:aFailedToMalloc_0 ; "Failed to malloc escape buf %d in %s %s"...
STR             R1, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_15C2C




; void sub_15E00()
sub_15E00
LDRB            R4, [R5]
B               loc_15CF0
; End of function sub_15E00




; void __fastcall sub_15E08(unsigned int *, char *s, int, _BYTE *)
sub_15E08

var_4= -4

PUSH            {R4-R6,LR}
MOV             R6, R1
LDRB            R1, [R3]
SUB             SP, SP, #8
MOV             R4, R0
CMP             R1, #0
BEQ             loc_15E84
CMP             R2, #0
STRBEQ          R2, [R3]
BNE             loc_15EE4

loc_15E30
MOV             R1, R2
MOV             R0, R6  ; s
BL              sub_15C2C
MOVW            R1, #:lower16:aCmd ; "CMD="
MOV             R5, R0
MOVT            R1, #:upper16:aCmd ; "CMD="
MOV             R0, R4  ; int
BL              sub_15B00
MOV             R1, R5  ; s
MOV             R0, R4  ; int
BL              sub_15B00
MOVW            R1, #:lower16:asc_4A4AC ; "|"
MOV             R0, R4  ; int
MOVT            R1, #:upper16:asc_4A4AC ; "|"
BL              sub_15B00
CMP             R6, R5
BEQ             loc_15EDC

loc_15E74               ; int
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R6,LR}
B               free

loc_15E84
CMP             R2, #0
BEQ             loc_15E30
MOV             R1, #(aUserS+0x10) ; s
BL              sub_15B00
MOV             R1, #1
MOV             R0, R6  ; s
BL              sub_15C2C
MOV             R5, R0

loc_15EA8
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R0, R4  ; int
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
BL              sub_15B00
MOV             R1, R5  ; s
MOV             R0, R4  ; int
BL              sub_15B00
MOVW            R1, #:lower16:(aConfig_0+8) ; "\":["
MOV             R0, R4  ; int
MOVT            R1, #:upper16:(aConfig_0+8) ; s
BL              sub_15B00
CMP             R6, R5
BNE             loc_15E74

loc_15EDC
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_15EE4
MOVW            R1, #:lower16:asc_4A4A0 ; "{"
STR             R3, [SP,#8+var_4]
MOVT            R1, #:upper16:asc_4A4A0 ; "{"
BL              sub_15B00
LDR             R3, [SP,#8+var_4]
MOV             R2, #0
MOV             R1, #1
MOV             R0, R6  ; s
STRB            R2, [R3]
BL              sub_15C2C
MOV             R5, R0
B               loc_15EA8
; End of function sub_15E08




; void sub_15F14()
sub_15F14
PUSH            {R4,LR}
MOV             R4, #byte_74500
SUB             SP, SP, #0x800
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_15F44
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_15FDC

loc_15F44
MOVW            R2, #:lower16:aExecSStart ; "<<<<<<<<<<<<<<<<<<<<exec %s start>>>>>>"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aExecSStart ; "<<<<<<<<<<<<<<<<<<<<exec %s start>>>>>>"...
MOV             R0, SP  ; s
LDR             R3, =aPoolChange ; "pool_change"
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_15F6C
BL              sub_3FE74
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_15F90
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_15FC0

loc_15F90
MOVW            R2, #:lower16:aExecSEnd ; "<<<<<<<<<<<<<<<<<<<<exec %s end>>>>>>>>"...
LDR             R3, =aPoolChange ; "pool_change"
MOV             R0, SP  ; s
MOVT            R2, #:upper16:aExecSEnd ; "<<<<<<<<<<<<<<<<<<<<exec %s end>>>>>>>>"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_15FC0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_15F90
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_15FDC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_15F6C
B               loc_15F44
; End of function sub_15F14

off_15FF4 DCD aPoolChange ; "pool_change"



; bool __fastcall sub_15FF8(const struct sockaddr *, const char **, _BYTE *)
sub_15FF8

serv= -0x44
servlen= -0x40
flags= -0x3C
buf= -0x34
var_30= -0x30
var_2C= -0x2C
var_28= -0x28
s= -0x24

PUSH            {R4-R9,LR}
MOV             R5, R0
SUB             SP, SP, #0x44
MOV             R0, #0x2E ; '.' ; size
MOV             R6, R1
MOV             R4, R2
BL              malloc
MOV             R12, #0
MOV             R2, R0  ; host
MOV             R3, #1
STR             R2, [R6]
MOV             R0, R5  ; sa
STR             R3, [SP,#0x44+flags] ; flags
STR             R12, [SP,#0x44+servlen] ; servlen
MOV             R3, #0x2E ; '.' ; hostlen
MOV             R1, #0x80 ; salen
STR             R12, [SP,#0x44+serv] ; serv
BL              getnameinfo
LDRH            R3, [R5]
CMP             R3, #2
BEQ             loc_16110
ADD             R5, SP, #0x44+buf
LDR             R1, [R6] ; cp
MOV             R2, R5  ; buf
MOV             R0, #0xA ; af
BL              inet_pton

loc_16060
BL              __ctype_toupper_loc
LDR             R2, [R0]
MOV             R3, #dword_6ACC8
LDR             R2, [R2,#0x148]
STRB            R2, [R4]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_1613C
MOV             R3, #byte_68A7C
LDR             R9, [R3,#(dword_68A84 - 0x68A7C)]
CMP             R9, #0
BLE             loc_160E8
LDR             R6, [R3,#(dword_68A80 - 0x68A7C)]
MOV             R7, #0
ADD             R6, R6, #0xF

loc_160A4
SUB             R8, R6, #0xF
MOV             R0, R5
SUB             R2, R6, #0x10
MOV             R1, R6
B               loc_160C0

loc_160B8
CMP             R2, R6
BEQ             loc_160F8

loc_160C0
LDRB            R3, [R0],#1
LDRB            LR, [R1,#1]!
LDRB            R12, [R2,#1]!
AND             R3, R3, LR
CMP             R12, R3
BEQ             loc_160B8
ADD             R7, R7, #1
ADD             R6, R6, #0x24 ; '$'
CMP             R7, R9
BNE             loc_160A4

loc_160E8
MOV             R5, #0
MOV             R0, R5
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R9,PC}

loc_160F8
LDRB            R3, [R8,#0x20]
MOV             R5, #1
STRB            R3, [R4]

loc_16104
MOV             R0, R5
ADD             SP, SP, #0x44 ; 'D'
POP             {R4-R9,PC}

loc_16110
MOVW            R1, #:lower16:aFfffS ; "::ffff:%s"
LDR             R2, [R6]
ADD             R0, SP, #0x44+s ; s
MOVT            R1, #:upper16:aFfffS ; "::ffff:%s"
ADD             R5, SP, #0x44+buf
BL              sprintf
ADD             R1, SP, #0x44+s ; cp
MOV             R2, R5  ; buf
MOV             R0, #0xA ; af
BL              inet_pton
B               loc_16060

loc_1613C
MOV             R3, #byte_767BC
LDRB            R5, [R3]
CMP             R5, #0
BNE             loc_16104
MOVW            R1, #:lower16:a127001 ; "127.0.0.1"
LDR             R0, [R6] ; s1
MOVT            R1, #:upper16:a127001 ; "127.0.0.1"
BL              strcmp
CMP             R0, #0
MOVEQ           R5, #1
BEQ             loc_16104
LDR             R3, [SP,#0x44+buf]
CMP             R3, #0
BNE             loc_16104
LDR             R3, [SP,#0x44+var_30]
CMP             R3, #0
BNE             loc_16104
LDR             R3, [SP,#0x44+var_2C]
CMP             R3, #0
LDREQ           R5, [SP,#0x44+var_28]
SUBEQ           R5, R5, #0x1000000
CLZEQ           R5, R5
MOVEQ           R5, R5,LSR#5
B               loc_16104
; End of function sub_15FF8



; Attributes: bp-based frame fpd=0x1084

; int sub_161A0()
sub_161A0

optlen= -0x111C
addr_len= -0x1118
flags= -0x1114
var_110C= -0x110C
var_1108= -0x1108
n= -0x1104
var_1100= -0x1100
var_10FC= -0x10FC
fd= -0x10F8
var_10F4= -0x10F4
var_10F0= -0x10F0
var_10EC= -0x10EC
format= -0x10E8
var_10E4= -0x10E4
var_10E0= -0x10E0
var_10D9= -0x10D9
var_10D8= -0x10D8
var_10D4= -0x10D4
pai= -0x10D0
optval= -0x10CC
var_10C8= -0x10C8
s= -0x10BC
serv= -0x10B0
req= -0x10A4
var_1004= -0x1004
var_C0C= -0xC0C
var_C04= -0xC04
var_C00= -0xC00
var_BFC= -0xBFC
var_BF8= -0xBF8
var_BF4= -0xBF4
var_80C= -0x80C
var_804= -0x804

MOVW            R2, #:lower16:aBmminer ; "bmminer-"
PUSH            {R4-R11,LR}
MOVT            R2, #:upper16:aBmminer ; "bmminer-"
SUB             SP, SP, #0x1100
SUB             SP, SP, #0x1C
MOVW            R6, #:lower16:dword_68804
LDM             R2, {R0-R2} ; "bmminer-"
ADD             R4, SP, #0x111C+var_1004
SUB             R3, R4, #0xC4
MOVT            R6, #:upper16:dword_68804
ADD             R7, SP, #0x98
STM             R3!, {R0,R1}
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
STRB            R2, [R3]
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; format
LDR             R2, [R6]
ADD             R0, SP, #0x111C+s ; s
BL              sprintf
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x111C+req ; s
BL              memset
MOVW            R0, #:lower16:off_68810 ; "224.0.0.75"
ADD             R1, SP, #0x111C+s ; service
MOVT            R0, #:upper16:off_68810 ; "224.0.0.75"
ADD             R2, SP, #0x111C+req ; req
ADD             R3, SP, #0x111C+pai ; pai
LDR             R0, [R0] ; name
BL              getaddrinfo
CMP             R0, #0
BEQ             loc_1625C
MOVW            LR, #:lower16:aInvalidApiMult ; "Invalid API Multicast Address"
ADD             R9, SP, #0x111C+var_80C
MOVT            LR, #:upper16:aInvalidApiMult ; "Invalid API Multicast Address"
ADD             R9, R9, #8
LDM             LR!, {R0-R3} ; "Invalid API Multicast Address"
MOV             R12, R9
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "icast Address"
STM             R12!, {R0-R2}
MOV             R0, #3
MOV             R1, R9
MOV             R2, #1
STRH            R3, [R12]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_1625C
LDR             R5, [R4,#-0xCC]
CMP             R5, #0
BEQ             loc_1636C
MOV             R3, R5
B               loc_16280

loc_16270
LDR             R5, [R5,#0x1C]
CMP             R5, #0
BEQ             loc_16360
LDR             R3, [R4,#-0xCC]

loc_16280               ; domain
LDR             R0, [R3,#4]
MOV             R2, #0  ; protocol
MOV             R1, #2  ; type
BL              socket
CMP             R0, #0
BLE             loc_16270
MOV             R11, R0

loc_1629C
MOV             R12, #1
MOV             R3, #4
STR             R3, [SP,#0x111C+optlen] ; optlen
MOV             R1, R12 ; level
ADD             R3, SP, #0x111C+optval ; optval
MOV             R2, #2  ; optname
MOV             R0, R11 ; fd
STR             R12, [R4,#-0xC8]
BL              setsockopt
CMP             R0, #0
BGE             loc_163BC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16304
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16304
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1634C

loc_16304
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R1, #:lower16:aApiMulticastLi ; " - API multicast listener will not be a"...
MOVW            R2, #:lower16:aApiMcastSetsoc ; "API mcast setsockopt SO_REUSEADDR faile"...
MOVT            R1, #:upper16:aApiMulticastLi ; " - API multicast listener will not be a"...
MOV             R3, R0
ADD             R0, SP, #0x111C+var_80C
STR             R1, [SP,#0x111C+optlen]
ADD             R0, R0, #8 ; s
MOVT            R2, #:upper16:aApiMcastSetsoc ; "API mcast setsockopt SO_REUSEADDR faile"...
MOV             R1, #0x800 ; maxlen
BL              snprintf

loc_16338
ADD             R1, SP, #0x111C+var_80C
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #3
BL              sub_20F58

loc_1634C               ; fd
MOV             R0, R11
BL              close
ADD             SP, SP, #0x1100
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_16360
CMN             R0, #1
MOV             R11, R0
BNE             loc_1629C

loc_1636C               ; ai
LDR             R0, [R4,#-0xCC]
ADD             R9, SP, #0x111C+var_80C
BL              freeaddrinfo
MOVW            R12, #:lower16:aApiMcastCouldN ; "API mcast could not open socket"
ADD             R9, R9, #8
MOVT            R12, #:upper16:aApiMcastCouldN ; "API mcast could not open socket"
MOV             LR, R9
LDM             R12!, {R0-R3} ; "API mcast could not open socket"
MOV             R5, #0
MOV             R11, #0xFFFFFFFF
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; "not open socket"
STM             LR, {R0-R3}
MOV             R1, R9
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1629C

loc_163BC               ; timer
MOV             R0, #0
BL              time
MOV             R9, R0
B               loc_163F8

loc_163CC
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R8, R0
MOV             R0, #0  ; timer
BL              time
SUB             R3, R0, R9
MOVW            R0, #0x7530
CMP             R3, #0x3D ; '='
BGT             loc_16740
BL              sub_23B9C

loc_163F8               ; len
LDR             R2, [R5,#0x10]
MOV             R0, R11 ; fd
LDR             R1, [R5,#0x14] ; addr
BL              bind
CMP             R0, #0
BLT             loc_163CC
LDR             R3, [R5,#4]
CMP             R3, #2
BEQ             loc_16C2C
CMP             R3, #0xA
BNE             loc_16C1C
LDR             R3, [R5,#0x14]
ADD             R2, SP, #0x111C+var_C0C
ADD             R2, R2, #8
MOV             LR, #0x14
MOV             R6, R2
STR             R2, [SP,#0x111C+var_10F4]
LDR             R0, [R3,#8]!
MOV             R12, R2
MOV             R5, #0
LDR             R1, [R3,#4]
LDR             R2, [R3,#8]
LDR             R3, [R3,#0xC]
STR             LR, [SP,#0x111C+optlen] ; optlen
STM             R12!, {R0-R3}
MOV             R3, R6  ; optval
MOV             R2, LR  ; optname
MOV             R1, #0x29 ; ')' ; level
MOV             R0, R11 ; fd
STR             R5, [SP,#0x111C+var_BF4]
BL              setsockopt
CMP             R0, R5
BLT             loc_16CCC

loc_1647C
MOVW            R5, #:lower16:off_6880C ; "FTW"
LDR             R0, [R4,#-0xCC] ; ai
MOVT            R5, #:upper16:off_6880C ; "FTW"
BL              freeaddrinfo
LDR             R3, [R5] ; "FTW" ...
MOV             R0, R3  ; s
STR             R3, [SP,#0x111C+var_110C]
BL              strlen
ADD             R10, R0, #0xA
ADD             R3, R0, #9
MOV             R0, R10 ; size
STR             R3, [SP,#0x111C+n]
BL              malloc
SUBS            R3, R0, #0
STR             R3, [SP,#0x111C+var_10FC]
BEQ             loc_16D0C
LDR             R3, [SP,#0x111C+var_110C]
ADD             R9, SP, #0x111C+var_80C
ADD             R9, R9, #8

loc_164C8
MOVW            R1, #:lower16:byte_74500
MOVW            R0, #:lower16:byte_68BD4
MOVT            R1, #:upper16:byte_74500
MOVT            R0, #:upper16:byte_68BD4
STR             R1, [SP,#0x111C+var_110C]
MOV             R1, #aApiMcastSendRe ; "API mcast send reply (%s) succeeded (%d"...
MOVW            R12, #:lower16:dword_67DB4
STR             R1, [SP,#0x111C+var_10E4]
MOV             R1, #aApiMcastSendRe_0 ; "API mcast send reply failed (%s) (%d)"
MOVW            LR, #:lower16:dword_68818
MOVW            R5, #:lower16:off_68808 ; ""
MOVW            R6, #:lower16:aCgmFtwDS ; "cgm-FTW-%d-%s"
MOVW            R2, #:lower16:aSS_0 ; "%s%s-"
STR             R1, [SP,#0x111C+var_10E0]
MOV             R1, #0xFFFFFFFF
MOVT            R6, #:upper16:aCgmFtwDS ; "cgm-FTW-%d-%s"
MOVW            R8, #:lower16:byte_68BD5
STR             R0, [SP,#0x111C+var_1108]
MOVT            R12, #:upper16:dword_67DB4
MOVT            LR, #:upper16:dword_68818
MOVT            R5, #:upper16:off_68808 ; ""
STR             R1, [SP,#0x111C+fd]
STR             R3, [SP,#0x111C+optlen]
MOV             R1, R10 ; maxlen
ADD             R3, SP, #0x111C+var_10C8
MOVT            R2, #:upper16:aSS_0 ; "%s%s-"
LDR             R0, [SP,#0x111C+var_10FC] ; s
MOVT            R8, #:upper16:byte_68BD5
STR             R6, [SP,#0x111C+format]
MOV             R6, #0
STR             R12, [SP,#0x111C+var_1100]
STR             LR, [SP,#0x111C+var_10F0]
STR             R5, [SP,#0x111C+var_10EC]
BL              snprintf

loc_16558
MOV             R0, #0x3E8
ADD             R6, R6, #1
BL              sub_23B9C
ADD             R3, SP, #0x111C+var_10D8
MOV             R12, #0x80
STR             R3, [SP,#0x111C+addr_len] ; addr_len
MOVW            R2, #0x3FF ; n
STR             R7, [SP,#0x111C+optlen] ; addr
MOV             R3, #0  ; flags
MOV             R1, R4  ; buf
MOV             R0, R11 ; fd
STR             R12, [R4,#-0xD4]
BL              recvfrom
SUBS            R5, R0, #0
BLT             loc_167AC
ADD             R2, SP, #0x111C+var_10D9
ADD             R1, SP, #0x111C+var_10D4
MOV             R0, R7
BL              sub_15FF8
LDRB            R3, [R8]
MOV             R10, R0
CMP             R3, #0
BEQ             loc_16628
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_165E4
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_165E4
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_16628

loc_165E4
MOVW            R0, #:lower16:aAccepted ; "Accepted"
CMP             R10, #0
MOVT            R0, #:upper16:aAccepted ; "Accepted"
MOV             R1, #aIgnored ; "Ignored"
MOVW            R2, #:lower16:aApiMcastFromSS ; "API mcast from %s - %s"
MOVNE           R1, R0
LDR             R3, [R4,#-0xD0]
MOVT            R2, #:upper16:aApiMcastFromSS ; "API mcast from %s - %s"
STR             R1, [SP,#0x111C+optlen]
MOV             R0, R9  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_20F58

loc_16628
CMP             R10, #0
BEQ             loc_16558
CMP             R5, #0
MOV             R3, #0
STRB            R3, [R4,R5]
LDR             R1, [R4,#-0xD4] ; salen
BEQ             loc_16824
SUB             R2, R5, #1
ADD             R12, SP, #0x111C+serv
LDRB            R0, [R4,R2]
CMP             R0, #0xA
MOV             R0, #1
STRBEQ          R3, [R4,R2]
MOVEQ           R5, R2
MOV             R3, #0  ; hostlen
MOV             R2, #0xA
STR             R0, [SP,#0x111C+flags] ; flags
MOV             R0, R7  ; sa
STR             R2, [SP,#0x111C+addr_len] ; servlen
MOV             R2, R3  ; host
STR             R12, [SP,#0x111C+optlen] ; serv
BL              getnameinfo
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_16858
LDR             R3, [SP,#0x111C+n]
CMP             R3, R5
BCS             loc_16558
MOV             R2, R3  ; n
LDR             R1, [SP,#0x111C+var_10FC] ; s2
MOV             R0, R4  ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_16558

loc_166B0
LDR             R3, [SP,#0x111C+n]
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
ADD             R5, R4, R3
MOV             R0, R5  ; nptr
BL              strtol
MOVW            R3, #0xFFFE
SUB             R2, R0, #1
CMP             R2, R3
LDRB            R3, [R8]
BLS             loc_16958
CMP             R3, #0
BEQ             loc_16558
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16714
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16714
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_16558

loc_16714
MOVW            R2, #:lower16:aApiMcastReques_0 ; "API mcast request ignored - invalid por"...
MOV             R3, R5
MOVT            R2, #:upper16:aApiMcastReques_0 ; "API mcast request ignored - invalid por"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_20F58
B               loc_16558

loc_16740
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1677C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1677C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1634C

loc_1677C
MOVW            R1, #:lower16:aApiMulticastLi ; " - API multicast listener will not be a"...
ADD             R0, SP, #0x111C+var_80C
MOVT            R1, #:upper16:aApiMulticastLi ; " - API multicast listener will not be a"...
MOVW            R2, #:lower16:aApiMcastBindTo ; "API mcast bind to port %d failed (%s)%s"
LDR             R3, [R6]
MOVT            R2, #:upper16:aApiMcastBindTo ; "API mcast bind to port %d failed (%s)%s"
STR             R1, [SP,#0x111C+addr_len]
ADD             R0, R0, #8 ; s
STR             R8, [SP,#0x111C+optlen]
MOV             R1, #0x800 ; maxlen
BL              snprintf
B               loc_16338

loc_167AC
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_16558
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_167E8
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_167E8
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_16558

loc_167E8
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R2, #:lower16:aApiMcastFailed ; "API mcast failed count=%d (%s) (%d)"
STMEA           SP, {R0,R11}
MOVT            R2, #:upper16:aApiMcastFailed ; "API mcast failed count=%d (%s) (%d)"
MOV             R3, R6
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_20F58
B               loc_16558

loc_16824
MOV             R3, #1
MOV             R2, #0xA
ADD             R0, SP, #0x111C+serv
STR             R3, [SP,#0x111C+flags] ; flags
STR             R0, [SP,#0x111C+optlen] ; serv
MOV             R3, R5  ; hostlen
STR             R2, [SP,#0x111C+addr_len] ; servlen
MOV             R0, R7  ; sa
MOV             R2, R5  ; host
BL              getnameinfo
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_16558

loc_16858
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16888
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16888
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_168C4

loc_16888
LDR             R1, [R4,#-0xD0]
ADD             R3, SP, #0x111C+serv
MOVW            R2, #:lower16:aApiMcastReques_1 ; "API mcast request rep=%d (%s) from [%s]"...
STR             R3, [SP,#0x111C+flags]
MOVT            R2, #:upper16:aApiMcastReques_1 ; "API mcast request rep=%d (%s) from [%s]"...
STR             R4, [SP,#0x111C+optlen]
STR             R1, [SP,#0x111C+addr_len]
MOV             R3, R5
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_20F58

loc_168C4
LDR             R3, [SP,#0x111C+n]
CMP             R3, R5
BCS             loc_168E8
MOV             R2, R3  ; n
LDR             R1, [SP,#0x111C+var_10FC] ; s2
MOV             R0, R4  ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_166B0

loc_168E8
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_16558
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16924
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16924
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_16558

loc_16924
MOVW            LR, #:lower16:aApiMcastReques ; "API mcast request was no good"
MOV             R12, R9
MOVT            LR, #:upper16:aApiMcastReques ; "API mcast request was no good"
LDM             LR!, {R0-R3} ; "API mcast request was no good"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "t was no good"
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
STRH            R3, [R12]
BL              sub_20F58
B               loc_16558

loc_16958
CMP             R3, #0
BEQ             loc_169BC
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16990
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16990
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_169BC

loc_16990
MOVW            R2, #:lower16:aApiMcastReques_2 ; "API mcast request OK port %s=%d"
STR             R0, [SP,#0x111C+optlen]
MOVT            R2, #:upper16:aApiMcastReques_2 ; "API mcast request OK port %s=%d"
MOV             R1, #0x800 ; maxlen
MOV             R3, R5
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_20F58

loc_169BC               ; service
MOV             R1, R5
ADD             R3, SP, #0x111C+pai ; pai
ADD             R2, SP, #0x111C+req ; req
LDR             R0, [R4,#-0xD0] ; name
BL              getaddrinfo
CMP             R0, #0
BEQ             loc_16A34
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16A08
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16A08
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_16558

loc_16A08
LDR             R3, [R4,#-0xD0]
MOV             R2, #aInvalidClientA ; "Invalid client address %s"

loc_16A14               ; maxlen
MOV             R1, #0x800
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #3
BL              sub_20F58
B               loc_16558

loc_16A34
LDR             R5, [R4,#-0xCC]
CMP             R5, #0
BEQ             loc_16A74
MOV             R3, R5
B               loc_16A58

loc_16A48
LDR             R5, [R5,#0x1C]
CMP             R5, #0
BEQ             loc_16A70
LDR             R3, [R4,#-0xCC]

loc_16A58               ; domain
LDR             R0, [R3,#4]
MOV             R2, #0  ; protocol
MOV             R1, #2  ; type
BL              socket
CMP             R11, #0
BLE             loc_16A48

loc_16A70
STR             R0, [SP,#0x111C+fd]

loc_16A74
LDR             R3, [SP,#0x111C+fd]
CMN             R3, #1
BEQ             loc_16BD4
LDR             R1, [SP,#0x111C+var_10EC]
LDR             R10, [SP,#0x111C+var_10F4]
LDR             R3, [SP,#0x111C+var_10F0]
LDR             R12, [R1] ; ""
MOV             R1, #0x400 ; maxlen
LDR             R2, [SP,#0x111C+format] ; format
MOV             R0, R10 ; s
LDR             R3, [R3]
STR             R12, [SP,#0x111C+optlen]
BL              snprintf
MOV             R0, R10 ; s
BL              strlen
LDR             LR, [R5,#0x14]
ADD             R2, R0, #1 ; n
LDR             R12, [R5,#0x10]
MOV             R3, #0  ; flags
MOV             R1, R10 ; buf
LDR             R0, [SP,#0x111C+fd] ; fd
STR             LR, [SP,#0x111C+optlen] ; addr
STR             R12, [SP,#0x111C+addr_len] ; addr_len
BL              sendto
MOV             R5, R0
LDR             R0, [R4,#-0xCC] ; ai
BL              freeaddrinfo
CMP             R5, #0
LDRB            R3, [R8]
BLT             loc_16B60
CMP             R3, #0
BEQ             loc_16B54
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16B24
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16B24
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_16B54

loc_16B24
LDR             R3, [SP,#0x111C+fd]
MOV             R1, #0x800 ; maxlen
LDR             R2, [SP,#0x111C+var_10E4] ; format
MOV             R0, R9  ; s
STR             R5, [SP,#0x111C+optlen]
STR             R3, [SP,#0x111C+addr_len]
LDR             R3, [SP,#0x111C+var_10F4]
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_20F58

loc_16B54               ; fd
LDR             R0, [SP,#0x111C+fd]
BL              close
B               loc_16558

loc_16B60
CMP             R3, #0
BEQ             loc_16B54
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16B98
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16B98
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_16B54

loc_16B98
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
LDR             R3, [SP,#0x111C+fd]
MOV             R1, #0x800 ; maxlen
LDR             R2, [SP,#0x111C+var_10E0] ; format
STR             R3, [SP,#0x111C+optlen]
MOV             R3, R0
MOV             R0, R9  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R9
MOV             R0, #7
BL              sub_20F58
B               loc_16B54

loc_16BD4               ; ai
LDR             R0, [R4,#-0xCC]
BL              freeaddrinfo
LDR             R3, [SP,#0x111C+var_110C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16C0C
LDR             R3, [SP,#0x111C+var_1108]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16C0C
LDR             R3, [SP,#0x111C+var_1100]
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_16558

loc_16C0C
MOVW            R2, #:lower16:aApiMcastCouldN_0 ; "API mcast could not open socket to clie"...
LDR             R3, [R4,#-0xD0]
MOVT            R2, #:upper16:aApiMcastCouldN_0 ; "API mcast could not open socket to clie"...
B               loc_16A14

loc_16C1C
ADD             R3, SP, #0x111C+var_C0C
ADD             R3, R3, #8
STR             R3, [SP,#0x111C+var_10F4]
B               loc_1647C

loc_16C2C               ; level
MOV             R1, #0
MOV             LR, #8
STR             R1, [SP,#0x111C+var_C04]
ADD             R3, SP, #0x111C+var_C0C
STR             R1, [SP,#0x111C+var_C00]
ADD             R3, R3, #8 ; optval
LDR             R12, [R5,#0x14]
MOV             R2, #0x23 ; '#' ; optname
MOV             R0, R11 ; fd
STR             R3, [SP,#0x111C+var_10F4]
LDR             R12, [R12,#4]
STR             LR, [SP,#0x111C+optlen] ; optlen
STR             R12, [SP,#0x111C+var_C04]
BL              setsockopt
CMP             R0, #0
BGE             loc_1647C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16C94
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_16CF4

loc_16C94
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R1, #:lower16:aApiMulticastLi ; " - API multicast listener will not be a"...
MOV             R3, R0
MOVT            R1, #:upper16:aApiMulticastLi ; " - API multicast listener will not be a"...
ADD             R0, SP, #0x111C+var_80C
MOVW            R2, #:lower16:aApiMcastJoinFa ; "API mcast join failed (%s)%s"
STR             R1, [SP,#0x111C+optlen]
MOVT            R2, #:upper16:aApiMcastJoinFa ; "API mcast join failed (%s)%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #8 ; s
BL              snprintf
B               loc_16338

loc_16CCC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, R5
BNE             loc_16C94
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R5
BNE             loc_16C94

loc_16CF4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_16C94
B               loc_1634C

loc_16D0C
MOVW            LR, #:lower16:aFailedToMalloc_2 ; "Failed to malloc mcast expect_code"
ADD             R9, SP, #0x111C+var_80C
MOVT            LR, #:upper16:aFailedToMalloc_2 ; "Failed to malloc mcast expect_code"
ADD             R9, R9, #8
LDM             LR!, {R0-R3} ; "Failed to malloc mcast expect_code"
MOV             R12, R9
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " mcast expect_code"
LDR             LR, [LR] ; "de"
STM             R12!, {R0-R3}
MOV             R1, R9
MOV             R2, #1
MOV             R0, #3
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_161A0




; void sub_16D58()
sub_16D58
LDR             R3, [R5]
B               loc_164C8
; End of function sub_16D58




; int __fastcall sub_16D60(int)
sub_16D60
PUSH            {R4,LR}
MOV             R4, R0
BL              pthread_self
BL              pthread_detach
MOV             R1, #0  ; oldtype
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOV             R0, #aApimcast ; "APIMcast"
BL              sub_250A8
BL              sub_161A0
MOV             R0, #0
STR             R0, [R4,#0xC]
POP             {R4,PC}
; End of function sub_16D60




; int __fastcall sub_16D98(int result, int)
sub_16D98
PUSH            {R4-R6,LR}
MOV             R4, R0
LDRB            R3, [R0,#0xD]
MOV             R5, R1
CMP             R3, #0
BNE             loc_16DDC
CMP             R5, #0
POPEQ           {R4-R6,PC}

loc_16DB8
MOVW            R1, #:lower16:aId1 ; ",\"id\":1}"
MOV             R0, R4  ; int
MOVT            R1, #:upper16:aId1 ; ",\"id\":1}"
BL              sub_15B00
MOVW            R1, #:lower16:word_5616C
MOV             R0, R4  ; int
MOVT            R1, #:upper16:word_5616C ; s
POP             {R4-R6,LR}
B               sub_15B00

loc_16DDC               ; s
MOV             R1, #word_5616C
BL              sub_15B00
MOV             R3, #0
CMP             R5, #0
STRB            R3, [R4,#0xD]
POPEQ           {R4-R6,PC}
B               loc_16DB8
; End of function sub_16D98




; void *__fastcall sub_16DFC(char ***, char *s)
sub_16DFC

var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4-R10,LR}
SUB             SP, SP, #0x810
LDR             R5, [R0]
SUB             SP, SP, #8
MOV             R6, R0
MOV             R0, R1  ; s
MOV             R8, R1
BL              strlen
LDR             R7, [R5,#4]
MOV             R4, R0
LDR             R1, [R5,#8]
ADD             R9, R0, #1
LDR             R5, [R5]
ADD             R3, R7, #1
ADD             R3, R3, R0
CMP             R3, R1
BHI             loc_16E6C

loc_16E40               ; n
MOV             R2, R9
MOV             R1, R8  ; src
ADD             R0, R5, R7 ; dest
BL              memcpy
LDR             R2, [R6]
LDR             R3, [R2,#4]
ADD             R4, R3, R4
STR             R4, [R2,#4]
ADD             SP, SP, #0x810
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_16E6C
ADD             R3, R0, #0x1000
UBFX            R10, R9, #0, #0xC
ADD             R3, R3, #1
MOV             R0, R5  ; ptr
SUB             R10, R3, R10
ADD             R1, R1, R10 ; size
BL              realloc
LDR             R3, [R6]
CMP             R0, #0
MOV             R5, R0
STR             R0, [R3]
BEQ             loc_16EB0

loc_16E9C
LDR             R2, [R6]
LDR             R3, [R2,#8]
ADD             R10, R3, R10
STR             R10, [R2,#8]
B               loc_16E40

loc_16EB0
LDR             R1, [R6]
MOVW            R3, #:lower16:(aSocketaApiC+8) ; "api.c"
LDR             R2, =aAddItemBuf ; "add_item_buf"
MOVT            R3, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVW            R0, #0x498
STR             R3, [SP,#0x818+var_810]
STR             R0, [SP,#0x818+var_808]
MOV             R3, R4
STR             R2, [SP,#0x818+var_80C]
MOVW            R2, #:lower16:aOomBufSizDTotD ; "OOM buf siz=%d tot=%d ext=%d in %s %s()"...
STR             R10, [SP,#0x818+var_814]
ADD             R0, SP, #0x818+s ; s
LDR             R12, [R1,#8]
MOVT            R2, #:upper16:aOomBufSizDTotD ; "OOM buf siz=%d tot=%d ext=%d in %s %s()"...
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x818+var_818]
BL              snprintf
ADD             R1, SP, #0x818+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_16DFC

B               loc_16E9C
off_16F10 DCD aAddItemBuf ; "add_item_buf"



; void __fastcall sub_16F14(const char *, int, int, int)
sub_16F14

timeout= -0x8A4
var_8A0= -0x8A0
var_89C= -0x89C
var_898= -0x898
var_894= -0x894
var_890= -0x890
var_88C= -0x88C
writefds= -0x884
s= -0x804
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x8A0
MOV             R5, R1
SUB             SP, SP, #4
MOV             R4, R3
MOV             R6, R2
MOV             R9, R0
BL              strlen
CMP             R5, #0
MOV             R2, R0
MOVWNE          R3, #:lower16:word_5616C
ADDNE           R2, R0, #1
MOVTNE          R3, #:upper16:word_5616C
LDRHNE          R3, [R3]
STRHNE          R3, [R9,R0]
CMP             R4, #0
BEQ             loc_16F84
MOVW            R3, #:lower16:aId1 ; ",\"id\":1}"
ADD             R12, R9, R2
MOVT            R3, #:upper16:aId1 ; ",\"id\":1}"
LDM             R3!, {R0,R1} ; ",\"id\":1}"
LDRB            R3, [R3] ; ""
STR             R0, [R9,R2]
MOV             R0, R9  ; s
STR             R1, [R12,#4]
STRB            R3, [R12,#8]
BL              strlen
MOV             R2, R0

loc_16F84
MOVW            R11, #:lower16:byte_68BD5
ADD             R3, R2, #1
MOVT            R11, #:upper16:byte_68BD5
STR             R3, [SP,#0x8A4+var_894]
LDRB            R3, [R11]
CMP             R3, #0
BEQ             loc_16FFC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1727C

loc_16FB4
MOVW            R1, #:lower16:word_4A834
CMP             R2, #0xA
MOVT            R1, #:upper16:word_4A834
MOV             R3, #(asc_4D5C4+4) ; ""
MOVW            R2, #:lower16:aApiSendReplyD1 ; "API: send reply: (%d) '%.10s%s'"
MOVHI           R3, R1
MOVT            R2, #:upper16:aApiSendReplyD1 ; "API: send reply: (%d) '%.10s%s'"
STR             R3, [SP,#0x8A4+var_8A0]
MOV             R1, #0x800 ; maxlen
STR             R9, [SP,#0x8A4+timeout]
ADD             R0, SP, #0x8A4+s ; s
LDR             R3, [SP,#0x8A4+var_894]
BL              snprintf
ADD             R1, SP, #0x8A4+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_16FFC
CMP             R6, #0
ADD             R3, R6, #0x1F
MOVGE           R3, R6
RSBS            R1, R6, #0
MOV             R3, R3,ASR#5
AND             R1, R1, #0x1F
LDR             R5, [SP,#0x8A4+var_894]
AND             R2, R6, #0x1F
MOV             R0, #1
RSBPL           R2, R1, #0
MOV             R7, #0
STR             R3, [SP,#0x8A4+var_89C]
MOV             R2, R0,LSL R2
MOVW            R3, #:lower16:byte_74500
MOV             R10, R7
ADD             R4, SP, #0x8A4+writefds.__fds_bits+0x7C
MOVT            R3, #:upper16:byte_74500
STR             R2, [SP,#0x8A4+var_898]
STR             R3, [SP,#0x8A4+var_890]

loc_17048
CMP             R10, #4
MOVLE           R3, #1
MOVGT           R3, #0
CMP             R5, #0
MOVLE           R3, #0
CMP             R3, #0
BEQ             loc_171F8
MOV             R1, #0
ADD             R3, SP, #0x8A4+var_88C.tv_usec
MOV             R2, R1
STR             R1, [SP,#0x8A4+var_88C]
MOVW            R1, #0xC350
STR             R1, [SP,#0x8A4+var_88C.tv_usec]

loc_1707C
STR             R2, [R3,#4]!
CMP             R4, R3
BNE             loc_1707C
LDR             R2, [SP,#0x8A4+var_89C]
ADD             R3, SP, #0x8A4+var_4
LDR             R8, [SP,#0x8A4+var_898]
ADD             R0, R6, #1 ; nfds
ADD             LR, R3, R2,LSL#2
ADD             R2, SP, #0x8A4+var_88C
STR             R2, [SP,#0x8A4+timeout] ; timeout
MOV             R3, #0  ; exceptfds
LDR             R12, [LR,#-0x880]
MOV             R1, R3  ; readfds
ADD             R2, SP, #0x8A4+writefds ; writefds
ORR             R12, R12, R8
STR             R12, [LR,#-0x880]
BL              select
CMP             R0, #0
BLE             loc_17398
MOV             R3, #0  ; flags
MOV             R2, R5  ; n
MOV             R1, R9  ; buf
MOV             R0, R6  ; fd
BL              send
SUBS            R8, R0, #0
ADD             R7, R7, #1
BLT             loc_17170
CMP             R7, #1
LDRB            R3, [R11]
BEQ             loc_17204
CMP             R5, R8
BEQ             loc_17308
CMP             R3, #0
BEQ             loc_17158
LDR             R3, [SP,#0x8A4+var_890]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17128
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_17380

loc_17128
MOVW            R2, #:lower16:aApiSentDOfRema ; "API: sent %d of remaining %d (sendc=%d)"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aApiSentDOfRema ; "API: sent %d of remaining %d (sendc=%d)"
STR             R7, [SP,#0x8A4+var_8A0]
ADD             R0, SP, #0x8A4+s ; s
STR             R5, [SP,#0x8A4+timeout]
MOV             R3, R8
BL              snprintf
ADD             R1, SP, #0x8A4+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_17158
CMP             R8, #0
SUB             R5, R5, R8
ADD             R9, R9, R8
BNE             loc_17048

loc_17168
ADD             R10, R10, #1
B               loc_17048

loc_17170
BL              __errno_location
LDR             R0, [R0] ; errnum
CMP             R0, #0xB
BEQ             loc_17168
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_171BC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_171BC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_171F8

loc_171BC
LDR             R4, [SP,#0x8A4+var_894]
BL              strerror
MOVW            R2, #:lower16:aApiSendDDFaile ; "API: send (%d:%d) failed: %s"
STR             R0, [SP,#0x8A4+var_8A0]
SUB             R5, R4, R5
MOVT            R2, #:upper16:aApiSendDDFaile ; "API: send (%d:%d) failed: %s"
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
STR             R5, [SP,#0x8A4+timeout]
ADD             R0, SP, #0x8A4+s ; s
BL              snprintf
ADD             R1, SP, #0x8A4+s
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_171F8
ADD             SP, SP, #0x8A0
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_17204
CMP             R5, R8
BEQ             loc_172A8
CMP             R3, #0
BEQ             loc_17158
LDR             R3, [SP,#0x8A4+var_890]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1724C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1724C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_17158

loc_1724C
MOVW            R2, #:lower16:aApiSentDOfDFir ; "API: sent %d of %d first go"
STR             R5, [SP,#0x8A4+timeout]
ADD             R0, SP, #0x8A4+s ; s
MOVT            R2, #:upper16:aApiSentDOfDFir ; "API: sent %d of %d first go"
MOV             R3, R8
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x8A4+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_17158

loc_1727C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_16FB4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_16FFC
B               loc_16FB4

loc_172A8
CMP             R3, #0
BEQ             loc_172FC
LDR             R3, [SP,#0x8A4+var_890]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_172D4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_17408

loc_172D4
MOVW            R2, #:lower16:aApiSentAllOfDF ; "API: sent all of %d first go"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aApiSentAllOfDF ; "API: sent all of %d first go"
ADD             R0, SP, #0x8A4+s ; s
MOV             R3, R5
BL              snprintf
ADD             R1, SP, #0x8A4+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_172FC
SUB             R5, R5, R8
ADD             R9, R9, R8
B               loc_17048

loc_17308
CMP             R3, #0
BEQ             loc_172FC
LDR             R3, [SP,#0x8A4+var_890]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17348
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17348
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_172FC

loc_17348
MOVW            R2, #:lower16:aApiSentAllOfRe ; "API: sent all of remaining %d (sendc=%d"...
MOV             R3, R5
MOVT            R2, #:upper16:aApiSentAllOfRe ; "API: sent all of remaining %d (sendc=%d"...
MOV             R1, #0x800 ; maxlen
STR             R7, [SP,#0x8A4+timeout]
ADD             R0, SP, #0x8A4+s ; s
BL              snprintf
ADD             R1, SP, #0x8A4+s
MOV             R2, #0
MOV             R0, #7
SUB             R5, R5, R8
BL              sub_20F58
ADD             R9, R9, R8
B               loc_17048

loc_17380
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_17158
B               loc_17128

loc_17398
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_173D4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_173D4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_171F8

loc_173D4
MOVW            R2, #:lower16:aApiSendSelectF ; "API: send select failed (%d)"
MOV             R3, R0
MOVT            R2, #:upper16:aApiSendSelectF ; "API: send select failed (%d)"
ADD             R0, SP, #0x8A4+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x8A4+s
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
ADD             SP, SP, #0x8A0
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_17408
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_172FC
B               loc_172D4
; End of function sub_16F14




; int __fastcall sub_17420(unsigned __int8 **, int *)
sub_17420
LDR             R2, [R0]
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_17478
B               loc_17488

loc_17434
CMP             R3, #0x5C ; '\'
MOV             R3, R2
BNE             loc_1744C
LDRB            R12, [R2,#1]
CMP             R12, #0
ADDNE           R3, R2, #1

loc_1744C
ADD             R2, R3, #1
STR             R2, [R0]
LDR             R2, [R1]
ADD             R12, R2, #1
STR             R12, [R1]
LDRB            R3, [R3]
STRB            R3, [R2]
LDR             R2, [R0]
LDRB            R3, [R2]
CMP             R3, #0
BEQ             loc_17488

loc_17478
CMP             R3, #0x2C ; ','
BNE             loc_17434
ADD             R2, R2, #1
STR             R2, [R0]

loc_17488
LDR             R3, [R1]
MOV             R2, #0
ADD             R0, R3, #1
STR             R0, [R1]
STRB            R2, [R3]
BX              LR
; End of function sub_17420




; int __fastcall sub_174A0(unsigned __int8 *, _DWORD *, _DWORD *, _DWORD *)
sub_174A0

var_810= -0x810
var_80C= -0x80C
var_804= -0x804
var_800= -0x800

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x810
MOV             R8, R3
MOV             R6, R1
MOV             R7, R2
STR             R0, [SP,#0x810+var_80C]
BL              strlen
ADD             R0, R0, #1 ; size
BL              malloc
SUBS            R5, R0, #0
STR             R0, [SP,#0x810+var_804]
MOVNE           R3, R5
ADDNE           R4, SP, #0x810+var_800
BEQ             loc_17558

loc_174D8
SUB             R2, R4, #0xC
STR             R3, [R6]
ADD             R1, SP, #0x810+var_804
MOV             R0, R2
STR             R2, [SP,#0x810+var_810]
BL              sub_17420
LDR             R3, [SP,#0x810+var_80C]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_17524
LDR             R3, [SP,#0x810+var_804]
ADD             R1, SP, #0x810+var_804
LDR             R0, [SP,#0x810+var_810]
STR             R3, [R7]
BL              sub_17420
LDR             R3, [SP,#0x810+var_80C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17538

loc_17524               ; ptr
MOV             R0, R5
BL              free
MOV             R0, #0
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_17538
LDR             R3, [SP,#0x810+var_804]
ADD             R1, SP, #0x810+var_804
LDR             R0, [SP,#0x810+var_810]
STR             R3, [R8]
BL              sub_17420
MOV             R0, #1
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_17558
MOVW            R12, #:lower16:aFailedToMalloc ; "Failed to malloc pooldetails buf"
ADD             R4, SP, #0x810+var_800
MOVT            R12, #:upper16:aFailedToMalloc ; "Failed to malloc pooldetails buf"
MOV             LR, R4
LDM             R12!, {R0-R3} ; "Failed to malloc pooldetails buf"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " pooldetails buf"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
MOV             R1, R4
MOV             R2, #1
MOV             R0, #3
STRB            R12, [LR]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_174A0

LDR             R3, [SP,#0xC]
B               loc_174D8


; Attributes: noreturn

; void __fastcall __noreturn sub_175A0(const char *, int)
sub_175A0

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_175A0




; void __fastcall sub_175F8(int, int, int, int, int, int, int)
sub_175F8
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_175F8



; Attributes: noreturn

; void __fastcall __noreturn sub_17604(const char *, int)
sub_17604

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_17604

ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}


; Attributes: noreturn

; void __fastcall __noreturn sub_17668(const char *, int)
sub_17668

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_17668

ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}


; Attributes: noreturn

; void __fastcall __noreturn sub_176CC(const char *, int)
sub_176CC

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_176CC




; void __fastcall sub_17724(int, int, int, int, int, int, int)
sub_17724
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_17724




; int sub_17730()
sub_17730
MOVW            R0, #:lower16:stru_7680C
PUSH            {R4,LR}
MOVT            R0, #:upper16:stru_7680C ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_177C8

loc_17748
MOV             R3, #dword_755C0
LDR             R1, [R3]
CMP             R1, #0
MOVLE           R4, #0
BLE             loc_1779C
MOVW            R3, #:lower16:dword_7346C
MOV             R4, #0
MOVT            R3, #:upper16:dword_7346C
LDR             R3, [R3]
ADD             R1, R3, R1,LSL#2

loc_17774
LDR             R2, [R3],#4
LDR             R2, [R2,#4]
LDR             R2, [R2]
CMP             R2, #2
BEQ             loc_17790
CMP             R2, #3
BNE             loc_17794

loc_17790
ADD             R4, R4, #1

loc_17794
CMP             R3, R1
BNE             loc_17774

loc_1779C               ; rwlock
MOV             R0, #stru_7680C
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_177D8

loc_177B0
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4,PC}

loc_177C8
MOVW            R1, #0x565
LDR             R0, =aNumascs ; "numascs"
BL              sub_175A0
B               loc_17748

loc_177D8
MOVW            R1, #0x56A
LDR             R0, =aNumascs ; "numascs"
BL              sub_176CC
; End of function sub_17730

B               loc_177B0
off_177E8 DCD aNumascs  ; "numascs"



; int __fastcall sub_177EC(int)
sub_177EC
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, #stru_7680C ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_178DC

loc_17808
MOV             R3, #dword_755C0
LDR             R12, [R3]
CMP             R12, #0
BLE             loc_1789C
MOVW            R3, #:lower16:dword_7346C
MOV             R4, #0
MOVT            R3, #:upper16:dword_7346C
ADD             R0, R5, #1
LDR             R1, [R3]
MOV             R2, R4
SUB             R1, R1, #4
B               loc_17848

loc_1783C
ADD             R4, R4, #1
CMP             R12, R4
BEQ             loc_1789C

loc_17848
LDR             R3, [R1,#4]!
LDR             R3, [R3,#4]
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_17864
CMP             R3, #3
BNE             loc_17868

loc_17864
ADD             R2, R2, #1

loc_17868
CMP             R2, R0
BNE             loc_1783C
MOV             R0, #stru_7680C ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_178EC

loc_17884
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4-R6,PC}

loc_1789C               ; rwlock
MOV             R0, #stru_7680C
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_178CC

loc_178B0
MOVW            R3, #:lower16:off_67ED8
MOV             R4, #0xFFFFFFFF
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4-R6,PC}

loc_178CC
MOVW            R1, #0x57B
LDR             R0, =aAscdevice ; "ascdevice"
BL              sub_176CC
B               loc_178B0

loc_178DC
MOVW            R1, #0x573
LDR             R0, =aAscdevice ; "ascdevice"
BL              sub_175A0
B               loc_17808

loc_178EC
MOV             R1, #0x580
LDR             R0, =aAscdevice ; "ascdevice"
BL              sub_176CC
; End of function sub_177EC

B               loc_17884
off_178FC DCD aAscdevice ; "ascdevice"



; int __fastcall sub_17900(int *)
sub_17900
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R0, =stru_68A88 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_179CC

loc_17918               ; fd
LDR             R0, [R4]
MOV             R7, #byte_68A7C
MOV             R3, #1
STRB            R3, [R7]
CMN             R0, #1
BEQ             loc_1794C
MOV             R1, #2  ; how
BL              shutdown
LDR             R0, [R4] ; fd
BL              close
MOV             R3, #0xFFFFFFFF
STR             R3, [R4]

loc_1794C               ; ptr
LDR             R0, [R7,#(dword_68A80 - 0x68A7C)]
CMP             R0, #0
BEQ             loc_17964
BL              free
MOV             R3, #0
STR             R3, [R7,#(dword_68A80 - 0x68A7C)]

loc_17964
LDR             R6, [R7,#(dword_68AA0 - 0x68A7C)]
CMP             R6, #0
BEQ             loc_179A8
MOV             R4, R6

loc_17974
LDR             R3, [R4]
LDR             R5, [R4,#8]
LDR             R0, [R3,#4] ; ptr
BL              free
LDR             R0, [R4] ; ptr
BL              free
MOV             R0, R4  ; ptr
MOV             R4, R5
BL              free
CMP             R6, R5
BNE             loc_17974
MOV             R3, #0
STR             R3, [R7,#(dword_68AA0 - 0x68A7C)]

loc_179A8               ; mutex
LDR             R0, =stru_68A88
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_179DC

loc_179B8
MOVW            R3, #:lower16:off_67ED8
POP             {R4-R8,LR}
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BX              R3      ; sub_21C98

loc_179CC
MOVW            R1, #0x119E
LDR             R0, =aTidyup ; "tidyup"
BL              sub_17604
B               loc_17918

loc_179DC
MOVW            R1, #0x11B3
LDR             R0, =aTidyup ; "tidyup"
BL              sub_17668
; End of function sub_17900

B               loc_179B8
off_179EC DCD stru_68A88
off_179F0 DCD aTidyup   ; "tidyup"


; Attributes: noreturn

; void __noreturn sub_179F4()
sub_179F4

var_80C= -0x80C
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
LDR             R0, =stru_68A88 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_17AC8
LDR             R0, =stru_68A88 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_17B24

loc_17A20
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_17A9C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17A6C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_17AB0

loc_17A6C
MOVW            R12, #:lower16:aApiKillingBmmi ; "API: killing bmminer"
ADD             LR, SP, #0x814+s
MOVT            R12, #:upper16:aApiKillingBmmi ; "API: killing bmminer"
LDM             R12!, {R0-R3} ; "API: killing bmminer"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "iner"
STR             R0, [LR],#4
MOV             R0, #7
STRB            R1, [LR]
ADD             R1, SP, #0x814+s
BL              sub_20F58

loc_17A9C
BL              sub_2E730
MOV             R0, #0
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {PC}

loc_17AB0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_17A6C
B               loc_17A9C

loc_17AC8
BL              __errno_location
LDR             LR, =aQuitThread ; "quit_thread"
MOVW            R1, #:lower16:(aSocketaApiC+8) ; "api.c"
MOVW            R12, #0x12DB
MOVT            R1, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
LDR             R0, =stru_68A88 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BEQ             loc_17A20

loc_17B24
BL              __errno_location
LDR             LR, =aQuitThread ; "quit_thread"
MOVW            R1, #:lower16:(aSocketaApiC+8) ; "api.c"
MOVW            R12, #0x12DC
MOVT            R1, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_179F4

B               loc_17A20
off_17B74 DCD stru_68A88
off_17B78 DCD aQuitThread ; "quit_thread"



; int sub_17B7C()
sub_17B7C

var_80C= -0x80C
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
LDR             R0, =stru_68A88 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_17C4C
LDR             R0, =stru_68A88 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_17CA8

loc_17BA8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_17C20
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_17BF4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_17C34

loc_17BF4
MOVW            R12, #:lower16:aApiRestartingB ; "API: restarting bmminer"
ADD             LR, SP, #0x814+s
MOVT            R12, #:upper16:aApiRestartingB ; "API: restarting bmminer"
LDM             R12!, {R0-R3} ; "API: restarting bmminer"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "bmminer"
STM             LR, {R0,R1}
ADD             R1, SP, #0x814+s
MOV             R0, #7
BL              sub_20F58

loc_17C20
BL              sub_319C4
MOV             R0, #0
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {PC}

loc_17C34
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_17BF4
B               loc_17C20

loc_17C4C
BL              __errno_location
LDR             LR, =aRestartThread_0 ; "restart_thread"
MOVW            R1, #:lower16:(aSocketaApiC+8) ; "api.c"
MOVW            R12, #0x12E9
MOVT            R1, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
LDR             R0, =stru_68A88 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BEQ             loc_17BA8

loc_17CA8
BL              __errno_location
LDR             LR, =aRestartThread_0 ; "restart_thread"
MOVW            R1, #:lower16:(aSocketaApiC+8) ; "api.c"
MOVW            R12, #0x12EA
MOVT            R1, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_17B7C

B               loc_17BA8
off_17CF8 DCD stru_68A88
off_17CFC DCD aRestartThread_0 ; "restart_thread"



; int __fastcall sub_17D00(unsigned int *, char **, int, int)
sub_17D00

var_874= -0x874
var_86C= -0x86C
var_860= -0x860
var_85C= -0x85C
var_858= -0x858
var_854= -0x854
format= -0x84C
var_848= -0x848
s= -0x844
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R8, #byte_68A7C
MOV             R4, R1
MOV             R7, R2
MOV             R6, R3
LDR             R1, [R8,#(dword_68AA4 - 0x68A7C)]
VPUSH           {D8}
SUB             SP, SP, #0x870
SUB             SP, SP, #4
LDR             R5, [R1,#8]
STR             R0, [SP,#0x874+var_860]
MOV             R0, R5  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_185EC
LDR             R2, =aPrintData ; "print_data"
MOV             R3, #(aSocketaApiC+8) ; "api.c"
ADD             R0, R5, #0x18 ; rwlock
STR             R3, [SP,#0x874+var_854]
STR             R2, [SP,#0x874+var_854+4]
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_18658

loc_17D64
MOVW            R1, #:lower16:(aSocketaApiC+8) ; "api.c"
MOVW            R3, #0x4AA
MOVT            R1, #:upper16:(aSocketaApiC+8) ; "api.c"
LDR             R2, =aPrintData ; "print_data"
LDR             R0, [R8,#(dword_68AA4 - 0x68A7C)]
BL              sub_203A8
LDR             R3, [R8,#(dword_68AA4 - 0x68A7C)]
MOV             R11, R0
LDR             R5, [R3,#8]
ADD             R0, R5, #0x18 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_18754
MOV             R0, R5  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_187B0

loc_17DA8
MOVW            R10, #:lower16:off_67ED8
MOV             R5, R11
MOVT            R10, #:upper16:off_67ED8
LDR             R3, [R10] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [R5,#0xC]!
CMP             R6, #0
MOV             R2, #0
STR             R2, [R3,#4]
BNE             loc_183F4

loc_17DD0
CMP             R7, #0
BNE             loc_180A8
CMP             R4, #0
BEQ             loc_17FFC

loc_17DE0
MOVW            R3, #:lower16:a0x08x ; "0x%08x"
CMP             R7, #0
MOVW            R9, #:lower16:asc_4AB00 ; "="
MOVT            R3, #:upper16:a0x08x ; "0x%08x"
VLDR            D8, =100.0
MOVT            R9, #:upper16:asc_4AB00 ; "="
STR             R3, [SP,#0x874+format]
STR             R11, [SP,#0x874+var_85C]
STR             R10, [SP,#0x874+var_858]
BNE             loc_17F18

loc_17E08               ; s
LDR             R1, [R4,#4]
MOV             R0, R5  ; int
BL              sub_16DFC
MOV             R1, R9  ; s
MOV             R0, R5  ; int
BL              sub_16DFC
LDR             R3, [R4]
CMP             R3, #0x1A ; switch 27 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_17E28 ; jumptable 00017E28 default case
                        ; jumptable 00017F5C default case
jpt_17E28 DCD loc_18484 ; jump table for switch statement
DCD loc_183B4
DCD loc_183B4
DCD loc_1811C
DCD loc_180F8
DCD loc_180D4
DCD loc_18388
DCD loc_17E9C
DCD loc_17E9C
DCD loc_183CC
DCD loc_18334
DCD loc_1830C
DCD loc_182E4
DCD loc_182BC
DCD loc_18280
DCD loc_18258
DCD loc_18234
DCD loc_1820C
DCD loc_181E4
DCD loc_181BC
DCD loc_1820C
DCD loc_1820C
DCD loc_18190
DCD loc_18168
DCD loc_18140
DCD loc_1835C
DCD loc_18190

loc_17E9C               ; jumptable 00017E28 cases 7,8
LDR             R3, [R4,#8] ; jumptable 00017F5C cases 7,8
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:(aApiRequestToAs+0x30) ; "%u"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:(aApiRequestToAs+0x30) ; format
MOV             R1, #0x40 ; '@' ; maxlen
LDR             R3, [R3]
BL              snprintf

loc_17EBC               ; s
MOV             R1, R6
MOV             R0, R5  ; int
BL              sub_16DFC

loc_17EC8               ; ptr
LDR             R0, [R4,#4]
BL              free
LDRB            R3, [R4,#0xC]
CMP             R3, #0
BNE             loc_17FD0
LDR             R3, [R4,#0x14]
CMP             R3, R4
BEQ             loc_17FE4

loc_17EE8
LDR             R2, [R4,#0x10]
MOV             R0, R4  ; ptr
MOV             R4, R3
STR             R2, [R3,#0x10]
STR             R3, [R2,#0x14]
BL              free
MOVW            R1, #:lower16:(aUserS+0x10) ; ","
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aUserS+0x10) ; s
BL              sub_16DFC
CMP             R7, #0
BEQ             loc_17E08

loc_17F18
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
BL              sub_16DFC
LDR             R1, [R4,#4] ; s
MOV             R0, R5  ; int
BL              sub_16DFC
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
BL              sub_16DFC
MOVW            R1, #:lower16:(aHttp+4) ; ":"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aHttp+4) ; s
BL              sub_16DFC
LDR             R3, [R4]
CMP             R3, #0x1A ; switch 27 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_17E28 ; jumptable 00017E28 default case
                        ; jumptable 00017F5C default case
jpt_17F5C DCD loc_184C0 ; jump table for switch statement
DCD loc_183AC
DCD loc_183AC
DCD loc_1811C
DCD loc_180F8
DCD loc_180D4
DCD loc_18388
DCD loc_17E9C
DCD loc_17E9C
DCD loc_183C4
DCD loc_18334
DCD loc_1830C
DCD loc_182E4
DCD loc_182BC
DCD loc_18280
DCD loc_18258
DCD loc_18234
DCD loc_1820C
DCD loc_181E4
DCD loc_181BC
DCD loc_1820C
DCD loc_1820C
DCD loc_18190
DCD loc_18168
DCD loc_18140
DCD loc_1835C
DCD loc_18190

loc_17FD0               ; ptr
LDR             R0, [R4,#8]
BL              free
LDR             R3, [R4,#0x14]
CMP             R3, R4
BNE             loc_17EE8

loc_17FE4               ; ptr
MOV             R0, R4
LDR             R11, [SP,#0x874+var_85C]
LDR             R10, [SP,#0x874+var_858]
BL              free
CMP             R7, #0
BNE             loc_180C0

loc_17FFC
MOVW            R1, #:lower16:asc_4A4AC ; "|"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:asc_4A4AC ; "|"
BL              sub_16DFC

loc_1800C
LDR             R3, [R11,#0xC]
LDR             R0, [SP,#0x874+var_860] ; int
LDR             R1, [R3] ; s
BL              sub_15B00
LDR             R3, [R8,#(dword_68AA4 - 0x68A7C)]
LDR             R4, [R3,#8]
MOV             R0, R4  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_186A8
ADD             R0, R4, #0x18 ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_18704

loc_18044
MOVW            R3, #0x556
MOVW            R2, #:lower16:(aSocketaApiC+8) ; "api.c"
LDR             R0, [R8,#(dword_68AA4 - 0x68A7C)]
MOV             R1, R11
STR             R3, [SP,#0x874+var_874]
MOVT            R2, #:upper16:(aSocketaApiC+8) ; "api.c"
LDR             R3, =aPrintData ; "print_data"
BL              sub_20524
LDR             R3, [R8,#(dword_68AA4 - 0x68A7C)]
LDR             R4, [R3,#8]
ADD             R0, R4, #0x18 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_18540
MOV             R0, R4  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1859C

loc_1808C
LDR             R3, [R10] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, #0
ADD             SP, SP, #0x870
ADD             SP, SP, #4
VPOP            {D8}
POP             {R4-R11,PC}

loc_180A8
MOVW            R1, #:lower16:asc_4A4A0 ; "{"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:asc_4A4A0 ; "{"
BL              sub_16DFC
CMP             R4, #0
BNE             loc_17DE0

loc_180C0
MOVW            R1, #:lower16:(aIdDMethodMinin_1+0x44) ; "}"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aIdDMethodMinin_1+0x44) ; s
BL              sub_16DFC
B               loc_1800C

loc_180D4               ; jumptable 00017E28 case 5
LDR             R3, [R4,#8] ; jumptable 00017F5C case 5
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:(aApiRequestToAs+0x30) ; "%u"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:(aApiRequestToAs+0x30) ; format
MOV             R1, #0x40 ; '@' ; maxlen
LDRH            R3, [R3]
BL              snprintf
B               loc_17EBC

loc_180F8               ; jumptable 00017E28 case 4
LDR             R3, [R4,#8] ; jumptable 00017F5C case 4
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:(aStaleSubmissio_0+0x30) ; format
MOV             R1, #0x40 ; '@' ; maxlen
LDRSH           R3, [R3]
BL              snprintf
B               loc_17EBC

loc_1811C               ; jumptable 00017E28 case 3
LDR             R3, [R4,#8] ; jumptable 00017F5C case 3
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:(aApiRequestToAs+0x30) ; "%u"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:(aApiRequestToAs+0x30) ; format
MOV             R1, #0x40 ; '@' ; maxlen
LDRB            R3, [R3]
BL              snprintf
B               loc_17EBC

loc_18140               ; jumptable 00017E28 case 24
LDR             R3, [R4,#8] ; jumptable 00017F5C case 24
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:a8f ; "%.8f"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:a8f ; "%.8f"
MOV             R1, #0x40 ; '@' ; maxlen
VLDR            D7, [R3]
VSTR            D7, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_18168               ; jumptable 00017E28 case 23
LDR             R3, [R4,#8] ; jumptable 00017F5C case 23
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:a15f ; "%.15f"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:a15f ; "%.15f"
MOV             R1, #0x40 ; '@' ; maxlen
VLDR            D7, [R3]
VSTR            D7, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_18190               ; jumptable 00017E28 cases 22,26
LDR             R3, [R4,#8] ; jumptable 00017F5C cases 22,26
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:a3f ; "%.3f"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:a3f ; "%.3f"

loc_181A4
VLDR            S14, [R3]
MOV             R1, #0x40 ; '@' ; maxlen
VCVT.F64.F32    D7, S14
VSTR            D7, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_181BC               ; jumptable 00017E28 case 19
ADD             R6, SP, #0x874+s ; jumptable 00017F5C case 19
MOVW            R2, #:lower16:a2f ; "%.2f"
LDR             R3, [R4,#8]
MOV             R0, R6
MOVT            R2, #:upper16:a2f ; "%.2f"
B               loc_181A4
ALIGN 8
dbl_181D8 DCFD 100.0
off_181E0 DCD aPrintData ; "print_data"

loc_181E4               ; jumptable 00017E28 case 18
LDR             R3, [R4,#8] ; jumptable 00017F5C case 18
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:a4f ; "%.4f"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:a4f ; "%.4f"
MOV             R1, #0x40 ; '@' ; maxlen
VLDR            D7, [R3]
VSTR            D7, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_1820C               ; jumptable 00017E28 cases 17,20,21
LDR             R3, [R4,#8] ; jumptable 00017F5C cases 17,20,21
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:a2f ; "%.2f"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:a2f ; "%.2f"
MOV             R1, #0x40 ; '@' ; maxlen
VLDR            D7, [R3]
VSTR            D7, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_18234               ; jumptable 00017E28 case 16
LDR             R3, [R4,#8] ; jumptable 00017F5C case 16
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:(aGlobalQuotaGre+0x30) ; "%lu"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:(aGlobalQuotaGre+0x30) ; format
MOV             R1, #0x40 ; '@' ; maxlen
LDR             R3, [R3]
BL              snprintf
B               loc_17EBC

loc_18258               ; jumptable 00017E28 case 15
LDR             R12, [R4,#8] ; jumptable 00017F5C case 15
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:aLd06ld ; "%ld.%06ld"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:aLd06ld ; "%ld.%06ld"
MOV             R1, #0x40 ; '@' ; maxlen
LDM             R12, {R3,R12}
STR             R12, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_18280               ; jumptable 00017E28 case 14
LDR             R2, [R4,#8] ; jumptable 00017F5C case 14
MOV             R1, #aTrue ; "true"
ADD             R6, SP, #0x874+s
MOVW            R3, #:lower16:(aInvalidParamet_0+0x24) ; "false"
MOV             R0, R6  ; s
LDRB            R12, [R2]
MOVW            R2, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
MOVT            R3, #:upper16:(aInvalidParamet_0+0x24) ; "false"
MOVT            R2, #:upper16:(aApiMcastFromSS+0x14) ; format
CMP             R12, #0
MOVNE           R3, R1
MOV             R1, #0x40 ; '@' ; maxlen
BL              snprintf
B               loc_17EBC

loc_182BC               ; jumptable 00017E28 case 13
LDR             R3, [R4,#8] ; jumptable 00017F5C case 13
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:a0f ; "%.0f"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:a0f ; "%.0f"
MOV             R1, #0x40 ; '@' ; maxlen
VLDR            D7, [R3]
VSTR            D7, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_182E4               ; jumptable 00017E28 case 12
LDR             R3, [R4,#8] ; jumptable 00017F5C case 12
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:aF ; "%f"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:aF ; format
MOV             R1, #0x40 ; '@' ; maxlen
VLDR            D7, [R3]
VSTR            D7, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_1830C               ; jumptable 00017E28 case 11
LDR             R3, [R4,#8] ; jumptable 00017F5C case 11
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:(aShareSubmissio_0+0x14) ; "%lld"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:(aShareSubmissio_0+0x14) ; format
MOV             R1, #0x40 ; '@' ; maxlen
LDRD            R10, R11, [R3]
STRD            R10, R11, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_18334               ; jumptable 00017E28 case 10
LDR             R3, [R4,#8] ; jumptable 00017F5C case 10
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:aLlu ; "%llu"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:aLlu ; "%llu"
MOV             R1, #0x40 ; '@' ; maxlen
LDRD            R10, R11, [R3]
STRD            R10, R11, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_1835C               ; jumptable 00017E28 case 25
LDR             R3, [R4,#8] ; jumptable 00017F5C case 25
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:a4f ; "%.4f"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:a4f ; "%.4f"
MOV             R1, #0x40 ; '@' ; maxlen
VLDR            D7, [R3]
VMUL.F64        D7, D7, D8
VSTR            D7, [SP,#0x874+var_874]
BL              snprintf
B               loc_17EBC

loc_18388               ; jumptable 00017E28 case 6
LDR             R3, [R4,#8] ; jumptable 00017F5C case 6
ADD             R6, SP, #0x874+s
MOVW            R2, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:(aStaleSubmissio_0+0x30) ; format
MOV             R1, #0x40 ; '@' ; maxlen
LDR             R3, [R3]
BL              snprintf
B               loc_17EBC

loc_183AC               ; jumptable 00017F5C cases 1,2
CMP             R7, #0
BNE             loc_18800

loc_183B4               ; jumptable 00017E28 cases 1,2
LDR             R1, [R4,#8]
MOV             R0, R5  ; int
BL              sub_16DFC
B               loc_17EC8

loc_183C4               ; jumptable 00017F5C case 9
CMP             R7, #0
BNE             loc_1881C

loc_183CC               ; jumptable 00017E28 case 9
LDR             R3, [R4,#8]
ADD             R0, SP, #0x874+s ; s
LDR             R2, [SP,#0x874+format] ; format
MOV             R1, #0x40 ; '@' ; maxlen
LDR             R3, [R3]
BL              snprintf
ADD             R1, SP, #0x874+s ; s
MOV             R0, R5  ; int
BL              sub_16DFC
B               loc_17EC8

loc_183F4
MOVW            R1, #:lower16:(aUserS+0x10) ; ","
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aUserS+0x10) ; s
BL              sub_16DFC
B               loc_17DD0

def_17E28               ; jumptable 00017E28 default case
MOV             R2, #byte_74500 ; jumptable 00017F5C default case
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_18444
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_18444
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #2
BLE             loc_18468

loc_18444
MOVW            R2, #:lower16:aApiUnknown2Dat ; "API: unknown2 data type %d ignored"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aApiUnknown2Dat ; "API: unknown2 data type %d ignored"
ADD             R0, SP, #0x874+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_18468
CMP             R7, #0
BNE             loc_1850C
MOVW            R1, #:lower16:aUnknown ; "Unknown"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aUnknown ; "Unknown"
BL              sub_16DFC
B               loc_17EC8

loc_18484               ; jumptable 00017E28 case 0
LDR             R3, [R4,#8]
MOV             R1, #0
MOV             R0, R3  ; s
STR             R3, [SP,#0x874+var_848]
BL              sub_15C2C
MOV             R1, R0  ; s
MOV             R6, R0
MOV             R0, R5  ; int
BL              sub_16DFC
LDR             R3, [SP,#0x874+var_848]

loc_184AC
CMP             R3, R6
BEQ             loc_17EC8
MOV             R0, R6  ; ptr
BL              free
B               loc_17EC8

loc_184C0               ; jumptable 00017F5C case 0
LDR             R3, [R4,#8]
MOV             R1, #1
MOV             R0, R3  ; s
STR             R3, [SP,#0x874+var_848]
BL              sub_15C2C
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R6, R0
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
MOV             R0, R5  ; int
BL              sub_16DFC
MOV             R1, R6  ; s
MOV             R0, R5  ; int
BL              sub_16DFC
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
BL              sub_16DFC
LDR             R3, [SP,#0x874+var_848]
B               loc_184AC

loc_1850C
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
BL              sub_16DFC
MOVW            R1, #:lower16:aUnknown ; "Unknown"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aUnknown ; "Unknown"

loc_18528
BL              sub_16DFC
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
BL              sub_16DFC
B               loc_17EC8

loc_18540
BL              __errno_location
LDR             R12, [SP,#0x874+var_854]
MOVW            R1, #0x557
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R0, [SP,#0x874+var_854+4]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x874+var_874]
STR             R1, [SP,#0x874+var_86C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x874+var_874+4]
ADD             R0, SP, #0x874+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
MOV             R0, R4  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BEQ             loc_1808C

loc_1859C
BL              __errno_location
LDR             R3, [R0]
MOVW            R1, #0x557
LDR             R0, [SP,#0x874+var_854+4]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x874+var_86C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x874+var_874+4]
LDR             R0, [SP,#0x874+var_854]
STR             R0, [SP,#0x874+var_874]
ADD             R0, SP, #0x874+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1808C

loc_185EC
BL              __errno_location
MOVW            R3, #:lower16:(aSocketaApiC+8) ; "api.c"
LDR             R12, =aPrintData ; "print_data"
MOV             R2, R3
MOVW            R1, #0x4A9
MOVT            R2, #:upper16:(aSocketaApiC+8) ; "api.c"
LDR             R3, [R0]
STR             R2, [SP,#0x874+var_854]
MOV             R0, R2
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R0,R12}
STR             R1, [SP,#0x874+var_86C]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x874+var_804 ; s
STR             R12, [SP,#0x874+var_854+4]
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
ADD             R0, R5, #0x18 ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BEQ             loc_17D64

loc_18658
BL              __errno_location
LDR             R12, [SP,#0x874+var_854]
MOVW            R1, #0x4A9
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R0, [SP,#0x874+var_854+4]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R12, [SP,#0x874+var_874]
STR             R1, [SP,#0x874+var_86C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x874+var_874+4]
ADD             R0, SP, #0x874+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_17D64

loc_186A8
BL              __errno_location
LDR             R12, [SP,#0x874+var_854]
MOVW            R1, #0x555
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R0, [SP,#0x874+var_854+4]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#0x874+var_874]
STR             R1, [SP,#0x874+var_86C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x874+var_874+4]
ADD             R0, SP, #0x874+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
ADD             R0, R4, #0x18 ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BEQ             loc_18044

loc_18704
BL              __errno_location
LDR             R12, [SP,#0x874+var_854]
MOVW            R1, #0x555
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R0, [SP,#0x874+var_854+4]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R12, [SP,#0x874+var_874]
STR             R1, [SP,#0x874+var_86C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x874+var_874+4]
ADD             R0, SP, #0x874+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_18044

loc_18754
BL              __errno_location
LDR             R12, [SP,#0x874+var_854]
MOVW            R1, #0x4AB
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R0, [SP,#0x874+var_854+4]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x874+var_874]
STR             R1, [SP,#0x874+var_86C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x874+var_874+4]
ADD             R0, SP, #0x874+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
MOV             R0, R5  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BEQ             loc_17DA8

loc_187B0
BL              __errno_location
LDR             R12, [SP,#0x874+var_854]
MOVW            R1, #0x4AB
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, [SP,#0x874+var_854+4]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x874+var_874]
STR             R1, [SP,#0x874+var_86C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x874+var_874+4]
ADD             R0, SP, #0x874+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x874+var_804
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_17DA8

loc_18800
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
BL              sub_16DFC
LDR             R1, [R4,#8]
MOV             R0, R5
B               loc_18528

loc_1881C
MOVW            R1, #:lower16:(aRotateD+0x10) ; "\""
MOV             R0, R5  ; int
MOVT            R1, #:upper16:(aRotateD+0x10) ; s
BL              sub_16DFC
LDR             R3, [R4,#8]
MOV             R1, #0x40 ; '@' ; maxlen
ADD             R0, SP, #0x874+s ; s
LDR             R2, [SP,#0x874+format] ; format
LDR             R3, [R3]
BL              snprintf
ADD             R1, SP, #0x874+s
MOV             R0, R5
B               loc_18528
; End of function sub_17D00




; const char *__fastcall sub_18850(int, const char *, int, const char *, char)
sub_18850

arg_0=  0x1C

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x800
MOV             R5, R0
MOV             R9, R1
SUB             SP, SP, #4
MOV             R0, #0x18 ; size
MOV             R6, R3
MOV             R7, R2
LDRB            R8, [SP,#0x804+arg_0]
BL              malloc
MOV             R4, R0
MOV             R0, R9  ; s
BL              __strdup
CMP             R5, #0
STR             R0, [R4,#4]
LDRNE           R3, [R5,#0x10]
MOVEQ           R9, R4
STRNE           R5, [R4,#0x14]
MOVNE           R9, R5
STRNE           R4, [R5,#0x10]
STRNE           R3, [R4,#0x10]
STR             R7, [R4]
STREQ           R4, [R4,#0x10]
STRNE           R4, [R3,#0x14]
STREQ           R4, [R4,#0x14]
CMP             R6, #0
STRB            R8, [R4,#0xC]
BEQ             loc_18940
CMP             R8, #0
BEQ             loc_18954
CMP             R7, #0x1A ; switch 27 cases
LDRLS           PC, [PC,R7,LSL#2] ; switch jump
B               def_188CC ; jumptable 000188CC default case
jpt_188CC DCD loc_18A28 ; jump table for switch statement
DCD loc_18A28
DCD loc_18A28
DCD loc_18A10
DCD loc_189C8
DCD loc_189C8
DCD loc_18968
DCD loc_18968
DCD loc_18968
DCD loc_18968
DCD loc_189B0
DCD loc_189B0
DCD loc_1898C
DCD loc_1898C
DCD loc_189E0
DCD loc_1898C
DCD loc_18968
DCD loc_1898C
DCD loc_1898C
DCD loc_189F8
DCD loc_1898C
DCD loc_1898C
DCD loc_189F8
DCD loc_1898C
DCD loc_1898C
DCD loc_1898C
DCD loc_189F8

loc_18940
STRB            R6, [R4,#0xC]
MOV             R6, #aNull ; "(null)"
MOV             R3, #2
STR             R3, [R4]

loc_18954
STR             R6, [R4,#8]

loc_18958
MOV             R0, R9
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4-R9,PC}

loc_18968               ; jumptable 000188CC cases 6-9,16
MOV             R0, #4
BL              malloc
LDR             R3, [R6]
STR             R0, [R4,#8]
STR             R3, [R0]
MOV             R0, R9
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4-R9,PC}

loc_1898C               ; jumptable 000188CC cases 12,13,15,17,18,20,21,23-25
MOV             R0, #8
BL              malloc
LDR             R1, [R6,#4]
MOV             R2, R0
LDR             R0, [R6]
MOV             R3, R2
STR             R2, [R4,#8]
STM             R3!, {R0,R1}
B               loc_18958

loc_189B0               ; jumptable 000188CC cases 10,11
MOV             R0, #8
BL              malloc
LDRD            R2, R3, [R6]
STR             R0, [R4,#8]
STRD            R2, R3, [R0]
B               loc_18958

loc_189C8               ; jumptable 000188CC cases 4,5
MOV             R0, #4
BL              malloc
LDRH            R3, [R6]
STR             R0, [R4,#8]
STRH            R3, [R0]
B               loc_18958

loc_189E0               ; jumptable 000188CC case 14
MOV             R0, #1
BL              malloc
LDRB            R3, [R6]
STR             R0, [R4,#8]
STRB            R3, [R0]
B               loc_18958

loc_189F8               ; jumptable 000188CC cases 19,22,26
MOV             R0, #4
BL              malloc
LDR             R3, [R6]
STR             R0, [R4,#8]
STR             R3, [R0]
B               loc_18958

loc_18A10               ; jumptable 000188CC case 3
MOV             R0, #4
BL              malloc
LDRB            R3, [R6]
STR             R0, [R4,#8]
STRB            R3, [R0]
B               loc_18958

loc_18A28               ; jumptable 000188CC cases 0-2
MOV             R0, R6
BL              strlen
ADD             R5, R0, #1
MOV             R0, R5  ; size
BL              malloc
MOV             R2, R5  ; n
MOV             R1, R6  ; src
STR             R0, [R4,#8]
BL              memcpy
B               loc_18958

def_188CC               ; jumptable 000188CC default case
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18A8C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_18A8C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_18AB4

loc_18A8C
MOVW            R2, #:lower16:aApiUnknown1Dat ; "API: unknown1 data type %d ignored"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aApiUnknown1Dat ; "API: unknown1 data type %d ignored"
MOV             R3, R7
MOV             R0, SP  ; s
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_18AB4
MOVW            R3, #:lower16:aUnknown ; "Unknown"
MOV             R1, #1
MOVT            R3, #:upper16:aUnknown ; "Unknown"
MOV             R2, #0
STR             R3, [R4,#8]
STR             R1, [R4]
STRB            R2, [R4,#0xC]
B               loc_18958
; End of function sub_18850




; int __fastcall sub_18AD4(unsigned int *, int, int, int, unsigned __int8)
sub_18AD4

var_201C= -0x201C
var_2010= -0x2010
var_200C= -0x200C
var_200B= -0x200B
var_2008= -0x2008
s= -0x2004
var_1C= -0x1C

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x2000
SUB             SP, SP, #0x1C
MOV             R7, R2
ADD             R12, SP, #0x201C+var_1C
MOV             R8, R3
ADD             R12, R12, #0x38 ; '8'
LDRB            R5, [R12]
STR             R1, [SP,#0x201C+var_2010]
MOV             R6, R0
CMP             R5, #0
BNE             loc_18CC0

loc_18B04
MOV             R9, #dword_67298
LDR             R1, [R9]
CMP             R1, #4
BEQ             loc_18B54
LDR             LR, [SP,#0x201C+var_2010]
LDR             R3, [R9,#(dword_6729C - 0x67298)]
CMP             R3, LR
MOVNE           R2, R9
MOVNE           R0, #0
BNE             loc_18B40
B               loc_18C3C

loc_18B34
LDR             R12, [R2,#4]
CMP             R12, LR
BEQ             loc_18C40

loc_18B40
LDR             R1, [R2,#0x10]
ADD             R0, R0, #1
ADD             R2, R2, #0x10
CMP             R1, #4
BNE             loc_18B34

loc_18B54
MOV             R4, #0
MOVW            R3, #:lower16:aF_0 ; "F"
MOVW            R1, #:lower16:aStatus ; "STATUS"
MOVT            R3, #:upper16:aF_0 ; "F"
MOVT            R1, #:upper16:aStatus ; "STATUS"
MOV             R2, #1
STR             R4, [SP,#0x201C+var_201C]
MOV             R0, R4
BL              sub_18850
MOVW            R1, #:lower16:aWhen ; "When"
LDR             R3, =dword_68AA8
MOVT            R1, #:upper16:aWhen ; "When"
MOV             R2, #0x10
STR             R4, [SP,#0x201C+var_201C]
BL              sub_18850
ADD             R3, SP, #0x201C+s
MOV             R2, #0xFFFFFFFF
MOVW            R1, #:lower16:aCode ; "Code"
STR             R4, [SP,#0x201C+var_201C]
MOVT            R1, #:upper16:aCode ; "Code"
STR             R2, [R3,#-4]!
MOV             R2, #6
BL              sub_18850
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
MOV             R7, R0
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; format
ADD             R0, SP, #0x201C+s ; s
LDR             R2, [SP,#0x201C+var_2010]
BL              sprintf
MOVW            R1, #:lower16:aMsg ; "Msg"
MOV             R0, R7
STR             R4, [SP,#0x201C+var_201C]

loc_18BD4
ADD             R3, SP, #0x201C+s
MOV             R2, R4
MOVT            R1, #:upper16:aMsg ; "Msg"
BL              sub_18850
MOVW            R3, #:lower16:off_6881C
MOVW            R1, #:lower16:aDescription ; "Description"
MOVT            R3, #:upper16:off_6881C
STR             R4, [SP,#0x201C+var_201C]
MOV             R2, R4
LDR             R3, [R3] ; unk_55AA0
MOVT            R1, #:upper16:aDescription ; "Description"
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, R5
MOV             R0, R6
BL              sub_17D00
CMP             R5, R4
BEQ             loc_18C30
MOVW            R1, #:lower16:word_5616C
MOV             R0, R6  ; int
MOVT            R1, #:upper16:word_5616C ; s
BL              sub_15B00

loc_18C30
ADD             SP, SP, #0x2000
ADD             SP, SP, #0x1C
POP             {R4-R9,PC}

loc_18C3C               ; int
MOV             R0, #0

loc_18C40
CMP             R1, #2
BEQ             loc_18CDC
CMP             R1, #3
BEQ             loc_18CD0
CMP             R1, #1
MOVEQ           R3, #0x57 ; 'W'
STRBEQ          R3, [SP,#0x201C+var_200C]
MOVNE           R3, #0x45 ; 'E'
STRBNE          R3, [SP,#0x201C+var_200C]

loc_18C64
MOV             R4, R0,LSL#4
MOV             R3, #0
STRB            R3, [SP,#0x201C+var_200B]
ADD             R3, R9, R4
LDR             R3, [R3,#8]
CMP             R3, #0xE ; switch 15 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_18C7C ; jumptable 00018C7C default case, case 3
jpt_18C7C DCD loc_18D60 ; jump table for switch statement
DCD loc_18D60
DCD loc_18D60
DCD def_18C7C
DCD loc_18D7C
DCD loc_18DA4
DCD loc_18DC8
DCD loc_18DF8
DCD loc_18E18
DCD loc_18E38
DCD loc_18E6C
DCD loc_18E88
DCD loc_18EA8
DCD loc_18CE8
DCD loc_18D60

loc_18CC0
MOV             R1, #aStatus_0 ; "{\"STATUS\":["
BL              sub_15B00
B               loc_18B04

loc_18CD0
MOV             R3, #0x53 ; 'S'
STRB            R3, [SP,#0x201C+var_200C]
B               loc_18C64

loc_18CDC
MOV             R3, #0x49 ; 'I'
STRB            R3, [SP,#0x201C+var_200C]
B               loc_18C64

loc_18CE8               ; jumptable 00018C7C case 13
ADD             R4, R9, R4
STR             R7, [SP,#0x201C+var_201C]
MOV             R3, R8
LDR             R2, [R4,#0xC] ; format
MOVW            R1, #0x1FFF ; maxlen
ADD             R0, SP, #0x201C+s ; s
BL              snprintf

loc_18D04
MOV             R4, #0
MOV             R1, #aStatus ; "STATUS"
ADD             R3, SP, #0x201C+var_200C
MOV             R2, #1
STR             R4, [SP,#0x201C+var_201C]
MOV             R0, R4
BL              sub_18850
MOVW            R1, #:lower16:aWhen ; "When"
LDR             R3, =dword_68AA8
MOVT            R1, #:upper16:aWhen ; "When"
MOV             R2, #0x10
STR             R4, [SP,#0x201C+var_201C]
BL              sub_18850
MOVW            R1, #:lower16:aCode ; "Code"
STR             R4, [SP,#0x201C+var_201C]
MOVT            R1, #:upper16:aCode ; "Code"
ADD             R3, SP, #0x201C+var_2010
MOV             R2, #6
BL              sub_18850
MOVW            R1, #0xAB54
STR             R4, [SP,#0x201C+var_201C]
B               loc_18BD4

loc_18D60               ; jumptable 00018C7C cases 0-2,14
ADD             R4, R9, R4
MOV             R3, R7
LDR             R2, [R4,#0xC] ; format
MOVW            R1, #0x1FFF ; maxlen
ADD             R0, SP, #0x201C+s ; s
BL              snprintf
B               loc_18D04

loc_18D7C               ; jumptable 00018C7C case 4
BL              sub_17730
ADD             R4, R9, R4
SUB             R0, R0, #1
LDR             R2, [R4,#0xC] ; format
MOV             R3, R7
STR             R0, [SP,#0x201C+var_201C]
MOVW            R1, #0x1FFF ; maxlen
ADD             R0, SP, #0x201C+s ; s
BL              snprintf
B               loc_18D04

loc_18DA4               ; jumptable 00018C7C case 5
MOVW            R3, #:lower16:dword_733CC
ADD             R4, R9, R4
MOVT            R3, #:upper16:dword_733CC
LDR             R2, [R4,#0xC] ; format
LDR             R3, [R3]
MOVW            R1, #0x1FFF ; maxlen
ADD             R0, SP, #0x201C+s ; s
BL              snprintf
B               loc_18D04

loc_18DC8               ; jumptable 00018C7C case 6
MOVW            R3, #:lower16:dword_733CC
ADD             R4, R9, R4
MOVT            R3, #:upper16:dword_733CC
LDR             R2, [R4,#0xC] ; format
LDR             R12, [R3]
MOVW            R1, #0x1FFF ; maxlen
MOV             R3, R7
ADD             R0, SP, #0x201C+s ; s
SUB             R12, R12, #1
STR             R12, [SP,#0x201C+var_201C]
BL              snprintf
B               loc_18D04

loc_18DF8               ; jumptable 00018C7C case 7
ADD             R4, R9, R4
BL              sub_17730
LDR             R2, [R4,#0xC] ; format
MOV             R3, R0
MOVW            R1, #0x1FFF ; maxlen
ADD             R0, SP, #0x201C+s ; s
BL              snprintf
B               loc_18D04

loc_18E18               ; jumptable 00018C7C case 8
ADD             R4, R9, R4
MOVW            R3, #:lower16:(aApiAccessDenie+0x24) ; "command"
LDR             R2, [R4,#0xC] ; format
MOVT            R3, #:upper16:(aApiAccessDenie+0x24) ; "command"
MOVW            R1, #0x1FFF ; maxlen
ADD             R0, SP, #0x201C+s ; s
BL              snprintf
B               loc_18D04

loc_18E38               ; jumptable 00018C7C case 9
MOVW            R3, #:lower16:dword_744C8
ADD             R4, R9, R4
MOVT            R3, #:upper16:dword_744C8
LDR             R2, [R4,#0xC] ; format
LDR             R0, [R3]
MOVW            R1, #0x1FFF ; maxlen
MOV             R3, R7
LDR             R12, [R0,R7,LSL#2]
ADD             R0, SP, #0x201C+s ; s
LDR             R12, [R12,#0xA4]
STR             R12, [SP,#0x201C+var_201C]
BL              snprintf
B               loc_18D04

loc_18E6C               ; jumptable 00018C7C case 10
ADD             R4, R9, R4
MOV             R3, R8
LDR             R2, [R4,#0xC] ; format
MOVW            R1, #0x1FFF ; maxlen
ADD             R0, SP, #0x201C+s ; s
BL              snprintf
B               loc_18D04

loc_18E88               ; jumptable 00018C7C case 11
ADD             R4, R9, R4
STR             R8, [SP,#0x201C+var_201C]
MOV             R3, R7
LDR             R2, [R4,#0xC] ; format
MOVW            R1, #0x1FFF ; maxlen
ADD             R0, SP, #0x201C+s ; s
BL              snprintf
B               loc_18D04

loc_18EA8               ; jumptable 00018C7C case 12
MOVW            R1, #:lower16:aTrue ; "true"
ADD             R4, R9, R4
MOVT            R1, #:upper16:aTrue ; "true"
CMP             R7, #0
MOVW            R3, #:lower16:(aInvalidParamet_0+0x24) ; "false"
LDR             R2, [R4,#0xC] ; format
MOVT            R3, #:upper16:(aInvalidParamet_0+0x24) ; "false"
ADD             R0, SP, #0x201C+s ; s
MOVNE           R3, R1
MOVW            R1, #0x1FFF ; maxlen
BL              snprintf
B               loc_18D04

def_18C7C               ; jumptable 00018C7C default case, case 3
ADD             R4, R9, R4
ADD             R0, SP, #0x201C+s ; dest
LDR             R1, [R4,#0xC] ; src
BL              strcpy
B               loc_18D04
; End of function sub_18AD4

off_18EEC DCD dword_68AA8



; int __fastcall sub_18EF0(unsigned int *, int, int, unsigned __int8)
sub_18EF0

arg_0=  0

STR             R3, [SP,#arg_0]
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x2E ; '.'
B               sub_18AD4
; End of function sub_18EF0




; void __fastcall sub_18F04(unsigned int *, int, const char *, int)
sub_18F04

var_1008= -0x1008
var_1000= -0x1000

PUSH            {R4-R8,LR}
SUBS            R4, R2, #0
SUB             SP, SP, #0x1000
MOV             R7, R0
SUB             SP, SP, #8
MOV             R5, R3
BEQ             loc_18F94
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_18F94

loc_18F2C
MOVW            R1, #:lower16:aW ; "w"
MOV             R0, R4
MOVT            R1, #:upper16:aW ; "w"
BL              fopen64
SUBS            R6, R0, #0
BEQ             loc_18FA4
BL              sub_2D174
MOV             R0, R6  ; stream
BL              fclose
MOV             R1, R5
MOV             R0, R4  ; s
BL              sub_15C2C
MOV             R6, R0
STR             R5, [SP,#0x1008+var_1008]
MOV             R0, R7
MOV             R3, R6
MOV             R2, #0
MOV             R1, #0x2C ; ','
BL              sub_18AD4
CMP             R4, R6
BEQ             loc_18F88
MOV             R0, R6  ; ptr
BL              free

loc_18F88
ADD             SP, SP, #0x1000
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_18F94
ADD             R4, SP, #0x1008+var_1000
MOV             R0, R4
BL              sub_2D7F4
B               loc_18F2C

loc_18FA4
MOV             R1, R5
MOV             R0, R4  ; s
BL              sub_15C2C
MOV             R8, R0
STR             R5, [SP,#0x1008+var_1008]
MOV             R0, R7
MOV             R2, R6
MOV             R3, R8
MOV             R1, #0x2B ; '+'
BL              sub_18AD4
CMP             R4, R8
BEQ             loc_18F88
MOV             R0, R8  ; ptr
BL              free
ADD             SP, SP, #0x1000
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function sub_18F04




; int __fastcall sub_18FE8(unsigned int *, int, int, unsigned __int8)
sub_18FE8

arg_0=  0

STR             R3, [SP,#arg_0]
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x7C ; '|'
B               sub_18AD4
; End of function sub_18FE8

PUSH            {R4-R10,LR}
SUB             SP, SP, #0x2000
SUB             SP, SP, #8
MOV             R5, R0
MOV             R4, R2
MOV             R6, R3
BL              sub_17730
SUBS            R7, R0, #0
BEQ             loc_1915C
CMP             R4, #0
BEQ             loc_19034
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_19058

loc_19034
MOV             R3, #0
STR             R6, [SP]
MOV             R0, R5
MOV             R2, R3
MOV             R1, #0xF
BL              sub_18AD4

loc_1904C
ADD             SP, SP, #0x2000
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_19058
MOV             R1, #0x2C ; ','
MOV             R0, R4
BL              strchr
CMP             R0, #0
BEQ             loc_19138
ADDS            R8, R0, #1
MOV             R9, #0
STRB            R9, [R0]
BEQ             loc_19138
LDRB            R3, [R0,#1]
CMP             R3, R9
BEQ             loc_19138
MOV             R0, R4
MOV             R2, #0xA
MOV             R1, R9
BL              strtol
CMP             R7, R0
MOV             R4, R0
MOVGT           R7, #0
MOVLE           R7, #1
ORRS            R7, R7, R0,LSR#31
BNE             loc_19180
BL              sub_177EC
CMP             R0, #0
BLT             loc_1919C
BL              sub_3046C
MOV             R9, R0
MOV             R1, #0x2C ; ','
LDR             R10, [R9,#4]
MOV             R0, R8
BL              strchr
SUBS            R2, R0, #0
STRBNE          R7, [R2]
ADDNE           R2, R2, #1
LDR             R7, [R10,#0x28]
CMP             R7, #0
BEQ             loc_191D4
MOV             R0, R9
ADD             R3, SP, #8
MOV             R1, R8
BLX             R7
SUBS            R7, R0, #0
BEQ             loc_191B8
MOVW            R1, #:lower16:aHelp ; "help"
MOV             R0, R8
MOVT            R1, #:upper16:aHelp ; "help"
BL              strcasecmp
CMP             R0, #0
STR             R6, [SP]
MOV             R3, R7
MOV             R2, R4
MOV             R0, R5
MOVEQ           R1, #0x76 ; 'v'
MOVNE           R1, #0x78 ; 'x'
BL              sub_18AD4
B               loc_1904C

loc_19138
MOV             R3, #0
STR             R6, [SP]
MOV             R0, R5
MOV             R2, R3
MOV             R1, #0x74 ; 't'
BL              sub_18AD4
ADD             SP, SP, #0x2000
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_1915C
STR             R6, [SP]
MOV             R0, R5
MOV             R3, R7
MOV             R2, R7
MOV             R1, #0x69 ; 'i'
BL              sub_18AD4
ADD             SP, SP, #0x2000
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_19180
MOV             R2, R0
STR             R6, [SP]
MOV             R3, R9
MOV             R0, R5
MOV             R1, #0x6B ; 'k'
BL              sub_18AD4
B               loc_1904C

loc_1919C
STR             R6, [SP]
MOV             R3, R7
MOV             R2, R4
MOV             R0, R5
MOV             R1, #0x6B ; 'k'
BL              sub_18AD4
B               loc_1904C

loc_191B8
STR             R6, [SP]
MOV             R3, R7
MOV             R2, R4
MOV             R0, R5
MOV             R1, #0x77 ; 'w'
BL              sub_18AD4
B               loc_1904C

loc_191D4
STR             R6, [SP]
MOV             R3, R7
MOV             R2, R4
MOV             R0, R5
MOV             R1, #0x75 ; 'u'
BL              sub_18AD4
B               loc_1904C



; int __fastcall sub_191F0(unsigned int *, int, const char *, unsigned __int8)
sub_191F0

arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R6, R0
MOV             R4, R2
MOV             R7, R3
BL              sub_17730
SUBS            R5, R0, #0
BEQ             loc_192A4
CMP             R4, #0
BEQ             loc_19220
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_1923C

loc_19220
MOV             R3, #0
STR             R7, [SP,#arg_0]
MOV             R0, R6
MOV             R2, R3
MOV             R1, #0xF
POP             {R4-R8,LR}
B               sub_18AD4

loc_1923C               ; nptr
MOV             R0, R4
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
CMP             R5, R0
MOV             R4, R0
MOVGT           R5, #0
MOVLE           R5, #1
ORRS            R5, R5, R0,LSR#31
BNE             loc_192C0
BL              sub_177EC
CMP             R0, #0
BLT             loc_192DC
BL              sub_3046C
LDR             R3, [R0,#4]
LDR             R3, [R3,#0x24]
CMP             R3, #0
BEQ             loc_192F8
BLX             R3
STR             R7, [SP,#arg_0]
MOV             R3, R5
MOV             R2, R4
MOV             R0, R6
MOV             R1, #0x71 ; 'q'
POP             {R4-R8,LR}
B               sub_18AD4

loc_192A4
STR             R7, [SP,#arg_0]
MOV             R0, R6
MOV             R3, R5
MOV             R2, R5
MOV             R1, #0x69 ; 'i'
POP             {R4-R8,LR}
B               sub_18AD4

loc_192C0
STR             R7, [SP,#arg_0]
MOV             R2, R0
MOV             R3, #0
MOV             R0, R6
MOV             R1, #0x6B ; 'k'
POP             {R4-R8,LR}
B               sub_18AD4

loc_192DC
STR             R7, [SP,#arg_0]
MOV             R3, R5
MOV             R2, R4
MOV             R0, R6
MOV             R1, #0x6B ; 'k'
POP             {R4-R8,LR}
B               sub_18AD4

loc_192F8
STR             R7, [SP,#arg_0]
MOV             R2, R4
MOV             R0, R6
MOV             R1, #0x72 ; 'r'
POP             {R4-R8,LR}
B               sub_18AD4
; End of function sub_191F0

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x810
MOV             R7, R0
MOV             R4, R2
MOV             R6, R3
BL              sub_17730
SUBS            R5, R0, #0
BEQ             loc_1945C
CMP             R4, #0
BEQ             loc_19344
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_19364

loc_19344
MOV             R3, #0
STR             R6, [SP]
MOV             R0, R7
MOV             R2, R3
MOV             R1, #0xF
BL              sub_18AD4

loc_1935C
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_19364
MOV             R0, R4
MOV             R2, #0xA
MOV             R1, #0
BL              strtol
CMP             R5, R0
MOV             R4, R0
MOVGT           R5, #0
MOVLE           R5, #1
ORRS            R5, R5, R0,LSR#31
BNE             loc_1947C
BL              sub_177EC
SUBS            R8, R0, #0
BLT             loc_1949C
BL              sub_3046C
MOVW            R3, #:lower16:byte_68BD5
MOV             R5, R0
MOVT            R3, #:upper16:byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1942C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_193F0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_193F0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1942C

loc_193F0
LDR             R1, [R5,#8]
MOV             R2, #aApiRequestToAs ; "API: request to ascdisable ascid %d dev"...
ADD             R0, SP, #0x10
MOV             R3, R4
STR             R1, [SP,#8]
MOV             R1, #0x800
LDR             R12, [R5,#4]
LDR             R12, [R12,#8]
STMEA           SP, {R8,R12}
BL              snprintf
ADD             R1, SP, #0x10
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_1942C
LDR             R3, [R5,#0x20]
CMP             R3, #1
BEQ             loc_194B8
MOV             R3, #1
MOV             R2, R4
STR             R3, [R5,#0x20]
MOV             R0, R7
MOV             R3, #0
STR             R6, [SP]
MOV             R1, #0x6F ; 'o'
BL              sub_18AD4
B               loc_1935C

loc_1945C
STR             R6, [SP]
MOV             R0, R7
MOV             R3, R5
MOV             R2, R5
MOV             R1, #0x69 ; 'i'
BL              sub_18AD4
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_1947C
MOV             R2, R0
STR             R6, [SP]
MOV             R0, R7
MOV             R3, #0
MOV             R1, #0x6B ; 'k'
BL              sub_18AD4
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_1949C
STR             R6, [SP]
MOV             R3, R5
MOV             R2, R4
MOV             R0, R7
MOV             R1, #0x6B ; 'k'
BL              sub_18AD4
B               loc_1935C

loc_194B8
STR             R6, [SP]
MOV             R2, R4
MOV             R0, R7
MOV             R3, #0
MOV             R1, #0x6D ; 'm'
BL              sub_18AD4
B               loc_1935C
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x820
SUB             SP, SP, #4
MOV             R4, R0
MOV             R6, R2
MOV             R5, R3
BL              sub_17730
SUBS            R7, R0, #0
BEQ             loc_196FC
CMP             R6, #0
BEQ             loc_1950C
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_19530

loc_1950C
MOV             R3, #0
STR             R5, [SP]
MOV             R0, R4
MOV             R2, R3
MOV             R1, #0xF
BL              sub_18AD4

loc_19524
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_19530
MOV             R0, R6
MOV             R2, #0xA
MOV             R1, #0
BL              strtol
CMP             R7, R0
MOV             R6, R0
MOVGT           R7, #0
MOVLE           R7, #1
ORRS            R7, R7, R0,LSR#31
BNE             loc_19720
BL              sub_177EC
SUBS            R3, R0, #0
MOV             R8, R3
BLT             loc_19780
MOV             R10, #byte_68BD5
BL              sub_3046C
LDRB            R3, [R10]
MOV             R11, R0
CMP             R3, #0
BEQ             loc_19600
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_195C0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_195C0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_19600

loc_195C0
LDR             R1, [R11,#8]
MOV             R2, #aApiRequestToAs_0 ; "API: request to ascenable ascid %d devi"...
ADD             R0, SP, #0x20 ; ' '
MOV             R3, R6
STR             R1, [SP,#8]
MOV             R1, #0x800
LDR             R12, [R11,#4]
LDR             R12, [R12,#8]
STR             R8, [SP]
STR             R12, [SP,#4]
BL              snprintf
ADD             R1, SP, #0x20 ; ' '
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_19600
LDR             R3, [R11,#0x20]
CMP             R3, #1
BNE             loc_19744
MOV             R9, #dword_75588
LDR             R3, [R9]
CMP             R3, #0
BLE             loc_19764
MOVW            R3, #:lower16:(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:byte_74500
MOVT            R3, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVT            R2, #:upper16:byte_74500
STR             R3, [SP,#0x14]
MOV             R7, #0
STR             R2, [SP,#0x18]
STR             R6, [SP,#0x1C]
B               loc_19650

loc_19644
LDR             R3, [R9]
CMP             R3, R7
BLE             loc_19760

loc_19650
MOV             R0, R7
ADD             R7, R7, #1
BL              sub_31B04
LDR             R3, [R0,#0x24]
MOV             R6, R0
LDR             R3, [R3]
CMP             R8, R3
BNE             loc_19644
LDRB            R3, [R10]
MOVW            R2, #:lower16:aApiPushingSemP ; "API: Pushing sem post to thread %d"
MOV             R1, #0x800
MOVT            R2, #:upper16:aApiPushingSemP ; "API: Pushing sem post to thread %d"
ADD             R0, SP, #0x20 ; ' '
CMP             R3, #0
MOV             R3, #0
STR             R3, [R11,#0x20]
BEQ             loc_196E4
LDR             R12, [SP,#0x18]
MOV             R3, #byte_68BD4
LDRB            R12, [R12]
CMP             R12, #0
BNE             loc_196CC
LDRB            R3, [R3]
MOV             R12, #dword_67DB4
CMP             R3, #0
BNE             loc_196CC
LDR             R3, [R12]
CMP             R3, #6
BLE             loc_196E4

loc_196CC
LDR             R3, [R6]
BL              snprintf
ADD             R1, SP, #0x20 ; ' '
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_196E4
ADD             R0, R6, #0x10
MOVW            R3, #0xFA1
LDR             R2, =aAscenable ; "ascenable"
LDR             R1, [SP,#0x14]
BL              sub_251AC
B               loc_19644

loc_196FC
STR             R5, [SP]
MOV             R0, R4
MOV             R3, R7
MOV             R2, R7
MOV             R1, #0x69 ; 'i'
BL              sub_18AD4
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_19720
MOV             R2, R0
STR             R5, [SP]
MOV             R0, R4
MOV             R3, #0
MOV             R1, #0x6B ; 'k'
BL              sub_18AD4
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_19744
STR             R5, [SP]
MOV             R2, R6
MOV             R0, R4
MOV             R3, #0
MOV             R1, #0x6C ; 'l'
BL              sub_18AD4
B               loc_19524

loc_19760
LDR             R6, [SP,#0x1C]

loc_19764
STR             R5, [SP]
MOV             R2, R6
MOV             R0, R4
MOV             R3, #0
MOV             R1, #0x6E ; 'n'
BL              sub_18AD4
B               loc_19524

loc_19780
STR             R5, [SP]
MOV             R3, R7
MOV             R2, R6
MOV             R0, R4
MOV             R1, #0x6B ; 'k'
BL              sub_18AD4
B               loc_19524
off_1979C DCD aAscenable ; "ascenable"



; int __fastcall sub_197A0(unsigned int *, int, int, unsigned __int8)
sub_197A0

arg_0=  0

STR             R3, [SP,#arg_0]
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x66 ; 'f'
B               sub_18AD4
; End of function sub_197A0




; int __fastcall sub_197B4(unsigned int *, int, const char *, unsigned __int8)
sub_197B4

arg_0=  0x20

PUSH            {R4-R10,LR}
SUBS            R4, R2, #0
MOV             R6, R3
BEQ             loc_19894
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_19894
MOV             R5, R0
MOV             R1, #0x2C ; ',' ; c
MOV             R0, R4  ; s
BL              strchr
SUBS            R7, R0, #0
BEQ             loc_198AC
MOV             R9, #0
MOV             R3, R7
STRB            R9, [R3],#1
CMP             R3, R9
BEQ             loc_198AC
LDRB            R8, [R7,#1]
CMP             R8, R9
BEQ             loc_198AC
MOVW            R1, #:lower16:aAll_0 ; "all"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aAll_0 ; s2
BL              strcasecmp
CMP             R0, #0
BNE             loc_198C8
MOV             R9, R0
MOV             R10, #1

loc_19828
BL              __ctype_tolower_loc
LDR             R3, [R0]
LDRB            R4, [R3,R8,LSL#2]
CMP             R4, #0x74 ; 't'
CMPNE           R4, #0x66 ; 'f'
STRB            R4, [R7,#1]
BNE             loc_19900
CMP             R4, #0x74 ; 't'
BEQ             loc_19938

loc_1984C
CMP             R10, #0
BNE             loc_19930

loc_19854
CMP             R9, #0
BNE             loc_19928

loc_1985C
MOVW            R2, #:lower16:aAll ; "All"
CMP             R10, #0
MOVT            R2, #:upper16:aAll ; "All"
MOV             R3, #aBestshare ; "BestShare"
MOVNE           R3, R2
CMP             R4, #0x74 ; 't'
STR             R6, [SP,#arg_0]
MOV             R0, R5
MOV             R2, #0
BEQ             loc_1991C
MOV             R1, #0x61 ; 'a'
POP             {R4-R10,LR}
B               sub_18AD4

loc_19894
MOV             R3, #0
STR             R6, [SP,#arg_0]
MOV             R2, R3
MOV             R1, #0x5E ; '^'
POP             {R4-R10,LR}
B               sub_18AD4

loc_198AC
MOV             R3, #0
STR             R6, [SP,#arg_0]
MOV             R0, R5
MOV             R2, R3
MOV             R1, #0x4B ; 'K'
POP             {R4-R10,LR}
B               sub_18AD4

loc_198C8
MOVW            R1, #:lower16:aBestshare_0 ; "bestshare"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aBestshare_0 ; "bestshare"
BL              strcasecmp
SUBS            R10, R0, #0
MOVEQ           R9, #1
BEQ             loc_19828
STR             R6, [SP,#arg_0]
MOV             R3, R4
MOV             R2, R9
MOV             R0, R5
MOV             R1, #0x5F ; '_'
POP             {R4-R10,LR}
B               sub_18AD4

loc_19900
MOV             R3, #0
STR             R6, [SP,#arg_0]
MOV             R0, R5
MOV             R2, R3
MOV             R1, #0x4C ; 'L'
POP             {R4-R10,LR}
B               sub_18AD4

loc_1991C
MOV             R1, #0x60 ; '`'
POP             {R4-R10,LR}
B               sub_18AD4

loc_19928
BL              sub_2D75C
B               loc_1985C

loc_19930
BL              sub_32DA0
B               loc_19854

loc_19938
BL              sub_304E0
B               loc_1984C
; End of function sub_197B4




; int __fastcall sub_19940(unsigned int *, int, int, unsigned __int8)
sub_19940

arg_0=  0

STR             R3, [SP,#arg_0]
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x58 ; 'X'
B               sub_18AD4
; End of function sub_19940




; int __fastcall sub_19954(unsigned int *, int, const char *, unsigned __int8)
sub_19954

arg_0=  0x18

PUSH            {R4-R8,LR}
SUBS            R4, R2, #0
MOV             R6, R3
BEQ             loc_19A04
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_19A04
MOV             R5, R0
MOV             R1, #0x2C ; ',' ; c
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_19A2C
MOV             R8, #0
MOV             R2, #0xA ; base
STRB            R8, [R0],#1 ; nptr
MOV             R1, R8  ; endptr
BL              strtol
MOVW            R3, #0x270F
MOV             R7, R0
CMP             R0, R3
BHI             loc_19A48
MOVW            R1, #:lower16:(aPushingPoolDWo+0x20) ; "queue"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:(aPushingPoolDWo+0x20) ; s2
BL              strcasecmp
CMP             R0, #0
BEQ             loc_19A1C
MOVW            R1, #:lower16:aScantime_0 ; "scantime"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aScantime_0 ; "scantime"
BL              strcasecmp
CMP             R0, #0
BNE             loc_19A64
MOV             R3, #dword_68754
STR             R7, [R3]

loc_199E8
STR             R6, [SP,#arg_0]
MOV             R3, R4
MOV             R2, R7
MOV             R0, R5
MOV             R1, #0x52 ; 'R'
POP             {R4-R8,LR}
B               sub_18AD4

loc_19A04
MOV             R3, #0
STR             R6, [SP,#arg_0]
MOV             R2, R3
MOV             R1, #0x55 ; 'U'
POP             {R4-R8,LR}
B               sub_18AD4

loc_19A1C
MOV             R3, #dword_68824
STR             R7, [R3]
B               loc_199E8

loc_19A2C
STR             R6, [SP,#arg_0]
MOV             R3, R4
MOV             R2, R0
MOV             R1, #0x56 ; 'V'
MOV             R0, R5
POP             {R4-R8,LR}
B               sub_18AD4

loc_19A48
STR             R6, [SP,#arg_0]
MOV             R3, R4
MOV             R2, R0
MOV             R1, #0x54 ; 'T'
MOV             R0, R5
POP             {R4-R8,LR}
B               sub_18AD4

loc_19A64
MOVW            R1, #:lower16:aExpiry_0 ; "expiry"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aExpiry_0 ; "expiry"
BL              strcasecmp
CMP             R0, #0
MOVEQ           R3, #dword_68758
STREQ           R7, [R3]
BEQ             loc_199E8
STR             R6, [SP,#arg_0]
MOV             R3, R4
MOV             R2, R8
MOV             R0, R5
MOV             R1, #0x53 ; 'S'
POP             {R4-R8,LR}
B               sub_18AD4
; End of function sub_19954




; int __fastcall sub_19AA4(unsigned int *, int, _BYTE *, unsigned __int8)
sub_19AA4

arg_0=  0x18

PUSH            {R4-R8,LR}
SUBS            R4, R2, #0
MOV             R7, R3
BEQ             loc_19B18
LDRB            R6, [R4]
CMP             R6, #0
BEQ             loc_19B18
MOV             R5, R0
BL              __ctype_tolower_loc
LDR             R3, [R0]
LDRB            R1, [R3,R6,LSL#2]
CMP             R1, #0x74 ; 't'
CMPNE           R1, #0x66 ; 'f'
STRB            R1, [R4]
MOVNE           R3, #1
MOVEQ           R3, #0
BNE             loc_19B30
SUB             R12, R1, #0x74 ; 't'
MOVW            LR, #:lower16:byte_755D4
CLZ             R12, R12
MOVT            LR, #:upper16:byte_755D4
MOV             R12, R12,LSR#5
STR             R7, [SP,#arg_0]
MOV             R0, R5
STRB            R12, [LR]
MOV             R2, R12
MOV             R1, #0x4D ; 'M'
POP             {R4-R8,LR}
B               sub_18AD4

loc_19B18
MOV             R3, #0
STR             R7, [SP,#arg_0]
MOV             R2, R3
MOV             R1, #0x4B ; 'K'
POP             {R4-R8,LR}
B               sub_18AD4

loc_19B30
MOV             R3, #0
STR             R7, [SP,#arg_0]
MOV             R0, R5
MOV             R2, R3
MOV             R1, #0x4C ; 'L'
POP             {R4-R8,LR}
B               sub_18AD4
; End of function sub_19AA4




; void __fastcall sub_19B4C(unsigned int *, int, const char *, int)
sub_19B4C

var_8= -8
arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R4, #dword_733CC
MOV             R5, R3
SUB             SP, SP, #8
LDR             R3, [R4]
CMP             R3, #0
STREQ           R5, [SP,#8+arg_0]
MOVEQ           R2, R3
MOVEQ           R1, #8
BEQ             loc_19BA4
CMP             R2, #0
MOV             R6, R0
BEQ             loc_19B90
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_19BB0

loc_19B90
MOV             R3, #0
MOV             R0, R6
MOV             R2, R3
MOV             R1, #0x19
STR             R5, [SP,#8+arg_0]

loc_19BA4
ADD             SP, SP, #8
POP             {R4-R8,LR}
B               sub_18AD4

loc_19BB0               ; nptr
MOV             R0, R2
MOV             R1, #0  ; endptr
MOV             R2, #0xA ; base
BL              strtol
SUBS            R7, R0, #0
BLT             loc_19C58
LDR             R3, [R4]
CMP             R7, R3
BGE             loc_19C58
CMP             R3, #1
BLE             loc_19C90
MOV             R3, #dword_744C8
LDR             R3, [R3]
LDR             R4, [R3,R7,LSL#2]
BL              sub_31FF4
CMP             R4, R0
BEQ             loc_19CC4

loc_19BF8
BL              sub_31FF4
CMP             R4, R0
BEQ             loc_19C78
MOV             R3, #0
MOV             R1, R5
STR             R3, [R4,#0x64]
LDR             R0, [R4,#0xA4] ; s
BL              sub_15C2C
LDR             R3, [R4,#0xA4]
MOV             R8, R0
MOV             R0, R4
CMP             R8, R3
BEQ             loc_19CA8
BL              sub_2D0D8
MOV             R0, R6
STR             R5, [SP,#8+var_8]
MOV             R2, R7
MOV             R3, R8
MOV             R1, #0x44 ; 'D'
BL              sub_18AD4
MOV             R0, R8
ADD             SP, SP, #8
POP             {R4-R8,LR}
B               free

loc_19C58
STR             R5, [SP,#8+arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x1A
ADD             SP, SP, #8
POP             {R4-R8,LR}
B               sub_18AD4

loc_19C78
STR             R5, [SP,#8+arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x43 ; 'C'
B               loc_19BA4

loc_19C90
STR             R5, [SP,#8+arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x42 ; 'B'
B               loc_19BA4

loc_19CA8
BL              sub_2D0D8
STR             R5, [SP,#8+arg_0]
MOV             R3, R8
MOV             R2, R7
MOV             R0, R6
MOV             R1, #0x44 ; 'D'
B               loc_19BA4

loc_19CC4
MOV             R0, #0
BL              sub_34178
B               loc_19BF8
; End of function sub_19B4C




; int __fastcall sub_19CD0(unsigned int *, int, char *nptr, unsigned __int8, int)
sub_19CD0

arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R4, #dword_733CC
MOV             R5, R3
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_19DA4
CMP             R2, #0
MOV             R6, R0
BEQ             loc_19D04
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_19D20

loc_19D04
MOV             R3, #0
STR             R5, [SP,#arg_0]
MOV             R0, R6
MOV             R2, R3
MOV             R1, #0x19
POP             {R4-R8,LR}
B               sub_18AD4

loc_19D20               ; nptr
MOV             R0, R2
MOV             R1, #0  ; endptr
MOV             R2, #0xA ; base
BL              strtol
SUBS            R7, R0, #0
BLT             loc_19DB8
LDR             R3, [R4]
CMP             R7, R3
BGE             loc_19DB8
MOV             R3, #dword_744C8
LDR             R3, [R3]
LDR             R4, [R3,R7,LSL#2]
LDR             R3, [R4,#0x64]
CMP             R3, #0
BEQ             loc_19DF0
MOV             R3, #dword_74578
LDR             R3, [R3]
CMP             R3, #1
BLE             loc_19DD4
MOV             R8, #0
STR             R8, [R4,#0x64]
BL              sub_31FF4
CMP             R4, R0
BEQ             loc_19E08

loc_19D88
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x30 ; '0'
POP             {R4-R8,LR}
B               sub_18AD4

loc_19DA4
STR             R5, [SP,#arg_0]
MOV             R2, R3
MOV             R1, #8
POP             {R4-R8,LR}
B               sub_18AD4

loc_19DB8
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x1A
POP             {R4-R8,LR}
B               sub_18AD4

loc_19DD4
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x33 ; '3'
POP             {R4-R8,LR}
B               sub_18AD4

loc_19DF0
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R1, #0x32 ; '2'
POP             {R4-R8,LR}
B               sub_18AD4

loc_19E08
MOV             R0, R8
BL              sub_34178
B               loc_19D88
; End of function sub_19CD0




; int __fastcall sub_19E14(unsigned int *, int, char *nptr, unsigned __int8, int)
sub_19E14

arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R4, #dword_733CC
MOV             R5, R3
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_19EDC
CMP             R2, #0
MOV             R6, R0
BEQ             loc_19E48
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_19E64

loc_19E48
MOV             R3, #0
STR             R5, [SP,#arg_0]
MOV             R0, R6
MOV             R2, R3
MOV             R1, #0x19
POP             {R4-R8,LR}
B               sub_18AD4

loc_19E64               ; nptr
MOV             R0, R2
MOV             R1, #0  ; endptr
MOV             R2, #0xA ; base
BL              strtol
SUBS            R7, R0, #0
BLT             loc_19EF0
LDR             R3, [R4]
CMP             R7, R3
BGE             loc_19EF0
MOV             R3, #dword_744C8
LDR             R3, [R3]
LDR             R4, [R3,R7,LSL#2]
LDR             R3, [R4,#0x64]
CMP             R3, #1
BEQ             loc_19F18
MOV             R3, #1
LDR             R8, [R4,#4]
STR             R3, [R4,#0x64]
BL              sub_31FF4
LDR             R3, [R0,#4]
CMP             R8, R3
BLT             loc_19F0C

loc_19EC0
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x2F ; '/'
POP             {R4-R8,LR}
B               sub_18AD4

loc_19EDC
STR             R5, [SP,#arg_0]
MOV             R2, R3
MOV             R1, #8
POP             {R4-R8,LR}
B               sub_18AD4

loc_19EF0
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x1A
POP             {R4-R8,LR}
B               sub_18AD4

loc_19F0C
MOV             R0, R4
BL              sub_34178
B               loc_19EC0

loc_19F18
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x31 ; '1'
POP             {R4-R8,LR}
B               sub_18AD4
; End of function sub_19E14




; int __fastcall sub_19F34(unsigned int *, int, char *s, unsigned __int8, int)
sub_19F34

arg_0=  0x20

PUSH            {R4-R10,LR}
MOV             R4, #dword_733CC
MOV             R6, R3
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_19FE4
CMP             R2, #0
MOV             R7, R0
BEQ             loc_19FC8
LDRB            R3, [R2]
CMP             R3, #0
BEQ             loc_19FC8
MOV             R1, #0x2C ; ',' ; c
MOV             R0, R2  ; s
MOV             R5, R2
BL              strchr
SUBS            R9, R0, #0
BEQ             loc_19FF8
MOV             R8, #0
MOV             R0, R5  ; nptr
STRB            R8, [R9]
MOV             R1, R8  ; endptr
MOV             R2, #0xA ; base
BL              strtol
SUBS            R3, R0, #0
BLT             loc_19FAC
LDR             R2, [R4]
CMP             R3, R2
BLT             loc_1A014

loc_19FAC
STR             R6, [SP,#arg_0]
MOV             R2, R3
MOV             R0, R7
MOV             R3, #0
MOV             R1, #0x1A
POP             {R4-R10,LR}
B               sub_18AD4

loc_19FC8
MOV             R3, #0
STR             R6, [SP,#arg_0]
MOV             R0, R7
MOV             R2, R3
MOV             R1, #0x19
POP             {R4-R10,LR}
B               sub_18AD4

loc_19FE4
STR             R6, [SP,#arg_0]
MOV             R2, R3
MOV             R1, #8
POP             {R4-R10,LR}
B               sub_18AD4

loc_19FF8
STR             R6, [SP,#arg_0]
MOV             R3, R5
MOV             R2, R9
MOV             R0, R7
MOV             R1, #0x56 ; 'V'
POP             {R4-R10,LR}
B               sub_18AD4

loc_1A014
MOVW            R2, #:lower16:dword_744C8
MOV             R1, R8  ; endptr
MOVT            R2, #:upper16:dword_744C8
ADD             R0, R9, #1 ; nptr
LDR             R12, [R2]
MOV             R2, #0xA ; base
LDR             R5, [R12,R3,LSL#2]
BL              strtol
SUBS            R4, R0, #0
BLT             loc_1A060
STR             R4, [R5,#0x38]
BL              sub_2C6A8
LDR             R3, [R5,#0xA4]
MOV             R2, R4
STR             R6, [SP,#arg_0]
MOV             R0, R7
MOV             R1, #0x7A ; 'z'
POP             {R4-R10,LR}
B               sub_18AD4

loc_1A060
LDR             R3, [R5,#0xA4]
MOV             R2, R4
STR             R6, [SP,#arg_0]
MOV             R0, R7
MOV             R1, #0x79 ; 'y'
POP             {R4-R10,LR}
B               sub_18AD4
; End of function sub_19F34



; Attributes: bp-based frame fpd=0xFFFFFFE0

; int __fastcall sub_1A07C(unsigned int *, int, char *s, int)
sub_1A07C

var_14= -0x14
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOVW            R5, #:lower16:dword_733CC
ADD             R11, SP, #0x20
MOVT            R5, #:upper16:dword_733CC
SUB             SP, SP, #0x14
STR             R3, [R11,#-0x20+var_8]
MOV             R10, SP
LDR             R3, [R5]
STR             R0, [R11,#-0x20+var_C]
CMP             R3, #0
BEQ             loc_1A274
CMP             R2, #0
MOV             R4, R2
BEQ             loc_1A0C0
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_1A0E8

loc_1A0C0
LDR             R2, [R11,#-0x20+var_8]
MOV             R3, #0
MOV             R1, #0x19
STR             R2, [SP,#0x14+var_14]
MOV             R2, R3
LDR             R0, [R11,#-0x20+var_C]
BL              sub_18AD4

loc_1A0DC
MOV             SP, R10
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_1A0E8
MOV             R2, R3,LSL#2
ADD             R1, R3, #7
BIC             R1, R1, #7
ADD             R2, R2, #0xA
SUB             SP, SP, R1
BIC             R2, R2, #7
CMP             R3, #0
ADD             R7, SP, #0x14+var_C
SUB             SP, SP, R2
ADD             R8, SP, #0x14+var_C
BLE             loc_1A130
SUB             R3, R3, #1
SUB             R2, R7, #1
ADD             R3, R7, R3
MOV             R1, #0

loc_1A124
STRB            R1, [R2,#1]!
CMP             R2, R3
BNE             loc_1A124

loc_1A130
MOV             R6, #0
B               loc_1A144

loc_1A138
LDRB            R3, [R9]
CMP             R3, #0
BEQ             loc_1A1B4

loc_1A144               ; c
MOV             R1, #0x2C ; ','
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
MOV             R2, #0xA ; base
MOVNE           R3, #0
ADD             R9, R0, #1
STRBNE          R3, [R0]
MOVEQ           R9, R0
MOV             R1, #0  ; endptr
MOV             R0, R4  ; nptr
BL              strtol
CMP             R0, #0
MOV             R3, #1
MOV             R4, R9
ADD             R12, R6, R3
BLT             loc_1A29C
LDR             R1, [R5]
CMP             R1, R0
BLE             loc_1A29C
LDRB            R2, [R7,R0]
CMP             R2, #0
BNE             loc_1A2BC
CMP             R9, #0
STR             R6, [R8,R0,LSL#2]
STRB            R3, [R7,R0]
MOV             R6, R12
BNE             loc_1A138

loc_1A1B4
MOVW            R3, #:lower16:dword_744C8
SUB             R5, R7, #1
MOVT            R3, #:upper16:dword_744C8
ADD             R0, R5, R1
LDR             R4, [R3]
MOV             R2, #0
MOV             R3, R5

loc_1A1D0
LDRB            LR, [R3,#1]!
CMP             LR, #0
LDRNE           LR, [R4,R2,LSL#2]
LDRNE           R6, [R8,R2,LSL#2]
ADD             R2, R2, #1
STRNE           R6, [LR,#4]
CMP             R3, R0
BNE             loc_1A1D0
MOV             R6, #0
MOV             R8, #1

loc_1A1F8
MOV             R2, R5
MOV             R3, #0

loc_1A200
LDRB            R0, [R2,#1]!
CMP             R0, #0
BNE             loc_1A21C
LDR             R0, [R4,R3,LSL#2]
LDR             LR, [R0,#4]
CMP             LR, R6
BEQ             loc_1A28C

loc_1A21C
ADD             R3, R3, #1
CMP             R1, R3
BNE             loc_1A200

loc_1A228
ADD             R6, R6, #1
CMP             R1, R6
BNE             loc_1A1F8
BL              sub_31FF4
LDR             R3, [R0,#4]
CMP             R3, #0
BEQ             loc_1A24C
MOV             R0, #0
BL              sub_34178

loc_1A24C
LDR             R2, [R11,#-0x20+var_8]
MOV             R3, #0
MOV             R1, #0x49 ; 'I'
STR             R2, [SP,#0x14+var_14]
MOV             R2, R3
LDR             R0, [R11,#-0x20+var_C]
BL              sub_18AD4
MOV             SP, R10
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_1A274
LDR             R2, [R11,#-0x20+var_8]
MOV             R1, #8
STR             R2, [SP,#0x14+var_14]
MOV             R2, R3
BL              sub_18AD4
B               loc_1A0DC

loc_1A28C
STR             R12, [R0,#4]
ADD             R12, R12, #1
STRB            R8, [R7,R3]
B               loc_1A228

loc_1A29C
LDR             R3, [R11,#-0x20+var_8]
MOV             R2, R0
MOV             R1, #0x1A
STR             R3, [SP,#0x14+var_14]
MOV             R3, #0
LDR             R0, [R11,#-0x20+var_C]
BL              sub_18AD4
B               loc_1A0DC

loc_1A2BC
LDR             R3, [R11,#-0x20+var_8]
MOV             R2, R0
MOV             R1, #0x4A ; 'J'
STR             R3, [SP,#0x14+var_14]
MOV             R3, #0
LDR             R0, [R11,#-0x20+var_C]
BL              sub_18AD4
B               loc_1A0DC
; End of function sub_1A07C




; void __fastcall sub_1A2DC(unsigned int *, int, char *, int)
sub_1A2DC

var_18= -0x18
s= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R8,LR}
SUBS            R4, R2, #0
SUB             SP, SP, #0x18
MOV             R6, R0
MOV             R5, R3
BEQ             loc_1A300
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_1A320

loc_1A300
MOV             R3, #0
STR             R5, [SP,#0x18+var_18]
MOV             R0, R6
MOV             R2, R3
MOV             R1, #0x34 ; '4'
BL              sub_18AD4

loc_1A318
ADD             SP, SP, #0x18
POP             {R4-R8,PC}

loc_1A320
ADD             R3, SP, #0x18+var_4
ADD             R2, SP, #0x18+var_8
ADD             R1, SP, #0x18+s
MOV             R0, R4
BL              sub_174A0
SUBS            R8, R0, #0
BNE             loc_1A378
MOV             R1, R5
MOV             R0, R4  ; s
BL              sub_15C2C
MOV             R7, R0
STR             R5, [SP,#0x18+var_18]
MOV             R0, R6
MOV             R2, R8
MOV             R3, R7
MOV             R1, #0x35 ; '5'
BL              sub_18AD4
CMP             R4, R7
BEQ             loc_1A318
MOV             R0, R7  ; ptr
BL              free
B               loc_1A318

loc_1A378
BL              sub_324B8
LDR             R1, [SP,#0x18+s]
MOV             R7, R0
BL              sub_2C8A8
LDR             R12, [SP,#0x18+var_4]
MOV             R1, #1  ; int
LDR             R3, [SP,#0x18+var_8] ; int
MOV             R0, R7  ; int
LDR             R2, [SP,#0x18+s] ; s1
STR             R12, [SP,#0x18+var_18] ; int
BL              sub_3EBAC
MOV             R1, R5
LDR             R0, [SP,#0x18+s] ; s
BL              sub_15C2C
MOV             R4, R0
LDR             R2, [R7]
MOV             R3, R4
MOV             R0, R6
STR             R5, [SP,#0x18+var_18]
MOV             R1, #0x37 ; '7'
BL              sub_18AD4
LDR             R3, [SP,#0x18+s]
CMP             R3, R4
BEQ             loc_1A318
MOV             R0, R4  ; ptr
BL              free
B               loc_1A318
; End of function sub_1A2DC




; int __fastcall sub_1A3E4(unsigned int *, int, char *nptr, unsigned __int8, int)
sub_1A3E4

arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R4, #dword_733CC
MOV             R5, R3
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_1A4D0
CMP             R2, #0
MOV             R6, R0
BEQ             loc_1A418
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_1A434

loc_1A418
MOV             R3, #0
STR             R5, [SP,#arg_0]
MOV             R0, R6
MOV             R2, R3
MOV             R1, #0x19
POP             {R4-R8,LR}
B               sub_18AD4

loc_1A434               ; nptr
MOV             R0, R2
MOV             R1, #0  ; endptr
MOV             R2, #0xA ; base
BL              strtol
MOV             R7, R0
MOV             R0, #stru_7453C ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1A560

loc_1A45C               ; rwlock
LDR             R0, =rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_1A540

loc_1A46C               ; mutex
MOV             R0, #stru_7453C
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1A550

loc_1A480
CMP             R7, #0
BLT             loc_1A494
LDR             R3, [R4]
CMP             R7, R3
BLT             loc_1A4E4

loc_1A494               ; rwlock
LDR             R0, =rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1A570

loc_1A4A4
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x1A
POP             {R4-R8,LR}
B               sub_18AD4

loc_1A4D0
STR             R5, [SP,#arg_0]
MOV             R2, R3
MOV             R1, #8
POP             {R4-R8,LR}
B               sub_18AD4

loc_1A4E4
MOVW            R3, #:lower16:dword_744C8
MOV             R2, #1
MOVT            R3, #:upper16:dword_744C8
LDR             R0, =rwlock ; rwlock
LDR             R3, [R3]
LDR             R4, [R3,R7,LSL#2]
STR             R2, [R4,#0x64]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1A580

loc_1A50C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
BL              sub_34178
STR             R5, [SP,#arg_0]
MOV             R2, R7
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x1B
POP             {R4-R8,LR}
B               sub_18AD4

loc_1A540
MOVW            R1, #0xB5B
LDR             R0, =aSwitchpool ; "switchpool"
BL              sub_175A0
B               loc_1A46C

loc_1A550
MOVW            R1, #0xB5B
LDR             R0, =aSwitchpool ; "switchpool"
BL              sub_17668
B               loc_1A480

loc_1A560
MOVW            R1, #0xB5B
LDR             R0, =aSwitchpool ; "switchpool"
BL              sub_17604
B               loc_1A45C

loc_1A570
MOVW            R1, #0xB5E
LDR             R0, =aSwitchpool ; "switchpool"
BL              sub_176CC
B               loc_1A4A4

loc_1A580
MOVW            R1, #0xB65
LDR             R0, =aSwitchpool ; "switchpool"
BL              sub_176CC
; End of function sub_1A3E4

B               loc_1A50C
off_1A590 DCD rwlock
off_1A594 DCD aSwitchpool ; "switchpool"



; int __fastcall sub_1A598(int, int, int, int)
sub_1A598

var_10= -0x10
var_4= -4

PUSH            {R4-R6,LR}
MOV             R6, R3
SUB             SP, SP, #0x10
MOV             R4, #0
MOV             R5, R0
STR             R4, [SP,#0x10+var_4]
BL              sub_17730
STR             R6, [SP,#0x10+var_10]
MOV             R3, R4
STR             R0, [SP,#0x10+var_4]
MOV             R2, R4
MOV             R0, R5
MOV             R1, #0x68 ; 'h'
BL              sub_18AD4
CMP             R6, R4
BEQ             loc_1A630
MOVW            R1, #:lower16:aAscs ; ",\"ASCS\":["
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aAscs ; ",\"ASCS\":["
BL              sub_15B00
MOVW            R1, #:lower16:(aPgaCount+4) ; "Count"
MOV             R6, R0
MOVT            R1, #:upper16:(aPgaCount+4) ; "Count"
ADD             R3, SP, #0x10+var_4
MOV             R2, #6
MOV             R0, R4
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, #1
MOV             R0, R5
BL              sub_17D00
CMP             R6, R4
MOVNE           R3, #1
STRBNE          R3, [R5,#0xD]
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_1A630
MOVW            R1, #:lower16:aAscs_0 ; "ASCS,"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aAscs_0 ; "ASCS,"
BL              sub_15B00
MOVW            R1, #:lower16:(aPgaCount+4) ; "Count"
ADD             R3, SP, #0x10+var_4
STR             R6, [SP,#0x10+var_10]
MOVT            R1, #:upper16:(aPgaCount+4) ; "Count"
MOV             R2, #6
MOV             R0, R6
BL              sub_18850
MOV             R3, R6
MOV             R1, R0
MOV             R2, R6
MOV             R0, R5
BL              sub_17D00
ADD             SP, SP, #0x10
POP             {R4-R6,PC}
; End of function sub_1A598




; int __fastcall sub_1A678(int, int, _BYTE *, int)
sub_1A678

var_8= -8

PUSH            {R4-R6,LR}
SUBS            R6, R2, #0
SUB             SP, SP, #8
MOV             R5, R0
MOV             R4, R3
BEQ             def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17
BL              __ctype_tolower_loc
LDRB            R2, [R6]
LDR             R3, [R0]
LDRB            R2, [R3,R2,LSL#2]
SUB             R3, R2, #0x64 ; 'd'
STRB            R2, [R6]
CMP             R3, #0x13 ; switch 20 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17
jpt_1A6AC DCD loc_1A704 ; jump table for switch statement
DCD def_1A6AC
DCD def_1A6AC
DCD def_1A6AC
DCD def_1A6AC
DCD def_1A6AC
DCD def_1A6AC
DCD def_1A6AC
DCD def_1A6AC
DCD def_1A6AC
DCD loc_1A970
DCD def_1A6AC
DCD loc_1A9C0
DCD loc_1A9E4
DCD loc_1A9FC
DCD loc_1AA1C
DCD def_1A6AC
DCD def_1A6AC
DCD loc_1AA30
DCD loc_1A958

loc_1A704               ; jumptable 0001A6AC case 0
MOVW            R2, #:lower16:byte_68BD5
MOVW            R1, #:lower16:byte_68BD4
MOVT            R2, #:upper16:byte_68BD5
MOVT            R1, #:upper16:byte_68BD4
LDRB            R3, [R2]
EOR             R3, R3, #1
CMP             R3, #0
STRB            R3, [R2]
STRB            R3, [R1]
BEQ             def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17

loc_1A72C
MOVW            R3, #:lower16:byte_73378
MOV             R2, #0
MOVT            R3, #:upper16:byte_73378
STRB            R2, [R3]

def_1A6AC               ; jumptable 0001A6AC default case, cases 1-9,11,16,17
MOV             R3, #0
STR             R4, [SP,#8+var_8]
MOV             R2, R3
MOV             R1, #0x4F ; 'O'
MOV             R0, R5
BL              sub_18AD4
CMP             R4, #0
BEQ             loc_1A864
MOVW            R1, #:lower16:aDebug ; ",\"DEBUG\":["
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aDebug ; ",\"DEBUG\":["
MOV             R4, #0
BL              sub_15B00
MOVW            R3, #:lower16:byte_7559C
MOVW            R1, #:lower16:aSilent ; "Silent"
MOV             R6, R0
MOVT            R3, #:upper16:byte_7559C
MOVT            R1, #:upper16:aSilent ; "Silent"
MOV             R2, #0xE
MOV             R0, R4
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_73378
MOVW            R1, #:lower16:aQuiet ; "Quiet"
MOVT            R3, #:upper16:byte_73378
MOVT            R1, #:upper16:aQuiet ; "Quiet"
MOV             R2, #0xE
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_68BD4
MOVW            R1, #:lower16:aVerbose ; "Verbose"
MOVT            R3, #:upper16:byte_68BD4
MOVT            R1, #:upper16:aVerbose ; "Verbose"
MOV             R2, #0xE
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_68BD5
MOVW            R1, #:lower16:aDebug_0 ; "Debug"
MOVT            R3, #:upper16:byte_68BD5
MOVT            R1, #:upper16:aDebug_0 ; "Debug"
MOV             R2, #0xE
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_73398
MOVW            R1, #:lower16:aRpcproto ; "RPCProto"
MOVT            R3, #:upper16:byte_73398
MOVT            R1, #:upper16:aRpcproto ; "RPCProto"
MOV             R2, #0xE
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_73388
MOVW            R1, #:lower16:aPerdevice ; "PerDevice"
MOVT            R3, #:upper16:byte_73388
MOVT            R1, #:upper16:aPerdevice ; "PerDevice"
MOV             R2, #0xE
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_7449C
MOVW            R1, #:lower16:aWorktime ; "WorkTime"
MOVT            R3, #:upper16:byte_7449C
MOVT            R1, #:upper16:aWorktime ; "WorkTime"
MOV             R2, #0xE
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, #1
MOV             R0, R5
BL              sub_17D00
CMP             R6, R4
MOVNE           R3, #1
STRBNE          R3, [R5,#0xD]
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_1A864
MOVW            R1, #:lower16:aDebug_1 ; "DEBUG,"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aDebug_1 ; "DEBUG,"
BL              sub_15B00
MOVW            R3, #:lower16:byte_7559C
MOVW            R1, #:lower16:aSilent ; "Silent"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_7559C
MOVT            R1, #:upper16:aSilent ; "Silent"
MOV             R2, #0xE
MOV             R0, R4
BL              sub_18850
MOVW            R3, #:lower16:byte_73378
MOVW            R1, #:lower16:aQuiet ; "Quiet"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_73378
MOVT            R1, #:upper16:aQuiet ; "Quiet"
MOV             R2, #0xE
BL              sub_18850
MOVW            R3, #:lower16:byte_68BD4
MOVW            R1, #:lower16:aVerbose ; "Verbose"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_68BD4
MOVT            R1, #:upper16:aVerbose ; "Verbose"
MOV             R2, #0xE
BL              sub_18850
MOVW            R3, #:lower16:byte_68BD5
MOVW            R1, #:lower16:aDebug_0 ; "Debug"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_68BD5
MOVT            R1, #:upper16:aDebug_0 ; "Debug"
MOV             R2, #0xE
BL              sub_18850
MOVW            R3, #:lower16:byte_73398
MOVW            R1, #:lower16:aRpcproto ; "RPCProto"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_73398
MOVT            R1, #:upper16:aRpcproto ; "RPCProto"
MOV             R2, #0xE
BL              sub_18850
MOVW            R3, #:lower16:byte_73388
MOVW            R1, #:lower16:aPerdevice ; "PerDevice"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_73388
MOVT            R1, #:upper16:aPerdevice ; "PerDevice"
MOV             R2, #0xE
BL              sub_18850
MOVW            R3, #:lower16:byte_7449C
MOVW            R1, #:lower16:aWorktime ; "WorkTime"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_7449C
MOVT            R1, #:upper16:aWorktime ; "WorkTime"
MOV             R2, #0xE
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, R4
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R6,LR}
B               sub_17D00

loc_1A958               ; jumptable 0001A6AC case 19
MOV             R3, #byte_7449C
LDRB            R2, [R3]
EOR             R2, R2, #1
STRB            R2, [R3]
B               def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17

loc_1A970               ; jumptable 0001A6AC case 10
MOVW            R0, #:lower16:byte_68BD4
MOVW            R1, #:lower16:byte_68BD5
MOVW            R2, #:lower16:byte_73378
MOV             R3, #0
MOVT            R0, #:upper16:byte_68BD4
MOVT            R1, #:upper16:byte_68BD5
MOVT            R2, #:upper16:byte_73378
STRB            R3, [R0]
STRB            R3, [R1]
MOVW            R0, #:lower16:byte_73398
STRB            R3, [R2]
MOVW            R1, #:lower16:byte_73388
MOVW            R2, #:lower16:byte_7449C
MOVT            R0, #:upper16:byte_73398
MOVT            R1, #:upper16:byte_73388
MOVT            R2, #:upper16:byte_7449C
STRB            R3, [R0]
STRB            R3, [R1]
STRB            R3, [R2]
B               def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17

loc_1A9C0               ; jumptable 0001A6AC case 12
MOVW            R2, #:lower16:byte_73388
MOVW            R1, #:lower16:byte_68BD4
MOVT            R2, #:upper16:byte_73388
MOVT            R1, #:upper16:byte_68BD4
LDRB            R3, [R2]
EOR             R3, R3, #1
STRB            R3, [R2]
STRB            R3, [R1]
B               def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17

loc_1A9E4               ; jumptable 0001A6AC case 13
MOV             R3, #byte_73378
LDRB            R2, [R3]
EOR             R2, R2, #1
STRB            R2, [R3]
B               def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17

loc_1A9FC               ; jumptable 0001A6AC case 14
MOV             R3, #byte_73398

loc_1AA04
LDRB            R2, [R3]
EOR             R2, R2, #1
CMP             R2, #0
STRB            R2, [R3]
BEQ             def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17
B               loc_1A72C

loc_1AA1C               ; jumptable 0001A6AC case 15
MOVW            R3, #:lower16:byte_7559C
MOV             R2, #1
MOVT            R3, #:upper16:byte_7559C
STRB            R2, [R3]
B               def_1A6AC ; jumptable 0001A6AC default case, cases 1-9,11,16,17

loc_1AA30               ; jumptable 0001A6AC case 18
MOV             R3, #byte_68BD4
B               loc_1AA04
; End of function sub_1A678




; int __fastcall sub_1AA3C(int, int, const char *, int, unsigned __int8)
sub_1AA3C

var_70= -0x70
s= -0x64
arg_0=  0x18

PUSH            {R4-R8,LR}
SUBS            R5, R2, #0
SUB             SP, SP, #0x70
MOV             R6, R3
MOV             R7, R0
LDRB            R8, [SP,#0x70+arg_0]
BEQ             loc_1AB8C
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_1AB8C
MOV             R4, #dword_67298
LDR             R3, [R4,#(off_677C8 - 0x67298)] ; "version"
CMP             R3, #0
BEQ             loc_1AC08
ADD             R4, R4, #0x530
B               loc_1AA8C

loc_1AA80
LDR             R3, [R4,#0xC]!
CMP             R3, #0
BEQ             loc_1ABAC

loc_1AA8C               ; s1
MOV             R0, R3
MOV             R1, R5  ; s2
BL              strcmp
CMP             R0, #0
BNE             loc_1AA80
MOVW            R1, #:lower16:aS_1 ; "|%s|"
MOV             R2, R5
MOVT            R1, #:upper16:aS_1 ; "|%s|"
ADD             R0, SP, #0x70+s ; s
BL              sprintf
BL              __ctype_toupper_loc
LDR             R2, [R0]
LDR             R3, [R2,R8,LSL#2]
LDR             R1, [R2,#0x15C]
CMP             R3, R1
BEQ             loc_1AAF0
LDR             R0, [R2,#0x104]
MOV             R2, #unk_73188
ADD             R1, SP, #0x70+s ; needle
SUB             R3, R3, R0
LDR             R0, [R2,R3,LSL#2] ; haystack
BL              strstr
SUBS            R3, R0, #0
BEQ             loc_1AC58

loc_1AAF0
MOV             R3, #0
STR             R6, [SP,#0x70+var_70]
MOV             R2, R3
MOV             R1, #0x48 ; 'H'
MOV             R0, R7
BL              sub_18AD4
CMP             R6, #0
BNE             loc_1AC40
MOVW            R1, #:lower16:aCheck ; "CHECK,"
MOV             R0, R7  ; int
MOVT            R1, #:upper16:aCheck ; "CHECK,"
BL              sub_15B00
MOV             R5, R0

loc_1AB24
MOV             R0, #0
MOVW            R3, #:lower16:aY ; "Y"
MOVW            R1, #:lower16:aExists ; "Exists"
MOVT            R3, #:upper16:aY ; "Y"
STR             R0, [SP,#0x70+var_70]
MOVT            R1, #:upper16:aExists ; "Exists"
MOV             R2, #2
BL              sub_18850
MOV             R3, #aY ; "Y"

loc_1AB4C
MOV             R4, #0
MOVW            R1, #:lower16:aAccess_0 ; "Access"
STR             R4, [SP,#0x70+var_70]
MOVT            R1, #:upper16:aAccess_0 ; "Access"
MOV             R2, #2
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, R6
MOV             R0, R7
BL              sub_17D00
TST             R6, R5
MOVNE           R3, #1
STRBNE          R3, [R7,#0xD]
ADD             SP, SP, #0x70 ; 'p'
POP             {R4-R8,PC}

loc_1AB8C
MOV             R3, #0
STR             R6, [SP,#0x70+var_70]
MOV             R0, R7
MOV             R2, R3
MOV             R1, #0x47 ; 'G'
BL              sub_18AD4
ADD             SP, SP, #0x70 ; 'p'
POP             {R4-R8,PC}

loc_1ABAC
STR             R6, [SP,#0x70+var_70]
MOV             R2, R3
MOV             R1, #0x48 ; 'H'
MOV             R0, R7
BL              sub_18AD4
CMP             R6, #0
BEQ             loc_1AC20

loc_1ABC8
MOVW            R1, #:lower16:aCheck_0 ; ",\"CHECK\":["
MOV             R0, R7  ; int
MOVT            R1, #:upper16:aCheck_0 ; ",\"CHECK\":["
BL              sub_15B00
MOVW            R3, #:lower16:aN ; "N"
MOV             R5, R0
MOVT            R3, #:upper16:aN ; "N"

loc_1ABE4
MOV             R0, #0
MOVW            R1, #:lower16:aExists ; "Exists"
STR             R0, [SP,#0x70+var_70]
MOVT            R1, #:upper16:aExists ; "Exists"
MOV             R2, #2
BL              sub_18850
MOV             R3, #aN ; "N"
B               loc_1AB4C

loc_1AC08
STR             R6, [SP,#0x70+var_70]
MOV             R2, R3
MOV             R1, #0x48 ; 'H'
BL              sub_18AD4
CMP             R6, #0
BNE             loc_1ABC8

loc_1AC20
MOVW            R1, #:lower16:aCheck ; "CHECK,"
MOV             R0, R7  ; int
MOVT            R1, #:upper16:aCheck ; "CHECK,"
BL              sub_15B00
MOVW            R3, #:lower16:aN ; "N"
MOV             R5, R0
MOVT            R3, #:upper16:aN ; "N"
B               loc_1ABE4

loc_1AC40
MOVW            R1, #:lower16:aCheck_0 ; ",\"CHECK\":["
MOV             R0, R7  ; int
MOVT            R1, #:upper16:aCheck_0 ; ",\"CHECK\":["
BL              sub_15B00
MOV             R5, R0
B               loc_1AB24

loc_1AC58
STR             R6, [SP,#0x70+var_70]
MOV             R2, R3
MOV             R1, #0x48 ; 'H'
MOV             R0, R7
BL              sub_18AD4
CMP             R6, #0
BEQ             loc_1AC94
MOVW            R1, #:lower16:aCheck_0 ; ",\"CHECK\":["
MOV             R0, R7  ; int
MOVT            R1, #:upper16:aCheck_0 ; ",\"CHECK\":["
BL              sub_15B00
MOVW            R3, #:lower16:aY ; "Y"
MOV             R5, R0
MOVT            R3, #:upper16:aY ; "Y"
B               loc_1ABE4

loc_1AC94
MOVW            R1, #:lower16:aCheck ; "CHECK,"
MOV             R0, R7  ; int
MOVT            R1, #:upper16:aCheck ; "CHECK,"
BL              sub_15B00
MOVW            R3, #:lower16:aY ; "Y"
MOV             R5, R0
MOVT            R3, #:upper16:aY ; "Y"
B               loc_1ABE4
; End of function sub_1AA3C




; int __fastcall sub_1ACB4(int, int, int, int)
sub_1ACB4

var_14= -0x14
var_8= -8

PUSH            {R4-R11,LR}
MOV             R8, #dword_755C0
MOV             R6, R3
SUB             SP, SP, #0x14
LDR             R3, [R8]
CMP             R3, #0
BEQ             loc_1AE4C
MOV             R3, #0
STR             R6, [SP,#0x14+var_14]
MOV             R2, R3
MOV             R1, #0x45 ; 'E'
MOV             R9, R0
BL              sub_18AD4
CMP             R6, #0
BNE             loc_1AE64
LDR             R3, [R8]
STR             R6, [SP,#0x14+var_8]
CMP             R3, #0
MOVGT           R10, R6
BLE             loc_1AE44

loc_1AD08
MOV             R11, #0
MOVW            R7, #:lower16:(asc_4D5C4+4) ; ""
MOV             R0, R11
MOV             R4, R11
MOVT            R7, #:upper16:(asc_4D5C4+4) ; ""

loc_1AD1C
BL              sub_3046C
MOVW            R1, #:lower16:aDevdetails ; "DEVDETAILS"
MOV             R5, R0
MOVT            R1, #:upper16:aDevdetails ; "DEVDETAILS"
ADD             R3, SP, #0x14+var_8
MOV             R2, #6
MOV             R0, R11
STR             R4, [SP,#0x14+var_14]
BL              sub_18850
LDR             R3, [R5,#4]
MOV             R1, #aName ; "Name"
MOV             R2, #1
LDR             R3, [R3,#8]
STR             R4, [SP,#0x14+var_14]
BL              sub_18850
MOVW            R1, #:lower16:aId ; "ID"
ADD             R3, R5, #8
MOVT            R1, #:upper16:aId ; "ID"
MOV             R2, #6
STR             R4, [SP,#0x14+var_14]
BL              sub_18850
LDR             R3, [R5,#4]
MOV             R1, #aDriver ; "Driver"
MOV             R2, #1
LDR             R3, [R3,#4]
STR             R4, [SP,#0x14+var_14]
BL              sub_18850
LDR             R3, [R5,#0xA8]
MOV             R1, #aKernel ; "Kernel"
MOV             R2, #2
STR             R4, [SP,#0x14+var_14]
CMP             R3, #0
MOVEQ           R3, R7
BL              sub_18850
LDR             R3, [R5,#0xC]
MOV             R1, #aModel ; "Model"
MOV             R2, #2
STR             R4, [SP,#0x14+var_14]
CMP             R3, #0
MOVEQ           R3, R7
BL              sub_18850
LDR             R3, [R5,#0x10]
MOV             R1, #aDevicePath ; "Device Path"
STR             R4, [SP,#0x14+var_14]
MOV             R2, #2
CMP             R3, #0
MOVEQ           R3, R7
BL              sub_18850
CMP             R6, #0
MOV             R1, R0
MOV             R3, R6
BEQ             loc_1AE10
LDR             R3, [SP,#0x14+var_8]
CMP             R3, #0
MOVLE           R3, #0
MOVGT           R3, #1

loc_1AE10
MOV             R2, R6
MOV             R0, R9
BL              sub_17D00
MOV             R11, R0
LDR             R0, [SP,#0x14+var_8]
LDR             R3, [R8]
ADD             R0, R0, #1
CMP             R0, R3
STR             R0, [SP,#0x14+var_8]
BLT             loc_1AD1C

loc_1AE38
CMP             R10, #0
MOVNE           R3, #1
STRBNE          R3, [R9,#0xD]

loc_1AE44
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_1AE4C
STR             R6, [SP,#0x14+var_14]
MOV             R2, R3
MOV             R1, #0xA
BL              sub_18AD4
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_1AE64
MOVW            R1, #:lower16:aDevdetails_0 ; ",\"DEVDETAILS\":["
MOV             R0, R9  ; int
MOVT            R1, #:upper16:aDevdetails_0 ; ",\"DEVDETAILS\":["
BL              sub_15B00
LDR             R3, [R8]
MOV             R2, #0
MOV             R10, R0
STR             R2, [SP,#0x14+var_8]
CMP             R3, R2
BGT             loc_1AD08
B               loc_1AE38
; End of function sub_1ACB4




; int __fastcall sub_1AE90(int, int, int, int)
sub_1AE90

var_10= -0x10
var_4= -4

PUSH            {R4-R6,LR}
MOV             R4, #0
SUB             SP, SP, #0x10
MOV             R5, R3
MOV             R2, R4
MOV             R1, #0x3B ; ';'
STR             R3, [SP,#0x10+var_10]
MOV             R3, R4
STR             R4, [SP,#0x10+var_4]
MOV             R6, R0
BL              sub_18AD4
CMP             R5, R4
BEQ             loc_1AF1C
MOVW            R1, #:lower16:aPgas ; ",\"PGAS\":["
MOV             R0, R6  ; int
MOVT            R1, #:upper16:aPgas ; ",\"PGAS\":["
BL              sub_15B00
MOVW            R1, #:lower16:(aPgaCount+4) ; "Count"
MOV             R5, R0
MOVT            R1, #:upper16:(aPgaCount+4) ; "Count"
ADD             R3, SP, #0x10+var_4
MOV             R2, #6
MOV             R0, R4
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, #1
MOV             R0, R6
BL              sub_17D00
CMP             R5, R4
MOVNE           R3, #1
STRBNE          R3, [R6,#0xD]
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_1AF1C
MOVW            R1, #:lower16:aPgas_0 ; "PGAS,"
MOV             R0, R6  ; int
MOVT            R1, #:upper16:aPgas_0 ; "PGAS,"
BL              sub_15B00
MOVW            R1, #:lower16:(aPgaCount+4) ; "Count"
ADD             R3, SP, #0x10+var_4
STR             R5, [SP,#0x10+var_10]
MOVT            R1, #:upper16:(aPgaCount+4) ; "Count"
MOV             R2, #6
MOV             R0, R5
BL              sub_18850
MOV             R3, R5
MOV             R1, R0
MOV             R2, R5
MOV             R0, R6
BL              sub_17D00
ADD             SP, SP, #0x10
POP             {R4-R6,PC}
; End of function sub_1AE90




; int __fastcall sub_1AF64(int, int, int, int)
sub_1AF64

var_8= -8

PUSH            {R4-R6,LR}
MOV             R4, R3
SUB             SP, SP, #8
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x10
STR             R4, [SP,#8+var_8]
MOV             R5, R0
BL              sub_18AD4
CMP             R4, #0
BEQ             loc_1B028
MOVW            R1, #:lower16:aNoncenum ; ",\"NONCENUM\":["
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aNoncenum ; ",\"NONCENUM\":["
MOV             R4, #0
BL              sub_15B00
MOVW            R3, #:lower16:byte_756B4
MOVW            R1, #:lower16:a10minNonce ; "10min nonce"
MOV             R6, R0
MOVT            R3, #:upper16:byte_756B4
MOVT            R1, #:upper16:a10minNonce ; "10min nonce"
MOV             R2, #1
MOV             R0, R4
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_7457C
MOVW            R1, #:lower16:a30minNonce ; "30min nonce"
MOVT            R3, #:upper16:byte_7457C
MOVT            R1, #:upper16:a30minNonce ; "30min nonce"
MOV             R2, #1
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_73484
MOVW            R1, #:lower16:a60minNonce ; "60min nonce"
MOVT            R3, #:upper16:byte_73484
MOVT            R1, #:upper16:a60minNonce ; "60min nonce"
MOV             R2, #1
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, #1
MOV             R0, R5
BL              sub_17D00
CMP             R6, R4
MOVNE           R3, #1
STRBNE          R3, [R5,#0xD]
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_1B028
MOVW            R1, #:lower16:aNoncenum_0 ; "NONCENUM,"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aNoncenum_0 ; "NONCENUM,"
BL              sub_15B00
MOVW            R3, #:lower16:byte_756B4
MOVW            R1, #:lower16:a10minNonce ; "10min nonce"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_756B4
MOVT            R1, #:upper16:a10minNonce ; "10min nonce"
MOV             R2, #1
MOV             R0, R4
BL              sub_18850
MOVW            R3, #:lower16:byte_7457C
MOVW            R1, #:lower16:a30minNonce ; "30min nonce"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_7457C
MOVT            R1, #:upper16:a30minNonce ; "30min nonce"
MOV             R2, #1
BL              sub_18850
MOVW            R3, #:lower16:byte_73484
MOVW            R1, #:lower16:a60minNonce ; "60min nonce"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_73484
MOVT            R1, #:upper16:a60minNonce ; "60min nonce"
MOV             R2, #1
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, R4
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R6,LR}
B               sub_17D00
; End of function sub_1AF64

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x10
MOV             R4, #0
MOV             R5, R3
MOV             R6, R0
ADD             R7, SP, #0x10
STR             R4, [SP,#8]
STR             R4, [SP,#0xC]
BL              sub_17730
MOV             R2, R4
STR             R5, [SP]
MOV             R3, R4
STR             R0, [R7,#-8]!
MOV             R1, #0x21 ; '!'
MOV             R0, R6
BL              sub_18AD4
MOVW            R3, #:lower16:aConfig ; "CONFIG,"
CMP             R5, R4
MOVT            R3, #:upper16:aConfig ; "CONFIG,"
MOV             R1, #aConfig_0 ; ",\"CONFIG\":["
MOV             R0, R6
MOVEQ           R1, R3
BL              sub_15B00
MOVW            R1, #:lower16:aAscCount ; "ASC Count"
MOV             R8, R0
MOV             R3, R7
MOV             R0, R4
STR             R4, [SP]
MOVT            R1, #:upper16:aAscCount ; "ASC Count"
MOV             R2, #6
BL              sub_18850
MOVW            R1, #:lower16:aPgaCount ; "PGA Count"
ADD             R3, SP, #0xC
STR             R4, [SP]
MOVT            R1, #:upper16:aPgaCount ; "PGA Count"
MOV             R2, #6
BL              sub_18850
MOVW            R3, #:lower16:dword_733CC
MOVW            R1, #:lower16:aPoolCount ; "Pool Count"
STR             R4, [SP]
MOVT            R3, #:upper16:dword_733CC
MOVT            R1, #:upper16:aPoolCount ; "Pool Count"
MOV             R2, #6
BL              sub_18850
MOVW            R2, #:lower16:dword_68FD0
MOVW            R3, #:lower16:off_68828 ; "Failover"
MOVT            R2, #:upper16:dword_68FD0
MOVT            R3, #:upper16:off_68828 ; "Failover"
LDR             R12, [R2]
MOVW            R1, #:lower16:aStrategy ; "Strategy"
STR             R4, [SP]
MOVT            R1, #:upper16:aStrategy ; "Strategy"
MOV             R2, #2
LDR             R3, [R3,R12,LSL#2]
BL              sub_18850
MOVW            R3, #:lower16:dword_68730
MOVW            R1, #:lower16:aLogInterval ; "Log Interval"
STR             R4, [SP]
MOVT            R3, #:upper16:dword_68730
MOVT            R1, #:upper16:aLogInterval ; "Log Interval"
MOV             R2, #6
BL              sub_18850
MOVW            R3, #:lower16:(asc_4D5C4+4) ; ""
MOVW            R1, #:lower16:aDeviceCode ; "Device Code"
STR             R4, [SP]
MOVT            R3, #:upper16:(asc_4D5C4+4) ; ""
MOVT            R1, #:upper16:aDeviceCode ; "Device Code"
MOV             R2, #2
BL              sub_18850
MOVW            R3, #:lower16:aLinux ; "Linux"
MOVW            R1, #:lower16:aOs ; "OS"
STR             R4, [SP]
MOVT            R3, #:upper16:aLinux ; "Linux"
MOVT            R1, #:upper16:aOs ; "OS"
MOV             R2, #2
BL              sub_18850
MOVW            R3, #:lower16:byte_755D4
MOVW            R1, #:lower16:aFailoverOnly ; "Failover-Only"
STR             R4, [SP]
MOVT            R3, #:upper16:byte_755D4
MOVT            R1, #:upper16:aFailoverOnly ; "Failover-Only"
MOV             R2, #0xE
BL              sub_18850
MOVW            R3, #:lower16:dword_68754
MOVW            R1, #:lower16:aScantime ; "ScanTime"
STR             R4, [SP]
MOVT            R3, #:upper16:dword_68754
MOVT            R1, #:upper16:aScantime ; "ScanTime"
MOV             R2, #6
BL              sub_18850
MOVW            R3, #:lower16:dword_68824
MOVW            R1, #:lower16:aQueue ; "Queue"
STR             R4, [SP]
MOVT            R3, #:upper16:dword_68824
MOVT            R1, #:upper16:aQueue ; "Queue"
MOV             R2, #6
BL              sub_18850
MOVW            R3, #:lower16:dword_68758
MOVW            R1, #:lower16:aExpiry ; "Expiry"
STR             R4, [SP]
MOVT            R3, #:upper16:dword_68758
MOVT            R1, #:upper16:aExpiry ; "Expiry"
MOV             R2, #6
BL              sub_18850
MOVW            R3, #:lower16:aNone ; "None"
MOVW            R1, #:lower16:aHotplug ; "Hotplug"
STR             R4, [SP]
MOVT            R3, #:upper16:aNone ; "None"
MOVT            R1, #:upper16:aHotplug ; "Hotplug"
MOV             R2, #2
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, R5
MOV             R0, R6
BL              sub_17D00
TST             R5, R8
MOVNE           R3, #1
STRBNE          R3, [R6,#0xD]
ADD             SP, SP, #0x10
POP             {R4-R8,PC}



; int __fastcall sub_1B294(int, int, int, int)
sub_1B294

var_8= -8

PUSH            {R4-R6,LR}
MOV             R4, R3
SUB             SP, SP, #8
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x16
STR             R4, [SP,#8+var_8]
MOV             R5, R0
BL              sub_18AD4
CMP             R4, #0
BEQ             loc_1B390
MOVW            R1, #:lower16:aVersion ; ",\"VERSION\":["
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aVersion ; ",\"VERSION\":["
MOV             R4, #0
BL              sub_15B00
MOVW            R3, #:lower16:a10 ; "1.0."
MOVW            R1, #:lower16:aBmminer_0 ; "BMMiner"
MOV             R6, R0
MOVT            R3, #:upper16:a10 ; "1.0."
MOVT            R1, #:upper16:aBmminer_0 ; "BMMiner"
MOV             R2, #1
MOV             R0, R4
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:a31 ; "3.1"
MOVW            R1, #:lower16:aApi ; "API"
MOVT            R3, #:upper16:a31 ; "3.1"
MOVT            R1, #:upper16:aApi ; "API"
MOV             R2, #2
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_6ABC0
MOVW            R1, #:lower16:aMiner ; "Miner"
MOVT            R3, #:upper16:byte_6ABC0
MOVT            R1, #:upper16:aMiner ; "Miner"
MOV             R2, #1
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_6A74C
MOVW            R1, #:lower16:aCompiletime ; "CompileTime"
MOVT            R3, #:upper16:byte_6A74C
MOVT            R1, #:upper16:aCompiletime ; "CompileTime"
MOV             R2, #1
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOVW            R3, #:lower16:byte_6A84C
MOVW            R1, #:lower16:aType ; "Type"
MOVT            R3, #:upper16:byte_6A84C
MOVT            R1, #:upper16:aType ; "Type"
MOV             R2, #1
STR             R4, [SP,#8+var_8]
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, #1
MOV             R0, R5
BL              sub_17D00
CMP             R6, R4
MOVNE           R3, #1
STRBNE          R3, [R5,#0xD]
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_1B390
MOVW            R1, #:lower16:aVersion_0 ; "VERSION,"
MOV             R0, R5  ; int
MOVT            R1, #:upper16:aVersion_0 ; "VERSION,"
BL              sub_15B00
MOVW            R3, #:lower16:a10 ; "1.0."
MOVW            R1, #:lower16:aBmminer_0 ; "BMMiner"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:a10 ; "1.0."
MOVT            R1, #:upper16:aBmminer_0 ; "BMMiner"
MOV             R2, #1
MOV             R0, R4
BL              sub_18850
MOVW            R3, #:lower16:a31 ; "3.1"
MOVW            R1, #:lower16:aApi ; "API"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:a31 ; "3.1"
MOVT            R1, #:upper16:aApi ; "API"
MOV             R2, #2
BL              sub_18850
MOVW            R3, #:lower16:byte_6ABC0
MOVW            R1, #:lower16:aMiner ; "Miner"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_6ABC0
MOVT            R1, #:upper16:aMiner ; "Miner"
MOV             R2, #1
BL              sub_18850
MOVW            R3, #:lower16:byte_6A74C
MOVW            R1, #:lower16:aCompiletime ; "CompileTime"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_6A74C
MOVT            R1, #:upper16:aCompiletime ; "CompileTime"
MOV             R2, #1
BL              sub_18850
MOVW            R3, #:lower16:byte_6A84C
MOVW            R1, #:lower16:aType ; "Type"
STR             R4, [SP,#8+var_8]
MOVT            R3, #:upper16:byte_6A84C
MOVT            R1, #:upper16:aType ; "Type"
MOV             R2, #1
BL              sub_18850
MOV             R3, R4
MOV             R1, R0
MOV             R2, R4
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R6,LR}
B               sub_17D00
; End of function sub_1B294




; int __fastcall sub_1B44C(int, int, int, int)
sub_1B44C

var_C= -0xC

PUSH            {R4-R9,LR}
MOV             R4, R3
SUB             SP, SP, #0xC
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x4E ; 'N'
STR             R4, [SP,#0xC+var_C]
MOV             R6, R0
BL              sub_18AD4
MOVW            R3, #:lower16:aCoin ; "COIN,"
CMP             R4, #0
MOVT            R3, #:upper16:aCoin ; "COIN,"
MOV             R1, #aCoin_0 ; ",\"COIN\":["
MOV             R0, R6  ; int
MOVEQ           R1, R3  ; s
BL              sub_15B00
MOVW            R3, #:lower16:aSha256 ; "sha256"
MOV             R8, R0
MOVW            R1, #:lower16:aHashMethod ; "Hash Method"
MOV             R0, #0
MOVT            R3, #:upper16:aSha256 ; "sha256"
MOVT            R1, #:upper16:aHashMethod ; "Hash Method"
MOV             R2, #2
STR             R0, [SP,#0xC+var_C]
BL              sub_18850
MOV             R7, R0
MOV             R0, #stru_74504 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1B5BC
LDR             R0, =stru_7451C ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_1B5D8

loc_1B4DC               ; mutex
MOV             R0, #stru_74504
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1B5E8

loc_1B4F0
MOV             R5, #1
MOVW            R3, #:lower16:dword_755F0
MOVW            R1, #:lower16:aCurrentBlockTi ; "Current Block Time"
MOVT            R3, #:upper16:dword_755F0
MOVT            R1, #:upper16:aCurrentBlockTi ; "Current Block Time"
MOV             R2, #0xF
MOV             R0, R7
STR             R5, [SP,#0xC+var_C]
BL              sub_18850
MOVW            R3, #:lower16:byte_73324
MOVW            R1, #:lower16:aCurrentBlockHa ; "Current Block Hash"
MOV             R2, R5
MOVT            R3, #:upper16:byte_73324
MOVT            R1, #:upper16:aCurrentBlockHa ; "Current Block Hash"
STR             R5, [SP,#0xC+var_C]
BL              sub_18850
MOV             R9, R0
LDR             R0, =stru_7451C ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_1B5F8

loc_1B544
MOVW            R3, #:lower16:off_67ED8
MOV             R5, #0
MOVT            R3, #:upper16:off_67ED8
MOV             R7, #1
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOVW            R3, #:lower16:byte_74502
MOVW            R1, #:lower16:aLp ; "LP"
MOV             R0, R9
STR             R5, [SP,#0xC+var_C]
MOVT            R3, #:upper16:byte_74502
MOVT            R1, #:upper16:aLp ; "LP"
MOV             R2, #0xE
BL              sub_18850
MOVW            R3, #:lower16:dbl_68748
MOVW            R1, #:lower16:aNetworkDifficu ; "Network Difficulty"
STR             R7, [SP,#0xC+var_C]
MOVT            R3, #:upper16:dbl_68748
MOVT            R1, #:upper16:aNetworkDifficu ; "Network Difficulty"
MOV             R2, #0x18
BL              sub_18850
MOV             R3, R5
MOV             R1, R0
MOV             R2, R4
MOV             R0, R6
BL              sub_17D00
TST             R4, R8
STRBNE          R7, [R6,#0xD]
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_1B5BC
MOVW            R1, #0xE31
LDR             R0, =aMinecoin ; "minecoin"
BL              sub_17604
LDR             R0, =stru_7451C ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BEQ             loc_1B4DC

loc_1B5D8
MOVW            R1, #0xE31
LDR             R0, =aMinecoin ; "minecoin"
BL              sub_175A0
B               loc_1B4DC

loc_1B5E8
MOVW            R1, #0xE31
LDR             R0, =aMinecoin ; "minecoin"
BL              sub_17668
B               loc_1B4F0

loc_1B5F8
MOVW            R1, #0xE34
LDR             R0, =aMinecoin ; "minecoin"
BL              sub_176CC
; End of function sub_1B44C

B               loc_1B544
off_1B608 DCD stru_7451C
off_1B60C DCD aMinecoin ; "minecoin"



; int __fastcall sub_1B610(unsigned int *, int, int, int)
sub_1B610

var_5C= -0x5C
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_34= -0x34
var_2C= -0x2C
s= -0x20
var_4= -4

PUSH            {R4-R11,LR}
MOV             R7, R2
VPUSH           {D8}
SUB             SP, SP, #0x5C
MOV             R8, R3
MOV             R6, R0
STR             R1, [SP,#0x5C+var_50]
BL              sub_17730
LDR             R2, [SP,#0x5C+var_50]
BIC             R3, R2, R2,ASR#31
CMP             R3, R0
MOVLT           R1, #1
MOVGE           R1, #0
CMP             R2, #0
MOVLT           R1, #0
CMP             R1, #0
BNE             loc_1B660

loc_1B654
ADD             SP, SP, #0x5C ; '\'
VPOP            {D8}
POP             {R4-R11,PC}

loc_1B660
MOV             R0, R2
BL              sub_177EC
CMP             R0, #0
BLT             loc_1B654
BL              sub_3046C
VLDR            D7, [R0,#0xB0]
MOV             R4, R0
VCVT.F32.F64    S14, D7
VSTR            S14, [SP,#0x5C+var_4C]
BL              sub_2CC3C
VLDR            S15, [R4,#0x24]
MOVW            R3, #:lower16:aY ; "Y"
VLDR            D5, =60.0
MOVW            R2, #:lower16:aN ; "N"
LDR             R10, [R4,#0x20]
MOVT            R3, #:upper16:aY ; "Y"
LDR             R1, [R4,#0x60]
MOVT            R2, #:upper16:aN ; "N"
VCVT.F64.S32    D6, S15
CMP             R10, #1
VSTR            D0, [SP,#0x5C+var_44]
MOVNE           R10, R3
MOVEQ           R10, R2
VDIV.F64        D7, D6, D0
VMUL.F64        D7, D7, D5
VSTR            D7, [R4,#0x58]
CMP             R1, #4  ; switch 5 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_1B6CC ; jumptable 0001B6CC default case
jpt_1B6CC DCD loc_1B6E8 ; jump table for switch statement
DCD loc_1BA24
DCD loc_1BA18
DCD loc_1BA0C
DCD loc_1BA00

loc_1B6E8               ; jumptable 0001B6CC case 0
MOV             R9, #aAlive ; "Alive"

loc_1B6F0
MOV             R5, #0
MOVW            R1, #:lower16:aAsc_0 ; "ASC"
STR             R5, [SP,#0x5C+var_5C]
MOV             R0, R5
MOVT            R1, #:upper16:aAsc_0 ; "ASC"
ADD             R3, SP, #0x5C+var_50
MOV             R2, #6
BL              sub_18850
LDR             R3, [R4,#4]
MOV             R1, #aName ; "Name"
MOV             R2, #1
LDR             R3, [R3,#8]
STR             R5, [SP,#0x5C+var_5C]
BL              sub_18850
MOVW            R1, #:lower16:aId ; "ID"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aId ; "ID"
ADD             R3, R4, #8
MOV             R2, #6
BL              sub_18850
MOVW            R1, #:lower16:aEnabled ; "Enabled"
MOV             R3, R10
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aEnabled ; "Enabled"
MOV             R2, #1
BL              sub_18850
MOVW            R1, #:lower16:aStatus_1 ; "Status"
MOV             R3, R9
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aStatus_1 ; "Status"
MOV             R2, #1
BL              sub_18850
MOVW            R1, #:lower16:aTemperature ; "Temperature"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aTemperature ; "Temperature"
ADD             R3, SP, #0x5C+var_4C
MOV             R2, #0x13
BL              sub_18850
VLDR            D5, [R4,#0x50]
ADD             R3, SP, #0x5C+var_4
VLDR            D6, [SP,#0x5C+var_44]
MOVW            R1, #:lower16:aMhsAv ; "MHS av"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aMhsAv ; "MHS av"
MOV             R2, #0x11
VDIV.F64        D7, D5, D6
VMOV            R10, R11, D7
STRD            R10, R11, [R3,#-0x38]!
BL              sub_18850
MOVW            R3, #:lower16:dword_68730
MOVW            R1, #:lower16:aMhsDs ; "MHS %ds"
MOVT            R3, #:upper16:dword_68730
MOV             R9, R0
LDR             R2, [R3]
MOVT            R1, #:upper16:aMhsDs ; "MHS %ds"
ADD             R0, SP, #0x5C+s ; s
BL              sprintf
STR             R5, [SP,#0x5C+var_5C]
ADD             R1, SP, #0x5C+s
ADD             R3, R4, #0x30 ; '0'
MOV             R2, #0x11
MOV             R0, R9
BL              sub_18850
MOVW            R1, #:lower16:aAccepted ; "Accepted"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aAccepted ; "Accepted"
ADD             R3, R4, #0x24 ; '$'
MOV             R2, #6
BL              sub_18850
MOVW            R1, #:lower16:aRejected ; "Rejected"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aRejected ; "Rejected"
ADD             R3, R4, #0x28 ; '('
MOV             R2, #6
BL              sub_18850
MOVW            R1, #:lower16:aHardwareErrors ; "Hardware Errors"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aHardwareErrors ; "Hardware Errors"
ADD             R3, R4, #0x2C ; ','
MOV             R2, #6
BL              sub_18850
MOVW            R1, #:lower16:aUtility ; "Utility"
MOV             R2, #0x14
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aUtility ; "Utility"
ADD             R3, R4, #0x58 ; 'X'
BL              sub_18850
LDR             R3, [R4,#0xDC]
MOV             R1, #aLastSharePool ; "Last Share Pool"
CMP             R3, R5
MOV             R5, #0
LDRGT           R2, [R4,#0xD8]
MOVLE           R2, #0xFFFFFFFF
ADD             R3, SP, #0x5C+var_4
STR             R2, [R3,#-0x44]!
MOV             R2, #6
STR             R5, [SP,#0x5C+var_5C]
BL              sub_18850
MOVW            R1, #:lower16:aLastShareTime ; "Last Share Time"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aLastShareTime ; "Last Share Time"
ADD             R3, R4, #0xDC
MOV             R2, #0x10
BL              sub_18850
MOVW            R1, #:lower16:aTotalMh ; "Total MH"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aTotalMh ; "Total MH"
ADD             R3, R4, #0x50 ; 'P'
MOV             R2, #0x12
BL              sub_18850
MOVW            R1, #:lower16:aDiff1Work ; "Diff1 Work"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aDiff1Work ; "Diff1 Work"
ADD             R3, R4, #0xC0
MOV             R2, #0xB
BL              sub_18850
MOVW            R1, #:lower16:aDifficultyAcce ; "Difficulty Accepted"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aDifficultyAcce ; "Difficulty Accepted"
ADD             R3, R4, #0xC8
MOV             R2, #0x18
BL              sub_18850
MOVW            R1, #:lower16:aDifficultyReje ; "Difficulty Rejected"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aDifficultyReje ; "Difficulty Rejected"
ADD             R3, R4, #0xD0
MOV             R2, #0x18
BL              sub_18850
MOVW            R1, #:lower16:aLastShareDiffi ; "Last Share Difficulty"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aLastShareDiffi ; "Last Share Difficulty"
ADD             R3, R4, #0xE0
MOV             R2, #0x18
BL              sub_18850
MOVW            R1, #:lower16:aLastValidWork ; "Last Valid Work"
STR             R5, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aLastValidWork ; "Last Valid Work"
ADD             R3, R4, #0xE8
MOV             R2, #0x10
BL              sub_18850
LDR             R3, [R4,#0x2C]
MOV             R5, R0
LDRD            R0, R1, [R4,#0xC0]
ADDS            R10, R0, R3
ADC             R11, R1, R3,ASR#31
ORRS            R2, R10, R11
BEQ             loc_1BA30
VMOV            S15, R3
MOV             R0, R10
VCVT.F64.S32    D8, S15
MOV             R1, R11
BLX             sub_4A11C
VMOV            D7, R0, R1
VDIV.F64        D7, D8, D7

loc_1B960
VMOV            R10, R11, D7
ADD             R3, SP, #0x5C+var_4
MOV             R2, #0
MOVW            R1, #:lower16:aDeviceHardware ; "Device Hardware%"
STRD            R10, R11, [R3,#-0x30]!
MOV             R0, R5
MOVT            R1, #:upper16:aDeviceHardware ; "Device Hardware%"
STR             R2, [SP,#0x5C+var_5C]
MOV             R2, #0x19
BL              sub_18850
MOV             R5, R0
LDRD            R0, R1, [R4,#0xC0]
ORRS            R3, R0, R1
BEQ             loc_1BA38
BLX             sub_4A11C
VLDR            D6, [R4,#0xD0]
VMOV            D7, R0, R1
VDIV.F64        D7, D6, D7

loc_1B9A8
VMOV            R10, R11, D7
ADD             R3, SP, #0x5C+var_4
MOV             R4, #0
MOVW            R1, #:lower16:aDeviceRejected ; "Device Rejected%"
STRD            R10, R11, [R3,#-0x28]!
MOV             R0, R5
MOVT            R1, #:upper16:aDeviceRejected ; "Device Rejected%"
STR             R4, [SP,#0x5C+var_5C]
MOV             R2, #0x19
BL              sub_18850
MOVW            R1, #:lower16:aDeviceElapsed ; "Device Elapsed"
ADD             R3, SP, #0x5C+var_44
STR             R4, [SP,#0x5C+var_5C]
MOVT            R1, #:upper16:aDeviceElapsed ; "Device Elapsed"
MOV             R2, #0xD
BL              sub_18850
MOV             R3, R8
MOV             R1, R0
MOV             R2, R7
MOV             R0, R6
BL              sub_17D00
B               loc_1B654

loc_1BA00               ; jumptable 0001B6CC case 4
MOV             R9, #aInitialising ; "Initialising"
B               loc_1B6F0

loc_1BA0C               ; jumptable 0001B6CC case 3
MOV             R9, #aNostart ; "NoStart"
B               loc_1B6F0

loc_1BA18               ; jumptable 0001B6CC case 2
MOV             R9, #aDead ; "Dead"
B               loc_1B6F0

loc_1BA24               ; jumptable 0001B6CC case 1
MOV             R9, #aSick ; "Sick"
B               loc_1B6F0

loc_1BA30
VLDR            D7, =0.0
B               loc_1B960

loc_1BA38
VLDR            D7, =0.0
B               loc_1B9A8

def_1B6CC               ; jumptable 0001B6CC default case
MOV             R9, #aUnknown ; "Unknown"
B               loc_1B6F0
; End of function sub_1B610

ALIGN 0x10
dbl_1BA50 DCFD 60.0
dbl_1BA58 DCFD 0.0
PUSH            {R4-R7,LR}
SUB             SP, SP, #0xC
MOV             R6, R0
MOV             R5, R2
MOV             R7, R3
BL              sub_17730
SUBS            R4, R0, #0
BEQ             loc_1BB18
CMP             R5, #0
BEQ             loc_1BA94
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_1BAB4

loc_1BA94
MOV             R3, #0
STR             R7, [SP,#0x20]
MOV             R0, R6
MOV             R2, R3
MOV             R1, #0xF
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               sub_18AD4

loc_1BAB4
MOV             R0, R5
MOV             R2, #0xA
MOV             R1, #0
BL              strtol
CMP             R4, R0
MOV             R5, R0
MOVGT           R4, #0
MOVLE           R4, #1
ORRS            R4, R4, R0,LSR#31
BNE             loc_1BB38
MOV             R2, R0
STR             R7, [SP]
MOV             R3, R4
MOV             R1, #0x6A ; 'j'
MOV             R0, R6
BL              sub_18AD4
CMP             R7, #0
BNE             loc_1BB58
MOV             R1, R5
MOV             R0, R6
MOV             R3, R7
MOV             R2, R7
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               sub_1B610

loc_1BB18
STR             R7, [SP,#0x20]
MOV             R0, R6
MOV             R3, R4
MOV             R2, R4
MOV             R1, #0x69 ; 'i'
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               sub_18AD4

loc_1BB38
MOV             R2, R0
STR             R7, [SP,#0x20]
MOV             R0, R6
MOV             R3, #0
MOV             R1, #0x6B ; 'k'
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               sub_18AD4

loc_1BB58
MOVW            R1, #:lower16:aAsc ; ",\"ASC\":["
MOV             R0, R6
MOVT            R1, #:upper16:aAsc ; ",\"ASC\":["
BL              sub_15B00
MOV             R3, R4
MOV             R7, R0
MOV             R1, R5
MOV             R2, #1
MOV             R0, R6
BL              sub_1B610
CMP             R7, #0
MOVNE           R3, #1
STRBNE          R3, [R6,#0xD]
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
PUSH            {R4-R8,LR}
SUB             SP, SP, #8
MOV             R6, R0
MOV             R5, R3
BL              sub_17730
SUBS            R7, R0, #0
BEQ             loc_1BC1C
MOV             R3, #0
STR             R5, [SP]
MOV             R2, R3
MOV             R1, #9
MOV             R0, R6
BL              sub_18AD4
CMP             R5, #0
BNE             loc_1BC3C
CMP             R7, #0
BLE             loc_1BC14
MOV             R8, R5

loc_1BBDC
MOV             R4, #0

loc_1BBE0
CMP             R4, #0
MOVLE           R3, #0
ANDGT           R3, R5, #1
MOV             R1, R4
MOV             R2, R5
MOV             R0, R6
ADD             R4, R4, #1
BL              sub_1B610
CMP             R7, R4
BGT             loc_1BBE0

loc_1BC08
CMP             R8, #0
MOVNE           R3, #1
STRBNE          R3, [R6,#0xD]

loc_1BC14
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_1BC1C
STR             R5, [SP,#0x20]
MOV             R0, R6
MOV             R3, R7
MOV             R2, R7
MOV             R1, #0xA
ADD             SP, SP, #8
POP             {R4-R8,LR}
B               sub_18AD4

loc_1BC3C
MOVW            R1, #:lower16:aDevs ; ",\"DEVS\":["
MOV             R0, R6
MOVT            R1, #:upper16:aDevs ; ",\"DEVS\":["
BL              sub_15B00
CMP             R7, #0
MOV             R8, R0
BGT             loc_1BBDC
B               loc_1BC08
PUSH            {R4-R8,LR}
SUB             SP, SP, #8
MOV             R6, R0
MOV             R5, R3
BL              sub_17730
SUBS            R7, R0, #0
BEQ             loc_1BCE4
MOV             R3, #0
STR             R5, [SP]
MOV             R2, R3
MOV             R1, #9
MOV             R0, R6
BL              sub_18AD4
CMP             R5, #0
BNE             loc_1BD04
CMP             R7, #0
BLE             loc_1BCDC
MOV             R8, R5

loc_1BCA4
MOV             R4, #0

loc_1BCA8
CMP             R4, #0
MOVLE           R3, #0
ANDGT           R3, R5, #1
MOV             R1, R4
MOV             R2, R5
MOV             R0, R6
ADD             R4, R4, #1
BL              sub_1B610
CMP             R7, R4
BGT             loc_1BCA8

loc_1BCD0
CMP             R8, #0
MOVNE           R3, #1
STRBNE          R3, [R6,#0xD]

loc_1BCDC
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_1BCE4
STR             R5, [SP,#0x20]
MOV             R0, R6
MOV             R3, R7
MOV             R2, R7
MOV             R1, #0xA
ADD             SP, SP, #8
POP             {R4-R8,LR}
B               sub_18AD4

loc_1BD04
MOVW            R1, #:lower16:aDevs ; ",\"DEVS\":["
MOV             R0, R6
MOVT            R1, #:upper16:aDevs ; ",\"DEVS\":["
BL              sub_15B00
CMP             R7, #0
MOV             R8, R0
BGT             loc_1BCA4
B               loc_1BCD0



; int __fastcall sub_1BD24(int, int, int, int)
sub_1BD24

var_13C= -0x13C
var_130= -0x130
var_12C= -0x12C
var_128= -0x128
var_124= -0x124
var_120= -0x120
var_118= -0x118
var_114= -0x114
var_10C= -0x10C
s= -0x104
var_4= -4

PUSH            {R4-R11,LR}
MOVW            R8, #:lower16:dword_733CC
VPUSH           {D8}
SUB             SP, SP, #0x13C
MOV             R4, R0
MOV             R2, #0x100 ; n
STR             R0, [SP,#0x13C+var_12C]
MOV             R1, #0  ; c
ADD             R0, SP, #0x13C+s ; s
MOVT            R8, #:upper16:dword_733CC
MOV             R7, R3
BL              memset
LDR             R3, [R8]
CMP             R3, #0
BEQ             loc_1C32C
MOV             R3, #0
STR             R7, [SP,#0x13C+var_13C]
MOV             R2, R3
MOV             R1, #7
LDR             R0, [SP,#0x13C+var_12C]
BL              sub_18AD4
CMP             R7, #0
BNE             loc_1C274
LDR             R3, [R8]
STR             R7, [SP,#0x13C+var_118]
CMP             R3, #0
STRGT           R7, [SP,#0x13C+var_120]
BLE             loc_1C2B0

loc_1BD94
MOVW            R2, #0xB3C5
MOVW            R1, #0x8889
MOV             R9, #0
MOVW            R11, #:lower16:dword_744C8
MOVT            R2, #0x91A2
MOVT            R1, #0x8888
VLDR            D8, =0.0
MOV             R3, R9
MOVT            R11, #:upper16:dword_744C8
STR             R2, [SP,#0x13C+var_128]
STR             R1, [SP,#0x13C+var_124]
MOV             R10, R7
B               loc_1BF00
dbl_1BDC8 DCFD 0.0

loc_1BDD0
MOVW            R1, #:lower16:aStratumUrl ; "Stratum URL"
LDR             R3, [R4,#0x240]
MOV             R2, R5
STR             R5, [SP,#0x13C+var_13C]
MOVT            R1, #:upper16:aStratumUrl ; "Stratum URL"
BL              sub_18850

loc_1BDE8
MOV             R3, #0
MOVW            R1, #:lower16:aHasGbt ; "Has GBT"
STR             R3, [SP,#0x13C+var_13C]
MOVT            R1, #:upper16:aHasGbt ; "Has GBT"
ADD             R3, R4, #0x2E0
MOV             R2, #0xE
BL              sub_18850
MOV             R3, #1
MOVW            R1, #:lower16:aBestShare ; "Best Share"
STR             R3, [SP,#0x13C+var_13C]
MOVT            R1, #:upper16:aBestShare ; "Best Share"
ADD             R3, R4, #0x170
MOV             R2, #0xA
BL              sub_18850
VLDR            D5, [R4,#0x50]
ADD             R3, SP, #0x13C+var_4
VLDR            D7, [R4,#0x48]
MOV             R2, #0
VLDR            D6, [R4,#0x58]
MOV             R1, #aPoolRejected ; "Pool Rejected%"
VADD.F64        D7, D5, D7
VADD.F64        D7, D7, D6
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
VMOVEQ.F64      D6, D8
VDIVNE.F64      D6, D5, D7
VMOV            R6, R7, D6
STR             R6, [R3,#-0x110]!
STR             R7, [R3,#4]
STR             R2, [SP,#0x13C+var_13C]
MOV             R2, #0x19
BL              sub_18850
VLDR            D6, [R4,#0x48]
ADD             R3, SP, #0x13C+var_4
VLDR            D7, [R4,#0x50]
MOV             R2, #0
VLDR            D5, [R4,#0x58]
MOV             R1, #aPoolStale ; "Pool Stale%"
VADD.F64        D7, D6, D7
VADD.F64        D7, D7, D5
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
VMOVEQ.F64      D6, D8
VDIVNE.F64      D6, D5, D7
VMOV            R4, R5, D6
STR             R4, [R3,#-0x108]!
STR             R5, [R3,#4]
STR             R2, [SP,#0x13C+var_13C]
MOV             R2, #0x19
BL              sub_18850
CMP             R10, #0
MOV             R1, R0
MOVEQ           R3, R10
BEQ             loc_1BED8
LDR             R3, [SP,#0x13C+var_118]
CMP             R3, #0
MOVLE           R3, #0
MOVGT           R3, #1

loc_1BED8
MOV             R2, R10
LDR             R0, [SP,#0x13C+var_12C]
BL              sub_17D00
MOV             R9, R0

loc_1BEE8
LDR             R3, [SP,#0x13C+var_118]
LDR             R2, [R8]
ADD             R3, R3, #1
CMP             R3, R2
STR             R3, [SP,#0x13C+var_118]
BGE             loc_1C29C

loc_1BF00
LDR             R2, [R11]
LDR             R4, [R2,R3,LSL#2]
LDRB            R3, [R4,#0x69]
CMP             R3, #0
BNE             loc_1BEE8
LDR             R3, [R4,#0x64]
CMP             R3, #1
BEQ             loc_1C308
BCC             loc_1C2F8
MOVW            R2, #:lower16:aUnknown ; "Unknown"
MOVW            R6, #:lower16:aRejecting ; "Rejecting"
MOVT            R2, #:upper16:aUnknown ; "Unknown"
CMP             R3, #2
MOVT            R6, #:upper16:aRejecting ; "Rejecting"
MOVNE           R6, R2
STR             R6, [SP,#0x13C+var_130]

loc_1BF40
LDR             R1, [R4,#0x6C]
MOVW            R3, #:lower16:aY ; "Y"
LDR             R2, [R4,#0x160]
MOVT            R3, #:upper16:aY ; "Y"
MOVW            R5, #:lower16:aN ; "N"
CMP             R1, #0
MOVT            R5, #:upper16:aN ; "N"
MOVNE           R5, R3
CMP             R2, #0
MOVLE           R3, #0x30 ; '0'
STRHLE          R3, [SP,#0x13C+s]
BLE             loc_1BFC4
MOV             R0, #0  ; timer
MOV             R7, #0xE10
BL              time
LDR             LR, [R4,#0x160]
MOVW            R1, #:lower16:aD02d02d ; "%d:%02d:%02d"
LDR             R3, [SP,#0x13C+var_128]
MOVT            R1, #:upper16:aD02d02d ; "%d:%02d:%02d"
SUB             LR, R0, LR
ADD             R0, SP, #0x13C+s ; s
BIC             LR, LR, LR,ASR#31
UMULL           R2, R3, LR, R3
MOV             R12, R3,LSR#11
LDR             R3, [SP,#0x13C+var_124]
MOV             R2, R12
MLS             R12, R7, R12, LR
UMULL           R6, R7, R12, R3
MOV             R3, R7,LSR#5
RSB             LR, R3, R3,LSL#4
SUB             R12, R12, LR,LSL#2
STR             R12, [SP,#0x13C+var_13C]
BL              sprintf

loc_1BFC4
MOV             R7, #0
MOV             R1, #aPool_0 ; "POOL"
ADD             R3, SP, #0x13C+var_118
MOV             R2, #6
MOV             R0, R9
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:(aStratumUrl+8) ; "URL"
LDR             R3, [R4,#0xA4]
MOV             R2, R7
MOVT            R1, #:upper16:(aStratumUrl+8) ; "URL"
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aStatus_1 ; "Status"
LDR             R3, [SP,#0x13C+var_130]
MOVT            R1, #:upper16:aStatus_1 ; "Status"
MOV             R2, #1
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aPriority ; "Priority"
ADD             R3, R4, #4
MOVT            R1, #:upper16:aPriority ; "Priority"
MOV             R2, #6
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aQuota ; "Quota"
ADD             R3, R4, #0x38 ; '8'
MOVT            R1, #:upper16:aQuota ; "Quota"
MOV             R2, #6
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aLongPoll ; "Long Poll"
MOV             R3, R5
MOVT            R1, #:upper16:aLongPoll ; "Long Poll"
MOV             R2, #1
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aGetworks ; "Getworks"
ADD             R3, R4, #0x74 ; 't'
MOVT            R1, #:upper16:aGetworks ; "Getworks"
MOV             R2, #7
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aAccepted ; "Accepted"
ADD             R3, R4, #8
MOVT            R1, #:upper16:aAccepted ; "Accepted"
MOV             R2, #0xB
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aRejected ; "Rejected"
ADD             R3, R4, #0x10
MOVT            R1, #:upper16:aRejected ; "Rejected"
MOV             R2, #0xB
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aDiscarded ; "Discarded"
ADD             R3, R4, #0x7C ; '|'
MOVT            R1, #:upper16:aDiscarded ; "Discarded"
MOV             R2, #7
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aStale ; "Stale"
ADD             R3, R4, #0x78 ; 'x'
MOVT            R1, #:upper16:aStale ; "Stale"
MOV             R2, #7
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aGetFailures ; "Get Failures"
ADD             R3, R4, #0x80
MOVT            R1, #:upper16:aGetFailures ; "Get Failures"
MOV             R2, #7
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aRemoteFailures ; "Remote Failures"
ADD             R3, R4, #0x84
MOVT            R1, #:upper16:aRemoteFailures ; "Remote Failures"
MOV             R2, #7
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aUser_0 ; "User"
LDR             R3, [R4,#0xAC]
MOV             R2, R7
MOVT            R1, #:upper16:aUser_0 ; "User"
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aLastShareTime ; "Last Share Time"
ADD             R3, SP, #0x13C+s
MOVT            R1, #:upper16:aLastShareTime ; "Last Share Time"
MOV             R2, #1
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aDiff ; "Diff"
ADD             R3, R4, #0x30 ; '0'
MOVT            R1, #:upper16:aDiff ; "Diff"
MOV             R2, #1
STR             R7, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aDiff1Shares ; "Diff1 Shares"
STR             R7, [SP,#0x13C+var_13C]
MOVT            R1, #:upper16:aDiff1Shares ; "Diff1 Shares"
ADD             R3, R4, #0x28 ; '('
MOV             R2, #0xB
BL              sub_18850
LDR             R5, [R4,#0xB8]
MOV             R6, R0
CMP             R5, R7
BEQ             loc_1C2BC
LDR             R0, [R4,#0xB4]
BL              sub_22B68
MOVW            R1, #:lower16:aProxyType ; "Proxy Type"
MOV             R3, R0
MOVT            R1, #:upper16:aProxyType ; "Proxy Type"
MOV             R2, #2
STR             R7, [SP,#0x13C+var_13C]
MOV             R0, R6
BL              sub_18850
MOVW            R1, #:lower16:aProxy ; "Proxy"
LDR             R3, [R4,#0xB8]
MOV             R2, R7
STR             R7, [SP,#0x13C+var_13C]
MOVT            R1, #:upper16:aProxy ; "Proxy"
BL              sub_18850

loc_1C1B0
MOV             R5, #0
MOV             R1, #aDifficultyAcce ; "Difficulty Accepted"
ADD             R3, R4, #0x48 ; 'H'
MOV             R2, #0x18
STR             R5, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aDifficultyReje ; "Difficulty Rejected"
ADD             R3, R4, #0x50 ; 'P'
MOVT            R1, #:upper16:aDifficultyReje ; "Difficulty Rejected"
MOV             R2, #0x18
STR             R5, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aDifficultyStal ; "Difficulty Stale"
ADD             R3, R4, #0x58 ; 'X'
MOVT            R1, #:upper16:aDifficultyStal ; "Difficulty Stale"
MOV             R2, #0x18
STR             R5, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aLastShareDiffi ; "Last Share Difficulty"
ADD             R3, R4, #0x168
MOVT            R1, #:upper16:aLastShareDiffi ; "Last Share Difficulty"
MOV             R2, #0x18
STR             R5, [SP,#0x13C+var_13C]
BL              sub_18850
MOVW            R1, #:lower16:aHasStratum ; "Has Stratum"
ADD             R3, R4, #0x280
MOVT            R1, #:upper16:aHasStratum ; "Has Stratum"
MOV             R2, #0xE
STR             R5, [SP,#0x13C+var_13C]
BL              sub_18850
ADD             R3, R4, #0x280
MOVW            R1, #:lower16:aStratumActive ; "Stratum Active"
MOV             R2, #0xE
STR             R5, [SP,#0x13C+var_13C]
ADD             R3, R3, #1
MOVT            R1, #:upper16:aStratumActive ; "Stratum Active"
BL              sub_18850
LDRB            R2, [R4,#0x281]
CMP             R2, R5
BNE             loc_1BDD0
MOVW            R3, #:lower16:(asc_4D5C4+4) ; ""
MOVW            R1, #:lower16:aStratumUrl ; "Stratum URL"
STR             R2, [SP,#0x13C+var_13C]
MOVT            R3, #:upper16:(asc_4D5C4+4) ; ""
MOVT            R1, #:upper16:aStratumUrl ; "Stratum URL"
MOV             R2, #2
BL              sub_18850
B               loc_1BDE8

loc_1C274
MOVW            R1, #:lower16:aPools ; ",\"POOLS\":["
LDR             R0, [SP,#0x13C+var_12C] ; int
MOVT            R1, #:upper16:aPools ; ",\"POOLS\":["
BL              sub_15B00
LDR             R3, [R8]
MOV             R2, #0
STR             R0, [SP,#0x13C+var_120]
STR             R2, [SP,#0x13C+var_118]
CMP             R3, R2
BGT             loc_1BD94

loc_1C29C
LDR             R3, [SP,#0x13C+var_120]
CMP             R3, #0
LDRNE           R2, [SP,#0x13C+var_12C]
MOVNE           R3, #1
STRBNE          R3, [R2,#0xD]

loc_1C2B0
ADD             SP, SP, #0x13C
VPOP            {D8}
POP             {R4-R11,PC}

loc_1C2BC
MOVW            R3, #:lower16:(asc_4D5C4+4) ; ""
MOVW            R1, #:lower16:aProxyType ; "Proxy Type"
STR             R5, [SP,#0x13C+var_13C]
MOVT            R3, #:upper16:(asc_4D5C4+4) ; ""
MOVT            R1, #:upper16:aProxyType ; "Proxy Type"
MOV             R2, #2
BL              sub_18850
MOVW            R3, #:lower16:(asc_4D5C4+4) ; ""
MOVW            R1, #:lower16:aProxy ; "Proxy"
STR             R5, [SP,#0x13C+var_13C]
MOVT            R3, #:upper16:(asc_4D5C4+4) ; ""
MOVT            R1, #:upper16:aProxy ; "Proxy"
MOV             R2, #2
BL              sub_18850
B               loc_1C1B0

loc_1C2F8
MOV             R3, #aDisabled ; "Disabled"
STR             R3, [SP,#0x13C+var_130]
B               loc_1BF40

loc_1C308
LDRB            R2, [R4,#0x61]
MOVW            R3, #:lower16:aDead ; "Dead"
MOVW            R6, #:lower16:aAlive ; "Alive"
MOVT            R3, #:upper16:aDead ; "Dead"
MOVT            R6, #:upper16:aAlive ; "Alive"
CMP             R2, #0
MOVNE           R6, R3
STR             R6, [SP,#0x13C+var_130]
B               loc_1BF40

loc_1C32C
STR             R7, [SP,#0x13C+var_13C]
MOV             R0, R4
MOV             R2, R3
MOV             R1, #8
BL              sub_18AD4
ADD             SP, SP, #0x13C
VPOP            {D8}
POP             {R4-R11,PC}
; End of function sub_1BD24

PUSH            {R4-R9,LR}
SUB             SP, SP, #0xB4
MOV             R7, R0
MOV             R2, #0x20 ; ' '
MOV             R1, #0
ADD             R0, SP, #0x10
MOV             R5, R3
BL              memset
MOV             R2, #0x20 ; ' '
MOV             R1, #0
ADD             R0, SP, #0x30 ; '0'
BL              memset
MOV             R2, #0x20 ; ' '
MOV             R1, #0
ADD             R0, SP, #0x50 ; 'P'
BL              memset
MOV             R2, #0x20 ; ' '
MOV             R1, #0
ADD             R0, SP, #0x70 ; 'p'
BL              memset
MOV             R2, #0x20 ; ' '
MOV             R1, #0
ADD             R0, SP, #0x90
BL              memset
BL              sub_31FF4
MOV             R3, #0
MOV             R6, R0
STR             R5, [SP]
MOV             R0, R7
MOV             R2, R3
MOV             R1, #7
BL              sub_18AD4
CMP             R5, #0
MOVEQ           R8, R5
BNE             loc_1C554

loc_1C3D8
MOVW            R2, #:lower16:dbl_756A8
MOVW            R3, #:lower16:dbl_76830
MOVT            R2, #:upper16:dbl_756A8
MOVT            R3, #:upper16:dbl_76830
VLDR            D3, [R3]
MOVW            R3, #:lower16:dbl_68738
VLDR            D6, [R2]
MOVT            R3, #:upper16:dbl_68738
MOVW            R2, #:lower16:dbl_68720
VLDR            D5, [R3]
MOVT            R2, #:upper16:dbl_68720
VLDR            D4, =1000.0
VLDR            D7, [R2]
MOV             R4, #0
VSUB.F64        D6, D6, D3
MOVW            R1, #:lower16:aLcd ; "LCD"
MOV             R12, #0x30 ; '0'
ADD             R3, SP, #0x10
MOVT            R1, #:upper16:aLcd ; "LCD"
MOV             R2, #1
VSUB.F64        D7, D7, D5
MOV             R0, R4
VDIV.F64        D5, D6, D4
STR             R4, [SP]
STRH            R12, [SP,#0x10]
VDIV.F64        D6, D5, D7
VSTR            D6, [SP,#8]
BL              sub_18850
MOVW            R3, #:lower16:dbl_6A5B8
MOVW            R1, #:lower16:aGhs5s ; "GHS5s"
MOVT            R3, #:upper16:dbl_6A5B8
MOVT            R1, #:upper16:aGhs5s ; "GHS5s"
MOV             R2, #0x11
STR             R4, [SP]
BL              sub_18850
MOVW            R1, #:lower16:aGhsavg ; "GHSavg"
ADD             R3, SP, #8
MOVT            R1, #:upper16:aGhsavg ; "GHSavg"
MOV             R2, #0x11
STR             R4, [SP]
BL              sub_18850
MOVW            R3, #:lower16:dword_75580
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
MOVT            R3, #:upper16:dword_75580
MOV             R9, R0
LDR             R2, [R3]
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; "%d"
ADD             R0, SP, #0x30 ; '0'
BL              sprintf
MOVW            R1, #:lower16:aFan ; "fan"
MOV             R0, R9
ADD             R3, SP, #0x30 ; '0'
MOVT            R1, #:upper16:aFan ; "fan"
MOV             R2, #1
STR             R4, [SP]
BL              sub_18850
MOVW            R3, #:lower16:dword_75584
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
MOVT            R3, #:upper16:dword_75584
MOV             R9, R0
LDR             R2, [R3]
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; "%d"
ADD             R0, SP, #0x50 ; 'P'
BL              sprintf
MOVW            R1, #:lower16:aTemp ; "temp"
STR             R4, [SP]
MOV             R0, R9
ADD             R3, SP, #0x50 ; 'P'
MOVT            R1, #:upper16:aTemp ; "temp"
MOV             R2, #1
BL              sub_18850
CMP             R6, R4
BEQ             loc_1C56C
MOVW            R1, #:lower16:aPool ; "pool"
LDR             R3, [R6,#0xA4]
MOVT            R1, #:upper16:aPool ; "pool"
MOV             R2, #1
STR             R4, [SP]
BL              sub_18850
MOVW            R1, #:lower16:aUser ; "user"
LDR             R3, [R6,#0xAC]
MOVT            R1, #:upper16:aUser ; "user"
STR             R4, [SP]
MOV             R2, #1
BL              sub_18850
MOV             R1, R0

loc_1C530
MOV             R3, R5
MOV             R2, R5
MOV             R0, R7
BL              sub_17D00
CMP             R8, #0
MOVNE           R3, #1
STRBNE          R3, [R7,#0xD]
ADD             SP, SP, #0xB4
POP             {R4-R9,PC}

loc_1C554
MOVW            R1, #:lower16:aPools ; ",\"POOLS\":["
MOV             R0, R7
MOVT            R1, #:upper16:aPools ; ",\"POOLS\":["
BL              sub_15B00
MOV             R8, R0
B               loc_1C3D8

loc_1C56C
MOVW            R3, #:lower16:dword_4B184
MOVW            R1, #:lower16:aPool ; "pool"
MOVT            R3, #:upper16:dword_4B184
MOVT            R1, #:upper16:aPool ; "pool"
LDR             R12, [R3]
MOV             R2, #1
ADD             R3, SP, #0x70 ; 'p'
STR             R6, [SP]
STRH            R12, [SP,#0x70]
MOV             LR, R12,LSR#16
STRH            R12, [SP,#0x90]
STRB            LR, [SP,#0x72]
STRB            LR, [SP,#0x92]
BL              sub_18850
MOVW            R1, #:lower16:aUser ; "user"
STR             R6, [SP]
MOVT            R1, #:upper16:aUser ; "user"
ADD             R3, SP, #0x90
MOV             R2, #1
BL              sub_18850
MOV             R1, R0
B               loc_1C530
ALIGN 8
dbl_1C5C8 DCFD 1000.0



; int __fastcall sub_1C5D0(unsigned int *, int, const char *, const char *, int, unsigned __int8)
sub_1C5D0

var_20= -0x20
var_14= -0x14
var_10= -0x10
var_s0=  0
arg_0=  0x20
arg_4=  0x24

PUSH            {R4-R10,LR}
MOVW            R12, #:lower16:dbl_76830
MOVW            LR, #:lower16:dbl_756A8
MOVT            R12, #:upper16:dbl_76830
MOVT            LR, #:upper16:dbl_756A8
MOVW            R9, #:lower16:dbl_68720
VLDR            D3, [R12]
MOVW            R12, #:lower16:dbl_68738
VLDR            D6, [LR]
MOVT            R12, #:upper16:dbl_68738
VLDR            D5, [R12]
MOVT            R9, #:upper16:dbl_68720
VLDR            D4, =1000.0
SUB             SP, SP, #0x20
VLDR            D7, [R9]
MOV             R4, #0
VSUB.F64        D6, D6, D3
MOV             R8, R3
STR             R1, [SP,#0x20+var_14]
MOVW            R1, #:lower16:aStats ; "STATS"
MOV             R10, R2
MOVT            R1, #:upper16:aStats ; "STATS"
VSUB.F64        D7, D7, D5
ADD             R3, SP, #0x20+var_14
VDIV.F64        D5, D6, D4
MOV             R2, #6
MOV             R6, R0
STR             R4, [SP,#0x20+var_20]
MOV             R0, R4
LDR             R5, [SP,#0x20+arg_0]
LDRB            R7, [SP,#0x20+arg_4]
VDIV.F64        D6, D5, D7
VSTR            D6, [SP,#0x20+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aId ; "ID"
MOV             R3, R10
MOVT            R1, #:upper16:aId ; "ID"
MOV             R2, #1
STR             R4, [SP,#0x20+var_20]
BL              sub_18850
MOVW            R2, #:lower16:flt_6ABA0
VLDR            D6, [R9]
MOVT            R2, #:upper16:flt_6ABA0
ADD             R3, SP, #0x20+var_s0
VLDR            S14, [R2]
MOVW            R1, #:lower16:aElapsed ; "Elapsed"
STR             R4, [SP,#0x20+var_20]
MOVT            R1, #:upper16:aElapsed ; "Elapsed"
MOV             R2, #0xD
VCVT.F64.S32    D7, S14
VADD.F64        D7, D7, D6
VSTMDB          R3!, {D7}
BL              sub_18850
MOVW            R1, #:lower16:aCalls ; "Calls"
MOV             R3, R8
MOVT            R1, #:upper16:aCalls ; "Calls"
MOV             R2, #8
STR             R4, [SP,#0x20+var_20]
BL              sub_18850
MOVW            R1, #:lower16:aWait ; "Wait"
ADD             R3, R8, #4
MOVT            R1, #:upper16:aWait ; "Wait"
MOV             R2, #0xF
STR             R4, [SP,#0x20+var_20]
BL              sub_18850
MOVW            R1, #:lower16:aMax ; "Max"
ADD             R3, R8, #0xC
MOVT            R1, #:upper16:aMax ; "Max"
MOV             R2, #0xF
STR             R4, [SP,#0x20+var_20]
BL              sub_18850
MOVW            R1, #:lower16:aMin ; "Min"
ADD             R3, R8, #0x14
STR             R4, [SP,#0x20+var_20]
MOVT            R1, #:upper16:aMin ; "Min"
MOV             R2, #0xF
BL              sub_18850
MOV             R8, R0
MOV             R0, #dword_6ABA4 ; s
LDRB            R3, [R0]
CMP             R3, R4
BEQ             loc_1C7F8

loc_1C71C
MOV             R4, #0
MOVW            R3, #:lower16:dword_6ABA4
MOVW            R1, #:lower16:aGhs5s_0 ; "GHS 5s"
MOV             R0, R8
MOVT            R3, #:upper16:dword_6ABA4
MOVT            R1, #:upper16:aGhs5s_0 ; "GHS 5s"
MOV             R2, #1
STR             R4, [SP,#0x20+var_20]
BL              sub_18850
ADD             R8, SP, #0x20+var_10
MOVW            R1, #:lower16:aGhsAv ; "GHS av"
MOV             R3, R8
MOVT            R1, #:upper16:aGhsAv ; "GHS av"
MOV             R2, #0x11
STR             R4, [SP,#0x20+var_20]
BL              sub_18850
MOVW            R3, #:lower16:dbl_6ABB8
VLDR            D7, =0.01
MOVT            R3, #:upper16:dbl_6ABB8
MOVW            R1, #:lower16:aGhs30m ; "GHS 30m"
VLDR            D6, [R3]
MOVT            R1, #:upper16:aGhs30m ; "GHS 30m"
MOV             R2, #0x11
STR             R4, [SP,#0x20+var_20]
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
MOVMI           R3, R8
BL              sub_18850
MOVW            R3, #:lower16:dword_687F4
MOV             R1, #aMode ; "Mode"
STR             R4, [SP,#0x20+var_20]
MOVT            R3, #:upper16:dword_687F4
MOV             R2, #6
BL              sub_18850
CMP             R5, R4
MOV             R1, R0
BEQ             loc_1C7D8
CMP             R0, R4
LDRNE           R2, [R0,#0x10]
MOVEQ           R1, R5
LDRNE           R3, [R5,#0x10]
STRNE           R2, [R5,#0x10]
LDRNE           R2, [R0,#0x10]
STRNE           R5, [R2,#0x14]
STRNE           R0, [R3,#0x14]
STRNE           R3, [R0,#0x10]

loc_1C7D8
MOV             R2, R7
MOV             R0, R6
MOV             R3, #1
BL              sub_17D00
LDR             R0, [SP,#0x20+var_14]
ADD             R0, R0, #1
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R10,PC}

loc_1C7F8
MOVW            R1, #:lower16:a2f ; "%.2f"
MOV             R2, #0
MOVT            R1, #:upper16:a2f ; "%.2f"
MOV             R3, #0
BL              sprintf
B               loc_1C71C
; End of function sub_1C5D0

dbl_1C810 DCFD 1000.0
dbl_1C818 DCFD 0.01



; int __fastcall sub_1C820(int, int, int, int)
sub_1C820

var_2C= -0x2C
var_28= -0x28
var_20= -0x20
s= -0x18

PUSH            {R4-R11,LR}
MOV             R9, R3
SUB             SP, SP, #0x2C
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x46 ; 'F'
STR             R9, [SP,#0x2C+var_2C]
MOV             R11, R0
BL              sub_18AD4
CMP             R9, #0
BNE             loc_1C904
MOV             R7, #dword_755C0
LDR             R3, [R7]
CMP             R3, #0
STRGT           R9, [SP,#0x2C+var_20]
BLE             loc_1C8FC

loc_1C864
MOV             R4, #0
MOVW            R10, #:lower16:aSD_2 ; "%s%d"
MOV             R8, R4
MOVT            R10, #:upper16:aSD_2 ; "%s%d"

loc_1C874
MOV             R0, R4
BL              sub_3046C
SUBS            R5, R0, #0
BEQ             loc_1C8DC
LDR             R3, [R5,#4]
CMP             R3, #0
BEQ             loc_1C8DC
LDR             R6, [R3,#0x1C]
CMP             R6, #0
BEQ             loc_1C8A8
BLX             R6
LDR             R3, [R5,#4]
MOV             R6, R0

loc_1C8A8
LDR             R2, [R3,#8]
MOV             R1, R10 ; format
LDR             R3, [R5,#8]
ADD             R0, SP, #0x2C+s ; s
BL              sprintf
MOV             R1, R8
STR             R9, [SP,#0x2C+var_28]
ADD             R3, R5, #0x124
STR             R6, [SP,#0x2C+var_2C]
ADD             R2, SP, #0x2C+s
MOV             R0, R11
BL              sub_1C5D0
MOV             R8, R0

loc_1C8DC
LDR             R3, [R7]
ADD             R4, R4, #1
CMP             R3, R4
BGT             loc_1C874

loc_1C8EC
LDR             R3, [SP,#0x2C+var_20]
CMP             R3, #0
MOVNE           R3, #1
STRBNE          R3, [R11,#0xD]

loc_1C8FC
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_1C904
MOVW            R1, #:lower16:aStats_0 ; ",\"STATS\":["
MOVW            R7, #:lower16:dword_755C0
MOVT            R1, #:upper16:aStats_0 ; ",\"STATS\":["
MOV             R0, R11 ; int
MOVT            R7, #:upper16:dword_755C0
BL              sub_15B00
LDR             R3, [R7]
STR             R0, [SP,#0x2C+var_20]
CMP             R3, #0
BGT             loc_1C864
B               loc_1C8EC
; End of function sub_1C820




; int __fastcall sub_1C930(int, int, int, int)
sub_1C930

var_2C= -0x2C
var_28= -0x28
var_20= -0x20
s= -0x18

PUSH            {R4-R11,LR}
MOV             R7, R3
SUB             SP, SP, #0x2C
MOV             R3, #0
MOV             R2, R3
MOV             R1, #0x46 ; 'F'
STR             R7, [SP,#0x2C+var_2C]
MOV             R10, R0
BL              sub_18AD4
CMP             R7, #0
BNE             loc_1CA9C
MOVW            R3, #:lower16:a10 ; "1.0."
MOVW            R1, #:lower16:aBmminer_0 ; "BMMiner"
MOVT            R3, #:upper16:a10 ; "1.0."
MOVT            R1, #:upper16:aBmminer_0 ; "BMMiner"
MOV             R2, #1
STR             R7, [SP,#0x2C+var_2C]
MOV             R0, R7
MOVW            R8, #:lower16:dword_755C0
BL              sub_18850
MOVW            R3, #:lower16:byte_6ABC0
MOVW            R1, #:lower16:aMiner ; "Miner"
MOVT            R3, #:upper16:byte_6ABC0
MOVT            R1, #:upper16:aMiner ; "Miner"
MOV             R2, #1
STR             R7, [SP,#0x2C+var_2C]
BL              sub_18850
MOVW            R3, #:lower16:byte_6A74C
MOVW            R1, #:lower16:aCompiletime ; "CompileTime"
MOVT            R3, #:upper16:byte_6A74C
MOVT            R1, #:upper16:aCompiletime ; "CompileTime"
MOV             R2, #1
STR             R7, [SP,#0x2C+var_2C]
BL              sub_18850
MOVW            R3, #:lower16:byte_6A84C
MOVW            R1, #:lower16:aType ; "Type"
MOVT            R3, #:upper16:byte_6A84C
MOVT            R1, #:upper16:aType ; "Type"
MOV             R2, #1
STR             R7, [SP,#0x2C+var_2C]
BL              sub_18850
MOVT            R8, #:upper16:dword_755C0
MOV             R3, R7
MOV             R1, R0
MOV             R2, R7
MOV             R0, R10
BL              sub_17D00
LDR             R3, [R8]
CMP             R3, #0
STRGT           R7, [SP,#0x2C+var_20]
BLE             loc_1CA94

loc_1C9FC
MOV             R4, #0
MOVW            R11, #:lower16:aSD_2 ; "%s%d"
MOV             R9, R4
MOVT            R11, #:upper16:aSD_2 ; "%s%d"

loc_1CA0C
MOV             R0, R4
BL              sub_3046C
SUBS            R5, R0, #0
BEQ             loc_1CA74
LDR             R3, [R5,#4]
CMP             R3, #0
BEQ             loc_1CA74
LDR             R6, [R3,#0x1C]
CMP             R6, #0
BEQ             loc_1CA40
BLX             R6
LDR             R3, [R5,#4]
MOV             R6, R0

loc_1CA40
LDR             R2, [R3,#8]
MOV             R1, R11 ; format
LDR             R3, [R5,#8]
ADD             R0, SP, #0x2C+s ; s
BL              sprintf
MOV             R1, R9
STR             R7, [SP,#0x2C+var_28]
ADD             R3, R5, #0x124
STR             R6, [SP,#0x2C+var_2C]
ADD             R2, SP, #0x2C+s
MOV             R0, R10
BL              sub_1C5D0
MOV             R9, R0

loc_1CA74
LDR             R3, [R8]
ADD             R4, R4, #1
CMP             R3, R4
BGT             loc_1CA0C

loc_1CA84
LDR             R3, [SP,#0x2C+var_20]
CMP             R3, #0
MOVNE           R3, #1
STRBNE          R3, [R10,#0xD]

loc_1CA94
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_1CA9C
MOVW            R1, #:lower16:aStats_0 ; ",\"STATS\":["
MOV             R0, R10 ; int
MOVT            R1, #:upper16:aStats_0 ; ",\"STATS\":["
MOV             R4, #0
BL              sub_15B00
MOVW            R3, #:lower16:a10 ; "1.0."
MOVW            R1, #:lower16:aBmminer_0 ; "BMMiner"
STR             R0, [SP,#0x2C+var_20]
MOVT            R3, #:upper16:a10 ; "1.0."
MOVT            R1, #:upper16:aBmminer_0 ; "BMMiner"
MOV             R2, #1
MOV             R0, R4
STR             R4, [SP,#0x2C+var_2C]
BL              sub_18850
MOVW            R3, #:lower16:byte_6ABC0
MOVW            R1, #:lower16:aMiner ; "Miner"
MOVT            R3, #:upper16:byte_6ABC0
MOVT            R1, #:upper16:aMiner ; "Miner"
MOV             R2, #1
STR             R4, [SP,#0x2C+var_2C]
BL              sub_18850
MOVW            R3, #:lower16:byte_6A74C
MOVW            R1, #:lower16:aCompiletime ; "CompileTime"
MOVT            R3, #:upper16:byte_6A74C
MOVT            R1, #:upper16:aCompiletime ; "CompileTime"
MOV             R2, #1
STR             R4, [SP,#0x2C+var_2C]
BL              sub_18850
MOVW            R3, #:lower16:byte_6A84C
MOVW            R1, #:lower16:aType ; "Type"
MOVT            R3, #:upper16:byte_6A84C
MOVT            R1, #:upper16:aType ; "Type"
MOV             R2, #1
STR             R4, [SP,#0x2C+var_2C]
MOVW            R8, #:lower16:dword_755C0
BL              sub_18850
MOVT            R8, #:upper16:dword_755C0
MOV             R3, R4
MOV             R1, R0
MOV             R2, #1
MOV             R0, R10
BL              sub_17D00
LDR             R3, [R8]
CMP             R3, R4
BGT             loc_1C9FC
B               loc_1CA84
; End of function sub_1C930




; int __fastcall sub_1CB54(int, int, int, int)
sub_1CB54

var_64= -0x64
var_58= -0x58
var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_44= -0x44
var_3C= -0x3C
var_34= -0x34
var_24= -0x24
var_1C= -0x1C
var_14= -0x14
var_C= -0xC
var_4= -4

PUSH            {R4-R11,LR}
MOV             R10, R3
VPUSH           {D8-D10}
MOV             R3, #0
SUB             SP, SP, #0x64
MOV             R2, R3
MOV             R1, #0xB
STR             R10, [SP,#0x64+var_64]
MOV             R4, R0
STR             R0, [SP,#0x64+var_50]
BL              sub_18AD4
MOVW            R3, #:lower16:aSummary ; ",\"SUMMARY\":["
CMP             R10, #0
MOVT            R3, #:upper16:aSummary ; ",\"SUMMARY\":["
MOV             R1, #aSummary_0 ; "SUMMARY,"
MOV             R0, R4  ; int
MOVNE           R1, R3  ; s
BL              sub_15B00
STR             R0, [SP,#0x64+var_54]
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1D164

loc_1CBB8
MOVW            R7, #:lower16:dbl_73370
MOVW            R5, #:lower16:dbl_73390
MOVT            R7, #:upper16:dbl_73370
MOVT            R5, #:upper16:dbl_73390
VLDR            D5, [R5]
MOVW            R6, #:lower16:dbl_766B8
VLDR            D7, [R7]
MOVT            R6, #:upper16:dbl_766B8
VLDR            D6, [R6]
MOV             R4, #qword_76850
VLDR            D9, =60.0
STR             R4, [SP,#0x64+var_58]
VADD.F64        D7, D7, D5
VADD.F64        D7, D7, D6
VMOV            R0, R1, D7
BLX             __fixdfdi
MOV             R3, R1
MOVW            R1, #:lower16:qword_755D8
MOV             R2, R0
MOVT            R1, #:upper16:qword_755D8
STRD            R2, R3, [R4]
LDRD            R0, R1, [R1]
STRD            R2, R3, [SP,#0x64+var_4C]
BLX             sub_4A11C
VMOV            D7, R0, R1
MOV             R1, #dbl_68720
MOVW            R0, #:lower16:dbl_756A8
VLDR            D8, [R1]
MOVW            R1, #:lower16:dbl_76830
MOVT            R0, #:upper16:dbl_756A8
MOVT            R1, #:upper16:dbl_76830
VLDR            D4, [R1]
MOVW            R12, #:lower16:dbl_68738
VLDR            D5, [R0]
MOVT            R12, #:upper16:dbl_68738
VCMP.F64        D8, #0.0
VMRS            APSR_nzcv, FPSCR
VLDR            D3, =1000.0
VDIVNE.F64      D7, D7, D8
VSUB.F64        D5, D5, D4
VLDR            D6, [R12]
LDRD            R2, R3, [SP,#0x64+var_4C]
VMOVNE.F64      D10, D8
VDIV.F64        D4, D5, D3
VSUB.F64        D6, D8, D6
MOV             R0, R2
MOV             R1, R3
VMOVEQ.F64      D10, #1.0
VMUL.F64        D7, D7, D9
VSTR            D7, [SP,#0x64+var_44]
VDIV.F64        D7, D4, D6
VSTR            D7, [SP,#0x64+var_3C]
BLX             sub_4A11C
VMOV            D7, R0, R1
MOV             R2, #flt_6ABA0
ADD             R3, SP, #0x64+var_4
VDIV.F64        D6, D7, D10
MOVW            R1, #:lower16:aElapsed ; "Elapsed"
VLDR            S14, [R2]
MOV             R2, #1
STR             R2, [SP,#0x64+var_64]
MOVT            R1, #:upper16:aElapsed ; "Elapsed"
MOV             R2, #0xD
MOV             R0, #0
VCVT.F64.S32    D7, S14
VADD.F64        D7, D7, D8
VMOV            R8, R9, D7
STRD            R8, R9, [R3,#-0x28]!
VMUL.F64        D6, D6, D9
VSTR            D6, [SP,#0x64+var_34]
BL              sub_18850
MOV             R4, R0
MOV             R0, #dword_6ABA4 ; s
LDRB            R3, [R0]
CMP             R3, #0
BEQ             loc_1D14C

loc_1CCF8
MOV             R9, #0
MOVW            R3, #:lower16:dword_6ABA4
MOVW            R1, #:lower16:aGhs5s_0 ; "GHS 5s"
MOV             R0, R4
STR             R9, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dword_6ABA4
MOVT            R1, #:upper16:aGhs5s_0 ; "GHS 5s"
MOV             R2, #1
BL              sub_18850
MOVW            R1, #:lower16:aGhsAv ; "GHS av"
STR             R9, [SP,#0x64+var_64]
ADD             R3, SP, #0x64+var_3C
MOVT            R1, #:upper16:aGhsAv ; "GHS av"
MOV             R2, #0x11
MOV             R4, #1
BL              sub_18850
MOVW            R3, #:lower16:dbl_6ABB8
VLDR            D7, =0.01
MOVT            R3, #:upper16:dbl_6ABB8
ADD             R12, SP, #0x64+var_3C
VLDR            D6, [R3]
MOV             R1, #aGhs30m ; "GHS 30m"
STR             R9, [SP,#0x64+var_64]
MOV             R2, #0x11
MOV             R11, #dword_73368
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
MOVMI           R3, R12
BL              sub_18850
MOVW            R3, #:lower16:dword_7345C
MOVW            R1, #:lower16:aFoundBlocks ; "Found Blocks"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dword_7345C
MOVT            R1, #:upper16:aFoundBlocks ; "Found Blocks"
MOV             R2, #7
BL              sub_18850
MOVW            R3, #:lower16:dword_755E8
MOVW            R1, #:lower16:aGetworks ; "Getworks"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dword_755E8
MOVT            R1, #:upper16:aGetworks ; "Getworks"
MOV             R2, #0xB
BL              sub_18850
MOVW            R3, #:lower16:qword_755D8
MOVW            R1, #:lower16:aAccepted ; "Accepted"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:qword_755D8
MOVT            R1, #:upper16:aAccepted ; "Accepted"
MOV             R2, #0xB
BL              sub_18850
MOVW            R3, #:lower16:qword_767E8
MOVW            R1, #:lower16:aRejected ; "Rejected"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:qword_767E8
MOVT            R1, #:upper16:aRejected ; "Rejected"
MOV             R2, #0xB
BL              sub_18850
MOVW            R1, #:lower16:aHardwareErrors ; "Hardware Errors"
STR             R4, [SP,#0x64+var_64]
MOV             R3, R11
MOVT            R1, #:upper16:aHardwareErrors ; "Hardware Errors"
MOV             R2, #6
BL              sub_18850
MOVW            R1, #:lower16:aUtility ; "Utility"
STR             R9, [SP,#0x64+var_64]
MOVT            R1, #:upper16:aUtility ; "Utility"
ADD             R3, SP, #0x64+var_44
MOV             R2, #0x14
BL              sub_18850
MOVW            R3, #:lower16:qword_73380
MOVW            R1, #:lower16:aDiscarded ; "Discarded"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:qword_73380
MOVT            R1, #:upper16:aDiscarded ; "Discarded"
MOV             R2, #0xB
BL              sub_18850
MOVW            R3, #:lower16:qword_73318
MOVW            R1, #:lower16:aStale ; "Stale"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:qword_73318
MOVT            R1, #:upper16:aStale ; "Stale"
MOV             R2, #0xB
BL              sub_18850
MOVW            R3, #:lower16:dword_755D0
MOVW            R1, #:lower16:aGetFailures ; "Get Failures"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dword_755D0
MOVT            R1, #:upper16:aGetFailures ; "Get Failures"
MOV             R2, #7
BL              sub_18850
MOVW            R3, #:lower16:dword_767E0
MOVW            R1, #:lower16:aLocalWork ; "Local Work"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dword_767E0
MOVT            R1, #:upper16:aLocalWork ; "Local Work"
MOV             R2, #7
BL              sub_18850
MOVW            R3, #:lower16:dword_74494
MOVW            R1, #:lower16:aRemoteFailures ; "Remote Failures"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dword_74494
MOVT            R1, #:upper16:aRemoteFailures ; "Remote Failures"
MOV             R2, #7
BL              sub_18850
MOVW            R3, #:lower16:dword_766DC
MOVW            R1, #:lower16:aNetworkBlocks ; "Network Blocks"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dword_766DC
MOVT            R1, #:upper16:aNetworkBlocks ; "Network Blocks"
MOV             R2, #7
BL              sub_18850
MOVW            R3, #:lower16:dbl_756A8
MOVW            R1, #:lower16:aTotalMh ; "Total MH"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dbl_756A8
MOVT            R1, #:upper16:aTotalMh ; "Total MH"
MOV             R2, #0x12
BL              sub_18850
MOVW            R1, #:lower16:aWorkUtility ; "Work Utility"
STR             R9, [SP,#0x64+var_64]
MOVT            R1, #:upper16:aWorkUtility ; "Work Utility"
ADD             R3, SP, #0x64+var_34
MOV             R2, #0x14
BL              sub_18850
MOVW            R3, #:lower16:dbl_73370
MOVW            R1, #:lower16:aDifficultyAcce ; "Difficulty Accepted"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dbl_73370
MOVT            R1, #:upper16:aDifficultyAcce ; "Difficulty Accepted"
MOV             R2, #0x18
BL              sub_18850
MOVW            R3, #:lower16:dbl_73390
MOVW            R1, #:lower16:aDifficultyReje ; "Difficulty Rejected"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dbl_73390
MOVT            R1, #:upper16:aDifficultyReje ; "Difficulty Rejected"
MOV             R2, #0x18
BL              sub_18850
MOVW            R3, #:lower16:dbl_766B8
MOVW            R1, #:lower16:aDifficultyStal ; "Difficulty Stale"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dbl_766B8
MOVT            R1, #:upper16:aDifficultyStal ; "Difficulty Stale"
MOV             R2, #0x18
BL              sub_18850
MOVW            R3, #:lower16:qword_68FF0
MOVW            R1, #:lower16:aBestShare ; "Best Share"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:qword_68FF0
MOVT            R1, #:upper16:aBestShare ; "Best Share"
MOV             R2, #0xA
BL              sub_18850
LDR             R2, [SP,#0x64+var_58]
MOV             R4, R0
LDR             R3, [R11]
LDRD            R0, R1, [R2]
ADDS            R8, R0, R3
ADC             R9, R1, R3,ASR#31
ORRS            R2, R8, R9
BEQ             loc_1D13C
VMOV            S15, R3
MOV             R0, R8
VCVT.F64.S32    D8, S15
MOV             R1, R9
BLX             sub_4A11C
VMOV            D7, R0, R1
VDIV.F64        D7, D8, D7
B               loc_1CFC4
dbl_1CFA0 DCFD 60.0
dbl_1CFA8 DCFD 1000.0
dbl_1CFB0 DCFD 0.01
dbl_1CFB8 DCFD 0.0
off_1CFC0 DCD aSummary_1 ; "summary"

loc_1CFC4
VMOV            R8, R9, D7
ADD             R3, SP, #0x64+var_4
MOV             R2, #0
MOVW            R1, #:lower16:aDeviceHardware ; "Device Hardware%"
STRD            R8, R9, [R3,#-0x20]!
MOV             R0, R4
MOVT            R1, #:upper16:aDeviceHardware ; "Device Hardware%"
STR             R2, [SP,#0x64+var_64]
MOV             R2, #0x19
BL              sub_18850
LDR             R3, [SP,#0x64+var_58]
MOV             R4, R0
LDRD            R0, R1, [R3]
ORRS            R3, R0, R1
BEQ             loc_1D144
BLX             sub_4A11C
VLDR            D6, [R5]
VMOV            D7, R0, R1
VDIV.F64        D7, D6, D7

loc_1D010
VMOV            R8, R9, D7
ADD             R3, SP, #0x64+var_4
MOV             R2, #0
MOVW            R1, #:lower16:aDeviceRejected ; "Device Rejected%"
STRD            R8, R9, [R3,#-0x18]!
MOV             R0, R4
MOVT            R1, #:upper16:aDeviceRejected ; "Device Rejected%"
STR             R2, [SP,#0x64+var_64]
MOV             R2, #0x19
MOV             R4, #0
BL              sub_18850
VLDR            D6, [R5]
ADD             R3, SP, #0x64+var_4
VLDR            D7, [R7]
MOV             R2, #0
VLDR            D5, [R6]
MOV             R1, #aPoolRejected ; "Pool Rejected%"
VADD.F64        D7, D6, D7
VADD.F64        D7, D7, D5
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
VDIVNE.F64      D5, D6, D7
VLDREQ          D5, =0.0
VMOV            R8, R9, D5
STRD            R8, R9, [R3,#-0x10]!
STR             R2, [SP,#0x64+var_64]
MOV             R2, #0x19
BL              sub_18850
VLDR            D5, [R5]
ADD             R3, SP, #0x64+var_4
VLDR            D7, [R7]
MOVW            R1, #:lower16:aPoolStale ; "Pool Stale%"
VLDR            D6, [R6]
MOVT            R1, #:upper16:aPoolStale ; "Pool Stale%"
MOV             R2, #0x19
VADD.F64        D7, D7, D5
VADD.F64        D7, D7, D6
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
VDIVNE.F64      D5, D6, D7
VLDREQ          D5, =0.0
VSTMDB          R3!, {D5}
STR             R4, [SP,#0x64+var_64]
BL              sub_18850
MOVW            R3, #:lower16:dword_744A0
MOVW            R1, #:lower16:aLastGetwork ; "Last getwork"
STR             R4, [SP,#0x64+var_64]
MOVT            R3, #:upper16:dword_744A0
MOVT            R1, #:upper16:aLastGetwork ; "Last getwork"
MOV             R2, #0x10
BL              sub_18850
MOV             R4, R0
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1D174

loc_1D0F8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R1, R4
LDR             R4, [SP,#0x64+var_50]
MOV             R3, #0
MOV             R2, R10
MOV             R0, R4
BL              sub_17D00
LDR             R3, [SP,#0x64+var_54]
TST             R10, R3
MOVNE           R3, #1
STRBNE          R3, [R4,#0xD]
ADD             SP, SP, #0x64 ; 'd'
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_1D13C
VLDR            D7, =0.0
B               loc_1CFC4

loc_1D144
VLDR            D7, =0.0
B               loc_1D010

loc_1D14C
MOVW            R1, #:lower16:a2f ; "%.2f"
MOV             R2, #0
MOVT            R1, #:upper16:a2f ; "%.2f"
MOV             R3, #0
BL              sprintf
B               loc_1CCF8

loc_1D164
MOVW            R1, #0xAE4
LDR             R0, =aSummary_1 ; "summary"
BL              sub_17604
B               loc_1CBB8

loc_1D174
MOVW            R1, #0xB1C
LDR             R0, =aSummary_1 ; "summary"
BL              sub_17668
; End of function sub_1CB54



; Attributes: thunk

sub_1D180
B               loc_1D0F8
; End of function sub_1D180




; const char *__fastcall sub_1D184(int, const char *, const char *, char)
sub_1D184

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D184




; const char *__fastcall sub_1D1A4(int, const char *, const char *, char)
sub_1D1A4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #1
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D1A4




; const char *__fastcall sub_1D1C4(int, const char *, const char *, char)
sub_1D1C4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #2
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D1C4




; const char *__fastcall sub_1D1E4(int, const char *, const char *, char)
sub_1D1E4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #3
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D1E4




; const char *__fastcall sub_1D204(int, const char *, const char *, char)
sub_1D204

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #4
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D204




; const char *__fastcall sub_1D224(int, const char *, const char *, char)
sub_1D224

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #5
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D224




; const char *__fastcall sub_1D244(int, const char *, const char *, char)
sub_1D244

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #6
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D244




; const char *__fastcall sub_1D264(int, const char *, const char *, char)
sub_1D264

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #7
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D264




; const char *__fastcall sub_1D284(int, const char *, const char *, char)
sub_1D284

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #8
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D284




; const char *__fastcall sub_1D2A4(int, const char *, const char *, char)
sub_1D2A4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #9
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D2A4




; const char *__fastcall sub_1D2C4(int, const char *, const char *, char)
sub_1D2C4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0xA
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D2C4




; const char *__fastcall sub_1D2E4(int, const char *, const char *, char)
sub_1D2E4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0xB
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D2E4




; const char *__fastcall sub_1D304(int, const char *, const char *, char)
sub_1D304

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0xC
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D304




; const char *__fastcall sub_1D324(int, const char *, const char *, char)
sub_1D324

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0xD
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D324




; const char *__fastcall sub_1D344(int, const char *, const char *, char)
sub_1D344

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0xE
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D344




; const char *__fastcall sub_1D364(int, const char *, const char *, char)
sub_1D364

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0xF
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D364




; const char *__fastcall sub_1D384(int, const char *, const char *, char)
sub_1D384

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x10
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D384




; const char *__fastcall sub_1D3A4(int, const char *, const char *, char)
sub_1D3A4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x11
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D3A4




; const char *__fastcall sub_1D3C4(int, const char *, const char *, char)
sub_1D3C4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x12
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D3C4




; const char *__fastcall sub_1D3E4(int, const char *, const char *, char)
sub_1D3E4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x13
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D3E4




; const char *__fastcall sub_1D404(int, const char *, const char *, char)
sub_1D404

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x14
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D404




; const char *__fastcall sub_1D424(int, const char *, const char *, char)
sub_1D424

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x15
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D424




; const char *__fastcall sub_1D444(int, const char *, const char *, char)
sub_1D444

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x16
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D444




; const char *__fastcall sub_1D464(int, const char *, const char *, char)
sub_1D464

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x17
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D464




; const char *__fastcall sub_1D484(int, const char *, const char *, char)
sub_1D484

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x18
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D484




; const char *__fastcall sub_1D4A4(int, const char *, const char *, char)
sub_1D4A4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x19
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D4A4




; const char *__fastcall sub_1D4C4(int, const char *, const char *, char)
sub_1D4C4

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
STR             R3, [SP,#0xC+var_C]
MOV             R3, R2
MOV             R2, #0x1A
BL              sub_18850
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_1D4C4




; void sub_1D4E4()
sub_1D4E4
MOVW            R2, #:lower16:dbl_756A8
MOVW            R3, #:lower16:dbl_76830
MOVT            R2, #:upper16:dbl_756A8
MOVT            R3, #:upper16:dbl_76830
VLDR            D6, [R2]
MOVW            R2, #:lower16:dbl_68720
VLDR            D4, [R3]
MOV             R3, #dbl_68738
MOVT            R2, #:upper16:dbl_68720
VLDR            D0, [R3]
VLDR            D5, =1000.0
VLDR            D7, [R2]
VSUB.F64        D6, D6, D4
VSUB.F64        D7, D7, D0
VDIV.F64        D0, D6, D5
VDIV.F64        D0, D0, D7
BX              LR
; End of function sub_1D4E4

ALIGN 0x10
dbl_1D530 DCFD 1000.0



; void __fastcall sub_1D538(int *)
sub_1D538

var_82C= -0x82C
var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
MOVW            R3, #:lower16:dbl_68720
VPUSH           {D8}
SUB             SP, SP, #0x820
SUB             SP, SP, #0xC
MOV             R5, #1
VLDR            D8, =0.0
MOVW            R1, #:lower16:aElapsed ; "Elapsed"
MOV             R4, R0
MOV             R7, #0
MOV             R8, #0
MOV             R9, #0
LDR             R0, [R0]
MOVT            R3, #:upper16:dbl_68720
MOVT            R1, #:upper16:aElapsed ; "Elapsed"
MOV             R2, #0xD
STR             R5, [SP,#0x82C+var_82C]
MOVW            R10, #0x147B
STRD            R8, R9, [SP,#0x82C+var_814]
MOVW            R11, #0xE141
STRD            R8, R9, [SP,#0x82C+var_80C]
ADD             R6, SP, #0x82C+var_814
VSTR            D8, [SP,#0x82C+var_81C]
MOVT            R10, #0x47AE
STR             R7, [SP,#0x82C+var_824]
MOVT            R11, #0x40CB
STR             R7, [SP,#0x82C+var_820]
BL              sub_18850
MOVW            R3, #:lower16:a1418974 ; "14189.74"
MOVW            R1, #:lower16:aGhs5s_0 ; "GHS 5s"
STR             R0, [R4]
MOV             R2, R5
MOVT            R3, #:upper16:a1418974 ; "14189.74"
MOVT            R1, #:upper16:aGhs5s_0 ; "GHS 5s"
STR             R7, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R1, #:lower16:aGhsAv ; "GHS av"
STR             R0, [R4]
MOVT            R1, #:upper16:aGhsAv ; "GHS av"
STR             R5, [SP,#0x82C+var_82C]
MOV             R2, #0x11
STRD            R10, R11, [R6,#-8]!
MOV             R3, R6
MOV             R10, #0x14
BL              sub_18850
MOVW            R1, #:lower16:aFoundBlocks ; "Found Blocks"
STR             R0, [R4]
ADD             R3, SP, #0x82C+var_824
MOVT            R1, #:upper16:aFoundBlocks ; "Found Blocks"
MOV             R2, #7
STR             R5, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R1, #:lower16:aGetworks ; "Getworks"
STR             R0, [R4]
MOV             R11, #0
MOVT            R1, #:upper16:aGetworks ; "Getworks"
ADD             R3, SP, #0x82C+var_814
MOV             R2, #0xB
STR             R5, [SP,#0x82C+var_82C]
STRD            R10, R11, [SP,#0x82C+var_814]
MOV             R10, #0x52 ; 'R'
BL              sub_18850
MOVW            R1, #:lower16:aAccepted ; "Accepted"
STR             R0, [R4]
MOV             R11, #0
MOVT            R1, #:upper16:aAccepted ; "Accepted"
ADD             R3, SP, #0x82C+var_814
MOV             R2, #0xB
STR             R5, [SP,#0x82C+var_82C]
STRD            R10, R11, [SP,#0x82C+var_814]
MOVW            R10, #0x70A4
BL              sub_18850
MOVW            R1, #:lower16:aRejected ; "Rejected"
STR             R0, [R4]
ADD             R3, SP, #0x82C+var_814
MOVT            R1, #:upper16:aRejected ; "Rejected"
MOV             R2, #0xB
STR             R5, [SP,#0x82C+var_82C]
STRD            R8, R9, [SP,#0x82C+var_814]
MOVW            R11, #0xA3D7
BL              sub_18850
MOVW            R1, #:lower16:aHardwareErrors ; "Hardware Errors"
STR             R0, [R4]
ADD             R3, SP, #0x82C+var_820
MOVT            R1, #:upper16:aHardwareErrors ; "Hardware Errors"
MOV             R2, #6
STR             R5, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R1, #:lower16:aUtility ; "Utility"
STR             R0, [R4]
MOVT            R1, #:upper16:aUtility ; "Utility"
MOV             R3, R6
MOV             R2, #0x14
MOVT            R10, #0xA3D
MOVT            R11, #0x4017
STR             R7, [SP,#0x82C+var_82C]
STRD            R10, R11, [SP,#0x82C+var_81C]
BL              sub_18850
MOVW            R1, #:lower16:aDiscarded ; "Discarded"
STR             R0, [R4]
ADD             R3, SP, #0x82C+var_814
MOVT            R1, #:upper16:aDiscarded ; "Discarded"
MOV             R2, #0xB
STR             R5, [SP,#0x82C+var_82C]
STRD            R8, R9, [SP,#0x82C+var_814]
BL              sub_18850
MOVW            R1, #:lower16:aStale ; "Stale"
STR             R0, [R4]
ADD             R3, SP, #0x82C+var_814
MOVT            R1, #:upper16:aStale ; "Stale"
MOV             R2, #0xB
STR             R5, [SP,#0x82C+var_82C]
STRD            R8, R9, [SP,#0x82C+var_814]
MOV             R9, #0x8000
BL              sub_18850
MOVW            R1, #:lower16:aGetFailures ; "Get Failures"
STR             R0, [R4]
ADD             R3, SP, #0x82C+var_824
MOVT            R1, #:upper16:aGetFailures ; "Get Failures"
MOV             R2, #7
STR             R5, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R3, #:lower16:dword_767E0
MOVW            R1, #:lower16:aLocalWork ; "Local Work"
STR             R0, [R4]
MOVT            R3, #:upper16:dword_767E0
MOVT            R1, #:upper16:aLocalWork ; "Local Work"
MOV             R2, #7
STR             R5, [SP,#0x82C+var_82C]
MOV             R8, #0
BL              sub_18850
MOVW            R1, #:lower16:aRemoteFailures ; "Remote Failures"
STR             R0, [R4]
ADD             R3, SP, #0x82C+var_824
MOVT            R1, #:upper16:aRemoteFailures ; "Remote Failures"
MOV             R2, #7
STR             R5, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R3, #:lower16:dword_766DC
MOVW            R1, #:lower16:aNetworkBlocks ; "Network Blocks"
STR             R0, [R4]
MOVT            R3, #:upper16:dword_766DC
MOVT            R1, #:upper16:aNetworkBlocks ; "Network Blocks"
MOV             R2, #7
STR             R5, [SP,#0x82C+var_82C]
MOVT            R9, #0x4134
BL              sub_18850
MOVW            R3, #:lower16:dbl_756A8
MOVW            R1, #:lower16:aTotalMh ; "Total MH"
STR             R0, [R4]
MOVT            R3, #:upper16:dbl_756A8
MOVT            R1, #:upper16:aTotalMh ; "Total MH"
MOV             R2, #0x12
STR             R5, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R1, #:lower16:aWorkUtility ; "Work Utility"
STR             R0, [R4]
MOV             R3, R6
MOVT            R1, #:upper16:aWorkUtility ; "Work Utility"
MOV             R2, #0x14
STR             R7, [SP,#0x82C+var_82C]
VSTR            D8, [SP,#0x82C+var_81C]
BL              sub_18850
MOVW            R1, #:lower16:aDifficultyAcce ; "Difficulty Accepted"
STR             R0, [R4]
MOV             R3, R6
MOVT            R1, #:upper16:aDifficultyAcce ; "Difficulty Accepted"
MOV             R2, #0x18
STR             R5, [SP,#0x82C+var_82C]
STRD            R8, R9, [SP,#0x82C+var_81C]
MOV             R9, #0
BL              sub_18850
MOVW            R1, #:lower16:aDifficultyReje ; "Difficulty Rejected"
STR             R0, [R4]
MOV             R3, R6
MOVT            R1, #:upper16:aDifficultyReje ; "Difficulty Rejected"
MOV             R2, #0x18
MOV             R8, #0
MOVT            R9, #0x40D0
STR             R5, [SP,#0x82C+var_82C]
STRD            R8, R9, [SP,#0x82C+var_81C]
BL              sub_18850
MOVW            R3, #:lower16:dbl_766B8
MOVW            R1, #:lower16:aDifficultyStal ; "Difficulty Stale"
STR             R0, [R4]
MOVT            R3, #:upper16:dbl_766B8
MOVT            R1, #:upper16:aDifficultyStal ; "Difficulty Stale"
MOV             R2, #0x18
STR             R5, [SP,#0x82C+var_82C]
BL              sub_18850
ADR             R3, dword_1D918
LDRD            R2, R3, [R3]
ADD             R12, SP, #0x82C+s
MOVW            R1, #:lower16:aBestShare ; "Best Share"
STR             R0, [R4]
MOVT            R1, #:upper16:aBestShare ; "Best Share"
STR             R5, [SP,#0x82C+var_82C]
STRD            R2, R3, [R12,#-8]!
MOV             R2, #0xA
MOV             R3, R12
BL              sub_18850
MOVW            R1, #:lower16:aDeviceHardware ; "Device Hardware%"
STR             R0, [R4]
MOV             R3, R6
MOVT            R1, #:upper16:aDeviceHardware ; "Device Hardware%"
MOV             R2, #0x19
STR             R7, [SP,#0x82C+var_82C]
VSTR            D8, [SP,#0x82C+var_81C]
BL              sub_18850
MOVW            R1, #:lower16:aDeviceRejected ; "Device Rejected%"
STR             R0, [R4]
MOV             R3, R6
MOVT            R1, #:upper16:aDeviceRejected ; "Device Rejected%"
MOV             R2, #0x19
STR             R7, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R1, #:lower16:aPoolRejected ; "Pool Rejected%"
STR             R0, [R4]
MOV             R3, R6
MOVT            R1, #:upper16:aPoolRejected ; "Pool Rejected%"
MOV             R2, #0x19
STR             R7, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R1, #:lower16:aPoolStale ; "Pool Stale%"
STR             R0, [R4]
MOV             R3, R6
MOVT            R1, #:upper16:aPoolStale ; "Pool Stale%"
MOV             R2, #0x19
STR             R7, [SP,#0x82C+var_82C]
BL              sub_18850
MOVW            R3, #:lower16:dword_744A0
MOVW            R1, #:lower16:aLastGetwork ; "Last getwork"
STR             R0, [R4]
MOVT            R3, #:upper16:dword_744A0
MOV             R2, #0x10
STR             R7, [SP,#0x82C+var_82C]
MOVT            R1, #:upper16:aLastGetwork ; "Last getwork"
BL              sub_18850
MOVW            R2, #:lower16:byte_74500
STR             R0, [R4]
MOVT            R2, #:upper16:byte_74500
LDRB            R3, [R2]
CMP             R3, R7
BNE             loc_1D934
B               loc_1D920
ALIGN 0x10
dbl_1D910 DCFD 0.0
dword_1D918 DCD 0x34621D
DCD 0

loc_1D920
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R7
BEQ             loc_1D96C

loc_1D934
MOVW            R2, #:lower16:aRootD ; "root %d"
MOV             R3, R0
MOVT            R2, #:upper16:aRootD ; "root %d"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x82C+s ; s
BL              snprintf
ADD             R1, SP, #0x82C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_1D96C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_1D934
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}
; End of function sub_1D538




; int __fastcall sub_1D990(unsigned int *, int, int, int)
sub_1D990

var_10= -0x10
var_4= -4

PUSH            {R4-R8,LR}
MOV             R5, R2
LDR             R2, [R2,#0xF4]
SUB             SP, SP, #0x10
MOV             R8, R0
MOV             R6, R3
STR             R1, [SP,#0x10+var_4]
CMP             R2, #0
MOVEQ           R7, #aNone ; "None"
BEQ             loc_1D9DC
LDR             R2, [R5,#0xF8]
CMP             R2, #8
MOVWLS          R3, #0xA37C
MOVWHI          R7, #0xB270
MOVTLS          R3, #4
MOVTHI          R7, #4
ADDLS           R3, R3, R2,LSL#2
LDRLS           R7, [R3,#0x9C]

loc_1D9DC
MOV             R4, #0
MOV             R1, #aNotify ; "NOTIFY"
ADD             R3, SP, #0x10+var_4
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
MOV             R0, R4
BL              sub_18850
LDR             R3, [R5,#4]
MOV             R1, #aName ; "Name"
MOV             R2, #1
LDR             R3, [R3,#8]
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aId ; "ID"
ADD             R3, R5, #8
MOVT            R1, #:upper16:aId ; "ID"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aLastWell ; "Last Well"
ADD             R3, R5, #0xF0
MOVT            R1, #:upper16:aLastWell ; "Last Well"
MOV             R2, #0x10
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aLastNotWell ; "Last Not Well"
ADD             R3, R5, #0xF4
MOVT            R1, #:upper16:aLastNotWell ; "Last Not Well"
MOV             R2, #0x10
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aReasonNotWell ; "Reason Not Well"
MOV             R3, R7
MOVT            R1, #:upper16:aReasonNotWell ; "Reason Not Well"
MOV             R2, #1
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aThreadFailInit ; "*Thread Fail Init"
ADD             R3, R5, #0xFC
MOVT            R1, #:upper16:aThreadFailInit ; "*Thread Fail Init"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aThreadZeroHash ; "*Thread Zero Hash"
ADD             R3, R5, #0x100
MOVT            R1, #:upper16:aThreadZeroHash ; "*Thread Zero Hash"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aThreadFailQueu ; "*Thread Fail Queue"
ADD             R3, R5, #0x104
MOVT            R1, #:upper16:aThreadFailQueu ; "*Thread Fail Queue"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aDevSickIdle60s ; "*Dev Sick Idle 60s"
ADD             R3, R5, #0x108
MOVT            R1, #:upper16:aDevSickIdle60s ; "*Dev Sick Idle 60s"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aDevDeadIdle600 ; "*Dev Dead Idle 600s"
ADD             R3, R5, #0x10C
MOVT            R1, #:upper16:aDevDeadIdle600 ; "*Dev Dead Idle 600s"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aDevNostart ; "*Dev Nostart"
ADD             R3, R5, #0x110
MOVT            R1, #:upper16:aDevNostart ; "*Dev Nostart"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aDevOverHeat ; "*Dev Over Heat"
ADD             R3, R5, #0x114
MOVT            R1, #:upper16:aDevOverHeat ; "*Dev Over Heat"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aDevThermalCuto ; "*Dev Thermal Cutoff"
ADD             R3, R5, #0x118
MOVT            R1, #:upper16:aDevThermalCuto ; "*Dev Thermal Cutoff"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aDevCommsError ; "*Dev Comms Error"
ADD             R3, R5, #0x11C
MOVT            R1, #:upper16:aDevCommsError ; "*Dev Comms Error"
MOV             R2, #6
STR             R4, [SP,#0x10+var_10]
BL              sub_18850
MOVW            R1, #:lower16:aDevThrottle ; "*Dev Throttle"
ADD             R3, R5, #0x120
MOVT            R1, #:upper16:aDevThrottle ; "*Dev Throttle"
STR             R4, [SP,#0x10+var_10]
MOV             R2, #6
BL              sub_18850
CMP             R6, R4
MOV             R1, R0
MOVEQ           R3, R6
BEQ             loc_1DB88
LDR             R3, [SP,#0x10+var_4]
CMP             R3, R4
MOVLE           R3, #0
MOVGT           R3, #1

loc_1DB88
MOV             R2, R6
MOV             R0, R8
BL              sub_17D00
ADD             SP, SP, #0x10
POP             {R4-R8,PC}
; End of function sub_1D990




; int __fastcall sub_1DB9C(int, int, int, int)
sub_1DB9C

var_C= -0xC
arg_0=  0x1C

PUSH            {R4-R9,LR}
MOV             R5, #dword_755C0
SUB             SP, SP, #0xC
LDR             R2, [R5]
LDRB            R8, [SP,#0xC+arg_0]
CMP             R2, #0
BEQ             loc_1DC38
MOV             R6, R3
MOV             R3, #0
STR             R6, [SP,#0xC+var_C]
MOV             R2, R3
MOV             R1, #0x3C ; '<'
MOV             R7, R0
BL              sub_18AD4
CMP             R6, #0
BNE             loc_1DC50
LDR             R3, [R5]
CMP             R3, #0
MOVGT           R9, R6
BLE             loc_1DC30

loc_1DBF0
MOV             R4, #0

loc_1DBF4
MOV             R0, R4
BL              sub_3046C
MOV             R3, R6
MOV             R2, R0
MOV             R1, R4
STR             R8, [SP,#0xC+var_C]
MOV             R0, R7
ADD             R4, R4, #1
BL              sub_1D990
LDR             R3, [R5]
CMP             R3, R4
BGT             loc_1DBF4

loc_1DC24
CMP             R9, #0
MOVNE           R3, #1
STRBNE          R3, [R7,#0xD]

loc_1DC30
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_1DC38
STR             R3, [SP,#0xC+arg_0]
MOV             R1, #0xA
MOV             R3, R2
ADD             SP, SP, #0xC
POP             {R4-R9,LR}
B               sub_18AD4

loc_1DC50
MOVW            R1, #:lower16:aNotify_0 ; ",\"NOTIFY\":["
MOV             R0, R7  ; int
MOVT            R1, #:upper16:aNotify_0 ; ",\"NOTIFY\":["
BL              sub_15B00
LDR             R3, [R5]
MOV             R9, R0
CMP             R3, #0
BGT             loc_1DBF0
B               loc_1DC24
; End of function sub_1DB9C




; int sub_1DC74()
sub_1DC74

var_800= -0x800

PUSH            {R4,LR}
MOV             R1, #0x40 ; '@' ; size
SUB             SP, SP, #0x800
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R4, R0, #0
BEQ             loc_1DCF8

loc_1DC90
MOVW            R2, #:lower16:sub_16D60
MOV             R3, R4
MOVT            R2, #:upper16:sub_16D60
MOV             R0, R4
MOV             R1, #0
BL              sub_25164
CMP             R0, #0
BEQ             loc_1DCF0
MOVW            LR, #:lower16:aApiMcastThread ; "API mcast thread create failed"
MOV             R12, SP
MOVT            LR, #:upper16:aApiMcastThread ; "API mcast thread create failed"
LDM             LR!, {R0-R3} ; "API mcast thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " create failed"
STM             R12!, {R0-R2}
MOV             R0, #3
MOV             LR, R3,LSR#16
MOV             R1, SP
MOV             R2, #1
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_1DCF0
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_1DCF8
MOVW            LR, #:lower16:aFailedToCalloc_6 ; "Failed to calloc mcast thr"
MOV             R12, SP
MOVT            LR, #:upper16:aFailedToCalloc_6 ; "Failed to calloc mcast thr"
LDM             LR!, {R0-R3} ; "Failed to calloc mcast thr"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; " mcast thr"
STM             R12!, {R0,R1}
MOV             R1, SP
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #3
MOV             R2, #1
STRB            R3, [R12]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_1DC74



; Attributes: thunk

sub_1DD38
B               loc_1DC90
; End of function sub_1DD38




; double sub_1DD3C()
sub_1DD3C
MOVW            R3, #:lower16:dbl_68720
MOVW            R2, #:lower16:dbl_756A8
MOVT            R3, #:upper16:dbl_68720
MOVT            R2, #:upper16:dbl_756A8
VLDR            D7, [R3]
MOVW            R3, #:lower16:dbl_76830
LDRD            R0, R1, [R2]
MOVT            R3, #:upper16:dbl_76830
VCMPE.F64       D7, #0.0
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D6, #1.0
VSUBGT.F64      D7, D7, D6
STRD            R0, R1, [R3]
MOVWGT          R3, #0x8738
MOVWLE          R3, #0x8738
MOVT            R3, #6
VSTR            D7, [R3]
BX              LR
; End of function sub_1DD3C




; void sub_1DD84()
sub_1DD84

optlen= -0x16474
var_16470= -0x16470
var_1646C= -0x1646C
var_16468= -0x16468
var_16464= -0x16464
var_16460= -0x16460
var_1645C= -0x1645C
ptr= -0x16458
var_16454= -0x16454
var_16450= -0x16450
var_1644C= -0x1644C
format= -0x16448
var_16444= -0x16444
var_16440= -0x16440
var_1643C= -0x1643C
fd= -0x16438
var_16434= -0x16434
dest= -0x16430
var_1642C= -0x1642C
var_16428= -0x16428
var_16424= -0x16424
var_16420= -0x16420
var_1641C= -0x1641C
var_16418= -0x16418
haystack= -0x16414
var_16410= -0x16410
var_1640C= -0x1640C
var_16408= -0x16408
var_163FE= -0x163FE
var_163FD= -0x163FD
var_163FC= -0x163FC
addr_len= -0x163F8
ai= -0x163F4
var_163F0= -0x163F0
service= -0x163EC
cp= -0x163E0
var_163C0= -0x163C0
var_163A0= -0x163A0
th= -0x16394
var_16360= -0x16360
var_1635F= -0x1635F
needle= -0x162FC
addr= -0x16298
var_16218= -0x16218
env= -0x1611C
s= -0x16004
var_15804= -0x15804
var_15034= -0x15034
var_14834= -0x14834
var_14034= -0x14034
var_13834= -0x13834
var_13034= -0x13034
var_12834= -0x12834
var_12074= -0x12074
var_11874= -0x11874
var_11074= -0x11074
var_10874= -0x10874
var_10074= -0x10074
var_F874= -0xF874
var_F074= -0xF074
var_E874= -0xE874
var_E074= -0xE074
var_D874= -0xD874
var_D074= -0xD074
var_D004= -0xD004
var_C874= -0xC874
var_C804= -0xC804
var_C074= -0xC074
var_B874= -0xB874
var_B804= -0xB804
var_B074= -0xB074
var_A874= -0xA874
var_A074= -0xA074
var_9874= -0x9874
var_9074= -0x9074
var_8874= -0x8874
var_8074= -0x8074
var_8004= -0x8004
var_7874= -0x7874
var_7804= -0x7804
var_7074= -0x7074
var_7004= -0x7004
var_6874= -0x6874
var_6804= -0x6804
var_6074= -0x6074
var_4074= -0x4074
var_2074= -0x2074

MOVW            R3, #:lower16:dword_68818
PUSH            {R4-R11,LR}
MOVT            R3, #:upper16:dword_68818
SUB             SP, SP, #0x16400
SUB             SP, SP, #0x74
MOV             R2, #0
LDR             R3, [R3]
MOV             R0, #4  ; size
STR             R2, [SP,#0x16474+var_1644C]
STR             R2, [SP,#0x16474+var_1643C]
STR             R3, [SP,#0x16474+var_16440]
BL              malloc
MOVW            R3, #:lower16:byte_75685
MOV             R2, #0xFFFFFFFF
MOVT            R3, #:upper16:byte_75685
STR             R0, [SP,#0x16474+ptr]
LDRB            R3, [R3]
STR             R2, [R0]
CMP             R3, #0
BNE             loc_1DE50
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1DE3C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1DE10
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1E8D0

loc_1DE10
MOVW            R3, #:lower16:aApiWillNotBeAv ; " - API will not be available"
MOV             R2, #aApiNotRunningS ; "API not running%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x16474+s ; s
MOVT            R3, #:upper16:aApiWillNotBeAv ; " - API will not be available"
BL              snprintf
ADD             R1, SP, #0x16474+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_1DE3C               ; ptr
LDR             R0, [SP,#0x16474+ptr]
BL              free

loc_1DE44
ADD             SP, SP, #0x16400
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R11,PC}

loc_1DE50               ; size
MOV             R0, #0x10
BL              malloc
MOV             R4, R0
STR             R0, [SP,#0x16474+var_16418]
MOV             R0, #0x10000 ; size
BL              malloc
LDR             R12, [SP,#0x16474+var_1644C]
MOV             R3, R0
MOV             R1, #0x10000
MOV             R2, #1
STR             R3, [R4,#4]
MOV             R0, #0xC ; size
STRB            R12, [R3]
STRB            R12, [R4,#0xD]
STR             R3, [R4,#8]
STR             R1, [R4]
STRB            R2, [R4,#0xC]
BL              malloc
MOVW            R3, #:lower16:byte_68A7C
STR             R4, [R0]
MOVT            R3, #:upper16:byte_68A7C
MOV             R1, #0  ; mutexattr
LDR             R2, [R3,#(dword_68AA0 - 0x68A7C)]
CMP             R2, #0
STRNE           R2, [R0,#8]
LDRNE           R3, [R2,#4]
STREQ           R0, [R0,#4]
STREQ           R0, [R0,#8]
STRNE           R3, [R0,#4]
STRNE           R0, [R2,#4]
LDRNE           R3, [R0,#4]
STREQ           R0, [R3,#0x24]
STRNE           R0, [R3,#8]
LDR             R0, =stru_68A88 ; mutex
BL              pthread_mutex_init
CMP             R0, #0
BNE             loc_1F4D0
LDR             R2, [SP,#0x16474+ptr]
MOV             R3, #sub_17900
STR             R3, [SP,#0x16474+var_16424]
STR             R2, [SP,#0x16474+var_16420]

loc_1DEF8               ; savemask
MOV             R1, #0
ADD             R0, SP, #0x16474+env ; env
BL              __sigsetjmp
CMP             R0, #0
BNE             loc_1F434
ADD             R0, SP, #0x16474+env ; buf
BL              __pthread_register_cancel
MOV             R3, #dword_732E0
LDR             R4, [R3]
CMP             R4, #0
BEQ             loc_1F0D0
MOV             R0, R4  ; s
BL              strlen
ADD             R0, R0, #1 ; size

loc_1DF34
BL              malloc
SUBS            R3, R0, #0
STR             R3, [SP,#0x16474+dest]
BEQ             loc_1F590

loc_1DF44
LDR             R5, [SP,#0x16474+dest]
MOV             R1, R4  ; src
MOVW            R6, #:lower16:aApiInvalidGrou_0 ; "API invalid group name '%c'"
MOVW            R4, #:lower16:aApiInvalidGrou ; "API invalid group name '%s'"
MOVW            R7, #:lower16:aS_1 ; "|%s|"
MOVW            R11, #:lower16:dword_67298
MOV             R0, R5  ; dest
MOVT            R4, #:upper16:aApiInvalidGrou ; "API invalid group name '%s'"
BL              strcpy
LDRB            R3, [R5]
MOVT            R6, #:upper16:aApiInvalidGrou_0 ; "API invalid group name '%c'"
MOVT            R7, #:upper16:aS_1 ; "|%s|"
STR             R4, [SP,#0x16474+format]
STR             R6, [SP,#0x16474+var_16444]
MOVT            R11, #:upper16:dword_67298
CMP             R3, #0
STR             R7, [SP,#0x16474+var_16450]
BEQ             loc_1E238

loc_1DF8C               ; c
MOV             R1, #0x2C ; ','
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
MOVNE           R3, #0
ADDNE           R2, R0, #1
STRBNE          R3, [R0]
LDRB            R3, [R5,#1]
STRNE           R2, [SP,#0x16474+var_16460]
STREQ           R0, [SP,#0x16474+var_16460]
CMP             R3, #0x3A ; ':'
BEQ             loc_1E008
MOV             R1, #0x3A ; ':' ; c
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
LDR             R2, [SP,#0x16474+format] ; format
MOVNE           R3, #0
MOV             R1, #0x800 ; maxlen
STRBNE          R3, [R0]
ADD             R0, SP, #0x16474+var_B074
MOV             R3, R5
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_B074
MOV             R0, #3
ADD             R1, R1, #0x70 ; 'p'
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_1E008
BL              __ctype_toupper_loc
LDRB            R3, [R5]
LDR             R2, [R0]
STR             R0, [SP,#0x16474+var_16464]
LDRB            R7, [R2,R3,LSL#2]
LDR             R0, [R2,#0x104]
LDR             R1, [R2,R7,LSL#2]
CMP             R1, R0
BLT             loc_1E038
LDR             R0, [R2,#0x168]
CMP             R1, R0
BLE             loc_1E070

loc_1E038
ADD             R0, SP, #0x16474+var_A874
LDR             R2, [SP,#0x16474+var_16444] ; format
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_A874
MOV             R2, #1
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
LDR             R3, [SP,#0x16474+var_16464]
LDR             R2, [R3]

loc_1E070
LDR             R3, [R2,#0x15C]
CMP             R7, R3
BEQ             loc_1E6D0

loc_1E07C
LDR             R3, [R2,#0x148]
CMP             R7, R3
BEQ             loc_1E68C

loc_1E088
LDR             R1, [R2,R7,LSL#2]
MOVW            R3, #:lower16:unk_73188
LDR             R2, [R2,#0x104]
MOVT            R3, #:upper16:unk_73188
SUB             R2, R1, R2
LDR             R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_1E0E0
MOVW            R2, #:lower16:aApiDuplicateGr ; "API duplicate group name '%c'"
ADD             R0, SP, #0x16474+var_9074
MOVT            R2, #:upper16:aApiDuplicateGr ; "API duplicate group name '%c'"
LDRB            R3, [R5]
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_9074
MOV             R0, #3
ADD             R1, R1, #0x70 ; 'p'
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_1E0E0
ADD             R3, SP, #0x16474+var_2074
ADDS            R4, R5, #2
ADD             R3, R3, #0x70 ; 'p'
MOV             R2, #0x7C ; '|'
STRH            R2, [R3]
BEQ             loc_1E1CC
LDRB            R2, [R5,#2]
CMP             R2, #0
BEQ             loc_1E1CC
MOVW            R2, #:lower16:aApiUnknownComm ; "API unknown command '%s' in group '%c'"
MOV             R8, #0
ADD             R3, R3, #1
MOVT            R2, #:upper16:aApiUnknownComm ; "API unknown command '%s' in group '%c'"
STR             R3, [SP,#0x16474+var_16454]
STR             R2, [SP,#0x16474+var_1645C]

loc_1E11C               ; c
MOV             R1, #0x3A ; ':'
MOV             R0, R4  ; s
BL              strchr
CMP             R0, #0
MOVNE           R3, #0
ADDNE           R9, R0, #1
STRBNE          R3, [R0]
MOVEQ           R9, R0
LDRB            R3, [R4]
CMP             R3, #0x2A ; '*'
BEQ             loc_1E5B4

loc_1E148
LDR             R5, [R11,#(off_677C8 - 0x67298)] ; "version"
CMP             R5, #0
ADDNE           R10, R11, #0x530
MOVNE           R6, #0
BNE             loc_1E170
B               loc_1E5C8

loc_1E160
LDR             R5, [R10,#0xC]!
ADD             R6, R6, #1
CMP             R5, #0
BEQ             loc_1E5C8

loc_1E170               ; s2
MOV             R1, R5
MOV             R0, R4  ; s1
BL              strcasecmp
CMP             R0, #0
BNE             loc_1E160
MOV             R2, R5
LDR             R1, [SP,#0x16474+var_16450] ; format
ADD             R0, SP, #0x16474+needle ; s
BL              sprintf
ADD             R0, SP, #0x16474+var_2074
ADD             R1, SP, #0x16474+needle ; needle
ADD             R0, R0, #0x70 ; 'p' ; haystack
BL              strstr
SUBS            R4, R0, #0
BEQ             loc_1E714

loc_1E1AC
CMP             R9, #0
BEQ             loc_1E1C4
LDRB            R3, [R9]
MOV             R4, R9
CMP             R3, #0
BNE             loc_1E11C

loc_1E1C4
CMP             R8, #0
BNE             loc_1E604

loc_1E1CC
ADD             R0, SP, #0x16474+var_2074
ADD             R0, R0, #0x70 ; 'p' ; s
BL              strlen
LDR             R3, [SP,#0x16474+var_16464]
ADD             R0, R0, #1 ; size
LDR             R3, [R3]
LDR             R5, [R3,R7,LSL#2]
LDR             R3, [R3,#0x104]
SUB             R5, R5, R3
BL              malloc
MOVW            R3, #:lower16:unk_73188
CMP             R0, #0
MOVT            R3, #:upper16:unk_73188
MOV             R4, R0
STR             R0, [R3,R5,LSL#2]
BEQ             loc_1E958

loc_1E20C
ADD             R1, SP, #0x16474+var_2074
MOV             R0, R4  ; dest
ADD             R1, R1, #0x70 ; 'p' ; src
BL              strcpy
LDR             R3, [SP,#0x16474+var_16460]
CMP             R3, #0
BEQ             loc_1E238
LDR             R5, [SP,#0x16474+var_16460]
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_1DF8C

loc_1E238
MOVW            R4, #:lower16:dword_67298
ADD             R7, SP, #0x16474+var_2074
MOVT            R4, #:upper16:dword_67298
ADD             R7, R7, #0x70 ; 'p'
BL              __ctype_toupper_loc
LDR             R5, [R4,#(off_677C8 - 0x67298)] ; "version"
MOV             R3, #0x7C ; '|'
STR             R0, [SP,#0x16474+var_16434]
STRH            R3, [R7]
CMP             R5, #0
BEQ             loc_1E2BC
ADD             R4, R4, #0x530
ADD             R7, R7, #1
MOV             R8, R3
B               loc_1E280

loc_1E274
LDR             R5, [R4,#0xC]!
CMP             R5, #0
BEQ             loc_1E2BC

loc_1E280
LDRB            R6, [R4,#8]
CMP             R6, #0
BNE             loc_1E274
MOV             R1, R5  ; src
MOV             R0, R7  ; dest
BL              strcpy
MOV             R0, R5  ; s
BL              strlen
LDR             R5, [R4,#0xC]!
ADD             R0, R7, R0
ADD             R7, R0, #1
STRB            R8, [R0]
STRB            R6, [R0,#1]
CMP             R5, #0
BNE             loc_1E280

loc_1E2BC
ADD             R0, SP, #0x16474+var_2074
ADD             R0, R0, #0x70 ; 'p' ; s
BL              strlen
LDR             R3, [SP,#0x16474+var_16434]
ADD             R0, R0, #1 ; size
LDR             R2, [R3]
LDR             R3, [R2,#0x148]
LDR             R4, [R2,#0x104]
ADD             R1, R3, #0x80
CMP             R1, #0x180
LDRCC           R3, [R2,R3,LSL#2]
SUB             R4, R3, R4
BL              malloc
MOVW            R3, #:lower16:unk_73188
CMP             R0, #0
MOVT            R3, #:upper16:unk_73188
MOV             R5, R0
STR             R0, [R3,R4,LSL#2]
BEQ             loc_1F544

loc_1E308
ADD             R1, SP, #0x16474+var_2074
MOV             R0, R5  ; dest
ADD             R1, R1, #0x70 ; 'p' ; src
MOVW            R4, #:lower16:dword_6ACC8
BL              strcpy
MOVT            R4, #:upper16:dword_6ACC8
LDR             R0, [SP,#0x16474+dest] ; ptr
BL              free
LDR             R5, [R4]
CMP             R5, #0
BEQ             loc_1E4D0
MOV             R0, R5  ; s
BL              strlen
ADD             R0, R0, #1 ; size
BL              malloc
SUBS            R8, R0, #0
BEQ             loc_1F1FC

loc_1E34C               ; src
MOV             R1, R5
MOV             R0, R8  ; dest
BL              strcpy
SUB             R2, R8, #1
MOV             R0, #1
B               loc_1E36C

loc_1E364
CMP             R3, #0x2C ; ','
ADDEQ           R0, R0, #1 ; nmemb

loc_1E36C
LDRB            R3, [R2,#1]!
CMP             R3, #0
BNE             loc_1E364
MOV             R1, #0x24 ; '$' ; size
BL              calloc
MOVW            R3, #:lower16:byte_68A7C
CMP             R0, #0
MOVT            R3, #:upper16:byte_68A7C
STR             R0, [R3,#(dword_68A80 - 0x68A7C)]
BEQ             loc_1F1B8

loc_1E394
LDR             R10, [SP,#0x16474+var_16434]
MOV             R3, #0
MOVW            R7, #:lower16:byte_68A7C
MOV             R6, R3
MOV             R5, R8
MOV             R9, #1
MOVT            R7, #:upper16:byte_68A7C
STR             R8, [SP,#0x16474+var_16428]
STR             R3, [R7,#(dword_68A84 - 0x68A7C)]

loc_1E3B8
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_1E3CC
B               loc_1E4BC

loc_1E3C8
LDRB            R3, [R5,#1]!

loc_1E3CC
CMP             R3, #9
CMPNE           R3, #0x20 ; ' '
BEQ             loc_1E3C8
CMP             R3, #0x2C ; ','
ADDEQ           R5, R5, #1
BEQ             loc_1E4B4
MOV             R1, #0x2C ; ',' ; c
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
MOVNE           R3, #0
ADDNE           R11, R0, #1
STRBNE          R3, [R0]
MOVEQ           R11, R0
BL              __ctype_b_loc
LDRB            R2, [R5]
LDR             R0, [R0]
LDR             R3, [R10]
MOV             R1, R2,LSL#1
LDRH            R0, [R0,R1]
LDRB            R1, [R3,#0x148]
TST             R0, #0x400
BEQ             loc_1E434
LDRB            R0, [R5,#1]
CMP             R0, #0x3A ; ':'
BEQ             loc_1E9A0

loc_1E434
LDR             R4, [R7,#(dword_68A80 - 0x68A7C)]
ADD             R3, R6, R6,LSL#3
ADD             R4, R4, R3,LSL#2
STRB            R1, [R4,#0x20]
LDRB            R8, [R5]
CMP             R8, #0x30 ; '0'
BEQ             loc_1E754
MOV             R1, #0x2F ; '/' ; c
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_1E7B8

loc_1E464
CMP             R8, #0x5B ; '['
BNE             loc_1E478
LDRB            R3, [R0,#-1]
CMP             R3, #0x5D ; ']'
BEQ             loc_1E940

loc_1E478
MOV             R8, #0

loc_1E47C
LDRB            R2, [R0]
CMP             R2, #0
BEQ             loc_1E830
MOV             R1, #0  ; endptr
MOV             R2, #0xA ; base
STRB            R1, [R0],#1 ; nptr
BL              strtol
CMP             R0, #0
BLE             loc_1E4B0
CMP             R8, #0
ADDEQ           R0, R0, #0x60 ; '`'
CMP             R0, #0x80
BLE             loc_1E7E4

loc_1E4B0
MOV             R5, R11

loc_1E4B4
CMP             R5, #0
BNE             loc_1E3B8

loc_1E4BC
LDR             R8, [SP,#0x16474+var_16428]
MOV             R0, R8  ; ptr
BL              free
CMP             R6, #0
BEQ             loc_1E8E8

loc_1E4D0
MOVW            R3, #:lower16:dword_68730
LDRSH           R5, [SP,#0x16474+var_16440]
MOVT            R3, #:upper16:dword_68730
MOV             R0, #0x3E8
LDR             R3, [R3]
ADD             R6, SP, #0x16474+s
MOV             R7, #1
MUL             R0, R0, R3
BL              sub_23B9C
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
MOV             R2, R5
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; format
ADD             R0, SP, #0x16474+service ; s
BL              sprintf
MOVW            R3, #:lower16:off_68814 ; "0.0.0.0"
MOV             R12, #0
MOVT            R3, #:upper16:off_68814 ; "0.0.0.0"
ADD             R1, SP, #0x16474+service ; service
LDR             R0, [R3] ; name
SUB             R2, R6, #0x3BC ; req
SUB             R3, R6, #0x3F0 ; pai
STR             R12, [R6,#-0x3B4]
STR             R12, [R6,#-0x3B0]
STR             R12, [R6,#-0x3AC]
STR             R12, [R6,#-0x3A8]
STR             R12, [R6,#-0x3A4]
STR             R12, [R6,#-0x3A0]
STR             R12, [R6,#-0x3B8]
STR             R7, [R6,#-0x3BC]
BL              getaddrinfo
SUBS            R11, R0, #0
BEQ             loc_1E9D8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1E578
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1F1A0

loc_1E578
MOVW            R3, #:lower16:off_68814 ; "0.0.0.0"
ADD             R0, SP, #0x16474+var_15034
MOVT            R3, #:upper16:off_68814 ; "0.0.0.0"
MOVW            R2, #:lower16:aApiFailedToRes ; "API failed to resolve %s"
LDR             R3, [R3] ; "0.0.0.0" ...
MOVT            R2, #:upper16:aApiFailedToRes ; "API failed to resolve %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x30 ; '0' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_15034
MOV             R2, #0
ADD             R1, R1, #0x30 ; '0'
MOV             R0, #3
BL              sub_20F58
B               loc_1DE3C

loc_1E5B4
LDRB            R3, [R4,#1]
CMP             R3, #0
MOVEQ           R8, #1
BEQ             loc_1E1AC
B               loc_1E148

loc_1E5C8
ADD             R0, SP, #0x16474+var_8874
MOV             R3, R4
LDR             R2, [SP,#0x16474+var_1645C] ; format
MOV             R1, #0x800 ; maxlen
STR             R7, [SP,#0x16474+optlen]
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_8874
MOV             R2, #1
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1E1AC

loc_1E604
LDR             R2, [R11,#(off_677C8 - 0x67298)] ; "version"
CMP             R2, #0
BEQ             loc_1E1CC
ADD             R4, R11, #0x530
LDR             R8, [SP,#0x16474+var_16454]
LDR             R6, [SP,#0x16474+var_16450]
B               loc_1E62C

loc_1E620
LDR             R2, [R4,#0xC]!
CMP             R2, #0
BEQ             loc_1E1CC

loc_1E62C
LDRB            R3, [R4,#8]
CMP             R3, #0
BNE             loc_1E620
MOV             R1, R6  ; format
ADD             R0, SP, #0x16474+needle ; s
BL              sprintf
ADD             R0, SP, #0x16474+var_2074
ADD             R1, SP, #0x16474+needle ; needle
ADD             R0, R0, #0x70 ; 'p' ; haystack
BL              strstr
SUBS            R5, R0, #0
BNE             loc_1E620
LDR             R9, [R4]
MOV             R0, R8  ; dest
MOV             R1, R9  ; src
BL              strcpy
MOV             R0, R9  ; s
BL              strlen
MOV             R3, #0x7C ; '|'
ADD             R0, R8, R0
ADD             R8, R0, #1
STRB            R5, [R0,#1]
STRB            R3, [R0]
B               loc_1E620

loc_1E68C
MOVW            R2, #:lower16:aApiGroupNameCa ; "API group name can't be '%c'"
ADD             R0, SP, #0x16474+var_9874
MOV             R3, R7
MOVT            R2, #:upper16:aApiGroupNameCa ; "API group name can't be '%c'"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_9874
MOV             R2, #1
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
LDR             R3, [SP,#0x16474+var_16464]
LDR             R2, [R3]
B               loc_1E088

loc_1E6D0
MOVW            R2, #:lower16:aApiGroupNameCa ; "API group name can't be '%c'"
ADD             R0, SP, #0x16474+var_A074
MOV             R3, R7
MOVT            R2, #:upper16:aApiGroupNameCa ; "API group name can't be '%c'"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_A074
MOV             R2, #1
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
LDR             R3, [SP,#0x16474+var_16464]
LDR             R2, [R3]
B               loc_1E07C

loc_1E714
ADD             R6, R6, R6,LSL#1
LDR             R10, [SP,#0x16474+var_16454]
ADD             R3, R11, R6,LSL#2
MOV             R0, R10 ; dest
LDR             R5, [R3,#0x530]
MOV             R1, R5  ; src
BL              strcpy
MOV             R0, R5  ; s
BL              strlen
ADD             R0, R10, R0
MOV             R3, #0x7C ; '|'
ADD             R2, R0, #1
STRB            R4, [R0,#1]
STR             R2, [SP,#0x16474+var_16454]
STRB            R3, [R0]
B               loc_1E1AC

loc_1E754
LDRB            R3, [R5,#1]
CMP             R3, #0x2F ; '/'
BNE             loc_1E7A4
LDRB            R3, [R5,#2]
CMP             R3, #0x30 ; '0'
BNE             loc_1E7A4
LDRB            R3, [R5,#3]
CMP             R3, #0
BNE             loc_1E7A4
ADD             R2, R4, #0xF
SUB             R4, R4, #1
MOV             R1, R2

loc_1E784
STRB            R3, [R4,#1]!
CMP             R4, R1
STRB            R3, [R2,#1]!
BNE             loc_1E784

loc_1E794
ADD             R6, R6, #1
MOV             R5, R11
STR             R6, [R7,#(dword_68A84 - 0x68A7C)]
B               loc_1E4B4

loc_1E7A4               ; c
MOV             R1, #0x2F ; '/'
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
BNE             loc_1E478

loc_1E7B8
ADD             R3, R4, #0xF
ADD             R1, R4, #0x1F
MOV             R2, #0xFFFFFFFF

loc_1E7C4
STRB            R2, [R3,#1]!
CMP             R1, R3
BNE             loc_1E7C4
MOV             R0, R5  ; s
BL              strlen
LDRB            R8, [R5]
ADD             R0, R5, R0
B               loc_1E464

loc_1E7E4
ADD             R2, R4, #0xF
ADD             R12, R4, #0x1F
MOV             R1, #0

loc_1E7F0
STRB            R1, [R2,#1]!
CMP             R12, R2
BNE             loc_1E7F0
MOV             R2, R1
MOV             LR, #7
B               loc_1E828

loc_1E808
ADD             R3, R4, R2
CMP             LR, #0
LDRB            R1, [R3,#0x10]
ADDEQ           R2, R2, #1
ORR             R1, R1, R9,LSL LR
SUBNE           LR, LR, #1
MOVEQ           LR, #7
STRB            R1, [R3,#0x10]

loc_1E828
SUBS            R0, R0, #1
BCS             loc_1E808

loc_1E830
SUB             R2, R4, #1
ADD             R0, R4, #0xF
MOV             R1, #0

loc_1E83C
STRB            R1, [R2,#1]!
CMP             R0, R2
BNE             loc_1E83C
CMP             R8, #0
BEQ             loc_1E890
MOV             R1, R5  ; cp
MOV             R2, R4  ; buf
MOV             R0, #0xA ; af
BL              inet_pton
CMP             R0, #1
BNE             loc_1E4B0

loc_1E868
ADD             R1, R4, #0xF
SUB             R4, R4, #1
MOV             R0, R1

loc_1E874
LDRB            R3, [R4,#1]!
LDRB            R2, [R1,#1]!
CMP             R4, R0
AND             R3, R3, R2
STRB            R3, [R4]
BNE             loc_1E874
B               loc_1E794

loc_1E890
MOVW            R1, #:lower16:aFfffS ; "::ffff:%s"
MOV             R2, R5
MOVT            R1, #:upper16:aFfffS ; "::ffff:%s"
ADD             R0, SP, #0x16474+cp ; s
BL              sprintf
LDR             R6, [R7,#(dword_68A84 - 0x68A7C)]
ADD             R1, SP, #0x16474+cp ; cp
LDR             R4, [R7,#(dword_68A80 - 0x68A7C)]
MOV             R0, #0xA ; af
ADD             R3, R6, R6,LSL#3
ADD             R4, R4, R3,LSL#2
MOV             R2, R4  ; buf
BL              inet_pton
CMP             R0, #1
BNE             loc_1E4B0
B               loc_1E868

loc_1E8D0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1DE3C
B               loc_1DE10

loc_1E8E8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1E910
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1F188

loc_1E910
MOVW            R3, #:lower16:aApiWillNotBeAv ; " - API will not be available"
MOVW            R2, #:lower16:aApiNotRunningN ; "API not running (no valid IPs specified"...
ADD             R0, SP, #0x16474+var_15804 ; s
MOVT            R3, #:upper16:aApiWillNotBeAv ; " - API will not be available"
MOVT            R2, #:upper16:aApiNotRunningN ; "API not running (no valid IPs specified"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x16474+var_15804
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
B               loc_1DE3C

loc_1E940
MOV             R2, #0
MOV             R8, R9
STRB            R2, [R5]
ADD             R5, R5, #1
STRB            R2, [R0,#-1]
B               loc_1E47C

loc_1E958
MOVW            R12, #:lower16:aFailedToMalloc_3 ; "Failed to malloc group commands buf"
ADD             LR, SP, #0x16474+var_8074
MOVT            R12, #:upper16:aFailedToMalloc_3 ; "Failed to malloc group commands buf"
ADD             LR, LR, #0x70 ; 'p'
LDM             R12!, {R0-R3} ; "Failed to malloc group commands buf"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " group commands buf"
LDR             R12, [R12] ; "buf"
STM             LR!, {R0-R3}
ADD             R1, SP, #0x16474+var_8074
ADD             R1, R1, #0x70 ; 'p'
MOV             R2, #1
MOV             R0, #3
STR             R12, [LR]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1E20C

loc_1E9A0
LDR             R2, [R3,R2,LSL#2]
LDR             R0, [R3,#0x15C]
CMP             R2, R0
BEQ             loc_1E9CC
LDR             R0, [R3,#0x104]
MOV             R3, #unk_73188
SUB             R0, R2, R0
LDR             R3, [R3,R0,LSL#2]
CMP             R3, #0
BEQ             loc_1E9D0

loc_1E9CC
UXTB            R1, R2

loc_1E9D0
ADD             R5, R5, #2
B               loc_1E434

loc_1E9D8
LDR             R4, [R6,#-0x3F0]
CMP             R4, #0
BEQ             loc_1F0E0
MOV             R3, R4
MOV             R8, R11
LDR             R9, [SP,#0x16474+ptr]
B               loc_1EA04

loc_1E9F4
LDR             R4, [R4,#0x1C]
CMP             R4, #0
BEQ             loc_1F0E8
LDR             R3, [R6,#-0x3F0]

loc_1EA04               ; domain
LDR             R0, [R3,#4]
MOV             R2, R8  ; protocol
MOV             R1, R7  ; type
BL              socket
CMP             R0, #0
STR             R0, [R9]
BLE             loc_1E9F4

loc_1EA20               ; level
MOV             R1, #1
ADD             R3, SP, #0x16474+s
MOV             R2, #4
STR             R1, [R3,#-0x3EC]! ; optval
STR             R2, [SP,#0x16474+optlen] ; optlen
MOV             R2, #2  ; optname
BL              setsockopt
CMP             R0, #0
BGE             loc_1EAD0
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1EAD0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EA94
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EA94
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1EAD0

loc_1EA94
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R2, #:lower16:aApiSetsockoptS ; "API setsockopt SO_REUSEADDR failed (ign"...
MOV             R3, R0
ADD             R0, SP, #0x16474+var_14034
MOVT            R2, #:upper16:aApiSetsockoptS ; "API setsockopt SO_REUSEADDR failed (ign"...
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x30 ; '0' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_14034
MOV             R2, #0
ADD             R1, R1, #0x30 ; '0'
MOV             R0, #7
BL              sub_20F58

loc_1EAD0               ; timer
MOV             R0, #0
MOVW            R6, #:lower16:byte_74500
MOVW            R9, #:lower16:aApiBindToPortD ; "API bind to port %d failed - trying aga"...
MOVW            R10, #:lower16:byte_68BD4
BL              time
MOVT            R6, #:upper16:byte_74500
STR             R11, [SP,#0x16474+var_16408]
MOV             R8, R0
MOVT            R9, #:upper16:aApiBindToPortD ; "API bind to port %d failed - trying aga"...
MOVT            R10, #:upper16:byte_68BD4
LDR             R11, [SP,#0x16474+ptr]
B               loc_1EB8C
off_1EB00 DCD stru_68A88
off_1EB04 DCD aApi_0    ; "api"

loc_1EB08
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOV             R7, R0
MOV             R0, #0  ; timer
BL              time
SUB             R0, R0, R8
CMP             R0, #0x3D ; '='
BGT             loc_1F448
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_1EB58
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_1EB58
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1EB84

loc_1EB58
ADD             R0, SP, #0x16474+var_13834
MOV             R2, R9  ; format
MOV             R1, #0x800 ; maxlen
MOV             R3, R5
ADD             R0, R0, #0x30 ; '0' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_13834
MOV             R2, #0
ADD             R1, R1, #0x30 ; '0'
MOV             R0, #4
BL              sub_20F58

loc_1EB84
MOVW            R0, #0x7530
BL              sub_23B9C

loc_1EB8C               ; len
LDR             R2, [R4,#0x10]
LDR             R1, [R4,#0x14] ; addr
LDR             R0, [R11] ; fd
BL              bind
CMP             R0, #0
BLT             loc_1EB08
LDR             R0, [SP,#0x16474+ai] ; ai
LDR             R11, [SP,#0x16474+var_16408]
BL              freeaddrinfo
LDR             R3, [SP,#0x16474+ptr]
MOV             R1, #0x64 ; 'd' ; n
LDR             R0, [R3] ; fd
BL              listen
CMP             R0, #0
BLT             loc_1F8E4
MOVW            R2, #:lower16:dword_6ACC8
MOVW            R3, #:lower16:byte_74500
MOVT            R2, #:upper16:dword_6ACC8
MOVT            R3, #:upper16:byte_74500
LDR             R2, [R2]
LDRB            R3, [R3]
CMP             R2, #0
BEQ             loc_1F980
CMP             R3, #0
BNE             loc_1EC18
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EC18
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1EC54

loc_1EC18
LDR             R3, [SP,#0x16474+ptr]
MOVW            R2, #:lower16:aApiRunningInIp ; "API running in IP access mode on port %"...
ADD             R0, SP, #0x16474+var_12074
MOVT            R2, #:upper16:aApiRunningInIp ; "API running in IP access mode on port %"...
ADD             R0, R0, #0x70 ; 'p' ; s
LDR             R1, [R3]
MOV             R3, R5
STR             R1, [SP,#0x16474+optlen]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x16474+var_12074
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #4
BL              sub_20F58

loc_1EC54
MOV             R3, #byte_7347D
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1EC6C
BL              sub_1DC74

loc_1EC6C
LDR             R12, =aApi_0 ; "api"
MOVW            R3, #:lower16:(aSocketaApiC+8) ; "api.c"
MOV             R1, #0
MOVT            R3, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVW            R2, #0x14BF
MOVW            R0, #:lower16:aStrbufs ; "StrBufs"
STR             R3, [SP,#0x16474+var_16470]
MOVT            R0, #:upper16:aStrbufs ; "StrBufs"
MOV             R3, R1
STR             R2, [SP,#0x16474+var_16468]
STR             R1, [SP,#0x16474+optlen]
MOV             R2, #2
STR             R12, [SP,#0x16474+var_1646C]
MOV             R1, #0xC
BL              sub_200F8
LDR             R7, [SP,#0x16474+var_1643C]
MOVW            R3, #:lower16:byte_68A7C
LDR             R10, [SP,#0x16474+var_16418]
MOVT            R3, #:upper16:byte_68A7C
STR             R0, [R3,#(dword_68AA4 - 0x68A7C)]
STR             R3, [SP,#0x16474+var_16410]
STR             R11, [SP,#0x16474+var_1642C]

loc_1ECC4
LDR             R3, [SP,#0x16474+var_16410]
LDRB            R4, [R3]
CMP             R4, #0
BNE             loc_1F70C
LDR             R0, [SP,#0x16474+ptr]
MOV             R3, #0x80
ADD             R2, SP, #0x16474+addr_len ; addr_len
ADD             R1, SP, #0x16474+addr ; addr
STR             R3, [SP,#0x16474+addr_len]
LDR             R0, [R0] ; fd
BL              accept
SUBS            R3, R0, #0
STR             R3, [SP,#0x16474+fd]
BLT             loc_1F680
ADD             R1, SP, #0x16474+var_163FC
ADD             R0, SP, #0x16474+addr
ADD             R2, SP, #0x16474+var_163FE
BL              sub_15FF8
MOVW            R3, #:lower16:byte_68BD5
MOV             R9, R0
MOVT            R3, #:upper16:byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1EDAC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1ED60
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1ED60
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1EDAC

loc_1ED60
MOVW            R2, #:lower16:aIgnored ; "Ignored"
CMP             R9, #0
MOVT            R2, #:upper16:aIgnored ; "Ignored"
MOV             R1, #aAccepted ; "Accepted"
ADD             R0, SP, #0x16474+var_10074
MOVEQ           R1, R2
MOVW            R2, #:lower16:aApiConnectionF ; "API: connection from %s - %s"
STR             R1, [SP,#0x16474+optlen]
MOVT            R2, #:upper16:aApiConnectionF ; "API: connection from %s - %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0x16474+var_163FC]
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_10074
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #7
BL              sub_20F58

loc_1EDAC
CMP             R9, #0
BEQ             loc_1F0C4
ADD             R1, SP, #0x16474+var_6074
MOV             R3, #0  ; flags
ADD             R1, R1, #0x70 ; 'p' ; buf
MOVW            R2, #0xFFF ; n
LDR             R0, [SP,#0x16474+fd] ; fd
BL              recv
MOVW            R3, #:lower16:byte_68BD5
SUBS            R5, R0, #0
MOVT            R3, #:upper16:byte_68BD5
LDRB            R3, [R3]
BLT             loc_1F3A0
CMP             R3, #0
ADD             R2, SP, #0x16474+var_6074
MOV             R3, #0
ADD             R2, R2, #0x70 ; 'p'
STRB            R3, [R2,R5]
BEQ             loc_1EE70
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EE34
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1EE34
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1EE70

loc_1EE34
ADD             R3, SP, #0x16474+var_6074
MOVW            R2, #:lower16:aApiRecvCommand ; "API: recv command: (%d) '%s'"
ADD             R3, R3, #0x70 ; 'p'
ADD             R0, SP, #0x16474+var_F074
STR             R3, [SP,#0x16474+optlen]
MOVT            R2, #:upper16:aApiRecvCommand ; "API: recv command: (%d) '%s'"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
MOV             R3, R5
BL              snprintf
ADD             R1, SP, #0x16474+var_F074
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #7
BL              sub_20F58

loc_1EE70               ; timer
MOV             R0, #0
ADD             R8, SP, #0x16474+var_6074
MOV             R6, R0
ADD             R8, R8, #0x70 ; 'p'
BL              time
LDR             R3, [R10,#4]
LDR             R2, [SP,#0x16474+var_16410]
STR             R3, [R10,#8]
STR             R0, [R2,#(dword_68AA8 - 0x68A7C)]
STRB            R6, [R3]
LDRB            R3, [R8]
STRB            R6, [R10,#0xD]
CMP             R3, #0x7B ; '{'
BEQ             loc_1F604
MOV             R1, #0x7C ; '|' ; c
MOV             R0, R8  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_1F5D4
MOV             R9, R4
ADD             R3, R0, #1
STRB            R6, [R0]
STR             R3, [SP,#0x16474+var_1641C]

loc_1EECC               ; c
MOV             R1, #0x2B ; '+'
MOV             R0, R8  ; s
BL              strchr
SUBS            R3, R0, #0
STR             R3, [SP,#0x16474+haystack]
BEQ             loc_1F844
MOV             R7, #1
MOV             R0, R8  ; s
STRB            R7, [SP,#0x16474+var_163FD]
BL              strlen
ADD             R0, R0, #3 ; size
BL              malloc
SUBS            R3, R0, #0
STR             R3, [SP,#0x16474+haystack]
BEQ             loc_1F854

loc_1EF08
MOV             R2, #0
MOV             R3, #0x7C ; '|'
STR             R2, [SP,#0x16474+var_1641C]
LDR             R2, [SP,#0x16474+haystack]
STRH            R3, [R2]

loc_1EF1C
CMP             R7, #0
MOVW            R11, #:lower16:dword_67298
MOV             R6, R8
MOVT            R11, #:upper16:dword_67298
BEQ             loc_1EF7C

loc_1EF30               ; c
MOV             R1, #0x2B ; '+'
MOV             R0, R6  ; s
BL              strchr
CMP             R0, #0
MOVNE           R3, #0
ADDNE           R8, R0, #1
STRBNE          R3, [R0]
MOVEQ           R8, R0
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_1F290

loc_1EF5C
CMP             R8, #0
MOVEQ           R3, #0
ANDNE           R3, R7, #1
MOV             R6, R8
CMP             R3, #0
BEQ             loc_1F660
CMP             R7, #0
BNE             loc_1EF30

loc_1EF7C
LDR             R1, [R11,#(off_677C8 - 0x67298)] ; "version"
CMP             R1, #0
BEQ             loc_1F260

loc_1EF88
ADD             R5, R11, #0x530
LDR             R4, [SP,#0x16474+var_1642C]
B               loc_1EFA4

loc_1EF94               ; s2
LDR             R1, [R5,#0xC]!
ADD             R4, R4, #1
CMP             R1, #0
BEQ             loc_1F244

loc_1EFA4               ; s1
MOV             R0, R6
BL              strcmp
CMP             R0, #0
BNE             loc_1EF94
MOVW            R1, #:lower16:aS_1 ; "|%s|"
ADD             R0, SP, #0x16474+var_16360 ; s
MOVT            R1, #:upper16:aS_1 ; "|%s|"
MOV             R2, R6
BL              sprintf
CMP             R7, #0
BEQ             loc_1F034
ADD             R1, SP, #0x16474+var_16360 ; needle
LDR             R0, [SP,#0x16474+haystack] ; haystack
BL              strstr
CMP             R0, #0
BNE             loc_1EF5C
LDR             R5, [SP,#0x16474+haystack]
MOV             R0, R5  ; s
BL              strlen
MOV             R1, R6
ADD             R0, R5, R0
BL              stpcpy
MOVW            R2, #:lower16:asc_4A4AC ; "|"
ADD             R3, SP, #0x16474+var_163FD
MOVT            R2, #:upper16:asc_4A4AC ; "|"
MOV             R1, R6  ; s
LDRH            R12, [R2] ; "|"
MOV             R2, R9
STRH            R12, [R0]
MOV             R0, R10 ; int
BL              sub_15E08
ADD             R3, R4, R4,LSL#1
ADD             R3, R11, R3,LSL#2
LDRB            R2, [R3,#0x539]
CMP             R2, #0
BEQ             loc_1F5E0

loc_1F034
LDR             R3, [SP,#0x16474+var_16434]
LDRB            R5, [SP,#0x16474+var_163FE]
LDR             R3, [R3]
LDR             R1, [R3,#0x15C]
LDR             R2, [R3,R5,LSL#2]
CMP             R2, R1
BNE             loc_1F2A0

loc_1F050
ADD             R4, R4, R4,LSL#1
STR             R5, [SP,#0x16474+optlen]
MOV             R3, R9
LDR             R2, [SP,#0x16474+var_1641C]
ADD             R0, R11, R4,LSL#2
LDR             R1, [SP,#0x16474+fd]
LDR             R4, [R0,#0x534]
MOV             R0, R10
BLX             R4

loc_1F074
EOR             R3, R7, #1
TST             R3, #0xFF
BEQ             loc_1F280

loc_1F080
MOV             R3, R9
LDR             R2, [SP,#0x16474+fd]
LDRB            R1, [R10,#0xD]
LDR             R0, [R10,#4]
BL              sub_16F14

loc_1F094
CMP             R7, #0
BNE             loc_1EF5C

loc_1F09C
LDR             R3, [SP,#0x16474+var_1644C]
CMP             R3, #0
MOVEQ           R9, #0
ANDNE           R9, R9, #1
CMP             R9, #0
BEQ             loc_1F0C4
LDR             R3, [SP,#0x16474+var_1644C]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_1F8A4

loc_1F0C4               ; fd
LDR             R0, [SP,#0x16474+fd]
BL              close
B               loc_1ECC4

loc_1F0D0
MOVW            R4, #:lower16:(asc_4D5C4+4) ; ""
MOV             R0, #1
MOVT            R4, #:upper16:(asc_4D5C4+4) ; ""
B               loc_1DF34

loc_1F0E0
LDR             R3, [SP,#0x16474+ptr]
LDR             R0, [R3]

loc_1F0E8
CMN             R0, #1
BNE             loc_1FBF8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F12C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F12C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1F174

loc_1F12C
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R1, #:lower16:aApiWillNotBeAv ; " - API will not be available"
MOV             R3, R0
MOVT            R1, #:upper16:aApiWillNotBeAv ; " - API will not be available"
MOVW            R2, #:lower16:aApiInitialisat ; "API initialisation failed (%s)%s"
ADD             R0, SP, #0x16474+var_14834
STR             R1, [SP,#0x16474+optlen]
MOVT            R2, #:upper16:aApiInitialisat ; "API initialisation failed (%s)%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x30 ; '0' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_14834
MOV             R2, #0
ADD             R1, R1, #0x30 ; '0'
MOV             R0, #3
BL              sub_20F58

loc_1F174               ; ai
LDR             R0, [SP,#0x16474+ai]
BL              freeaddrinfo
LDR             R0, [SP,#0x16474+ptr] ; ptr
BL              free
B               loc_1DE44

loc_1F188
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1DE3C
B               loc_1E910

loc_1F1A0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1DE3C
B               loc_1E578

loc_1F1B8
MOVW            LR, #:lower16:aFailedToCalloc_7 ; "Failed to calloc ipaccess"
ADD             R12, SP, #0x16474+var_6874
MOVT            LR, #:upper16:aFailedToCalloc_7 ; "Failed to calloc ipaccess"
ADD             R12, R12, #0x70 ; 'p'
LDM             LR!, {R0-R3} ; "Failed to calloc ipaccess"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; " ipaccess"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x16474+var_6874
STRH            R2, [R12]
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1E394

loc_1F1FC
MOVW            LR, #:lower16:aFailedToMalloc_4 ; "Failed to malloc ipaccess buf"
ADD             R12, SP, #0x16474+var_7074
MOVT            LR, #:upper16:aFailedToMalloc_4 ; "Failed to malloc ipaccess buf"
ADD             R12, R12, #0x70 ; 'p'
LDM             LR!, {R0-R3} ; "Failed to malloc ipaccess buf"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " ipaccess buf"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x16474+var_7074
ADD             R1, R1, #0x70 ; 'p'
MOV             R2, #1
MOV             R0, #3
STRH            R3, [R12]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
LDR             R5, [R4]
B               loc_1E34C

loc_1F244
CMP             R7, #0
BEQ             loc_1F260

loc_1F24C               ; s
MOV             R1, R6
ADD             R3, SP, #0x16474+var_163FD
MOV             R2, R9
MOV             R0, R10 ; int
BL              sub_15E08

loc_1F260
MOV             R3, #0
STR             R9, [SP,#0x16474+optlen]
MOV             R2, R3
MOV             R1, #0xE
MOV             R0, R10
BL              sub_18AD4
CMP             R7, #0
BEQ             loc_1F080

loc_1F280
MOV             R1, R9
MOV             R0, R10
BL              sub_16D98
B               loc_1F094

loc_1F290
LDR             R1, [R11,#(off_677C8 - 0x67298)] ; "version"
CMP             R1, #0
BNE             loc_1EF88
B               loc_1F24C

loc_1F2A0
LDR             R1, [R3,#0x104]
MOVW            R3, #:lower16:unk_73188
ADD             R0, SP, #0x16474+var_16360
MOVT            R3, #:upper16:unk_73188
STR             R0, [SP,#0x16474+var_1640C]
SUB             R2, R2, R1
MOV             R1, R0  ; needle
LDR             R0, [R3,R2,LSL#2] ; haystack
BL              strstr
SUBS            R6, R0, #0
BNE             loc_1F050
LDR             R3, [SP,#0x16474+var_1640C]
MOV             R1, #aPoolChange_0 ; "pool_change"
MOV             R2, #0xB ; n
ADD             R0, R3, #1 ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_1F050
ADD             R3, R4, R4,LSL#1
STR             R9, [SP,#0x16474+optlen]
MOV             R2, R6
ADD             R3, R11, R3,LSL#2
MOV             R1, #0x2D ; '-'
MOV             R0, R10
LDR             R3, [R3,#0x530]
BL              sub_18AD4
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1F074
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F35C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F35C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1F074

loc_1F35C
ADD             R4, R4, R4,LSL#1
ADD             R0, SP, #0x16474+var_E074
MOVW            R2, #:lower16:aApiAccessDenie ; "API: access denied to '%s' for '%s' com"...
LDR             R3, [SP,#0x16474+var_163FC]
ADD             R1, R11, R4,LSL#2
MOVT            R2, #:upper16:aApiAccessDenie ; "API: access denied to '%s' for '%s' com"...
ADD             R0, R0, #0x70 ; 'p' ; s
LDR             R12, [R1,#0x530]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x16474+optlen]
BL              snprintf
ADD             R1, SP, #0x16474+var_E074
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #7
BL              sub_20F58
B               loc_1F074

loc_1F3A0
ADD             R2, SP, #0x16474+var_6074
CMP             R3, #0
ADD             R2, R2, #0x70 ; 'p'
MOV             R3, #0
STRB            R3, [R2]
BEQ             loc_1F0C4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F3F4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F3F4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1F0C4

loc_1F3F4
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R2, #:lower16:aApiRecvFailedS ; "API: recv failed: %s"
MOV             R3, R0
ADD             R0, SP, #0x16474+var_F874
MOVT            R2, #:upper16:aApiRecvFailedS ; "API: recv failed: %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_F874
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #7
BL              sub_20F58
B               loc_1F0C4

loc_1F434
LDR             R0, [SP,#0x16474+var_16420]
LDR             R3, [SP,#0x16474+var_16424]
BLX             R3      ; sub_17900
ADD             R0, SP, #0x16474+env ; buf
BL              __pthread_unwind_next

loc_1F448               ; ai
LDR             R0, [SP,#0x16474+ai]
BL              freeaddrinfo
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F48C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F48C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1DE3C

loc_1F48C
MOVW            R1, #:lower16:aApiWillNotBeAv ; " - API will not be available"
ADD             R0, SP, #0x16474+var_13034
MOVT            R1, #:upper16:aApiWillNotBeAv ; " - API will not be available"
MOVW            R2, #:lower16:aApiBindToPortD_0 ; "API bind to port %d failed (%s)%s"
STR             R1, [SP,#0x16474+var_16470]
MOV             R3, R5
STR             R7, [SP,#0x16474+optlen]
MOVT            R2, #:upper16:aApiBindToPortD_0 ; "API bind to port %d failed (%s)%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x30 ; '0' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_13034
MOV             R2, #0
ADD             R1, R1, #0x30 ; '0'
MOV             R0, #3
BL              sub_20F58
B               loc_1DE3C

loc_1F4D0
BL              __errno_location
LDR             LR, =aApi_0 ; "api"
MOVW            R1, #:lower16:(aSocketaApiC+8) ; "api.c"
LDR             R3, [R0]
MOVW            R12, #0x144F
MOVT            R1, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
ADD             R0, SP, #0x16474+var_C074
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x16474+var_1646C]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
MOVW            R3, #:lower16:sub_17900
ADD             R1, SP, #0x16474+var_C074
ADD             R1, R1, #0x70 ; 'p'
MOV             R2, #1
MOV             R0, #3
MOV             R4, R3
BL              sub_20F58
MOV             R3, R4
MOV             R0, #1
MOVT            R3, #:upper16:sub_17900
STR             R3, [SP,#0x16474+var_16424]
BL              sub_3EBA0
LDR             R3, [SP,#0x16474+ptr]
STR             R3, [SP,#0x16474+var_16420]
B               loc_1DEF8

loc_1F544
MOVW            LR, #:lower16:aFailedToMalloc_5 ; "Failed to malloc noprivgroup commands b"...
ADD             R12, SP, #0x16474+var_7874
MOVT            LR, #:upper16:aFailedToMalloc_5 ; "Failed to malloc noprivgroup commands b"...
ADD             R12, R12, #0x70 ; 'p'
LDM             LR!, {R0-R3} ; "Failed to malloc noprivgroup commands b"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " noprivgroup commands buf"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "mands buf"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x16474+var_7874
STRH            R2, [R12]
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1E308

loc_1F590
MOVW            LR, #:lower16:aFailedToMalloc_6 ; "Failed to malloc ipgroups buf"
ADD             R12, SP, #0x16474+var_B874
MOVT            LR, #:upper16:aFailedToMalloc_6 ; "Failed to malloc ipgroups buf"
ADD             R12, R12, #0x70 ; 'p'
LDM             LR!, {R0-R3} ; "Failed to malloc ipgroups buf"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " ipgroups buf"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x16474+var_B874
ADD             R1, R1, #0x70 ; 'p'
MOV             R2, #1
MOV             R0, #3
STRH            R3, [R12]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1DF44

loc_1F5D4
STR             R0, [SP,#0x16474+var_1641C]
MOV             R9, R4
B               loc_1EECC

loc_1F5E0
LDR             R3, [R3,#0x530]
MOV             R0, R10
STR             R9, [SP,#0x16474+optlen]
MOV             R1, #0x2D ; '-'
BL              sub_18AD4
MOV             R1, R9
MOV             R0, R10
BL              sub_16D98
B               loc_1F094

loc_1F604
ADD             R3, SP, #0x16474+var_16218
MOV             R2, R6
MOV             R1, R5
MOV             R0, R8
BL              sub_47320
SUBS            R3, R0, #0
STR             R3, [SP,#0x16474+var_1644C]
BEQ             loc_1F630
LDR             R5, [R3]
CMP             R5, #0
BEQ             loc_1FA74

loc_1F630
MOV             R3, #0
MOV             R1, #0x17
MOV             R2, R3
MOV             R4, #1
STR             R4, [SP,#0x16474+optlen]

loc_1F644
MOV             R0, R10
BL              sub_18AD4
MOV             R3, R4
LDR             R2, [SP,#0x16474+fd]
LDRB            R1, [R10,#0xD]
LDR             R0, [R10,#4]
BL              sub_16F14

loc_1F660
CMP             R7, #0
BEQ             loc_1F09C
MOV             R3, R9
LDR             R2, [SP,#0x16474+fd]
LDRB            R1, [R10,#0xD]
LDR             R0, [R10,#4]
BL              sub_16F14
B               loc_1F09C

loc_1F680
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F6BC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F6BC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1F70C

loc_1F6BC
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
LDR             R3, [SP,#0x16474+ptr]
MOV             R1, #aApiWillNotBeAv ; " - API will not be available"
MOV             R2, #aApiFailedSSD ; "API failed (%s)%s (%d)"
LDR             R12, [R3]
MOV             R3, R0
ADD             R0, SP, #0x16474+var_10874
ADD             R0, R0, #0x70 ; 'p' ; s
STMEA           SP, {R1,R12}
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x16474+var_10874
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #3
BL              sub_20F58

loc_1F70C               ; buf
ADD             R0, SP, #0x16474+env
BL              __pthread_unregister_cancel
LDR             R3, [SP,#0x16474+var_16424]
LDR             R0, [SP,#0x16474+var_16420]
BLX             R3      ; sub_17900
LDR             R0, [SP,#0x16474+ptr] ; ptr
BL              free
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_1F7F0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F778
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F778
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_1F7F0

loc_1F778
MOV             R3, #byte_68A7C
LDRB            R2, [R3,#(byte_68A7D - 0x68A7C)]
CMP             R2, #0
MOVNE           R3, #aQuit ; "QUIT"
BNE             loc_1F7C4
LDRB            R2, [R3,#(byte_68A7E - 0x68A7C)]
CMP             R2, #0
MOVNE           R3, #aRestart ; "RESTART"
BNE             loc_1F7C4
LDRB            R1, [R3]
MOVW            R2, #:lower16:unk_4A450
MOVW            R3, #:lower16:aUnknown_0 ; "UNKNOWN!"
MOVT            R2, #:upper16:unk_4A450
MOVT            R3, #:upper16:aUnknown_0 ; "UNKNOWN!"
CMP             R1, #0
MOVNE           R3, R2

loc_1F7C4
MOVW            R2, #:lower16:aApiTerminating ; "API: terminating due to: %s"
ADD             R0, SP, #0x16474+var_D874
MOVT            R2, #:upper16:aApiTerminating ; "API: terminating due to: %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_D874
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #7
BL              sub_20F58

loc_1F7F0               ; mutex
LDR             R0, =stru_68A88
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_1FBD8

loc_1F800
MOV             R4, #byte_68A7C
LDRB            R1, [R4,#(byte_68A7E - 0x68A7C)]
CMP             R1, #0
BNE             loc_1FB50
LDRB            R3, [R4,#(byte_68A7D - 0x68A7C)]
CMP             R3, #0
BNE             loc_1FAAC

loc_1F820               ; mutex
LDR             R0, =stru_68A88
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1FC00

loc_1F830
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
B               loc_1DE44

loc_1F844
LDRB            R3, [SP,#0x16474+haystack]
MOV             R7, R4
STRB            R3, [SP,#0x16474+var_163FD]
B               loc_1EF1C

loc_1F854
LDR             R1, =aApi_0 ; "api"
MOVW            R0, #0x152E
STR             R0, [SP,#0x16474+var_16470]
MOVW            R3, #:lower16:(aSocketaApiC+8) ; "api.c"
ADD             R0, SP, #0x16474+var_E874
MOVW            R2, #:lower16:aOomCmdsbufInSS ; "OOM cmdsbuf in %s %s():%d"
STR             R1, [SP,#0x16474+optlen]
MOVT            R3, #:upper16:(aSocketaApiC+8) ; "api.c"
MOVT            R2, #:upper16:aOomCmdsbufInSS ; "OOM cmdsbuf in %s %s():%d"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x70 ; 'p' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_E874
MOV             R2, R7
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #3
BL              sub_20F58
MOV             R0, R7
BL              sub_3EBA0
B               loc_1EF08

loc_1F8A4
LDR             R2, [SP,#0x16474+var_1644C]
LDR             R3, [R2,#4]
CMN             R3, #1
BEQ             loc_1F0C4
ADD             R3, R2, #4
DMB             ISH

loc_1F8BC
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_1F8BC
CMP             R2, #0
BNE             loc_1F0C4
LDR             R0, [SP,#0x16474+var_1644C]
BL              sub_48A34
B               loc_1F0C4

loc_1F8E4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F920
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F920
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_1F968

loc_1F920
BL              __errno_location
LDR             R0, [R0] ; errnum
BL              strerror
MOVW            R1, #:lower16:aApiWillNotBeAv ; " - API will not be available"
MOV             R3, R0
MOVT            R1, #:upper16:aApiWillNotBeAv ; " - API will not be available"
MOVW            R2, #:lower16:aApi3Initialisa ; "API3 initialisation failed (%s)%s"
ADD             R0, SP, #0x16474+var_12834
STR             R1, [SP,#0x16474+optlen]
MOVT            R2, #:upper16:aApi3Initialisa ; "API3 initialisation failed (%s)%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #0x30 ; '0' ; s
BL              snprintf
ADD             R1, SP, #0x16474+var_12834
MOV             R2, #0
ADD             R1, R1, #0x30 ; '0'
MOV             R0, #3
BL              sub_20F58

loc_1F968
LDR             R4, [SP,#0x16474+ptr]
LDR             R0, [R4] ; fd
BL              close
MOV             R0, R4  ; ptr
BL              free
B               loc_1DE44

loc_1F980
MOV             R2, #byte_767BC
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_1FA04
CMP             R3, #0
BNE             loc_1F9C4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1F9C4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1EC54

loc_1F9C4
LDR             R3, [SP,#0x16474+ptr]
ADD             R0, SP, #0x16474+var_11874
MOVW            R2, #:lower16:aApiRunningInUn ; "API running in UNRESTRICTED read access"...
ADD             R0, R0, #0x70 ; 'p' ; s
MOVT            R2, #:upper16:aApiRunningInUn ; "API running in UNRESTRICTED read access"...
LDR             R1, [R3]
MOV             R3, R5
STR             R1, [SP,#0x16474+optlen]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x16474+var_11874
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #4
BL              sub_20F58
B               loc_1EC54

loc_1FA04
CMP             R3, #0
BNE             loc_1FA34
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_1FA34
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_1EC54

loc_1FA34
LDR             R3, [SP,#0x16474+ptr]
ADD             R0, SP, #0x16474+var_11074
MOVW            R2, #:lower16:aApiRunningInLo ; "API running in local read access mode o"...
ADD             R0, R0, #0x70 ; 'p' ; s
MOVT            R2, #:upper16:aApiRunningInLo ; "API running in local read access mode o"...
LDR             R1, [R3]
MOV             R3, R5
STR             R1, [SP,#0x16474+optlen]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x16474+var_11074
MOV             R2, #0
ADD             R1, R1, #0x70 ; 'p'
MOV             R0, #4
BL              sub_20F58
B               loc_1EC54

loc_1FA74
MOV             R1, #(aApiAccessDenie+0x24) ; "command"
BL              sub_480FC
SUBS            R3, R0, #0
BEQ             loc_1FC78
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_1FC10
MOV             R4, #1
MOV             R3, R5
STR             R4, [SP,#0x16474+optlen]
MOV             R2, R5
MOV             R1, #0xE
B               loc_1F644

loc_1FAAC
ADD             R3, SP, #0x16474+var_163A0
MOVW            R2, #:lower16:sub_179F4
MOV             R0, R3
MOVT            R2, #:upper16:sub_179F4
BL              sub_25164
CMP             R0, #0
BEQ             loc_1FB44
ADD             R0, R4, #0xC ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BEQ             loc_1FAE4
MOVW            R1, #0x15A0
LDR             R0, =aApi_0 ; "api"
BL              sub_17668

loc_1FAE4
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOVW            LR, #:lower16:aApiFailedToIni ; "API failed to initiate a clean quit - a"...
ADD             R12, SP, #0x16474+var_C874
MOVT            LR, #:upper16:aApiFailedToIni ; "API failed to initiate a clean quit - a"...
ADD             R12, R12, #0x70 ; 'p'
LDM             LR!, {R0-R3} ; "API failed to initiate a clean quit - a"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "itiate a clean quit - aborting"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "uit - aborting"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x16474+var_C874
MOV             LR, R3,LSR#16
MOV             R0, #3
ADD             R1, R1, #0x70 ; 'p'
STRH            R3, [R12],#2
MOV             R2, #1
STRB            LR, [R12]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_1FB44               ; th
LDR             R0, [SP,#0x16474+th]
BL              pthread_detach
B               loc_1F820

loc_1FB50
ADD             R3, SP, #0x16474+var_163A0
MOVW            R2, #:lower16:sub_17B7C
MOV             R0, R3
MOVT            R2, #:upper16:sub_17B7C
MOV             R1, #0
BL              sub_25164
CMP             R0, #0
BEQ             loc_1FB44
ADD             R0, R4, #0xC ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_1FBE8

loc_1FB80
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOVW            R12, #:lower16:aApiFailedToIni_0 ; "API failed to initiate a restart - abor"...
ADD             LR, SP, #0x16474+var_D074
MOVT            R12, #:upper16:aApiFailedToIni_0 ; "API failed to initiate a restart - abor"...
ADD             LR, LR, #0x70 ; 'p'
LDM             R12!, {R0-R3} ; "API failed to initiate a restart - abor"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "itiate a restart - aborting"
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; " - aborting"
STM             LR, {R0-R2}
ADD             R1, SP, #0x16474+var_D074
ADD             R1, R1, #0x70 ; 'p'
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1FB44

loc_1FBD8
MOVW            R1, #0x1591
LDR             R0, =aApi_0 ; "api"
BL              sub_17604
B               loc_1F800

loc_1FBE8
MOVW            R1, #0x1597
LDR             R0, =aApi_0 ; "api"
BL              sub_17668
B               loc_1FB80

loc_1FBF8
MOV             R4, #0
B               loc_1EA20

loc_1FC00
MOVW            R1, #0x15A6
LDR             R0, =aApi_0 ; "api"
BL              sub_17668
B               loc_1F830

loc_1FC10
BL              sub_48630
MOVW            R1, #:lower16:(aMissingPoolIdP+0x10) ; "parameter"
MOV             R8, R0
MOVT            R1, #:upper16:(aMissingPoolIdP+0x10) ; "parameter"
LDR             R0, [SP,#0x16474+var_1644C]
BL              sub_480FC
SUBS            R3, R0, #0
STREQ           R3, [SP,#0x16474+var_1641C]
BEQ             loc_1EECC
LDR             R3, [R3]
CMP             R3, #2
BEQ             loc_1FCB0
CMP             R3, #3
BEQ             loc_1FC8C
CMP             R3, #4
STRNE           R5, [SP,#0x16474+var_1641C]
BNE             loc_1EECC
BL              sub_48938
ADD             R0, SP, #0x16474+var_4074
MOVW            R1, #:lower16:aF ; "%f"
VMOV            R2, R3, D0
ADD             R0, R0, #0x70 ; 'p' ; s
MOVT            R1, #:upper16:aF ; "%f"
STR             R0, [SP,#0x16474+var_1641C]
BL              sprintf
B               loc_1EECC

loc_1FC78
MOV             R4, #1
MOV             R2, R3
STR             R4, [SP,#0x16474+optlen]
MOV             R1, #0x18
B               loc_1F644

loc_1FC8C
BL              sub_4888C
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
MOV             R2, R0
ADD             R0, SP, #0x16474+var_4074
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; format
ADD             R0, R0, #0x70 ; 'p' ; s
STR             R0, [SP,#0x16474+var_1641C]
BL              sprintf
B               loc_1EECC

loc_1FCB0
BL              sub_48630
STR             R0, [SP,#0x16474+var_1641C]
B               loc_1EECC
; End of function sub_1DD84

off_1FCBC DCD aApi_0    ; "api"
CMP             R1, #0
BLE             loc_1FD08
PUSH            {LR}
MOVW            LR, #:lower16:unk_679B4
ADD             R1, R0, R1
MOVT            LR, #:upper16:unk_679B4
MOV             R3, #0

loc_1FCDC
LDRB            R12, [R0],#1
MOV             R2, R3,LSL#8
UXTH            R2, R2
CMP             R0, R1
EOR             R3, R12, R3,LSR#8
LDR             R3, [LR,R3,LSL#2]
UXTH            R3, R3
EOR             R3, R3, R2
BNE             loc_1FCDC
MOV             R0, R3
POP             {PC}

loc_1FD08
MOV             R3, #0
MOV             R0, R3
BX              LR



; void *__fastcall sub_1FD14(const char **, const char *, const char *, int)
sub_1FD14

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4-R8,LR}
MOV             R4, R0
LDRB            R0, [R0,#4]
SUB             SP, SP, #0x820
CMP             R0, #0
BNE             loc_1FF2C

loc_1FD2C
LDR             R3, [R4,#0x28]
CMP             R3, #0
BLE             loc_1FF24
LDR             R2, [R4,#0x18]
CMP             R3, R2
BLE             loc_1FE90
LDR             R6, [R4,#0x24]
ADD             R1, R2, R6
CMP             R3, R1
SUBLT           R6, R3, R2

loc_1FD54
LDR             R1, [R4,#0x30]
LDR             R0, [R4,#0x34] ; ptr
ADD             R1, R1, #1
STR             R1, [R4,#0x30]
MOV             R1, R1,LSL#2 ; size
BL              realloc
CMP             R0, #0
STR             R0, [R4,#0x34]
BEQ             loc_1FF90

loc_1FD78               ; size
MOV             R1, #0x10
MOV             R0, R6  ; nmemb
BL              calloc
SUBS            R5, R0, #0
BEQ             loc_1FFE8

loc_1FD8C
LDR             R3, [R4,#0x30]
CMP             R6, #2
LDR             R2, [R4,#0x34]
MOV             R0, #0
SUB             R3, R3, #0xC0000001
STR             R5, [R2,R3,LSL#2]
ADD             R2, R5, #0x10
LDR             R3, [R4,#0x18]
LDR             R1, [R4]
STR             R6, [R4,#0x1C]
ADD             R3, R3, R6
STR             R6, [R4,#0x20]
STR             R3, [R4,#0x18]
STR             R1, [R5]
STMIB           R5, {R0,R2}
BLE             loc_1FDEC
ADD             R0, R5, R6,LSL#4
ADD             R3, R5, #0x20 ; ' '

loc_1FDD4
SUB             R2, R3, #0x20 ; ' '
STR             R1, [R3,#-0x10]
STRD            R2, R3, [R3,#-0xC]
ADD             R3, R3, #0x10
CMP             R3, R0
BNE             loc_1FDD4

loc_1FDEC
SUB             R6, R6, #0xF0000001
LDRB            R0, [R4,#0x2C]
MOV             R3, R6,LSL#4
STR             R1, [R5,R6,LSL#4]
MOVW            R7, #:lower16:aKAllocItems ; "k_alloc_items"
STR             R5, [R4,#0xC]
MOVW            R6, #:lower16:aKlistC ; "klist.c"
MOVW            R8, #:lower16:aListSDataMemor ; "List %s data_memory failed to realloc c"...
MOV             R1, #0
SUB             R2, R3, #0x10
MOVT            R7, #:upper16:aKAllocItems ; "k_alloc_items"
MOVT            R6, #:upper16:aKlistC ; "klist.c"
MOVT            R8, #:upper16:aListSDataMemor ; "List %s data_memory failed to realloc c"...
ADD             R3, R5, R3
CMP             R0, R1
ADD             R2, R5, R2
STR             R2, [R3,#4]
STR             R1, [R3,#8]
STRNE           R3, [R4,#0x10]

loc_1FE38
LDR             R1, [R4,#0x38]
LDR             R0, [R4,#0x3C] ; ptr
ADD             R1, R1, #1
STR             R1, [R4,#0x38]
MOV             R1, R1,LSL#2 ; size
BL              realloc
CMP             R0, #0
STR             R0, [R4,#0x3C]
BEQ             loc_1FE98

loc_1FE5C               ; size
LDR             R1, [R4,#0x14]
MOV             R0, #1  ; nmemb
BL              calloc
CMP             R0, #0
STR             R0, [R5,#0xC]
BEQ             loc_1FEDC

loc_1FE74
LDR             R3, [R4,#0x38]
LDR             R2, [R4,#0x3C]
SUB             R3, R3, #0xC0000001
STR             R0, [R2,R3,LSL#2]
LDR             R5, [R5,#8]
CMP             R5, #0
BNE             loc_1FE38

loc_1FE90
ADD             SP, SP, #0x820
POP             {R4-R8,PC}

loc_1FE98
LDR             R2, [R4,#0x38]
MOV             R1, #0x45 ; 'E'
LDR             R3, [R4]
ADD             R0, SP, #0x820+s ; s
STR             R1, [SP,#0x820+var_814]
MOV             R1, #0x800 ; maxlen
STMEA           SP, {R2,R6}
MOV             R2, R8  ; format
STR             R7, [SP,#0x820+var_818]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1FE5C

loc_1FEDC
MOV             R1, #0x49 ; 'I'
MOVW            R2, #:lower16:aListSFailedToC ; "List %s failed to calloc item data in %"...
LDR             R3, [R4]
MOVT            R2, #:upper16:aListSFailedToC ; "List %s failed to calloc item data in %"...
STR             R1, [SP,#0x820+var_818]
ADD             R0, SP, #0x820+s ; s
MOV             R1, #0x800 ; maxlen
STR             R7, [SP,#0x820+var_81C]
STR             R6, [SP,#0x820+var_820]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
LDR             R0, [R5,#0xC]
B               loc_1FE74

loc_1FF24
LDR             R6, [R4,#0x24]
B               loc_1FD54

loc_1FF2C
LDR             R5, [R4]
MOVW            R0, #:lower16:aKAllocItems ; "k_alloc_items"
MOVW            R12, #:lower16:aKlistC ; "klist.c"
STRD            R2, R3, [SP,#0x820+var_818]
MOVT            R12, #:upper16:aKlistC ; "klist.c"
MOV             LR, #0x13
MOVT            R0, #:upper16:aKAllocItems ; "k_alloc_items"
MOVW            R2, #:lower16:aListSStoreCanT ; "List %s store can't %s() - from %s %s()"...
STR             R1, [SP,#0x820+var_81C]
MOV             R3, R5
STR             R0, [SP,#0x820+var_80C]
MOVT            R2, #:upper16:aListSStoreCanT ; "List %s store can't %s() - from %s %s()"...
STR             R0, [SP,#0x820+var_820]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x820+var_810]
ADD             R0, SP, #0x820+s ; s
STR             LR, [SP,#0x820+var_808]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1FD2C

loc_1FF90
LDR             R0, [R4,#0x30]
MOV             R2, #aKAllocItems ; "k_alloc_items"
MOVW            R1, #:lower16:aKlistC ; "klist.c"
LDR             R3, [R4]
MOV             R12, #0x21 ; '!'
STR             R2, [SP,#0x820+var_818]
MOVT            R1, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aListSItemMemor ; "List %s item_memory failed to realloc c"...
STRD            R0, R1, [SP,#0x820+var_820]
STR             R12, [SP,#0x820+var_814]
ADD             R0, SP, #0x820+s ; s
MOVT            R2, #:upper16:aListSItemMemor ; "List %s item_memory failed to realloc c"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_1FD78

loc_1FFE8
LDR             R12, [R4,#0x28]
MOVW            R1, #:lower16:aKAllocItems ; "k_alloc_items"
LDR             R0, [R4,#0x18]
MOVW            R2, #:lower16:aKlistC ; "klist.c"
MOVT            R1, #:upper16:aKAllocItems ; "k_alloc_items"
MOVT            R2, #:upper16:aKlistC ; "klist.c"
LDR             R3, [R4]
STR             R1, [SP,#0x820+var_810]
MOV             R1, #0x26 ; '&'
STR             R2, [SP,#0x820+var_814]
MOVW            R2, #:lower16:aListSFailedToC_0 ; "List %s failed to calloc %d new items -"...
STR             R12, [SP,#0x820+var_818]
MOVT            R2, #:upper16:aListSFailedToC_0 ; "List %s failed to calloc %d new items -"...
STR             R0, [SP,#0x820+var_81C]
ADD             R0, SP, #0x820+s ; s
STR             R1, [SP,#0x820+var_80C]
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x820+var_820]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_1FD14



; Attributes: thunk

sub_2004C
B               loc_1FD8C
; End of function sub_2004C




; _DWORD *__fastcall sub_20050(int)
sub_20050

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
MOV             R5, R0
SUB             SP, SP, #4
MOV             R1, #0x40 ; '@' ; size
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R4, R0, #0
LDR             R3, [R5]
BEQ             loc_200A4

loc_20078
LDR             R12, [R5,#8]
MOV             R2, #1
LDRB            R1, [R5,#0x2C]
MOV             R0, R4
STR             R3, [R4]
STR             R12, [R4,#8]
STRB            R1, [R4,#0x2C]
STRB            R2, [R4,#4]
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_200A4
LDR             R0, =aKNewStore ; "k_new_store"
MOVW            R1, #:lower16:aKlistC ; "klist.c"
MOV             R12, #0x55 ; 'U'
MOVT            R1, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aFailedToCalloc_0 ; "Failed to calloc store for %s in %s %s("...
STR             R12, [SP,#0x814+var_80C]
STR             R1, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aFailedToCalloc_0 ; "Failed to calloc store for %s in %s %s("...
STR             R0, [SP,#0x814+var_810]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_20050

LDR             R3, [R5]
B               loc_20078
off_200F4 DCD aKNewStore ; "k_new_store"



; _BYTE *__fastcall sub_200F8(const char *, int, int, int, char, const char *, const char *, int)
sub_200F8

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x20
arg_4=  0x24
arg_8=  0x28
arg_C=  0x2C

PUSH            {R4-R10,LR}
SUBS            R8, R2, #0
SUB             SP, SP, #0x810
MOV             R7, R0
MOV             R10, R1
MOV             R6, R3
LDRB            R9, [SP,#0x810+arg_0]
BLE             loc_201B4
CMP             R6, #0
BLT             loc_2020C

loc_20120               ; size
MOV             R1, #0x40 ; '@'
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R4, R0, #0
BEQ             loc_202B4

loc_20134
MOV             R3, #0
MOV             R1, #0x38 ; '8' ; size
STRB            R3, [R4,#4]
MOV             R0, #1  ; nmemb
BL              calloc
CMP             R0, #0
MOV             R5, R0
STR             R0, [R4,#8]
BEQ             loc_20260

loc_20158               ; mutexattr
MOV             R1, #0
MOV             R0, R5  ; mutex
BL              pthread_mutex_init
CMP             R0, #0
BNE             loc_20354

loc_2016C               ; rwlock
ADD             R0, R5, #0x18
MOV             R1, #0  ; attr
BL              pthread_rwlock_init
CMP             R0, #0
BNE             loc_20304

loc_20180
MOV             R0, R4
STR             R7, [R4]
LDR             R3, [SP,#0x810+arg_C]
STR             R10, [R4,#0x14]
LDR             R2, [SP,#0x810+arg_8]
STR             R8, [R4,#0x24]
LDR             R1, [SP,#0x810+arg_4]
STR             R6, [R4,#0x28]
STRB            R9, [R4,#0x2C]
BL              sub_1FD14
MOV             R0, R4
ADD             SP, SP, #0x810
POP             {R4-R10,PC}

loc_201B4
LDR             R12, =aKNewList ; "_k_new_list"
MOV             R3, #aKlistC ; "klist.c"
MOV             R1, #0x64 ; 'd'
MOVW            R2, #:lower16:aInvalidNewList ; "Invalid new list %s with allocate %d mu"...
STR             R3, [SP,#0x810+var_80C]
STR             R12, [SP,#0x810+var_808]
MOV             R3, R7
MOVT            R2, #:upper16:aInvalidNewList ; "Invalid new list %s with allocate %d mu"...
STR             R1, [SP,#0x810+var_804]
STR             R8, [SP,#0x810+var_810]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x810+s ; s
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
CMP             R6, #0
BGE             loc_20120

loc_2020C
LDR             R12, =aKNewList ; "_k_new_list"
MOV             R3, #aKlistC ; "klist.c"
MOV             R1, #0x67 ; 'g'
MOVW            R2, #:lower16:aInvalidNewList_0 ; "Invalid new list %s with limit %d must "...
STR             R3, [SP,#0x810+var_80C]
STR             R12, [SP,#0x810+var_808]
MOV             R3, R7
STR             R1, [SP,#0x810+var_804]
MOVT            R2, #:upper16:aInvalidNewList_0 ; "Invalid new list %s with limit %d must "...
STR             R6, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_20120

loc_20260
LDR             R12, =aKNewList ; "_k_new_list"
MOV             R3, #aKlistC ; "klist.c"
MOV             R1, #0x71 ; 'q'
MOVW            R2, #:lower16:aFailedToCalloc_1 ; "Failed to calloc lock for list %s in %s"...
STR             R3, [SP,#0x810+var_810]
STR             R12, [SP,#0x810+var_80C]
MOV             R3, R7
MOVT            R2, #:upper16:aFailedToCalloc_1 ; "Failed to calloc lock for list %s in %s"...
STR             R1, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
LDR             R5, [R4,#8]
B               loc_20158

loc_202B4
LDR             R12, =aKNewList ; "_k_new_list"
MOV             R3, #aKlistC ; "klist.c"
MOV             R1, #0x6B ; 'k'
MOVW            R2, #:lower16:aFailedToCalloc_2 ; "Failed to calloc list %s in %s %s():%d"
STR             R3, [SP,#0x810+var_810]
STR             R12, [SP,#0x810+var_80C]
MOV             R3, R7
STR             R1, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aFailedToCalloc_2 ; "Failed to calloc list %s in %s %s():%d"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_20134

loc_20304
BL              __errno_location
LDR             LR, =aKNewList ; "_k_new_list"
MOVW            R1, #:lower16:aKlistC ; "klist.c"
MOV             R12, #0x73 ; 's'
MOVT            R1, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_20180

loc_20354
BL              __errno_location
LDR             LR, =aKNewList ; "_k_new_list"
MOVW            R1, #:lower16:aKlistC ; "klist.c"
MOV             R12, #0x73 ; 's'
MOVT            R1, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_200F8

B               loc_2016C
off_203A4 DCD aKNewList ; "_k_new_list"



; int __fastcall sub_203A8(int, const char *, const char *, int)
sub_203A8
PUSH            {R4,LR}
MOV             R4, R0
LDR             R12, [R0,#0xC]
CMP             R12, #0
BEQ             loc_203F4

loc_203BC
LDR             R3, [R12,#8]
CMP             R3, #0
STR             R3, [R4,#0xC]
BEQ             loc_2040C
MOV             R2, #0
STR             R2, [R3,#4]

loc_203D4
MOV             R3, #0
MOV             R0, R12
STR             R3, [R12,#8]
STR             R3, [R12,#4]
LDR             R3, [R4,#0x1C]
SUB             R3, R3, #1
STR             R3, [R4,#0x1C]
POP             {R4,PC}

loc_203F4
LDRB            R12, [R0,#4]
CMP             R12, #0
BEQ             loc_2041C

loc_20400
MOV             R12, #0
MOV             R0, R12
POP             {R4,PC}

loc_2040C
LDRB            R2, [R4,#0x2C]
CMP             R2, #0
STRNE           R3, [R4,#0x10]
B               loc_203D4

loc_2041C
BL              sub_1FD14
LDR             R12, [R4,#0xC]
CMP             R12, #0
BNE             loc_203BC
B               loc_20400
; End of function sub_203A8




; int __fastcall sub_20430(int, const char *, const char *, int)
sub_20430
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_203A8
SUBS            R4, R0, #0
BEQ             loc_20454
LDR             R2, [R5,#0x14] ; n
MOV             R1, #0  ; c
LDR             R0, [R4,#0xC] ; s
BL              memset

loc_20454
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_20430




; int __fastcall sub_2045C(int, const char *, const char *, int)
sub_2045C

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
MOV             R4, R0
LDRB            R0, [R0,#0x2C]
SUB             SP, SP, #0x820
SUB             SP, SP, #4
CMP             R0, #0
BEQ             loc_204C0

loc_20478
LDR             R0, [R4,#0x10]
CMP             R0, #0
BEQ             loc_204B4
LDR             R3, [R0,#4]
CMP             R3, #0
STR             R3, [R4,#0x10]
MOVNE           R2, #0
STREQ           R3, [R4,#0xC]
STRNE           R2, [R3,#8]
MOV             R3, #0
STR             R3, [R0,#8]
STR             R3, [R0,#4]
LDR             R3, [R4,#0x1C]
SUB             R3, R3, #1
STR             R3, [R4,#0x1C]

loc_204B4
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_204C0
LDR             R5, [R4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKUnlinkTail ; "_k_unlink_tail"
MOV             LR, #0xB5
STRD            R2, R3, [SP,#0x824+var_81C]
MOVT            R0, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R1, [SP,#0x824+var_820]
STR             R0, [SP,#0x824+var_814]
MOV             R3, R5
STR             R12, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R12, [SP,#0x824+var_824]
ADD             R0, SP, #0x824+s ; s
STR             LR, [SP,#0x824+var_80C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_2045C

B               loc_20478
off_20520 DCD aKUnlinkTail ; "_k_unlink_tail"



; const char *__fastcall sub_20524(int, int, const char *, const char *, int)
sub_20524

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x10

PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
LDR             R0, [R1]
SUB             SP, SP, #0x820
LDR             R1, [R4]
CMP             R0, R1
BEQ             loc_205A4
LDR             R6, [SP,#0x820+arg_0]
MOVW            R12, #:lower16:aKlistC ; "klist.c"
LDR             LR, =aKAddHead ; "_k_add_head"
MOVT            R12, #:upper16:aKlistC ; "klist.c"
STRD            R2, R3, [SP,#0x820+var_818]
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R6, [SP,#0x820+var_810]
MOV             R6, #0xCD
MOV             R3, R1
STR             R0, [SP,#0x820+var_81C]
STR             R12, [SP,#0x820+var_80C]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             LR, [SP,#0x820+var_808]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R6, [SP,#0x820+var_804]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x820+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_205A4
MOV             R3, #0
STR             R3, [R5,#4]
LDR             R3, [R4,#0xC]
STR             R3, [R5,#8]
LDR             R3, [R4,#0xC]
CMP             R3, #0
STRNE           R5, [R3,#4]
LDRB            R3, [R4,#0x2C]
STR             R5, [R4,#0xC]
CMP             R3, #0
BEQ             loc_205DC
LDR             R3, [R4,#0x10]
CMP             R3, #0
STREQ           R5, [R4,#0x10]

loc_205DC
LDRD            R2, R3, [R4,#0x1C]
ADD             R2, R2, #1
ADD             R3, R3, #1
STRD            R2, R3, [R4,#0x1C]
ADD             SP, SP, #0x820
POP             {R4-R6,PC}
; End of function sub_20524

off_205F4 DCD aKAddHead ; "_k_add_head"



; const char **__fastcall sub_205F8(const char **result, int, const char *, const char *, int)
sub_205F8

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804
arg_0=  0x14

PUSH            {R4-R7,LR}
MOV             R5, R1
MOV             R6, R2
LDR             R1, [R1]
SUB             SP, SP, #0x820
MOV             R4, R0
LDR             R2, [R0]
SUB             SP, SP, #4
MOV             R7, R3
CMP             R1, R2
BEQ             loc_20688
LDR             R3, [SP,#0x824+arg_0]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKAddTail ; "_k_add_tail"
MOV             LR, #0xEC
MOVT            R0, #:upper16:aKlistC ; "klist.c"
STR             R1, [SP,#0x824+var_820]
STR             R3, [SP,#0x824+var_814]
MOV             R3, R2
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R0, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R12, [SP,#0x824+var_80C]
STR             R12, [SP,#0x824+var_824]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x824+var_808]
ADD             R0, SP, #0x824+s ; s
STR             R7, [SP,#0x824+var_818]
STR             R6, [SP,#0x824+var_81C]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_20688
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_206DC

loc_20694
LDR             R3, [R4,#0x10]
MOV             R2, #0
STR             R2, [R5,#8]
STR             R3, [R5,#4]
LDR             R3, [R4,#0x10]
CMP             R3, R2
STRNE           R5, [R3,#8]
LDR             R3, [R4,#0xC]
STR             R5, [R4,#0x10]
CMP             R3, #0
LDRD            R2, R3, [R4,#0x1C]
STREQ           R5, [R4,#0xC]
ADD             R2, R2, #1
ADD             R3, R3, #1
STRD            R2, R3, [R4,#0x1C]
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_206DC
LDR             R2, [SP,#0x824+arg_0]
MOVW            R1, #:lower16:aKlistC ; "klist.c"
LDR             R0, =aKAddTail ; "_k_add_tail"
MOV             R12, #0xF1
LDR             R3, [R4]
MOVT            R1, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x824+var_818]
MOVW            R2, #:lower16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R1, [SP,#0x824+var_814]
MOVT            R2, #:upper16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R0, [SP,#0x824+var_810]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x824+var_824]
ADD             R0, SP, #0x824+s ; s
STR             R12, [SP,#0x824+var_80C]
STR             R7, [SP,#0x824+var_81C]
STR             R6, [SP,#0x824+var_820]
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_205F8

B               loc_20694
off_20740 DCD aKAddTail ; "_k_add_tail"



; const char **__fastcall sub_20744(const char **result, int, int, const char *, const char *, int)
sub_20744

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804
arg_0=  0x14
arg_4=  0x18

PUSH            {R4-R7,LR}
MOV             R6, R1
MOV             R5, R2
LDR             R1, [R1]
SUB             SP, SP, #0x820
MOV             R4, R0
LDR             R2, [R0]
SUB             SP, SP, #4
MOV             R7, R3
CMP             R1, R2
BEQ             loc_207D8
LDR             R3, [SP,#0x824+arg_4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKInsertBefore ; "_k_insert_before"
MOVW            LR, #0x106
MOVT            R0, #:upper16:aKlistC ; "klist.c"
STR             R1, [SP,#0x824+var_820]
STR             R3, [SP,#0x824+var_814]
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0x824+arg_0]
STR             R0, [SP,#0x824+var_810]
ADD             R0, SP, #0x824+s ; s
STR             R12, [SP,#0x824+var_80C]
STR             R3, [SP,#0x824+var_818]
MOV             R3, R2
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R12, [SP,#0x824+var_824]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             LR, [SP,#0x824+var_808]
STR             R7, [SP,#0x824+var_81C]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_207D8
CMP             R5, #0
BEQ             loc_2081C

loc_207E0
STR             R5, [R6,#8]
LDR             R3, [R5,#4]
STR             R3, [R6,#4]
LDR             R3, [R5,#4]
CMP             R3, #0
STRNE           R6, [R3,#8]
STREQ           R6, [R4,#0xC]
STR             R6, [R5,#4]
LDRD            R2, R3, [R4,#0x1C]
ADD             R2, R2, #1
ADD             R3, R3, #1
STRD            R2, R3, [R4,#0x1C]
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_2081C
LDR             R2, [SP,#0x824+arg_4]
MOVW            R3, #:lower16:aKlistC ; "klist.c"
LDR             LR, [R4]
MOVW            R12, #0x10B
LDR             R0, [SP,#0x824+arg_0]
MOVT            R3, #:upper16:aKlistC ; "klist.c"
LDR             R1, =aKInsertBefore ; "_k_insert_before"
STR             R2, [SP,#0x824+var_818]
MOVW            R2, #:lower16:aSSCanTBeforeAN ; "%s() (%s) can't before a null item - fr"...
STR             R0, [SP,#0x824+var_81C]
MOVT            R2, #:upper16:aSSCanTBeforeAN ; "%s() (%s) can't before a null item - fr"...
STR             R3, [SP,#0x824+var_814]
ADD             R0, SP, #0x824+s ; s
MOV             R3, R1
STR             R1, [SP,#0x824+var_810]
STR             LR, [SP,#0x824+var_824]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x824+var_80C]
STR             R7, [SP,#0x824+var_820]
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_20744

B               loc_207E0
off_20888 DCD aKInsertBefore ; "_k_insert_before"



; const char **__fastcall sub_2088C(const char **result, int, int, const char *, const char *, int)
sub_2088C

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804
arg_0=  0x14
arg_4=  0x18

PUSH            {R4-R7,LR}
MOV             R6, R1
MOV             R5, R2
LDR             R1, [R1]
SUB             SP, SP, #0x820
MOV             R4, R0
LDR             R2, [R0]
SUB             SP, SP, #4
MOV             R7, R3
CMP             R1, R2
BEQ             loc_20920
LDR             R3, [SP,#0x824+arg_4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKInsertAfter ; "_k_insert_after"
MOVW            LR, #0x11E
MOVT            R0, #:upper16:aKlistC ; "klist.c"
STR             R1, [SP,#0x824+var_820]
STR             R3, [SP,#0x824+var_814]
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0x824+arg_0]
STR             R0, [SP,#0x824+var_810]
ADD             R0, SP, #0x824+s ; s
STR             R12, [SP,#0x824+var_80C]
STR             R3, [SP,#0x824+var_818]
MOV             R3, R2
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R12, [SP,#0x824+var_824]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             LR, [SP,#0x824+var_808]
STR             R7, [SP,#0x824+var_81C]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_20920
CMP             R5, #0
BEQ             loc_20970

loc_20928
STR             R5, [R6,#4]
LDR             R3, [R5,#8]
STR             R3, [R6,#8]
LDR             R3, [R5,#8]
CMP             R3, #0
STRNE           R6, [R3,#4]
BNE             loc_20950
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
STRNE           R6, [R4,#0x10]

loc_20950
STR             R6, [R5,#8]
LDRD            R2, R3, [R4,#0x1C]
ADD             R2, R2, #1
ADD             R3, R3, #1
STRD            R2, R3, [R4,#0x1C]
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_20970
LDR             R2, [SP,#0x824+arg_4]
MOVW            R3, #:lower16:aKlistC ; "klist.c"
LDR             LR, [R4]
MOVW            R12, #0x123
LDR             R0, [SP,#0x824+arg_0]
MOVT            R3, #:upper16:aKlistC ; "klist.c"
LDR             R1, =aKInsertAfter ; "_k_insert_after"
STR             R2, [SP,#0x824+var_818]
MOVW            R2, #:lower16:aSSCanTAfterANu ; "%s() (%s) can't after a null item - fro"...
STR             R0, [SP,#0x824+var_81C]
MOVT            R2, #:upper16:aSSCanTAfterANu ; "%s() (%s) can't after a null item - fro"...
STR             R3, [SP,#0x824+var_814]
ADD             R0, SP, #0x824+s ; s
MOV             R3, R1
STR             R1, [SP,#0x824+var_810]
STR             LR, [SP,#0x824+var_824]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x824+var_80C]
STR             R7, [SP,#0x824+var_820]
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_2088C

B               loc_20928
off_209DC DCD aKInsertAfter ; "_k_insert_after"



; const char *__fastcall sub_209E0(int, int, const char *, const char *, int)
sub_209E0

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x10

PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
LDR             R0, [R1]
SUB             SP, SP, #0x820
LDR             R1, [R5]
CMP             R0, R1
BEQ             loc_20A60
LDR             R6, [SP,#0x820+arg_0]
MOVW            R12, #:lower16:aKlistC ; "klist.c"
LDR             LR, =aKUnlinkItem ; "_k_unlink_item"
MOVT            R12, #:upper16:aKlistC ; "klist.c"
STRD            R2, R3, [SP,#0x820+var_818]
MOVW            R2, #:lower16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             R6, [SP,#0x820+var_810]
MOV             R6, #0x138
MOV             R3, R1
STR             R0, [SP,#0x820+var_81C]
STR             R12, [SP,#0x820+var_80C]
MOVT            R2, #:upper16:aListSCanTSASIt ; "List %s can't %s() a %s item - from %s "...
STR             LR, [SP,#0x820+var_808]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R6, [SP,#0x820+var_804]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x820+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_20A60
LDRD            R2, R3, [R4,#4]
CMP             R2, #0
STRNE           R3, [R2,#8]
LDRNE           R3, [R4,#8]
CMP             R3, #0
LDRNE           R2, [R4,#4]
STRNE           R2, [R3,#4]
LDR             R3, [R5,#0xC]
CMP             R3, R4
LDREQ           R3, [R4,#8]
STREQ           R3, [R5,#0xC]
LDRB            R3, [R5,#0x2C]
CMP             R3, #0
BEQ             loc_20AA8
LDR             R3, [R5,#0x10]
CMP             R3, R4
LDREQ           R3, [R4,#4]
STREQ           R3, [R5,#0x10]

loc_20AA8
MOV             R3, #0
STR             R3, [R4,#8]
STR             R3, [R4,#4]
LDR             R3, [R5,#0x1C]
SUB             R3, R3, #1
STR             R3, [R5,#0x1C]
ADD             SP, SP, #0x820
POP             {R4-R6,PC}
; End of function sub_209E0

off_20AC8 DCD aKUnlinkItem ; "_k_unlink_item"



; const char *__fastcall sub_20ACC(const char **, int, const char *, const char *, int)
sub_20ACC

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, R1
LDR             R0, [R0]
SUB             SP, SP, #0x820
MOV             R6, R2
LDR             R1, [R1]
MOV             R7, R3
CMP             R0, R1
BEQ             loc_20B58
LDR             LR, =aKListTransferT ; "_k_list_transfer_to_head"
MOVW            R12, #:lower16:aKlistC ; "klist.c"
LDR             R3, [SP,#0x820+arg_0]
MOVT            R12, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x820+var_818]
MOVW            R8, #0x152
MOVW            R2, #:lower16:aListSCanTSToAS ; "List %s can't %s() to a %s list - from "...
STR             R1, [SP,#0x820+var_81C]
STR             R3, [SP,#0x820+var_810]
MOVT            R2, #:upper16:aListSCanTSToAS ; "List %s can't %s() to a %s list - from "...
MOV             R3, R0
STR             R12, [SP,#0x820+var_80C]
STR             LR, [SP,#0x820+var_808]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R7, [SP,#0x820+var_814]
STR             R8, [SP,#0x820+var_804]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x820+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_20B58
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_20BD4

loc_20B64
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_20BCC
LDR             R2, [R5,#0xC]
LDR             R3, [R4,#0x10]
CMP             R2, #0
STRNE           R3, [R2,#4]
STREQ           R3, [R5,#0x10]
MOV             R3, #0
LDRNE           R2, [R5,#0xC]
LDR             R1, [R4,#0x10]
STR             R2, [R1,#8]
LDR             R2, [R4,#0xC]
STR             R2, [R5,#0xC]
STR             R3, [R4,#0x10]
LDR             R1, [R4,#0x1C]
STR             R3, [R4,#0xC]
LDR             R2, [R5,#0x1C]
ADD             R2, R2, R1
STR             R2, [R5,#0x1C]
STR             R3, [R4,#0x1C]
LDR             R1, [R4,#0x20]
LDR             R2, [R5,#0x20]
ADD             R2, R2, R1
STR             R2, [R5,#0x20]
STR             R3, [R4,#0x20]

loc_20BCC
ADD             SP, SP, #0x820
POP             {R4-R8,PC}

loc_20BD4
LDR             R2, [SP,#0x820+arg_0]
MOVW            R1, #:lower16:aKlistC ; "klist.c"
LDR             R0, =aKListTransferT ; "_k_list_transfer_to_head"
MOVW            R12, #0x157
LDR             R3, [R4]
MOVT            R1, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x820+var_814]
MOVW            R2, #:lower16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R1, [SP,#0x820+var_810]
MOVT            R2, #:upper16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R0, [SP,#0x820+var_80C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R12, [SP,#0x820+var_808]
STR             R7, [SP,#0x820+var_818]
STR             R6, [SP,#0x820+var_81C]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_20ACC

B               loc_20B64
off_20C38 DCD aKListTransferT ; "_k_list_transfer_to_head"



; const char *__fastcall sub_20C3C(const char **, int, const char *, const char *, int)
sub_20C3C

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x18

PUSH            {R4-R8,LR}
MOV             R4, R0
MOV             R5, R1
LDR             R0, [R0]
SUB             SP, SP, #0x820
MOV             R6, R2
LDR             R1, [R1]
MOV             R7, R3
CMP             R0, R1
BEQ             loc_20CC8
LDR             LR, =aKListTransferT_0 ; "_k_list_transfer_to_tail"
MOVW            R12, #:lower16:aKlistC ; "klist.c"
LDR             R3, [SP,#0x820+arg_0]
MOVT            R12, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x820+var_818]
MOV             R8, #0x170
MOVW            R2, #:lower16:aListSCanTSToAS ; "List %s can't %s() to a %s list - from "...
STR             R1, [SP,#0x820+var_81C]
STR             R3, [SP,#0x820+var_810]
MOVT            R2, #:upper16:aListSCanTSToAS ; "List %s can't %s() to a %s list - from "...
MOV             R3, R0
STR             R12, [SP,#0x820+var_80C]
STR             LR, [SP,#0x820+var_808]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R7, [SP,#0x820+var_814]
STR             R8, [SP,#0x820+var_804]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x820+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_20CC8
LDRB            R3, [R4,#0x2C]
CMP             R3, #0
BEQ             loc_20D40

loc_20CD4
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_20D38
LDR             R2, [R5,#0x10]
CMP             R2, #0
STRNE           R3, [R2,#8]
STREQ           R3, [R5,#0xC]
MOV             R3, #0
LDRNE           R2, [R5,#0x10]
LDR             R1, [R4,#0xC]
STR             R2, [R1,#4]
LDR             R2, [R4,#0x10]
STR             R2, [R5,#0x10]
STR             R3, [R4,#0x10]
LDR             R1, [R4,#0x1C]
STR             R3, [R4,#0xC]
LDR             R2, [R5,#0x1C]
ADD             R2, R2, R1
STR             R2, [R5,#0x1C]
STR             R3, [R4,#0x1C]
LDR             R1, [R4,#0x20]
LDR             R2, [R5,#0x20]
ADD             R2, R2, R1
STR             R2, [R5,#0x20]
STR             R3, [R4,#0x20]

loc_20D38
ADD             SP, SP, #0x820
POP             {R4-R8,PC}

loc_20D40
LDR             R2, [SP,#0x820+arg_0]
MOVW            R1, #:lower16:aKlistC ; "klist.c"
LDR             R0, =aKListTransferT_0 ; "_k_list_transfer_to_tail"
MOVW            R12, #0x175
LDR             R3, [R4]
MOVT            R1, #:upper16:aKlistC ; "klist.c"
STR             R2, [SP,#0x820+var_814]
MOVW            R2, #:lower16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R1, [SP,#0x820+var_810]
MOVT            R2, #:upper16:aListSCanTSDoTa ; "List %s can't %s() - do_tail is false -"...
STR             R0, [SP,#0x820+var_80C]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x820+var_820]
ADD             R0, SP, #0x820+s ; s
STR             R12, [SP,#0x820+var_808]
STR             R7, [SP,#0x820+var_818]
STR             R6, [SP,#0x820+var_81C]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_20C3C

B               loc_20CD4
off_20DA4 DCD aKListTransferT_0 ; "_k_list_transfer_to_tail"



; int __fastcall sub_20DA8(const char **, const char *, const char *, int)
sub_20DA8

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
MOV             R4, R0
LDRB            R0, [R0,#4]
SUB             SP, SP, #0x820
SUB             SP, SP, #4
CMP             R0, #0
BNE             loc_20E60

loc_20DC4
LDR             R3, [R4,#0x30]
CMP             R3, #0
BLE             loc_20DF0
MOV             R5, #0

loc_20DD4
LDR             R3, [R4,#0x34]
LDR             R0, [R3,R5,LSL#2] ; ptr
ADD             R5, R5, #1
BL              free
LDR             R3, [R4,#0x30]
CMP             R3, R5
BGT             loc_20DD4

loc_20DF0               ; ptr
LDR             R0, [R4,#0x34]
BL              free
LDR             R3, [R4,#0x38]
CMP             R3, #0
BLE             loc_20E24
MOV             R5, #0

loc_20E08
LDR             R3, [R4,#0x3C]
LDR             R0, [R3,R5,LSL#2] ; ptr
ADD             R5, R5, #1
BL              free
LDR             R3, [R4,#0x38]
CMP             R3, R5
BGT             loc_20E08

loc_20E24               ; ptr
LDR             R0, [R4,#0x3C]
BL              free
LDR             R5, [R4,#8]
ADD             R0, R5, #0x18 ; rwlock
BL              pthread_rwlock_destroy
MOV             R0, R5  ; mutex
BL              pthread_mutex_destroy
LDR             R0, [R4,#8] ; ptr
BL              free
MOV             R0, R4  ; ptr
BL              free
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_20E60
LDR             R5, [R4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKFreeList ; "_k_free_list"
MOV             LR, #0x190
STRD            R2, R3, [SP,#0x824+var_81C]
MOVT            R0, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aListSCanTSASto ; "List %s can't %s() a store - from %s %s"...
STR             R1, [SP,#0x824+var_820]
STR             R0, [SP,#0x824+var_814]
MOV             R3, R5
STR             R12, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aListSCanTSASto ; "List %s can't %s() a store - from %s %s"...
STR             R12, [SP,#0x824+var_824]
ADD             R0, SP, #0x824+s ; s
STR             LR, [SP,#0x824+var_80C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_20DA8

B               loc_20DC4
off_20EC0 DCD aKFreeList ; "_k_free_list"



; int __fastcall sub_20EC4(const char **ptr, const char *, const char *, int)
sub_20EC4

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4,R5,LR}
MOV             R4, R0
LDRB            R0, [R0,#4]
SUB             SP, SP, #0x820
SUB             SP, SP, #4
CMP             R0, #0
BNE             loc_20F3C
LDR             R5, [R4]
MOVW            R0, #:lower16:aKlistC ; "klist.c"
LDR             R12, =aKFreeStore ; "_k_free_store"
MOV             LR, #0x1A8
STRD            R2, R3, [SP,#0x824+var_81C]
MOVT            R0, #:upper16:aKlistC ; "klist.c"
MOVW            R2, #:lower16:aStoreSCanTSThe ; "Store %s can't %s() the list - from %s "...
STR             R1, [SP,#0x824+var_820]
STR             R0, [SP,#0x824+var_814]
MOV             R3, R5
STR             R12, [SP,#0x824+var_810]
MOVT            R2, #:upper16:aStoreSCanTSThe ; "Store %s can't %s() the list - from %s "...
STR             R12, [SP,#0x824+var_824]
MOV             R1, #0x800 ; maxlen
STR             LR, [SP,#0x824+var_80C]
ADD             R0, SP, #0x824+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_20F3C               ; ptr
MOV             R0, R4
BL              free
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_20EC4

off_20F54 DCD aKFreeStore ; "_k_free_store"



; void __fastcall sub_20F58(int, const char *, int)
sub_20F58

var_68= -0x68
var_64= -0x64
var_60= -0x60
var_5C= -0x5C
var_58= -0x58
var_54= -0x54
timer= -0x4C
var_48= -0x48
var_44= -0x44
s= -0x40

MOVW            R3, #:lower16:byte_74500
PUSH            {R4-R8,R10,R11,LR}
MOVT            R3, #:upper16:byte_74500
SUB             SP, SP, #0x68
MOV             R7, R0
MOV             R6, R1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_210D8
ADD             R0, SP, #0x68+var_48
MOV             R8, R2
STR             R3, [SP,#0x68+var_48]
MOVW            R10, #0x4DD3
STR             R3, [SP,#0x68+var_44]
MOVT            R10, #0x1062
BL              sub_239A4
LDR             R3, [SP,#0x68+var_44]
ADD             R0, SP, #0x68+timer ; timer
LDR             R2, [SP,#0x68+var_48]
MOV             R5, #stderr
SMULL           R10, R11, R3, R10
MOV             R3, R3,ASR#31
STR             R2, [SP,#0x68+timer]
RSB             R4, R3, R11,ASR#6
BL              localtime
MOV             R12, R0
ADD             R0, SP, #0x68+s ; s
LDR             R3, [R12,#0x14]
STR             R4, [SP,#0x68+var_54]
LDR             R2, [R12]
ADD             R3, R3, #0x760
ADD             R3, R3, #0xC
STR             R2, [SP,#0x68+var_58]
MOVW            R2, #:lower16:aD02d02d02d02d0 ; " [%d-%02d-%02d %02d:%02d:%02d.%03d] "
LDR             R1, [R12,#4]
MOVT            R2, #:upper16:aD02d02d02d02d0 ; " [%d-%02d-%02d %02d:%02d:%02d.%03d] "
STR             R1, [SP,#0x68+var_5C]
MOV             R1, #0x40 ; '@' ; maxlen
LDR             LR, [R12,#8]
STR             LR, [SP,#0x68+var_60]
LDR             LR, [R12,#0xC]
STR             LR, [SP,#0x68+var_64]
LDR             R12, [R12,#0x10]
ADD             R12, R12, #1
STR             R12, [SP,#0x68+var_68]
BL              snprintf
LDR             R0, [R5] ; stream
BL              fileno
BL              isatty
CMP             R0, #0
BEQ             loc_210F4

loc_21028
MOV             R4, #byte_68AAC
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_210A0
LDR             R5, [R4,#(dword_68AB0 - 0x68AAC)]
CMP             R5, #0
BEQ             loc_21118

loc_21048               ; s
ADD             R0, SP, #0x68+s
BL              strlen
MOV             R3, R5  ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
ADD             R0, SP, #0x68+s ; ptr
BL              fwrite
MOV             R0, R6  ; s
BL              strlen
LDR             R3, [R4,#(dword_68AB0 - 0x68AAC)] ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
MOV             R0, R6  ; ptr
BL              fwrite
MOV             R2, #1  ; n
MOVW            R0, #:lower16:word_4C858
MOV             R1, R2  ; size
MOVT            R0, #:upper16:word_4C858 ; ptr
LDR             R3, [R4,#(dword_68AB0 - 0x68AAC)] ; s
BL              fwrite
LDR             R0, [R4,#(dword_68AB0 - 0x68AAC)] ; stream
BL              fflush

loc_210A0
MOV             R3, #byte_73378
LDRB            R3, [R3]
CMP             R7, #3
MOVEQ           R7, #0
ANDNE           R7, R3, #1
CMP             R7, #0
BNE             loc_210D0
MOV             R2, R8
MOV             R1, R6
ADD             R0, SP, #0x68+s
BL              sub_21244

loc_210D0
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R8,R10,R11,PC}

loc_210D8
MOVW            R1, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
MOV             R2, R6
ORR             R0, R0, #0x80 ; pri
MOVT            R1, #:upper16:(aApiMcastFromSS+0x14) ; fmt
BL              syslog
ADD             SP, SP, #0x68 ; 'h'
POP             {R4-R8,R10,R11,PC}

loc_210F4
MOVW            R1, #:lower16:aSS_1 ; "%s%s\n"
MOV             R3, R6
MOVT            R1, #:upper16:aSS_1 ; "%s%s\n"
ADD             R2, SP, #0x68+s
LDR             R0, [R5] ; stream
BL              fprintf
LDR             R0, [R5] ; stream
BL              fflush
B               loc_21028

loc_21118
ADD             R1, R4, #8
ADD             R0, R4, #0x28 ; '('
BL              fopen64
CMP             R0, #0
MOV             R5, R0
STR             R0, [R4,#(dword_68AB0 - 0x68AAC)]
BEQ             loc_210A0
B               loc_21048
; End of function sub_20F58




; int __fastcall sub_21138(int)
sub_21138

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4,LR}
MOV             R4, R0
MOVW            R0, #:lower16:stru_766E4
SUB             SP, SP, #0x810
MOVT            R0, #:upper16:stru_766E4 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_21160
ADD             SP, SP, #0x810
POP             {R4,PC}

loc_21160
BL              __errno_location
MOVW            R1, #:lower16:aLoggingC ; "logging.c"
LDR             R3, [R0]
MOVW            R0, #:lower16:aMyLogCurses ; "my_log_curses"
MOVT            R1, #:upper16:aLoggingC ; "logging.c"
MOVT            R0, #:upper16:aMyLogCurses ; "my_log_curses"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x810+var_80C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
STR             R4, [SP,#0x810+var_808]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_21138




; void __fastcall sub_211B0(int, int, int, int, int, int)
sub_211B0
ADD             SP, SP, #0x810
POP             {R4,PC}
; End of function sub_211B0




; int sub_211B8()
sub_211B8

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {LR}
MOVW            R0, #:lower16:stru_766E4
SUB             SP, SP, #0x810
MOVT            R0, #:upper16:stru_766E4 ; mutex
SUB             SP, SP, #4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_211E4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {PC}

loc_211E4
BL              __errno_location
MOVW            R1, #:lower16:aLoggingC ; "logging.c"
LDR             R3, [R0]
MOVW            R0, #:lower16:aMyLogCurses ; "my_log_curses"
MOV             R12, #0x34 ; '4'
MOVT            R0, #:upper16:aMyLogCurses ; "my_log_curses"
MOVT            R1, #:upper16:aLoggingC ; "logging.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#0x814+var_80C]
STR             R0, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP,#0x814+var_814]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_211B8




; void __fastcall sub_21238(int, int, int, int, int)
sub_21238
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {PC}
; End of function sub_21238




; int __fastcall sub_21244(const char *, const char *, int)
sub_21244
CMP             R2, #0
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R6, R1
BNE             loc_21294
MOV             R4, #off_67ED8

loc_21260
BL              sub_211B8
MOVW            R3, #:lower16:asc_4C844 ; "                    "
MOVW            R0, #:lower16:(aXDSSS_0+4) ; "%s%s%s"
MOV             R2, R6
MOV             R1, R5
MOVT            R3, #:upper16:asc_4C844 ; "                    "
MOVT            R0, #:upper16:(aXDSSS_0+4) ; format
BL              printf
MOV             R0, #0x36 ; '6'
BL              sub_21138
LDR             R3, [R4] ; sub_21C98
POP             {R4-R6,LR}
BX              R3      ; sub_21C98

loc_21294
MOVW            R0, #:lower16:stru_766E4
MOVW            R4, #:lower16:off_67ED8
MOVT            R0, #:upper16:stru_766E4 ; mutex
MOVT            R4, #:upper16:off_67ED8
BL              pthread_mutex_trylock
MOV             R0, #0x29 ; ')'
BL              sub_21138
LDR             R3, [R4] ; sub_21C98
BLX             R3      ; sub_21C98
B               loc_21260
; End of function sub_21244




; void __fastcall sub_212BC(int, const char *, int)
sub_212BC
MOVW            R3, #:lower16:byte_74500
PUSH            {R4-R8,LR}
MOVT            R3, #:upper16:byte_74500
MOV             R5, R1
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21334
MOVW            R6, #:lower16:stderr
MOV             R4, R0
MOVT            R6, #:upper16:stderr
MOV             R7, R2
LDR             R0, [R6] ; stream
BL              fileno
BL              isatty
CMP             R0, #0
BEQ             loc_2134C

loc_212FC
MOV             R3, #byte_73378
LDRB            R0, [R3]
CMP             R4, #3
MOVEQ           R0, #0
ANDNE           R0, R0, #1
CMP             R0, #0
POPNE           {R4-R8,PC}
MOVW            R0, #:lower16:(asc_4D5C4+4) ; ""
MOV             R2, R7
MOV             R1, R5
MOVT            R0, #:upper16:(asc_4D5C4+4) ; ""
POP             {R4-R8,LR}
B               sub_21244

loc_21334
MOVW            R1, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
MOV             R2, R5
ORR             R0, R0, #0x80
MOVT            R1, #:upper16:(aApiMcastFromSS+0x14) ; "%s"
POP             {R4-R8,LR}
B               syslog

loc_2134C
MOVW            R1, #:lower16:(aPidofSCommandR+0x1C) ; "%s\n"
MOV             R2, R5
MOVT            R1, #:upper16:(aPidofSCommandR+0x1C) ; format
LDR             R0, [R6] ; stream
BL              fprintf
LDR             R0, [R6] ; stream
BL              fflush
B               loc_212FC
; End of function sub_212BC

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R6, R0
MOV             R7, R1
MOV             R0, #1
MOV             R1, #0x20 ; ' '
MOVW            R5, #:lower16:aDupalloc ; "dupalloc"
BL              calloc
SUBS            R4, R0, #0
MOVT            R5, #:upper16:aDupalloc ; "dupalloc"
BEQ             loc_213F4

loc_2139C
MOVW            R3, #:lower16:aNoncedupC ; "noncedup.c"
MOV             R2, #0x27 ; '''
MOVT            R3, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R1, #1
MOVW            R0, #:lower16:aNonces ; "Nonces"
STR             R7, [R4]
MOVT            R0, #:upper16:aNonces ; "Nonces"
STR             R3, [SP,#4]
STR             R2, [SP,#0xC]
MOV             R3, #0
MOV             R2, #0x400
STR             R1, [SP]
STR             R5, [SP,#8]
MOV             R1, #0x10
BL              sub_200F8
STR             R0, [R4,#4]
BL              sub_20050
STR             R4, [R6,#0x18]
STR             R0, [R4,#8]
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_213F4
MOV             R1, #0x24 ; '$'
MOVW            R3, #:lower16:aNoncedupC ; "noncedup.c"
MOVW            R2, #:lower16:aFailedToCalloc_3 ; "Failed to calloc dupdata in %s %s():%d"
STR             R1, [SP,#4]
MOVT            R3, #:upper16:aNoncedupC ; "noncedup.c"
STR             R5, [SP]
ADD             R0, SP, #0x10
MOVT            R2, #:upper16:aFailedToCalloc_3 ; "Failed to calloc dupdata in %s %s():%d"
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x10
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_2139C



; __int64 __fastcall sub_21438(int, _QWORD *, _QWORD *)
sub_21438
LDR             R3, [R0,#0x18]
MOV             R12, R1
CMP             R3, #0
BEQ             loc_2145C
LDRD            R0, R1, [R3,#0x10]
STRD            R0, R1, [R12]
LDRD            R0, R1, [R3,#0x18]
STRD            R0, R1, [R2]
BX              LR

loc_2145C
MOV             R0, #0
MOV             R1, #0
STRD            R0, R1, [R12]
STRD            R0, R1, [R2]
BX              LR
; End of function sub_21438

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x820
LDR             R4, [R0,#0x18]
SUB             SP, SP, #4
CMP             R4, #0
MOVEQ           R6, R4
BEQ             loc_216FC
STR             R0, [SP,#0x10]
ADD             R0, SP, #0x18
MOV             R9, R2
MOV             R8, R1
BL              sub_239A4
LDR             R3, [R4,#0x10]
LDR             R2, [R4,#0x14]
LDR             R1, [R4,#4]
ADDS            R3, R3, #1
ADC             R2, R2, #0
STR             R3, [R4,#0x10]
STR             R2, [R4,#0x14]
LDR             R5, [R1,#8]
MOV             R0, R5
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2171C

loc_214D0
ADD             R0, R5, #0x18
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_21770

loc_214E0
LDR             R3, [R4,#8]
MOVW            R11, #:lower16:byte_74500
MOVW            R10, #:lower16:aSDDuplicateNon ; "%s%d: Duplicate nonce %08x"
MOVW            R2, #:lower16:byte_68BD4
MOVT            R11, #:upper16:byte_74500
MOVT            R10, #:upper16:aSDDuplicateNon ; "%s%d: Duplicate nonce %08x"
LDR             R5, [R3,#0x10]
MOV             R7, #1
MOVT            R2, #:upper16:byte_68BD4
STR             R2, [SP,#0x14]

loc_21508
CMP             R5, #0
MOVEQ           R6, #0
ANDNE           R6, R7, #1
CMP             R6, #0
BEQ             loc_215AC
LDR             R3, [R5,#0xC]
MOV             R7, R6
LDR             R2, [R8,#0x154]
LDR             R1, [R3]
CMP             R1, R2
BEQ             loc_2153C

loc_21534
LDR             R5, [R5,#4]
B               loc_21508

loc_2153C
LDR             R3, [R3,#4]
CMP             R3, R9
BNE             loc_21534
LDRB            R3, [R11]
MOV             R2, R10
MOV             R1, #0x800
ADD             R0, SP, #0x20 ; ' '
CMP             R3, #0
BNE             loc_21578
LDR             R12, [SP,#0x14]
MOV             R3, #dword_67DB4
LDRB            R7, [R12]
CMP             R7, #0
BEQ             loc_2170C

loc_21578
LDR             R12, [SP,#0x10]
MOV             R7, #0
LDR             R3, [R12,#4]
LDR             R12, [R12,#8]
LDR             R3, [R3,#8]
STR             R9, [SP,#4]
STR             R12, [SP]
BL              snprintf
MOV             R2, R7
ADD             R1, SP, #0x20 ; ' '
MOV             R0, #4
BL              sub_20F58
B               loc_21508

loc_215AC
CMP             R7, #0
BEQ             loc_21618
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
MOV             R3, #0x51 ; 'Q'
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
LDR             R2, =aIsdupnonce ; "isdupnonce"
LDR             R0, [R4,#4]
BL              sub_203A8
LDR             R1, [R8,#0x154]
ADD             LR, SP, #0x18
LDR             R3, [R0,#0xC]
MOV             R12, R0
MOV             R8, #0x55 ; 'U'
MOV             R2, #aNoncedupC ; "noncedup.c"
STR             R1, [R3]
LDR             R1, [R0,#0xC]
LDR             R3, =aIsdupnonce ; "isdupnonce"
STR             R9, [R1,#4]
LDR             R5, [R0,#0xC]
LDM             LR!, {R0,R1}
STR             R1, [R5,#0xC]
MOV             R1, R12
STR             R0, [R5,#8]
LDR             R0, [R4,#8]
STR             R8, [SP]
BL              sub_20524

loc_21618
LDR             R3, [R4,#8]
LDR             R3, [R3,#0x10]
CMP             R3, #0
BEQ             loc_216A0
MOVW            R5, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R8, =aIsdupnonce ; "isdupnonce"
MOVT            R5, #:upper16:aNoncedupC ; "noncedup.c"
B               loc_21670

loc_21638
LDR             R0, [R4,#8]
BL              sub_2045C
LDR             R12, [R4,#4]
MOV             R3, #0x5A ; 'Z'
MOV             R1, R0
STR             R3, [SP]
MOV             R2, R5
MOV             R3, R8
MOV             R0, R12
BL              sub_20524
LDR             R3, [R4,#8]
LDR             R3, [R3,#0x10]
CMP             R3, #0
BEQ             loc_216A0

loc_21670
LDR             R0, [R3,#0xC]
ADD             R1, SP, #0x18
ADD             R0, R0, #8
BL              sub_23C94
VLDR            S15, [R4]
MOV             R3, #0x59 ; 'Y'
MOV             R2, R8
MOV             R1, R5
VCVT.F64.S32    D7, S15
VCMPE.F64       D0, D7
VMRS            APSR_nzcv, FPSCR
BGT             loc_21638

loc_216A0
LDR             R3, [R4,#4]
LDR             R5, [R3,#8]
ADD             R0, R5, #0x18
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_21818

loc_216B8
MOV             R0, R5
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_217C4

loc_216C8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R7, #0
BNE             loc_216FC
LDR             R3, [R4,#0x18]
MOV             R6, #1
LDR             R2, [R4,#0x1C]
ADDS            R3, R3, R6
ADC             R2, R2, #0
STR             R3, [R4,#0x18]
STR             R2, [R4,#0x1C]

loc_216FC
MOV             R0, R6
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2170C
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_21508
B               loc_21578

loc_2171C
BL              __errno_location
LDR             R12, =aIsdupnonce ; "isdupnonce"
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R0, #0x46 ; 'F'
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x20 ; ' '
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x20 ; ' '
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_214D0

loc_21770
BL              __errno_location
LDR             R12, =aIsdupnonce ; "isdupnonce"
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R0, #0x46 ; 'F'
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x20 ; ' '
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x20 ; ' '
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_214E0

loc_217C4
BL              __errno_location
LDR             R12, =aIsdupnonce ; "isdupnonce"
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R0, #0x5D ; ']'
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x20 ; ' '
BL              snprintf
ADD             R1, SP, #0x20 ; ' '
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_216C8

loc_21818
BL              __errno_location
LDR             R12, =aIsdupnonce ; "isdupnonce"
MOVW            R1, #:lower16:aNoncedupC ; "noncedup.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aNoncedupC ; "noncedup.c"
MOV             R0, #0x5D ; ']'
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x20 ; ' '
BL              snprintf
MOV             R2, #1
ADD             R1, SP, #0x20 ; ' '
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_216B8
off_2186C DCD aIsdupnonce ; "isdupnonce"



; int __fastcall sub_21870(int result, unsigned __int8 *, int)
sub_21870

var_168= -0x168
var_164= -0x164
var_160= -0x160
var_15C= -0x15C
var_158= -0x158
var_154= -0x154
var_150= -0x150
var_14C= -0x14C
var_148= -0x148
var_144= -0x144
var_140= -0x140
var_13C= -0x13C
var_138= -0x138
var_134= -0x134
var_130= -0x130
var_12C= -0x12C
var_128= -0x128
var_EC= -0xEC
var_68= -0x68

CMP             R2, #0
BXLE            LR
MOVW            R3, #:lower16:dword_67DB8
PUSH            {R4-R11,LR}
MOVT            R3, #:upper16:dword_67DB8
SUB             SP, SP, #0x144
ADD             R2, R1, R2,LSL#6
STR             R3, [SP,#0x168+var_168]
ADD             R3, R0, #0x88
STR             R3, [SP,#0x168+var_150]
ADD             R3, R0, #0xA8
STR             R1, [SP,#0x168+var_164]
STR             R2, [SP,#0x168+var_154]
STR             R3, [SP,#0x168+var_14C]

loc_218A8
LDR             R0, [SP,#0x168+var_164]
ADD             LR, SP, #0x168+var_12C
ADD             R12, SP, #0x168+var_128

loc_218B4
LDRB            R3, [R0,#1]
LDRB            R4, [R0,#2]
LDRB            R1, [R0,#3]
LDRB            R2, [R0],#4
MOV             R3, R3,LSL#16
ORR             R3, R3, R4,LSL#8
ORR             R3, R3, R1
ORR             R3, R3, R2,LSL#24
STR             R3, [LR,#4]!
ADD             R3, SP, #0x168+var_EC
CMP             R3, LR
BNE             loc_218B4

loc_218E4
LDR             LR, [R12,#0x38]
MOV             R3, R12
LDR             R0, [R12,#4]!
ADD             R2, SP, #0x168+var_68
LDR             R1, [R3,#0x24]
LDR             R4, [R3]
MOV             R3, LR,ROR#19
CMP             R2, R12
MOV             R2, R0,ROR#18
EOR             R3, R3, LR,ROR#17
ADD             R1, R1, R4
EOR             R2, R2, R0,ROR#7
EOR             R3, R3, LR,LSR#10
EOR             R2, R2, R0,LSR#3
ADD             R3, R3, R1
ADD             R3, R3, R2
STR             R3, [R12,#0x3C]
BNE             loc_218E4
LDR             R0, [SP,#0x168+var_14C]
ADD             R3, SP, #0x168+var_14C
LDR             R2, [SP,#0x168+var_150]
STR             R3, [SP,#0x168+var_15C]
STR             R2, [SP,#0x168+var_158]

loc_21940
LDR             R1, [R2],#4
CMP             R0, R2
STR             R1, [R3,#4]!
BNE             loc_21940
STR             R2, [SP,#0x168+var_160]
MOV             R6, #0
LDR             R3, [SP,#0x168+var_12C]
LDR             R4, [SP,#0x168+var_138]
LDR             R10, [SP,#0x168+var_134]
LDR             R9, [SP,#0x168+var_130]
LDR             R5, [SP,#0x168+var_148]
LDR             R8, [SP,#0x168+var_144]
LDR             R7, [SP,#0x168+var_140]
LDR             R11, [SP,#0x168+var_13C]
B               loc_21994

loc_2197C
MOV             R7, R8
MOV             R9, R10
MOV             R8, R5
MOV             R10, R4
MOV             R5, R1
MOV             R4, LR

loc_21994
MOV             R0, R4,ROR#11
AND             R12, R10, R4
BIC             R2, R9, R4
MOV             R1, R5,ROR#13
EOR             R0, R0, R4,ROR#6
EOR             R2, R2, R12
ADD             R12, SP, #0x168+var_128
EOR             R1, R1, R5,ROR#2
EOR             R0, R0, R4,ROR#25
LDR             LR, [R12,R6,LSL#2]
EOR             R1, R1, R5,ROR#22
ADD             R2, R0, R2
LDR             R0, [SP,#0x168+var_168]
ADD             R2, R2, LR
LDR             R12, [R0,R6,LSL#2]
EOR             R0, R7, R8
ADD             R6, R6, #1
AND             R0, R0, R5
CMP             R6, #0x40 ; '@'
ADD             R2, R2, R12
AND             R12, R7, R8
EOR             R0, R0, R12
ADD             R3, R2, R3
ADD             R1, R1, R0
ADD             LR, R11, R3
ADD             R1, R1, R3
MOV             R11, R7
MOV             R3, R9
BNE             loc_2197C
STR             R1, [SP,#0x168+var_148]
LDR             R12, [SP,#0x168+var_160]
LDR             R1, [SP,#0x168+var_15C]
LDR             R3, [SP,#0x168+var_158]
STR             R9, [SP,#0x168+var_12C]
STR             LR, [SP,#0x168+var_138]
STR             R4, [SP,#0x168+var_134]
STR             R10, [SP,#0x168+var_130]
STR             R5, [SP,#0x168+var_144]
STR             R8, [SP,#0x168+var_140]
STR             R7, [SP,#0x168+var_13C]

loc_21A34
LDR             R0, [R3]
LDR             R2, [R1,#4]!
ADD             R2, R2, R0
STR             R2, [R3],#4
CMP             R12, R3
BNE             loc_21A34
LDR             R3, [SP,#0x168+var_164]
LDR             R2, [SP,#0x168+var_154]
ADD             R3, R3, #0x40 ; '@'
CMP             R2, R3
STR             R3, [SP,#0x168+var_164]
BNE             loc_218A8
ADD             SP, SP, #0x144
POP             {R4-R11,PC}
; End of function sub_21870




; _DWORD *__fastcall sub_21A6C(_DWORD *result)
sub_21A6C
LDR             R2, =unk_67EB4
ADD             R3, R0, #0x88
ADD             R12, R0, #0xA8

loc_21A78
LDR             R1, [R2,#4]!
STR             R1, [R3],#4
CMP             R3, R12
BNE             loc_21A78
MOV             R3, #0
STR             R3, [R0,#4]
STR             R3, [R0]
BX              LR
; End of function sub_21A6C

off_21A98 DCD unk_67EB4



; void *__fastcall sub_21A9C(unsigned __int8 *, char *, size_t n)
sub_21A9C
PUSH            {R4-R10,LR}
MOV             R4, R0
LDR             R0, [R0,#4]
MOV             R5, R2
MOV             R7, R1
RSB             R2, R0, #0x40 ; '@'
ADD             R0, R0, #8
CMP             R2, R5
ADD             R0, R4, R0 ; dest
MOVCC           R6, R2
MOVCS           R6, R5
MOV             R2, R6  ; n
BL              memcpy
LDR             R3, [R4,#4]
ADD             R3, R5, R3
CMP             R3, #0x3F ; '?'
BHI             loc_21AE8
STR             R3, [R4,#4]
POP             {R4-R10,PC}

loc_21AE8
SUB             R5, R5, R6
ADD             R9, R4, #8
ADD             R6, R7, R6
MOV             R7, R5,LSR#6
MOV             R1, R9
MOV             R2, #1
MOV             R0, R4
BL              sub_21870
AND             R8, R5, #0x3F ; '?'
MOV             R2, R7
MOV             R1, R6
MOV             R0, R4
BIC             R5, R5, #0x3F ; '?'
ADD             R7, R7, #1
BL              sub_21870
MOV             R0, R9  ; dest
ADD             R1, R6, R5 ; src
MOV             R2, R8  ; n
BL              memcpy
LDR             R3, [R4]
STR             R8, [R4,#4]
ADD             R7, R3, R7,LSL#6
STR             R7, [R4]
POP             {R4-R10,PC}
; End of function sub_21A9C




; int __fastcall sub_21B48(_DWORD *, _BYTE *)
sub_21B48

var_8= -8

PUSH            {R4-R11,LR}
MOV             R6, R0
LDR             R3, [R0,#4]
MOV             R5, R0
SUB             SP, SP, #0xC
MOV             R4, R1
LDR             R7, [R6],#8
MOV             R1, #0  ; c
AND             R2, R3, #0x3F ; '?'
CMP             R2, #0x38 ; '8'
MOVCC           R2, #0x40 ; '@'
MOVCS           R2, #0x80
ADD             R7, R3, R7
SUB             R2, R2, R3 ; n
ADD             R0, R6, R3 ; s
MOVCC           R3, #0x3C ; '<'
MOVCS           R3, #0x7C ; '|'
MOV             R7, R7,LSL#3
MOVCC           R8, #0x3D ; '='
STR             R3, [SP,#0xC+var_8]
MOVCS           R8, #0x7D ; '}'
MOVCC           R9, #0x3E ; '>'
MOVCS           R9, #0x7E ; '~'
MOVCC           R10, #0x3F ; '?'
MOVCS           R10, #0x7F
MOVCC           R11, #1
MOVCS           R11, #2
BL              memset
LDR             R1, [R5,#4]
MOV             LR, R7,LSR#8
MOV             R12, R7,LSR#16
MOV             R0, #0xFFFFFF80
MOV             R3, R7,LSR#24
MOV             R2, R11
ADD             R1, R5, R1
STRB            R0, [R1,#8]
MOV             R0, R5
STRB            R7, [R6,R10]
MOV             R1, R6
STRB            LR, [R6,R9]
STRB            R12, [R6,R8]
LDR             R12, [SP,#0xC+var_8]
STRB            R3, [R6,R12]
BL              sub_21870
ADD             R3, R5, #0x88
ADD             R5, R5, #0xA8

loc_21C00
LDR             R2, [R3]
STRB            R2, [R4,#3]
LDR             R2, [R3],#4
CMP             R5, R3
MOV             R2, R2,LSR#8
STRB            R2, [R4,#2]
LDRH            R2, [R3,#-2]
STRB            R2, [R4,#1]
LDRB            R2, [R3,#-1]
STRB            R2, [R4],#4
BNE             loc_21C00
ADD             SP, SP, #0xC
POP             {R4-R11,PC}
; End of function sub_21B48




; int __fastcall sub_21C34(char *, size_t n, _BYTE *)
sub_21C34

var_A8= -0xA8
var_24= -0x24
var_4= -4

LDR             R3, =unk_67EB4
PUSH            {R4,R5,LR}
SUB             SP, SP, #0xAC
MOV             R5, R2
ADD             R2, SP, #0xAC+var_24
ADD             LR, R3, #0x20 ; ' '

loc_21C4C
LDR             R12, [R3,#4]!
CMP             R3, LR
STR             R12, [R2],#4
BNE             loc_21C4C
MOV             R3, #0
ADD             R4, SP, #0xAC+var_4
STR             R3, [R4,#-0xA8]!
MOV             R2, R1  ; n
MOV             R1, R0  ; int
MOV             R0, R4  ; int
STR             R3, [SP,#0xAC+var_A8]
BL              sub_21A9C
MOV             R1, R5
MOV             R0, R4
BL              sub_21B48
ADD             SP, SP, #0xAC
POP             {R4,R5,PC}
; End of function sub_21C34

off_21C90 DCD unk_67EB4
ALIGN 8



; int sub_21C98()
sub_21C98
MOV             R0, #0
BX              LR
; End of function sub_21C98




; int __fastcall sub_21CA0(int, char *s, int)
sub_21CA0

timeout= -0x82C
n= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
writefds= -0x804
var_C= -0xC

MOVW            R3, #:lower16:byte_73398
PUSH            {R4-R11,LR}
MOVT            R3, #:upper16:byte_73398
SUB             SP, SP, #0x820
SUB             SP, SP, #0xC
MOV             R11, R1
LDRB            R3, [R3]
MOV             R4, R2
STR             R0, [SP,#0x82C+var_810]
LDR             R8, [R0,#0x24C]
CMP             R3, #0
BEQ             loc_21CE4
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21E78

loc_21CE4
ADD             R3, R4, #1
MOV             R0, R11 ; s
MOV             R4, R3
STR             R3, [SP,#0x82C+n]
BL              strlen
MOVW            R3, #:lower16:word_4C858
CMP             R4, #0
MOVT            R3, #:upper16:word_4C858
LDRH            R3, [R3]
STRH            R3, [R11,R0]
BLE             loc_21F00
CMP             R8, #0
ADD             R3, R8, #0x1F
MOVGE           R3, R8
RSBS            R2, R8, #0
AND             R2, R2, #0x1F
AND             R9, R8, #0x1F
MOV             R3, R3,ASR#5
RSBPL           R9, R2, #0
MOV             R2, #1
ADD             R6, SP, #0x82C+writefds
MOV             R9, R2,LSL R9
MOV             R3, R3,LSL#2
ADD             R8, R8, R2
ADD             R5, R6, #0x7C ; '|'
STR             R2, [SP,#0x82C+var_818]
ADD             R10, SP, #0x82C+var_80C
MOV             R4, #0
STR             R3, [SP,#0x82C+var_814]
STR             R4, [SP,#0x82C+var_81C]

loc_21D5C
LDR             R2, [SP,#0x82C+var_814]
ADD             R3, SP, #0x82C+var_C
ADD             R3, R3, #8
STR             R4, [SP,#0x82C+var_80C.tv_usec]
ADD             R7, R3, R2
LDR             R3, [SP,#0x82C+var_818]
STR             R3, [SP,#0x82C+var_80C]

loc_21D78
SUB             R3, R6, #4

loc_21D7C
STR             R4, [R3,#4]!
CMP             R5, R3
BNE             loc_21D7C
LDR             R12, [R7,#-0x800]
MOV             R3, #0  ; exceptfds
STR             R10, [SP,#0x82C+timeout] ; timeout
MOV             R1, R3  ; readfds
MOV             R2, R6  ; writefds
MOV             R0, R8  ; nfds
ORR             R12, R12, R9
STR             R12, [R7,#-0x800]
BL              select
CMP             R0, #0
BGT             loc_21DD4
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_21D78
MOV             R0, #1

loc_21DC8
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_21DD4
LDR             R7, [SP,#0x82C+var_81C]
MOV             R3, #0x4000 ; flags
LDR             R0, [SP,#0x82C+var_810]
LDR             R2, [SP,#0x82C+n] ; n
ADD             R1, R11, R7 ; buf
LDR             R0, [R0,#0x24C] ; fd
BL              send
CMP             R0, #0
BLT             loc_21ED0
LDR             R3, [SP,#0x82C+n]
ADD             R2, R7, R0
STR             R2, [SP,#0x82C+var_81C]
SUB             R3, R3, R0
CMP             R3, #0
STR             R3, [SP,#0x82C+n]
BGT             loc_21D5C

loc_21E14
LDR             R4, [SP,#0x82C+var_81C]
MOV             R5, R4,ASR#31

loc_21E1C
LDR             R3, [SP,#0x82C+var_810]
MOV             R0, #0
LDR             R2, [R3,#0x1F0]
LDR             R12, [R3,#0x1F4]
LDR             R1, [R3,#0x1F8]
ADDS            R2, R2, #1
LDR             LR, [R3,#0x1FC]
ADC             R12, R12, R0
STR             R2, [R3,#0x1F0]
LDR             R2, [R3,#0x200]
ADDS            R1, R1, R4
STR             R12, [R3,#0x1F4]
ADC             LR, LR, R5
LDR             R12, [R3,#0x204]
ADDS            R2, R2, R4
STR             R1, [R3,#0x1F8]
STR             LR, [R3,#0x1FC]
ADC             R1, R12, R5
STR             R2, [R3,#0x200]
STR             R1, [R3,#0x204]
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_21E78
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21EA0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_21EE8

loc_21EA0
ADD             R6, SP, #0x82C+writefds
MOVW            R2, #:lower16:aSendS ; "SEND: %s"
MOV             R0, R6  ; s
MOVT            R2, #:upper16:aSendS ; "SEND: %s"
MOV             R3, R11
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_21CE4

loc_21ED0
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #0xB
BEQ             loc_21D5C
MOV             R0, #2
B               loc_21DC8

loc_21EE8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_21CE4
B               loc_21EA0

loc_21F00
MOV             R4, #0
MOV             R5, #0
B               loc_21E1C
; End of function sub_21CA0




; int __fastcall sub_21F0C(const char **, int, int)
sub_21F0C

var_C10= -0xC10
var_C0C= -0xC0C
var_C08= -0xC08
s= -0xC00
var_BFF= -0xBFF
var_BFE= -0xBFE
var_BFD= -0xBFD
buf= -0x800
var_s0=  0

CMP             R2, #0
PUSH            {R4-R10,LR}
MOV             R8, R0
SUB             SP, SP, #0xC10
MOV             R6, R1
ADD             R4, SP, #0xC10+s
LDR             R0, [R0,#0x258]
LDR             R1, [R8,#0x248]
BEQ             loc_22130
MOVW            R2, #:lower16:aConnectSSHttp1 ; "CONNECT %s:%s HTTP/1.0\r\n\r\n"
STR             R1, [SP,#0xC10+var_C10]
MOV             R3, R0
MOVT            R2, #:upper16:aConnectSSHttp1 ; "CONNECT %s:%s HTTP/1.0\r\n\r\n"
MOV             R0, R4  ; s
MOV             R1, #0x400 ; maxlen
BL              snprintf

loc_21F4C
MOV             R9, #byte_68BD5
LDRB            R3, [R9]
CMP             R3, #0
BEQ             loc_21FC0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_21F88
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2230C

loc_21F88
LDR             R1, [R8,#0x260]
ADD             R5, SP, #0xC10+buf
MOVW            R2, #:lower16:aSendingProxySS ; "Sending proxy %s:%s - %s"
LDR             R3, [R8,#0x25C]
MOVT            R2, #:upper16:aSendingProxySS ; "Sending proxy %s:%s - %s"
STR             R4, [SP,#0xC10+var_C0C]
STR             R1, [SP,#0xC10+var_C10]
MOV             R0, R5  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_21FC0               ; s
MOV             R0, R4
BL              strlen
MOV             R3, #0  ; flags
MOV             R2, R0  ; n
MOV             R1, R4  ; buf
MOV             R0, R6  ; fd
BL              send
MOV             R3, #0  ; flags
MOV             R2, #0xC ; n
MOV             R1, R4  ; buf
MOV             R0, R6  ; fd
BL              recv
CMP             R0, #0
BLE             loc_22280
LDRB            R3, [R9]
ADD             R2, SP, #0xC10+var_s0
ADD             R0, R2, R0
MOV             R2, #0
STRB            R2, [R0,#-0xC00]
CMP             R3, R2
BEQ             loc_22074
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, R2
BNE             loc_2203C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R2
BEQ             loc_22324

loc_2203C
LDR             R1, [R8,#0x260]
ADD             R5, SP, #0xC10+buf
MOVW            R2, #:lower16:aReceivedFromPr ; "Received from proxy %s:%s - %s"
LDR             R3, [R8,#0x25C]
MOVT            R2, #:upper16:aReceivedFromPr ; "Received from proxy %s:%s - %s"
STR             R4, [SP,#0xC10+var_C0C]
STR             R1, [SP,#0xC10+var_C10]
MOV             R0, R5  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_22074
MOVW            R1, #:lower16:aHttp11200 ; "HTTP/1.1 200"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aHttp11200 ; "HTTP/1.1 200"
BL              strcmp
SUBS            R7, R0, #0
BNE             loc_22158

loc_2208C
ADD             R5, SP, #0xC10+buf

loc_22090               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R5  ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_22270
LDRB            R3, [SP,#0xC10+buf]
CMP             R3, #0xFF
STRB            R3, [R4,R7]
ADD             R7, R7, #1
BEQ             loc_221F4
CMP             R7, #4
BNE             loc_22090
MOV             R7, #asc_4D5C4 ; "\r\n\r\n"

loc_220D0               ; n
MOV             R2, #4
MOV             R1, R7  ; s2
MOV             R0, R4  ; s1
BL              strncmp
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
CMP             R0, R3
MOV             R1, R5  ; buf
MOV             R0, R6  ; fd
BEQ             loc_2233C
LDRB            R10, [SP,#0xC10+var_BFF]
LDRB            LR, [SP,#0xC10+var_BFE]
LDRB            R12, [SP,#0xC10+var_BFD]
STRB            R10, [SP,#0xC10+s]
STRB            LR, [SP,#0xC10+var_BFF]
STRB            R12, [SP,#0xC10+var_BFE]
BL              recv
CMN             R0, #1
BEQ             loc_221F0
LDRB            R3, [SP,#0xC10+buf]
CMP             R3, #0xFF
STRB            R3, [SP,#0xC10+var_BFD]
BNE             loc_220D0
B               loc_221F4

loc_22130
MOVW            R2, #:lower16:aConnectSSHttp1_0 ; "CONNECT %s:%s HTTP/1.1\r\nHost: %s:%s\r"...
STR             R1, [SP,#0xC10+var_C08]
MOV             R3, R0
STR             R0, [SP,#0xC10+var_C0C]
STR             R1, [SP,#0xC10+var_C10]
MOV             R0, R4  ; s
MOVT            R2, #:upper16:aConnectSSHttp1_0 ; "CONNECT %s:%s HTTP/1.1\r\nHost: %s:%s\r"...
MOV             R1, #0x400 ; maxlen
BL              snprintf
B               loc_21F4C

loc_22158
MOVW            R1, #:lower16:aHttp10200 ; "HTTP/1.0 200"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aHttp10200 ; "HTTP/1.0 200"
BL              strcmp
SUBS            R7, R0, #0
BEQ             loc_2208C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_221AC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_221AC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_222BC

loc_221AC
LDR             R1, [R8,#0x260]
MOVW            R2, #:lower16:aHttpErrorFromP ; "HTTP Error from proxy %s:%s - %s"
LDR             R3, [R8,#0x25C]
ADD             R0, SP, #0xC10+buf ; s
STR             R4, [SP,#0xC10+var_C0C]
MOVT            R2, #:upper16:aHttpErrorFromP ; "HTTP Error from proxy %s:%s - %s"
STR             R1, [SP,#0xC10+var_C10]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0xC10+buf
MOV             R4, R2
MOV             R0, #4
BL              sub_20F58
MOV             R0, R4
ADD             SP, SP, #0xC10
POP             {R4-R10,PC}

loc_221F0
STRB            R0, [SP,#0xC10+var_BFD]

loc_221F4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22230
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22230
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_222BC

loc_22230
LDR             R12, [R8,#0x260]
MOVW            R2, #:lower16:aCouldnTReadHtt ; "Couldn't read HTTP byte from proxy %s:%"...
LDR             R3, [R8,#0x25C]
MOVT            R2, #:upper16:aCouldnTReadHtt ; "Couldn't read HTTP byte from proxy %s:%"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STR             R12, [SP,#0xC10+var_C10]
MOV             R4, #0
BL              snprintf
MOV             R1, R5
MOV             R2, R4
MOV             R0, #4
BL              sub_20F58

loc_22264
MOV             R0, R4
ADD             SP, SP, #0xC10
POP             {R4-R10,PC}

loc_22270
ADD             R3, SP, #0xC10+var_s0
ADD             R7, R3, R7
STRB            R0, [R7,#-0xC00]
B               loc_221F4

loc_22280
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_222CC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_222CC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_222CC

loc_222BC
MOV             R4, #0
MOV             R0, R4
ADD             SP, SP, #0xC10
POP             {R4-R10,PC}

loc_222CC
LDR             R12, [R8,#0x260]
MOVW            R2, #:lower16:aCouldnTReadFro ; "Couldn't read from proxy %s:%s after se"...
LDR             R3, [R8,#0x25C]
MOV             R4, #0
ADD             R0, SP, #0xC10+buf ; s
MOVT            R2, #:upper16:aCouldnTReadFro ; "Couldn't read from proxy %s:%s after se"...
STR             R12, [SP,#0xC10+var_C10]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0xC10+buf
MOV             R2, R4
MOV             R0, #4
BL              sub_20F58
MOV             R0, R4
ADD             SP, SP, #0xC10
POP             {R4-R10,PC}

loc_2230C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_21FC0
B               loc_21F88

loc_22324
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_22074
B               loc_2203C

loc_2233C
LDRB            R4, [R9]
CMP             R4, #0
MOVEQ           R4, #1
BEQ             loc_22264
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22374
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_223A8

loc_22374
LDR             R12, [R8,#0x260]
MOVW            R2, #:lower16:aSuccessNegotia ; "Success negotiating with %s:%s HTTP pro"...
LDR             R3, [R8,#0x25C]
MOVT            R2, #:upper16:aSuccessNegotia ; "Success negotiating with %s:%s HTTP pro"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STR             R12, [SP,#0xC10+var_C10]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_22264

loc_223A8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_22374
B               loc_22264
; End of function sub_21F0C




; int __fastcall sub_223C0(int)
sub_223C0
PUSH            {R4,LR}
MOV             R4, R0
LDR             R3, [R0,#0x250]
CMP             R3, #0
MOVNE           R2, #0
STRBNE          R2, [R3]
MOV             R3, #0
LDR             R0, [R0,#0x24C] ; fd
STRB            R3, [R4,#0x283]
STRB            R3, [R4,#0x281]
CMP             R0, R3
BEQ             loc_223F4
BL              close

loc_223F4
MOV             R3, #0
STR             R3, [R4,#0x24C]
POP             {R4,PC}
; End of function sub_223C0




; int __fastcall sub_22400(int)
sub_22400
PUSH            {R4,LR}
MOV             R2, #0
MOV             R4, R0
MOV             R1, #3  ; cmd
BL              fcntl
MOV             R1, #4  ; cmd
BIC             R2, R0, #0x800
MOV             R0, R4  ; fd
POP             {R4,LR}
B               fcntl
; End of function sub_22400




; bool __fastcall sub_22428(int, int)
sub_22428

timeout= -0x90
var_88= -0x88
readfds= -0x80
var_s0=  0

PUSH            {R4,LR}
BIC             R1, R1, R1,ASR#31
SUB             SP, SP, #0x90
ADD             R3, SP, #0x90+var_88.tv_usec
ADD             R12, SP, #0x90+readfds.__fds_bits+0x7C
MOV             R2, #0

loc_22440
STR             R2, [R3,#4]!
CMP             R12, R3
BNE             loc_22440
CMP             R0, #0
ADD             R12, R0, #0x1F
MOVGE           R12, R0
STR             R2, [SP,#0x90+var_88.tv_usec]
MOV             R12, R12,ASR#5
ADD             R2, SP, #0x90+var_s0
RSBS            R3, R0, #0
STR             R1, [SP,#0x90+var_88]
ADD             R12, R2, R12,LSL#2
AND             R3, R3, #0x1F
AND             R4, R0, #0x1F
LDR             LR, [R12,#-0x80]
RSBPL           R4, R3, #0
MOV             R2, #1
ADD             R3, SP, #0x90+var_88
STR             R3, [SP,#0x90+timeout] ; timeout
MOV             R3, #0  ; exceptfds
ADD             R0, R0, R2 ; nfds
ADD             R1, SP, #0x90+readfds ; readfds
ORR             LR, LR, R2,LSL R4
MOV             R2, R3  ; writefds
STR             LR, [R12,#-0x80]
BL              select
CMP             R0, #0
MOVLE           R0, #0
MOVGT           R0, #1
ADD             SP, SP, #0x90
POP             {R4,PC}
; End of function sub_22428




; _DWORD *__fastcall sub_224BC(_DWORD *, unsigned int)
sub_224BC
SUBS            R3, R0, #0
BEQ             loc_22518
LDR             R2, [R3]
CMP             R2, #1
BNE             loc_22518
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R3
BL              sub_48468
CMP             R0, R5
BCC             loc_22510
MOV             R1, R5
MOV             R0, R4
BL              sub_48484
SUBS            R3, R0, #0
BEQ             loc_22510
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_22510
POP             {R4-R6,LR}
B               sub_48630

loc_22510
MOV             R0, #0
POP             {R4-R6,PC}

loc_22518
MOV             R0, #0
BX              LR
; End of function sub_224BC




; char *__fastcall sub_22520(_DWORD *, unsigned int)
sub_22520
PUSH            {R4,LR}
BL              sub_224BC
CMP             R0, #0
POPEQ           {R4,PC}
POP             {R4,LR}
B               __strdup
; End of function sub_22520



; Attributes: noreturn

; void __fastcall __noreturn sub_22538(const void *, const char *, const char *, int)
sub_22538

var_814= -0x814
var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R6, R2
MOV             R7, R3
MOV             R4, R0
BL              __errno_location
MOVW            R2, #:lower16:aFailedToSemPos ; "Failed to sem_post errno=%d cgsem=0x%p "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToSemPos ; "Failed to sem_post errno=%d cgsem=0x%p "...
STR             R7, [SP,#0x814+var_808]
STR             R6, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
STRD            R4, R5, [SP,#0x814+var_814]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_22538




; void __fastcall sub_22594(int, int, int, int, int, int, int, int, int)
sub_22594
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}
; End of function sub_22594




; int __fastcall sub_225A0(const char *, const char *, int)
sub_225A0

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0x810
MOV             R6, R1
MOV             R5, R2
BEQ             loc_2268C
BL              strlen
CMP             R0, #0
BEQ             loc_22680
LDRB            R3, [R4]
MOV             LR, #dword_4C8CC
LDR             R2, [LR,R3,LSL#2]
CMP             R2, #0
MOVGE           R2, R4
SUBGE           R3, R2, #1
ADDGE           R0, R3, R0
BLT             loc_22600

loc_225E8
CMP             R2, R0
BEQ             loc_22680
LDRB            R3, [R2,#1]!
LDR             R12, [LR,R3,LSL#2]
CMP             R12, #0
BGE             loc_225E8

loc_22600
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_2263C
MOV             R2, #byte_68BD4
LDRB            R0, [R2]
CMP             R0, #0
BNE             loc_2263C
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #2
BLE             loc_22678

loc_2263C
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aInvalidChar0xX ; "Invalid char 0x%x passed to valid_hex f"...
MOVT            R1, #:upper16:aUtilC ; "util.c"
STR             R5, [SP,#0x810+var_808]
STR             R1, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
STR             R6, [SP,#0x810+var_80C]
MOVT            R2, #:upper16:aInvalidChar0xX ; "Invalid char 0x%x passed to valid_hex f"...
MOV             R1, #0x800 ; maxlen
BL              snprintf

loc_22664
MOV             R0, #3
ADD             R1, SP, #0x810+s
MOV             R2, #0
BL              sub_20F58
MOV             R0, #0

loc_22678
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_22680
MOV             R0, #1
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_2268C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_226C8
MOV             R3, #byte_68BD4
LDRB            R0, [R3]
CMP             R0, #0
BNE             loc_226C8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_22678

loc_226C8
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aNullStringPass ; "Null string passed to valid_hex from in"...
STR             R5, [SP,#0x810+var_80C]
ADD             R0, SP, #0x810+s ; s
STR             R6, [SP,#0x810+var_810]
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVT            R2, #:upper16:aNullStringPass ; "Null string passed to valid_hex from in"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
B               loc_22664
; End of function sub_225A0




; int __fastcall sub_226F0(pthread_rwlock_t *, const char *, int)
sub_226F0

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R1
MOV             R5, R2
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2271C
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_2271C
BL              __errno_location
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP,#0x814+var_814]
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_226F0




; void __fastcall sub_22760(int, int, int, int, int, int, int)
sub_22760
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_22760




; int __fastcall sub_2276C(pthread_rwlock_t *, const char *, int)
sub_2276C

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R1
MOV             R5, R2
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_22798
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_22798
BL              __errno_location
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x814+var_814]
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_2276C




; void __fastcall sub_227DC(int, int, int, int, int, int, int)
sub_227DC
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_227DC




; int __fastcall sub_227E8(pthread_mutex_t *, const char *, int)
sub_227E8

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R1
MOV             R5, R2
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_22814
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_22814
BL              __errno_location
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x814+var_814]
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_227E8




; void __fastcall sub_22858(int, int, int, int, int, int, int)
sub_22858
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_22858



; Attributes: noreturn

; void __fastcall __noreturn sub_22864(const char *, int)
sub_22864

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_22864




; void __fastcall sub_228BC(int, int, int, int, int, int, int)
sub_228BC
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}
; End of function sub_228BC




; int __fastcall sub_228C8(int)
sub_228C8
PUSH            {R4-R6,LR}
ADD             R5, R0, #0x2C0
MOV             R4, R0
MOV             R0, R5  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BEQ             loc_228F8
B               loc_22944

loc_228E8               ; buf
LDR             R1, [R4,#0x250]
BL              recv
CMP             R0, #0
BLE             loc_22910

loc_228F8
LDR             R1, [R4,#0x24C]
MOV             R3, #0  ; flags
MOVW            R2, #0x1FFC ; n
CMP             R1, R3
MOV             R0, R1  ; fd
BNE             loc_228E8

loc_22910
MOVW            R2, #0x6EE
MOV             R0, R5
LDR             R1, =aClearSock ; "clear_sock"
BL              sub_227E8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [R4,#0x250]
CMP             R3, #0
MOVNE           R2, #0
STRBNE          R2, [R3]
POP             {R4-R6,PC}

loc_22944
MOVW            R1, #0x6E5
LDR             R0, =aClearSock ; "clear_sock"
BL              sub_22864
; End of function sub_228C8

B               loc_228F8
off_22954 DCD aClearSock ; "clear_sock"



; int __fastcall sub_22958(int, char)
sub_22958
PUSH            {R4-R6,LR}
ADD             R5, R0, #0xC
MOV             R4, R0
MOV             R0, R5  ; mutex
MOV             R6, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_229A8

loc_22978
STRB            R6, [R4,#8]
ADD             R0, R4, #0x28 ; '(' ; cond
BL              pthread_cond_signal
MOV             R0, R5
MOVW            R2, #0x457
LDR             R1, =aTqFreezethaw ; "tq_freezethaw"
BL              sub_227E8
MOVW            R3, #:lower16:off_67ED8
POP             {R4-R6,LR}
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BX              R3      ; sub_21C98

loc_229A8
MOVW            R1, #0x454
LDR             R0, =aTqFreezethaw ; "tq_freezethaw"
BL              sub_22864
; End of function sub_22958

B               loc_22978
off_229B8 DCD aTqFreezethaw ; "tq_freezethaw"



; void *__fastcall sub_229BC(size_t, const char *, const char *, int)
sub_229BC

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

TST             R0, #3
PUSH            {R4-R8,LR}
MOV             R4, R0
BICNE           R4, R0, #3
ADDNE           R4, R4, #4
SUB             SP, SP, #0x810
MOV             R0, R4  ; size
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              malloc
SUBS            R5, R0, #0
BEQ             loc_229FC
MOV             R0, R5
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_229FC
MOVW            R2, #:lower16:aFailedToMalloc_1 ; "Failed to malloc size %d from %s %s:%d"
MOV             R3, R4
STR             R8, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
STR             R7, [SP,#0x810+var_80C]
MOVT            R2, #:upper16:aFailedToMalloc_1 ; "Failed to malloc size %d from %s %s:%d"
STR             R6, [SP,#0x810+var_810]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_229BC




; void __fastcall sub_22A38(int, int, int, int, int, int, int, int, int, int)
sub_22A38
MOV             R0, R5
ADD             SP, SP, #0x810
POP             {R4-R8,PC}
; End of function sub_22A38




; void *__fastcall sub_22A44(size_t, size_t, const char *, const char *, int)
sub_22A44

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
var_804= -0x804
s= -0x800
arg_0=  0x18

TST             R1, #3
PUSH            {R4-R8,LR}
MOV             R4, R1
BICNE           R4, R1, #3
ADDNE           R4, R4, #4
SUB             SP, SP, #0x810
MOV             R1, R4  ; size
MOV             R5, R0
MOV             R7, R2
MOV             R8, R3
BL              calloc
SUBS            R6, R0, #0
BEQ             loc_22A84
MOV             R0, R6
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_22A84
LDR             R3, [SP,#0x810+arg_0]
MOVW            R2, #:lower16:aFailedToCalloc_4 ; "Failed to calloc memb %d size %d from %"...
STR             R8, [SP,#0x810+var_808]
MOVT            R2, #:upper16:aFailedToCalloc_4 ; "Failed to calloc memb %d size %d from %"...
STR             R7, [SP,#0x810+var_80C]
ADD             R0, SP, #0x810+s ; s
STR             R3, [SP,#0x810+var_804]
MOV             R1, #0x800 ; maxlen
MOV             R3, R5
STR             R4, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_22A44




; void __fastcall sub_22AC8(int, int, int, int, int, int, int, int, int, int)
sub_22AC8
MOV             R0, R6
ADD             SP, SP, #0x810
POP             {R4-R8,PC}
; End of function sub_22AC8




; void *__fastcall sub_22AD4(void *, size_t, const char *, const char *, int)
sub_22AD4

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804
arg_0=  0x14

TST             R1, #3
PUSH            {R4-R7,LR}
MOV             R4, R1
BICNE           R4, R1, #3
ADDNE           R4, R4, #4
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R1, R4  ; size
MOV             R6, R2
MOV             R7, R3
BL              realloc
SUBS            R5, R0, #0
BEQ             loc_22B18
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_22B18
LDR             R3, [SP,#0x814+arg_0]
MOVW            R2, #:lower16:aFailedToReallo ; "Failed to realloc size %d from %s %s:%d"
STR             R7, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
STR             R6, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aFailedToReallo ; "Failed to realloc size %d from %s %s:%d"
STR             R3, [SP,#0x814+var_80C]
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_22AD4




; void __fastcall sub_22B58(int, int, int, int, int, int, int, int, int)
sub_22B58
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}
; End of function sub_22B58




; char *__fastcall sub_22B68(char *)
sub_22B68
SUBS            R1, R0, #0
BEQ             loc_22BA4
LDR             R3, =off_4CCE8 ; "http:"
MOV             R0, #aHttp0 ; "http0:"

loc_22B7C
ADD             R3, R3, #8
LDR             R2, [R3,#4]
CMP             R2, R1
BXEQ            LR
LDR             R0, [R3,#8]
CMP             R0, #0
BNE             loc_22B7C
MOV             R0, #(aPoolUSlowDownO+0x28) ; "invalid"
BX              LR

loc_22BA4
MOV             R0, #aHttp ; "http:"
BX              LR
; End of function sub_22B68

off_22BB0 DCD off_4CCE8 ; "http:"



; _BYTE *__fastcall sub_22BB4(_BYTE *result, int, int)
sub_22BB4
CMP             R2, #0
BLE             loc_22C18
PUSH            {R4,LR}
ADD             R4, R1, R2
MOVW            LR, #:lower16:dword_4C8CC
SUB             R4, R4, #1
SUB             R1, R1, #1
MOVT            LR, #:upper16:dword_4C8CC
ADD             R12, R0, #2

loc_22BD8
LDRB            R3, [R1,#1]!
ADD             R12, R12, #2
CMP             R1, R4
ADD             R3, LR, R3,LSR#4
LDRB            R3, [R3,#0x454]
STRB            R3, [R12,#-4]
LDRB            R3, [R1]
AND             R3, R3, #0xF
ADD             R3, LR, R3
LDRB            R3, [R3,#0x454]
STRB            R3, [R12,#-3]
BNE             loc_22BD8
ADD             R0, R0, R2,LSL#1
MOV             R3, #0
STRB            R3, [R0]
POP             {R4,PC}

loc_22C18
MOV             R3, #0
STRB            R3, [R0]
BX              LR
; End of function sub_22BB4




; _BYTE *__fastcall sub_22C24(int, int)
sub_22C24

var_8= -8

PUSH            {R4-R6,LR}
MOV             R5, R1,LSL#1
MOV             R4, R0
ADD             R0, R5, #1
MOV             R6, R1
RSBS            R1, R0, #0
AND             R12, R0, #3
AND             R1, R1, #3
SUB             SP, SP, #8
RSBPL           R12, R1, #0
MOVW            R3, #0x315
RSB             R12, R12, #4
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#8+var_8]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aBin2hex ; "bin2hex"
MOV             R1, #1
ADD             R0, R12, R0
BL              sub_22A44
CMP             R6, #0
MOVLE           R5, R0
BLE             loc_22CC4
SUB             R2, R4, #1
MOVW            LR, #:lower16:dword_4C8CC
ADD             R1, R2, R6
MOVT            LR, #:upper16:dword_4C8CC
ADD             R12, R0, #2

loc_22C90
LDRB            R3, [R2,#1]!
ADD             R12, R12, #2
CMP             R2, R1
ADD             R3, LR, R3,LSR#4
LDRB            R3, [R3,#0x454]
STRB            R3, [R12,#-4]
LDRB            R3, [R2]
AND             R3, R3, #0xF
ADD             R3, LR, R3
LDRB            R3, [R3,#0x454]
STRB            R3, [R12,#-3]
BNE             loc_22C90
ADD             R5, R0, R5

loc_22CC4
MOV             R3, #0
STRB            R3, [R5]
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_22C24

off_22CD4 DCD aBin2hex  ; "bin2hex"



; int __fastcall sub_22CD8(_BYTE *, unsigned __int8 *, int)
sub_22CD8

var_804= -0x804

PUSH            {R4,R5,LR}
MOV             R5, R0
LDRB            R0, [R1]
SUB             SP, SP, #0x800
SUB             SP, SP, #4
CMP             R0, #0
BEQ             loc_22E5C
CMP             R2, #0
BEQ             loc_22E74
LDRB            R3, [R1,#1]
CMP             R3, #0
BEQ             loc_22DE0
MOV             LR, #dword_4C8CC
LDR             R3, [LR,R3,LSL#2]
LDR             R12, [LR,R0,LSL#2]
MOV             R0, R3,LSR#31
ORRS            R0, R0, R12,LSR#31
ADDEQ           R1, R1, #4
BNE             loc_22D68

loc_22D28
ORR             R3, R3, R12,LSL#4
SUB             R2, R2, #1
STRB            R3, [R5],#1
LDRB            R3, [R1,#-2]
CMP             R3, #0
BEQ             loc_22E5C
CMP             R2, #0
BEQ             loc_22DD4
LDRB            R4, [R1,#-1]
ADD             R1, R1, #2
CMP             R4, #0
BEQ             loc_22DE0
LDR             R12, [LR,R3,LSL#2]
LDR             R3, [LR,R4,LSL#2]
ORRS            R4, R12, R3
BPL             loc_22D28

loc_22D68
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22DA4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22DA4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_22E4C

loc_22DA4
MOVW            R12, #:lower16:aHex2binScanFai ; "hex2bin scan failed"
MOV             LR, SP
MOVT            R12, #:upper16:aHex2binScanFai ; "hex2bin scan failed"
LDM             R12!, {R0-R3} ; "hex2bin scan failed"
LDR             R12, [R12] ; "led"
STM             LR!, {R0-R3}
MOV             R0, #3
MOV             R1, SP
MOV             R2, #0
STR             R12, [LR]
BL              sub_20F58
MOV             R0, #0

loc_22DD4
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_22DE0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22E1C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22E1C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_22E4C

loc_22E1C
MOVW            R12, #:lower16:aHex2binStrTrun ; "hex2bin str truncated"
MOV             LR, SP
MOVT            R12, #:upper16:aHex2binStrTrun ; "hex2bin str truncated"
LDM             R12!, {R0-R3} ; "hex2bin str truncated"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "cated"
STR             R0, [LR],#4
MOV             R0, #3
STRH            R1, [LR]
MOV             R1, SP
BL              sub_20F58

loc_22E4C
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_22E5C
CMP             R2, #0
MOVEQ           R0, #1
BNE             loc_22E4C
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_22E74
MOV             R0, R2
B               loc_22DD4
; End of function sub_22CD8




; void __fastcall sub_22E7C(int, char *s)
sub_22E7C

var_814= -0x814
var_810= -0x810
var_808= -0x808
s= -0x804

LDR             R2, =a000000000 ; "000000000"
PUSH            {R4,R5,LR}
MOV             R4, R1
MOV             R5, R0
SUB             SP, SP, #0x810
SUB             SP, SP, #4
LDM             R2, {R0-R2} ; "000000000"
ADD             R3, SP, #0x814+var_810
STM             R3!, {R0,R1}
MOV             R0, R4  ; s
STRB            R2, [R3]
BL              strlen
CMP             R0, #0
MOV             R3, #0
STR             R3, [SP,#0x814+var_814]
BEQ             loc_22EE0
RSB             R3, R0, #7
SUB             R1, R4, #1
ADD             R2, SP, #0x814+var_810
ADD             R0, R1, R0
ADD             R3, R2, R3

loc_22ED0
LDRB            R2, [R1,#1]!
CMP             R1, R0
STRB            R2, [R3,#1]!
BNE             loc_22ED0

loc_22EE0
MOV             R4, #0
ADD             R1, SP, #0x814+var_810
MOV             R2, #4
MOV             R0, SP
STRB            R4, [SP,#0x814+var_808]
BL              sub_22CD8
LDR             R0, [SP,#0x814+var_814]
MOV             R1, R4
MOV             R12, R4
MOV             R3, R4
MOV             LR, #1
AND             R0, R0, #0xE000
B               loc_22F20

loc_22F14
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BEQ             loc_22F3C

loc_22F20
MOV             R2, R0,LSR R3
TST             R2, #1
BEQ             loc_22F14
ADD             R1, R1, #1
ORR             R12, R12, LR,LSL R3
CMP             R1, #3
BNE             loc_22F14

loc_22F3C
TST             R12, #0xE000
STR             R12, [SP,#0x814+var_814]
BNE             loc_22FB4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_22F70
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_22FD0

loc_22F70
MOVW            R2, #:lower16:aPoolDRollingMa ; "Pool %d rolling mask do not match!"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPoolDRollingMa ; "Pool %d rolling mask do not match!"
LDR             R3, [R5]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_22F98
MOV             R2, #0
MOV             R3, #1
STRB            R2, [R5,#0x284]
STR             R3, [R5,#0x288]
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_22FB4
MOV             R2, #1
MOV             R3, #8
STRB            R2, [R5,#0x284]
STR             R3, [R5,#0x288]
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_22FD0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_22F70
B               loc_22F98
; End of function sub_22E7C

off_22FE8 DCD a000000000 ; "000000000"



; size_t __fastcall sub_22FEC(_BYTE *, char *s)
sub_22FEC

var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4-R8,LR}
MOV             R4, #0
SUB             SP, SP, #0x20
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R7, R1
STR             R4, [SP,#0x20+var_18]
STR             R4, [SP,#0x20+var_1C]
STR             R4, [SP,#0x20+var_14]
STR             R4, [SP,#0x20+var_10]
STR             R4, [SP,#0x20+var_C]
STR             R4, [SP,#0x20+var_8]
STR             R4, [SP,#0x20+var_4]
BL              strlen
CMP             R0, #0
MOVEQ           R1, R0
BEQ             loc_23098
SUB             R7, R7, #1
MOVW            R8, #:lower16:dword_4C8CC
MOV             R12, R4
ADD             R6, R7, R0
MOVT            R8, #:upper16:dword_4C8CC
MOV             R4, SP
MOV             LR, #0x3A ; ':'

loc_2304C
LDRB            R3, [R7,#1]!
ADD             R2, SP, #0x20+var_4
ADD             R3, R8, R3,LSL#2
LDR             R3, [R3,#0x478]
B               loc_23064

loc_23060
LDR             R12, [R2]

loc_23064
MOV             R0, R3
MOV             R1, #0
UMLAL           R0, R1, LR, R12
STR             R0, [R2],#-4
CMP             R4, R2
MOV             R3, R1
BNE             loc_23060
CMP             R6, R7
LDRNE           R12, [SP,#0x20+var_4]
BNE             loc_2304C
LDR             R0, [SP,#0x20+var_18]
LDRB            R1, [SP,#0x20+var_1C]
REV             R0, R0

loc_23098
ADD             R3, R5, #1
ADD             R2, SP, #0x20+var_18
STRB            R1, [R5],#0x19
B               loc_230B0

loc_230A8
LDR             R0, [R2,#4]!
REV             R0, R0

loc_230B0
STR             R0, [R3],#4
CMP             R3, R5
BNE             loc_230A8
ADD             SP, SP, #0x20 ; ' '
POP             {R4-R8,PC}
; End of function sub_22FEC




; int __fastcall sub_230C4(int, int)
sub_230C4
CMP             R1, #0x7F
MOV             R3, R0
MOVLE           R2, #1
MOVLE           R0, #2
BLE             loc_23104
MOVW            R2, #0x407F
CMP             R1, R2
MOVLE           R0, #3
MOVLE           R2, #2
BLE             loc_23104
MOVT            R2, #0x20 ; ' '
CMP             R1, R2
MOVGT           R0, #5
MOVLE           R0, #4
MOVGT           R2, #4
MOVLE           R2, #3

loc_23104
STR             R1, [R3,#1]
STRB            R2, [R3]
BX              LR
; End of function sub_230C4




; int __fastcall sub_23110(unsigned int *, unsigned int *)
sub_23110

var_84C= -0x84C
var_848= -0x848
var_844= -0x844
var_840= -0x840
var_83C= -0x83C
var_838= -0x838
var_834= -0x834
var_830= -0x830
var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x840
SUB             SP, SP, #0xC
ADD             R3, R0, #0x20 ; ' '
ADD             R2, R1, #0x20 ; ' '

loc_23124
LDR             LR, [R3,#-4]!
LDR             R12, [R2,#-4]!
CMP             LR, R12
BHI             loc_232E0
BCC             loc_23140
CMP             R0, R3
BNE             loc_23124

loc_23140
MOV             R5, #1

loc_23144
MOV             R4, #byte_68BD5
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_23168
MOV             R0, R5
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_23168
LDR             R6, [R0,#0x18]
MOV             R3, R0
LDR             R7, [R0,#0x1C]
MOV             R2, R1
LDR             LR, [R3,#0x14]
MOV             R1, #0x20 ; ' '
LDR             R12, [R3,#0x10]
REV             R6, R6
STR             R6, [SP,#0x84C+var_840]
REV             R7, R7
LDR             R6, [R3,#8]
REV             LR, LR
REV             R12, R12
STR             R7, [SP,#0x84C+var_844]
STR             LR, [SP,#0x84C+var_83C]
ADD             R0, SP, #0x84C+var_844
LDR             R7, [R3,#0xC]
STR             R12, [SP,#0x84C+var_838]
LDM             R3, {R12,LR}
REV             R3, R6
STR             R3, [SP,#0x84C+var_830]
REV             R7, R7
LDR             R3, [R2,#0x1C]
REV             LR, LR
REV             R12, R12
STR             LR, [SP,#0x84C+var_82C]
REV             R3, R3
LDR             LR, [R2,#0x18]
STR             R12, [SP,#0x84C+var_828]
STR             R3, [SP,#0x84C+var_824]
LDR             R12, [R2,#0x14]
REV             LR, LR
LDR             R3, [R2,#0x10]
LDR             R6, [R2,#0xC]
REV             R12, R12
STR             LR, [SP,#0x84C+var_820]
REV             R3, R3
LDR             LR, [R2,#8]
STR             R12, [SP,#0x84C+var_81C]
REV             R6, R6
STR             R3, [SP,#0x84C+var_818]
LDM             R2, {R3,R12}
REV             LR, LR
STR             R7, [SP,#0x84C+var_834]
STR             R6, [SP,#0x84C+var_814]
REV             R3, R3
REV             R2, R12
STRD            R2, R3, [SP,#0x84C+var_80C]
STR             LR, [SP,#0x84C+var_810]
BL              sub_22C24
MOV             R1, #0x20 ; ' '
MOV             R7, R0
ADD             R0, SP, #0x84C+var_824
BL              sub_22C24
LDRB            R3, [R4]
MOV             R6, R0
CMP             R3, #0
BEQ             loc_232C0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_23278
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_232E8

loc_23278
MOVW            R2, #:lower16:aNoFalsePositiv ; "no (false positive; hash > target)"
CMP             R5, #0
MOVT            R2, #:upper16:aNoFalsePositiv ; "no (false positive; hash > target)"
MOV             R3, #aYesHashTarget ; "YES (hash <= target)"
MOVEQ           R3, R2
MOVW            R2, #:lower16:aProofSTargetST ; " Proof: %s\nTarget: %s\nTrgVal? %s"
STR             R3, [SP,#0x84C+var_848]
MOVT            R2, #:upper16:aProofSTargetST ; " Proof: %s\nTarget: %s\nTrgVal? %s"
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x84C+var_84C]
ADD             R0, SP, #0x84C+s ; s
MOV             R3, R7
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_232C0               ; ptr
MOV             R0, R7
BL              free
MOV             R0, R6  ; ptr
BL              free
MOV             R0, R5
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_232E0
MOV             R5, #0
B               loc_23144

loc_232E8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_232C0
B               loc_23278
; End of function sub_23110




; char *sub_23300()
sub_23300

var_8= -8

PUSH            {R4,LR}
MOVW            R3, #0x435
SUB             SP, SP, #8
MOV             R2, #aUtilC ; "util.c"
MOV             R1, #0x58 ; 'X'
STR             R3, [SP,#8+var_8]
MOV             R0, #1
LDR             R3, =aTqNew ; "tq_new"
BL              sub_22A44
MOV             R4, R0
MOV             R1, #0  ; mutexattr
STR             R0, [R4]
ADD             R0, R0, #0xC ; mutex
STR             R4, [R4,#4]
BL              pthread_mutex_init
ADD             R0, R4, #0x28 ; '(' ; cond
MOV             R1, #0  ; cond_attr
BL              pthread_cond_init
MOV             R0, R4
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_23300

off_23358 DCD aTqNew    ; "tq_new"



; void __fastcall sub_2335C(char *)
sub_2335C
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
POPEQ           {R4-R6,PC}
LDR             R0, [R5]
LDR             R2, [R0]
CMP             R5, R0
SUB             R0, R0, #4 ; ptr
SUB             R4, R2, #4
BEQ             loc_233A8

loc_23380
LDR             R3, [R0,#8]
STR             R3, [R2,#4]
STR             R2, [R3]
BL              free
MOV             R3, R4
MOV             R0, R4
LDR             R2, [R3,#4]!
CMP             R3, R5
SUB             R4, R2, #4
BNE             loc_23380

loc_233A8               ; cond
ADD             R0, R5, #0x28 ; '('
BL              pthread_cond_destroy
ADD             R0, R5, #0xC ; mutex
BL              pthread_mutex_destroy
MOV             R0, R5
POP             {R4-R6,LR}
B               free
; End of function sub_2335C




; int __fastcall sub_233C4(int)
sub_233C4
MOV             R1, #1
B               sub_22958
; End of function sub_233C4




; int __fastcall sub_233CC(int)
sub_233CC
MOV             R1, #0
B               sub_22958
; End of function sub_233CC




; int __fastcall sub_233D4(int, int)
sub_233D4

var_8= -8

PUSH            {R4-R8,LR}
MOVW            R3, #0x469
SUB             SP, SP, #8
MOVW            R2, #:lower16:aUtilC ; "util.c"
MOV             R5, R0
MOV             R8, R1
STR             R3, [SP,#8+var_8]
MOV             R1, #0xC
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aTqPush ; "tq_push"
MOV             R0, #1
ADD             R7, R5, R1
BL              sub_22A44
MOV             R6, R0
MOV             R0, R7  ; mutex
MOV             R4, R6
STR             R8, [R4],#4
STR             R4, [R6,#4]
STR             R4, [R6,#8]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_23494

loc_2342C
LDRB            R3, [R5,#8]
CMP             R3, #0
BNE             loc_23484
LDR             R3, [R5,#4]
MOV             R8, #1
STR             R4, [R5,#4]
STR             R5, [R6,#4]
STR             R3, [R6,#8]
STR             R4, [R3]

loc_23450               ; cond
ADD             R0, R5, #0x28 ; '('
BL              pthread_cond_signal
MOV             R0, R7
MOVW            R2, #0x47A
LDR             R1, =aTqPush ; "tq_push"
BL              sub_227E8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R8
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_23484               ; ptr
MOV             R0, R6
MOV             R8, #0
BL              free
B               loc_23450

loc_23494
MOVW            R1, #0x46D
LDR             R0, =aTqPush ; "tq_push"
BL              sub_22864
; End of function sub_233D4

B               loc_2342C
off_234A4 DCD aTqPush   ; "tq_push"



; int __fastcall sub_234A8(int, const struct timespec *)
sub_234A8
PUSH            {R4-R8,LR}
ADD             R6, R0, #0xC
MOV             R5, R0
MOV             R0, R6  ; mutex
MOV             R7, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_23564

loc_234C8
LDR             R4, [R5]
CMP             R5, R4
BEQ             loc_23524

loc_234D4
LDR             R2, [R4,#4]
MOV             R3, #0
LDR             R1, [R4]
SUB             R0, R4, #4 ; ptr
LDR             R5, [R4,#-4]
STR             R2, [R1,#4]
STR             R1, [R2]
STR             R3, [R4]
STR             R3, [R4,#4]
BL              free

loc_234FC
MOV             R0, R6
MOV             R2, #0x4A0
LDR             R1, =aTqPop ; "tq_pop"
BL              sub_227E8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R5
POP             {R4-R8,PC}

loc_23524
CMP             R7, #0
ADD             R0, R5, #0x28 ; '(' ; cond
BEQ             loc_23558
MOV             R2, R7  ; abstime
MOV             R1, R6  ; mutex
BL              pthread_cond_timedwait

loc_2353C
CMP             R0, #0
BNE             loc_23574
LDR             R3, [R5]
CMP             R4, R3
BEQ             loc_2357C
MOV             R4, R3
B               loc_234D4

loc_23558               ; mutex
MOV             R1, R6
BL              pthread_cond_wait
B               loc_2353C

loc_23564
MOVW            R1, #0x486
LDR             R0, =aTqPop ; "tq_pop"
BL              sub_22864
B               loc_234C8

loc_23574
MOV             R5, #0
B               loc_234FC

loc_2357C
MOV             R5, R0
B               loc_234FC
; End of function sub_234A8

off_23584 DCD aTqPop    ; "tq_pop"



; int __fastcall sub_23588(int result)
sub_23588
PUSH            {R4,LR}
SUBS            R4, R0, #0
POPEQ           {R4,PC}
LDR             R0, [R4,#0xC] ; th
CMP             R0, #0
BNE             loc_235AC
ADD             R0, R4, #0x10 ; sem
POP             {R4,LR}
B               sem_destroy

loc_235AC
BL              pthread_cancel
MOV             R3, #0
ADD             R0, R4, #0x10 ; sem
STR             R3, [R4,#0xC]
POP             {R4,LR}
B               sem_destroy
; End of function sub_23588




; _DWORD *__fastcall sub_235C4(_DWORD *result, int *)
sub_235C4
LDM             R1, {R3,R12}
LDR             R2, [R0]
SUB             R2, R2, R3
STR             R2, [R1]
LDR             R3, [R0,#4]
SUB             R3, R3, R12
CMP             R3, #0
STR             R3, [R1,#4]
ADDLT           R3, R3, #0xF4000
SUBLT           R2, R2, #1
ADDLT           R3, R3, #0x240
STRDLT          R2, R3, [R1]
BX              LR
; End of function sub_235C4




; _DWORD *__fastcall sub_235F8(_DWORD *result, int *)
sub_235F8
LDR             R2, [R0]
MOVW            R12, #0x423F
LDR             R3, [R1]
MOVT            R12, #0xF
PUSH            {LR}
LDR             LR, [R1,#4]
ADD             R2, R2, R3
STR             R2, [R1]
LDR             R3, [R0,#4]
ADD             R3, R3, LR
CMP             R3, R12
STR             R3, [R1,#4]
SUBGT           R3, R3, #0xF4000
ADDGT           R2, R2, #1
SUBGT           R3, R3, #0x240
STRDGT          R2, R3, [R1]
POP             {PC}
; End of function sub_235F8




; bool __fastcall sub_2363C(_DWORD *, _DWORD *)
sub_2363C
LDR             R2, [R0]
LDR             R3, [R1]
CMP             R2, R3
BEQ             loc_23658
MOVGT           R0, #1
MOVLE           R0, #0
BX              LR

loc_23658
LDR             R0, [R0,#4]
LDR             R3, [R1,#4]
CMP             R0, R3
MOVLE           R0, #0
MOVGT           R0, #1
BX              LR
; End of function sub_2363C




; bool __fastcall sub_23670(_DWORD *, _DWORD *)
sub_23670
LDR             R2, [R0]
LDR             R3, [R1]
CMP             R2, R3
BEQ             loc_2368C
MOVLT           R0, #1
MOVGE           R0, #0
BX              LR

loc_2368C
LDR             R0, [R0,#4]
LDR             R3, [R1,#4]
CMP             R0, R3
MOVGE           R0, #0
MOVLT           R0, #1
BX              LR
; End of function sub_23670




; _DWORD *__fastcall sub_236A4(_DWORD *result, _DWORD *)
sub_236A4
LDR             R3, [R1]
PUSH            {R4,R5}
MOV             R4, #0x10624DD3
STR             R3, [R0]
LDR             R3, [R1,#4]
SMULL           R4, R5, R3, R4
MOV             R3, R3,ASR#31
RSB             R3, R3, R5,ASR#6
POP             {R4,R5}
STR             R3, [R0,#4]
BX              LR
; End of function sub_236A4




; _DWORD *__fastcall sub_236D4(_DWORD *result, _DWORD *)
sub_236D4
LDR             R2, [R1]
MOV             R3, #0x3E8
STR             R2, [R0]
LDR             R2, [R1,#4]
MUL             R3, R3, R2
STR             R3, [R0,#4]
BX              LR
; End of function sub_236D4




; int __fastcall sub_236F0(_QWORD *)
sub_236F0

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4,R6,R7,LR}
MOVW            R6, #0x4240
SUB             SP, SP, #0x18
MOVT            R6, #0xF
MOV             R7, #0
MOV             R4, R0
STRD            R6, R7, [SP,#0x18+var_18]
ADD             R0, SP, #0x18+var_10
BL              lldiv
LDR             R2, [SP,#0x18+var_10]
LDR             R3, [SP,#0x18+var_8]
STRD            R2, R3, [R4]
ADD             SP, SP, #0x18
POP             {R4,R6,R7,PC}
; End of function sub_236F0




; int __fastcall sub_23728(_QWORD *)
sub_23728

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4,R6,R7,LR}
MOVW            R6, #0x4240
SUB             SP, SP, #0x18
MOVT            R6, #0xF
MOV             R7, #0
MOV             R4, R0
STRD            R6, R7, [SP,#0x18+var_18]
ADD             R0, SP, #0x18+var_10
BL              lldiv
LDR             R1, [SP,#0x18+var_8]
MOV             R3, #0x3E8
LDR             R2, [SP,#0x18+var_10]
MUL             R3, R3, R1
STRD            R2, R3, [R4]
ADD             SP, SP, #0x18
POP             {R4,R6,R7,PC}
; End of function sub_23728




; int __fastcall sub_23768(_QWORD *)
sub_23768

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4,R6,R7,LR}
MOV             R6, #0x3E8
SUB             SP, SP, #0x18
MOV             R7, #0
MOV             R4, R0
ADD             R0, SP, #0x18+var_10
STRD            R6, R7, [SP,#0x18+var_18]
BL              lldiv
LDR             R1, [SP,#0x18+var_8]
MOV             R3, #0xF4240
LDR             R2, [SP,#0x18+var_10]
MUL             R3, R3, R1
STRD            R2, R3, [R4]
ADD             SP, SP, #0x18
POP             {R4,R6,R7,PC}
; End of function sub_23768




; int __fastcall sub_237A8(_QWORD *)
sub_237A8

var_18= -0x18
var_10= -0x10
var_8= -8

PUSH            {R4,R6,R7,LR}
MOV             R6, #0x3E8
SUB             SP, SP, #0x18
MOV             R7, #0
MOV             R4, R0
ADD             R0, SP, #0x18+var_10
STRD            R6, R7, [SP,#0x18+var_18]
BL              lldiv
LDR             R1, [SP,#0x18+var_8]
MOV             R3, #0x3E8
LDR             R2, [SP,#0x18+var_10]
MUL             R3, R3, R1
STRD            R2, R3, [R4]
ADD             SP, SP, #0x18
POP             {R4,R6,R7,PC}
; End of function sub_237A8




; _DWORD *__fastcall sub_237E4(_DWORD *result, _DWORD *)
sub_237E4
PUSH            {LR}
MOVW            R12, #0xC9FF
LDR             LR, [R1]
MOVT            R12, #0x3B9A
LDR             R2, [R0]
LDR             R3, [R0,#4]
ADD             R2, R2, LR
STR             R2, [R0]
LDR             R1, [R1,#4]
ADD             R3, R3, R1
CMP             R3, R12
STR             R3, [R0,#4]
BLE             loc_23848
MOV             R1, #0x3600
ADD             LR, R2, #1
MOVT            R1, #0xC465
ADD             R1, R3, R1
CMP             R1, R12
MOVGT           R1, #0x6C00
ADDGT           LR, R2, #2
MOVTGT          R1, #0x88CA
STR             LR, [R0]
ADDGT           R1, R3, R1
STR             R1, [R0,#4]
POP             {PC}

loc_23848
CMP             R3, #0
POPGE           {PC}
MOV             R1, #0x3B9ACA00

loc_23858
ADDS            R3, R3, R1
SUB             R2, R2, #1
BMI             loc_23858
STRD            R2, R3, [R0]
POP             {PC}
; End of function sub_237E4

CMP             R1, #0
CMPNE           R0, #0
BEQ             loc_23954
PUSH            {R4-R9,R11,LR}
MOV             R5, R1
ADD             R11, SP, #0x1C
MOV             R6, R0
BL              strlen
MOV             R9, R0
MOV             R0, R5
BL              strlen
CLZ             R3, R0
CMP             R9, #0
MOV             R3, R3,LSR#5
MOVEQ           R4, #1
MOV             R8, R0
MOVNE           R4, R3
CMP             R4, #0
BNE             loc_23948
ADD             R2, R9, #0xE
ADD             R3, R0, #0xE
BIC             R2, R2, #7
BIC             R3, R3, #7
SUB             SP, SP, R2
MOV             R7, SP
SUB             SP, SP, R3
BL              __ctype_tolower_loc
MOV             R3, R4
LDR             R12, [R0]
MOV             R1, SP
SUB             R0, R7, #1
SUB             R2, R6, #1

loc_238EC
LDRB            LR, [R2,#1]!
ADD             R3, R3, #1
CMP             R3, R9
LDR             LR, [R12,LR,LSL#2]
STRB            LR, [R0,#1]!
BLT             loc_238EC
SUB             R2, R5, #1
SUB             R0, R1, #1
MOV             R3, #0

loc_23910
LDRB            LR, [R2,#1]!
ADD             R3, R3, #1
CMP             R3, R8
LDR             LR, [R12,LR,LSL#2]
STRB            LR, [R0,#1]!
BLT             loc_23910
MOV             R0, R7
BL              strstr
CMP             R0, #0
BEQ             loc_23948
SUB             R0, R0, R7
ADD             R0, R6, R0
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}

loc_23948
MOV             R0, #0
SUB             SP, R11, #0x1C
POP             {R4-R9,R11,PC}

loc_23954
MOV             R0, #0
BX              LR



; const char *__fastcall sub_2395C(const char **, const char *)
sub_2395C
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, [R0]
CMP             R4, #0
BEQ             loc_23994
MOV             R0, R4  ; s
BL              strpbrk
CMP             R0, #0
MOVNE           R3, #0
STRBNE          R3, [R0],#1
STRNE           R0, [R5]
BEQ             loc_23994
MOV             R0, R4
POP             {R4-R6,PC}

loc_23994
MOV             R3, #0
MOV             R0, R4
STR             R3, [R5]
POP             {R4-R6,PC}
; End of function sub_2395C




; int __fastcall sub_239A4(struct timeval *)
sub_239A4
MOV             R1, #0  ; tz
B               gettimeofday
; End of function sub_239A4




; int __fastcall sub_239AC(_DWORD *)
sub_239AC
PUSH            {R4,R5}
MOVW            R4, #0xDE83
LDR             R3, [R0,#4]
MOVT            R4, #0x431B
LDR             R2, [R0]
MOV             R0, #0x3E8
SMULL           R4, R5, R3, R4
MOV             R3, R3,ASR#31
RSB             R3, R3, R5,ASR#18
POP             {R4,R5}
MLA             R0, R0, R2, R3
BX              LR
; End of function sub_239AC




; int __fastcall sub_239DC(_DWORD *, _DWORD *, int *)
sub_239DC
LDR             R3, [R0]
LDR             R12, [R1]
SUB             R3, R3, R12
STR             R3, [R2]
LDR             R1, [R1,#4]
LDR             R0, [R0,#4]
SUBS            R0, R0, R1
MOVMI           R1, #0xCA00
SUBMI           R3, R3, #1
MOVTMI          R1, #0x3B9A
STRPL           R0, [R2,#4]
ADDMI           R1, R0, R1
STRMI           R3, [R2]
STRMI           R1, [R2,#4]
BX              LR
; End of function sub_239DC




; int __fastcall sub_23A18(struct timespec *tp)
sub_23A18
MOV             R1, R0  ; tp
MOV             R0, #1  ; clock_id
B               clock_gettime
; End of function sub_23A18




; int __fastcall sub_23A24(int *)
sub_23A24

var_8= -8
var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R2, R1
MOV             R3, R1,ASR#31
MOV             R0, SP
BL              sub_23768
LDR             R3, [SP,#8+var_4]
MOVW            R0, #0xC9FF
LDR             R12, [R4,#4]
MOVT            R0, #0x3B9A
LDR             R2, [SP,#8+var_8]
LDR             R1, [R4]
ADD             R3, R3, R12
CMP             R3, R0
STR             R3, [SP,#8+var_4]
ADD             R2, R2, R1
STR             R2, [SP,#8+var_8]
BLE             loc_23AC0
MOV             R1, #0x3600
ADD             R12, R2, #1
MOVT            R1, #0xC465
ADD             R1, R3, R1
CMP             R1, R0
MOVGT           R1, #0x6C00
ADDGT           R12, R2, #2
MOVTGT          R1, #0x88CA
STR             R12, [SP,#8+var_8]
ADDGT           R1, R3, R1
STR             R1, [SP,#8+var_4]

loc_23A9C               ; flags
MOV             R1, #1
MOV             R3, #0  ; rem
MOV             R0, R1  ; clock_id
MOV             R2, SP  ; req
BL              clock_nanosleep
CMP             R0, #4
BEQ             loc_23A9C
ADD             SP, SP, #8
POP             {R4,PC}

loc_23AC0
CMP             R3, #0
BGE             loc_23A9C
MOV             R1, #0x3B9ACA00

loc_23AD0
ADDS            R3, R3, R1
SUB             R2, R2, #1
BMI             loc_23AD0
STRD            R2, R3, [SP,#8+var_8]
B               loc_23A9C
; End of function sub_23A24




; int __fastcall sub_23AE4(int *)
sub_23AE4

var_8= -8
var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R0, SP
BL              sub_23728
LDR             R3, [SP,#8+var_4]
MOVW            R0, #0xC9FF
LDR             R12, [R4,#4]
MOVT            R0, #0x3B9A
LDR             R2, [SP,#8+var_8]
LDR             R1, [R4]
ADD             R3, R3, R12
CMP             R3, R0
STR             R3, [SP,#8+var_4]
ADD             R2, R2, R1
STR             R2, [SP,#8+var_8]
BLE             loc_23B78
MOV             R1, #0x3600
ADD             R12, R2, #1
MOVT            R1, #0xC465
ADD             R1, R3, R1
CMP             R1, R0
MOVGT           R1, #0x6C00
ADDGT           R12, R2, #2
MOVTGT          R1, #0x88CA
STR             R12, [SP,#8+var_8]
ADDGT           R1, R3, R1
STR             R1, [SP,#8+var_4]

loc_23B54               ; flags
MOV             R1, #1
MOV             R3, #0  ; rem
MOV             R0, R1  ; clock_id
MOV             R2, SP  ; req
BL              clock_nanosleep
CMP             R0, #4
BEQ             loc_23B54
ADD             SP, SP, #8
POP             {R4,PC}

loc_23B78
CMP             R3, #0
BGE             loc_23B54
MOV             R1, #0x3B9ACA00

loc_23B88
ADDS            R3, R3, R1
SUB             R2, R2, #1
BMI             loc_23B88
STRD            R2, R3, [SP,#8+var_8]
B               loc_23B54
; End of function sub_23AE4




; int sub_23B9C()
sub_23B9C

var_8= -8

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R1, SP  ; tp
MOV             R0, #1  ; clock_id
BL              clock_gettime
MOV             R1, R4
MOV             R0, SP
BL              sub_23A24
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_23B9C

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R5, R1
MOV             R0, #1
MOV             R1, SP
BL              clock_gettime
MOV             R2, R4
MOV             R3, R5
MOV             R0, SP
BL              sub_23AE4
ADD             SP, SP, #0xC
POP             {R4,R5,PC}



; int __fastcall sub_23BFC(int result, _DWORD *)
sub_23BFC
LDR             R2, [R1]
LDR             R3, [R0]
SUB             R3, R3, R2
CMP             R3, #0x3C ; '<'
LDRLE           R2, [R0,#4]
MOVWLE          R0, #0x4240
LDRLE           R1, [R1,#4]
MOVTLE          R0, #0xF
SUBLE           R2, R2, R1
MLALE           R3, R0, R3, R2
VMOVLE          S0, R3
VCVTLE.F64.S32  D0, S0
VLDRGT          D0, =6.0e7
BX              LR
; End of function sub_23BFC

ALIGN 8
dbl_23C38 DCFD 6.0e7
LDR             R2, [R0]
LDR             R3, [R1]
SUB             R2, R2, R3
CMP             R2, #0xE10
BGT             loc_23C88
PUSH            {R4,R5}
MOVW            R4, #0x4DD3
LDR             R3, [R0,#4]
MOVT            R4, #0x1062
MOV             R0, #0x3E8
LDR             R1, [R1,#4]
SUB             R3, R3, R1
SMULL           R4, R5, R3, R4
MOV             R3, R3,ASR#31
RSB             R3, R3, R5,ASR#6
POP             {R4,R5}
MLA             R0, R0, R2, R3
BX              LR

loc_23C88
MOV             R0, #0x36EE80
BX              LR



; void sub_23C94()
sub_23C94
LDR             R12, [R1,#4]
LDR             R2, [R0,#4]
VLDR            D5, =1000000.0
LDR             R3, [R0]
SUB             R2, R2, R12
LDR             R1, [R1]
VMOV            S15, R2
SUB             R3, R3, R1
VCVT.F64.S32    D7, S15
VMOV            S0, R3
VCVT.F64.S32    D0, S0
VDIV.F64        D6, D7, D5
VADD.F64        D0, D6, D0
BX              LR
; End of function sub_23C94

ALIGN 0x10
dbl_23CD0 DCFD 1000000.0



; int __fastcall sub_23CD8(const char *, _DWORD *, char **)
sub_23CD8

var_114= -0x114
var_10C= -0x10C
s= -0x104

PUSH            {R4-R9,LR}
MOV             R8, R1
MOVW            R1, #:lower16:(aStratumTcp+0xC) ; "//"
SUB             SP, SP, #0x114
MOVT            R1, #:upper16:(aStratumTcp+0xC) ; needle
MOV             R4, R0
STR             R0, [R8]
MOV             R9, R2
BL              strstr
CMP             R0, #0
MOV             R1, #0x5B ; '[' ; c
ADDNE           R4, R0, #2
MOV             R0, R4  ; s
BL              strchr
MOV             R1, #0x5D ; ']' ; c
MOV             R6, R0
MOV             R0, R4  ; s
BL              strchr
MOVS            R5, R0
MOV             R1, #0x3A ; ':' ; c
MOVNE           R5, #1
CMP             R6, #0
MOVEQ           R5, #0
CMP             R6, R0
MOVCS           R5, #0
ANDCC           R5, R5, #1
CMP             R5, #0
MOVEQ           R0, R4  ; s
BL              strchr
MOV             R6, R0
MOV             R0, R4  ; s
BL              strlen
CMP             R6, #0
BEQ             loc_23E40
SUB             R3, R6, R4
MVN             R7, R3
ADD             R7, R7, R0
CMP             R7, #0
ADDGT           R6, R6, #1
BLE             loc_23E30

loc_23D78
CMP             R3, #0
BLE             loc_23E30
CMP             R5, #0
MOVW            R2, #:lower16:aS ; "%.*s"
ADDNE           R4, R4, #1
SUBNE           R3, R3, #2
STR             R4, [SP,#0x114+var_114]
ADD             R0, SP, #0x114+s ; s
MOVT            R2, #:upper16:aS ; "%.*s"
MOV             R1, #0xFE ; maxlen
BL              snprintf
CMP             R7, #0
BNE             loc_23DF0
MOVW            R3, #:lower16:dword_4D7F4
ADD             R4, SP, #0x114+var_10C
MOVT            R3, #:upper16:dword_4D7F4
LDR             R3, [R3]
STRH            R3, [SP,#0x114+var_10C]
MOV             R3, R3,LSR#16
STRB            R3, [SP,#0x114+var_10C+2]

loc_23DC8               ; s
MOV             R0, R4
BL              __strdup
STR             R0, [R9]
ADD             R0, SP, #0x114+s ; s
BL              __strdup
MOV             R3, #1
STR             R0, [R8]
MOV             R0, R3
ADD             SP, SP, #0x114
POP             {R4-R9,PC}

loc_23DF0
ADD             R4, SP, #0x114+var_10C
MOVW            R2, #:lower16:aS ; "%.*s"
MOV             R3, R7
MOVT            R2, #:upper16:aS ; "%.*s"
MOV             R1, #6  ; maxlen
STR             R6, [SP,#0x114+var_114]
MOV             R0, R4  ; s
BL              snprintf
MOVW            R1, #:lower16:asc_4D7F0 ; "/#"
MOV             R0, R4  ; s
MOVT            R1, #:upper16:asc_4D7F0 ; "/#"
BL              strpbrk
CMP             R0, #0
MOVNE           R3, #0
STRBNE          R3, [R0]
B               loc_23DC8

loc_23E30
MOV             R3, #0
MOV             R0, R3
ADD             SP, SP, #0x114
POP             {R4-R9,PC}

loc_23E40
MOV             R3, R0
MOV             R7, R6
B               loc_23D78
; End of function sub_23CD8




; char *__fastcall sub_23E4C(char *s1, int)
sub_23E4C
PUSH            {R4-R10,LR}
MOV             R3, #0
MOVW            R4, #:lower16:aHttp ; "http:"
LDR             R8, =off_4CCE8 ; "http:"
MOV             R7, R0
MOV             R5, R3
MOVT            R4, #:upper16:aHttp ; "http:"
MOV             R6, #5
MOV             R9, R1
STR             R3, [R1,#0xB8]
B               loc_23E94

loc_23E78
ADD             R5, R5, #1
LDR             R4, [R8,R5,LSL#3]
CMP             R4, #0
MOV             R0, R4  ; s
BEQ             loc_23F18
BL              strlen
MOV             R6, R0

loc_23E94               ; s2
MOV             R1, R4
MOV             R2, R6  ; n
MOV             R0, R7  ; s1
BL              strncmp
SUBS            R4, R0, #0
BNE             loc_23E78
MOV             R1, #0x7C ; '|' ; c
MOV             R0, R7  ; s
BL              strchr
SUBS            R8, R0, #0
BEQ             loc_23F18
SUB             R3, R8, R7
STRB            R4, [R8]
RSB             R0, R6, #1
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R4, #:lower16:dword_4C8CC
LDR             R2, =aGetProxy ; "get_proxy"
ADD             R0, R0, R3
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0x2EE
MOVT            R4, #:upper16:dword_4C8CC
BL              sub_229BC
ADD             R5, R4, R5,LSL#3
ADD             R1, R7, R6 ; src
STR             R0, [R9,#0xB8]
ADD             R7, R8, #1
BL              strcpy
ADD             R2, R9, #0x260
ADD             R1, R9, #0x25C
LDR             R0, [R9,#0xB8]
BL              sub_23CD8
LDR             R3, [R5,#0x420]
STR             R3, [R9,#0xB4]

loc_23F18
MOV             R0, R7
POP             {R4-R10,PC}
; End of function sub_23E4C

off_23F20 DCD off_4CCE8 ; "http:"
off_23F24 DCD aGetProxy ; "get_proxy"



; bool __fastcall sub_23F28(int)
sub_23F28
LDR             R3, [R0,#0x250]
LDRB            R1, [R3]
CMP             R1, #0
BEQ             loc_23F40
MOV             R0, #1
BX              LR

loc_23F40
LDR             R0, [R0,#0x24C]
B               sub_22428
; End of function sub_23F28




; void **__fastcall sub_23F48(void **result, unsigned int, size_t, const char *, const char *, int)
sub_23F48

var_C= -0xC
arg_0=  0x14
arg_4=  0x18

CMP             R2, R1
PUSH            {R4-R7,LR}
SUB             SP, SP, #0xC
LDR             R7, [SP,#0xC+arg_0]
LDR             LR, [SP,#0xC+arg_4]
BEQ             loc_23F94
MOV             R12, R3
MOV             R5, R2
MOV             R6, R0
MOV             R4, R1
LDR             R0, [R0]
MOV             R3, R7
STR             LR, [SP,#0xC+var_C]
MOV             R2, R12
MOV             R1, R5
BL              sub_22AD4
CMP             R5, R4
STR             R0, [R6]
BHI             loc_23F9C

loc_23F94
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_23F9C
SUB             R2, R5, R4
ADD             R0, R0, R4
MOV             R1, #0
ADD             SP, SP, #0xC
POP             {R4-R7,LR}
B               memset
; End of function sub_23F48




; int __fastcall sub_23FB4(unsigned int, int)
sub_23FB4
MOV             R12, #0
PUSH            {R4,LR}
MOV             R3, R12
MOV             LR, R0
MOV             R4, #1
MOV             R0, R12

loc_23FCC
MOV             R2, LR,LSR R3
TST             R2, #1
BEQ             loc_23FE8
ADD             R12, R12, #1
ORR             R0, R0, R4,LSL R3
CMP             R12, R1
POPEQ           {R4,PC}

loc_23FE8
ADD             R3, R3, #1
CMP             R3, #0x20 ; ' '
BNE             loc_23FCC
POP             {R4,PC}
; End of function sub_23FB4




; int __fastcall sub_23FF8(_DWORD *, int)
sub_23FF8

var_914= -0x914
s2= -0x908
var_900= -0x900
var_8A4= -0x8A4
s= -0x804

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x910
SUB             SP, SP, #4
MOV             R10, R0
ADD             R2, SP, #0x914+var_900
MOV             R0, R1
MOV             R1, #0
BL              sub_47258
SUBS            R5, R0, #0
BEQ             loc_240B4
MOV             R1, #aResult ; "result"
BL              sub_480FC
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R7, R0
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R5
BL              sub_480FC
CMP             R7, #0
BEQ             loc_24068
LDR             R3, [R7]
CMP             R3, #7
BEQ             loc_24068
CMP             R0, #0
BEQ             loc_24138
LDR             R3, [R0]
CMP             R3, #7
BEQ             loc_24138

loc_24068
MOV             R6, #0

loc_2406C
LDR             R3, [R5,#4]
CMN             R3, #1
BEQ             loc_240A4
ADD             R3, R5, #4
DMB             ISH

loc_24080
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_24080
CMP             R2, #0
BNE             loc_240A4
MOV             R0, R5
BL              sub_48A34

loc_240A4
MOV             R0, R6
ADD             SP, SP, #0x910
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_240B4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_240DC
MOV             R3, #byte_68BD4
LDRB            R6, [R3]
CMP             R6, #0
BEQ             loc_24120

loc_240DC
ADD             R1, SP, #0x914+var_8A4
MOVW            R2, #:lower16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
LDR             R3, [SP,#0x914+var_900]
MOV             R6, #0
STR             R1, [SP,#0x914+var_914]
ADD             R0, SP, #0x914+s ; s
MOVT            R2, #:upper16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x914+s
MOV             R2, R6
MOV             R0, #6
BL              sub_20F58
MOV             R0, R6
ADD             SP, SP, #0x910
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_24120
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_240A4
B               loc_240DC

loc_24138
MOV             R0, R7
BL              sub_48364
BL              sub_483E4
SUBS            R4, R0, #0
BEQ             loc_24068
MOVW            R3, #:lower16:aVersionRolling ; "version-rolling.mask"
MOVW            R8, #:lower16:aVersionRolling_0 ; "version-rolling"
MOVW            R11, #:lower16:byte_74500
MOVT            R3, #:upper16:aVersionRolling ; "version-rolling.mask"
MOVT            R8, #:upper16:aVersionRolling_0 ; "version-rolling"
STR             R3, [SP,#0x914+s2]
MOVT            R11, #:upper16:byte_74500
MOV             R6, #0
B               loc_24210

loc_24170               ; s2
LDR             R1, [SP,#0x914+s2]
MOV             R0, R4  ; s1
BL              strcasecmp
CMP             R0, #0
BNE             loc_24194
MOV             R0, R4  ; s
BL              strlen
CMP             R0, #0x14
BEQ             loc_242B4

loc_24194
LDRB            R3, [R11]
CMP             R3, #0
BNE             loc_241C8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_241C8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_241F0

loc_241C8
MOVW            R2, #:lower16:aJsonRpcUnexpec ; "JSON-RPC unexpected mining.configure va"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aJsonRpcUnexpec ; "JSON-RPC unexpected mining.configure va"...
ADD             R0, SP, #0x914+s ; s
MOV             R3, R4
BL              snprintf
ADD             R1, SP, #0x914+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_241F0
MOV             R0, R4
BL              sub_483FC
MOV             R1, R0
MOV             R0, R7
BL              sub_483B0
BL              sub_483E4
SUBS            R4, R0, #0
BEQ             loc_2406C

loc_24210
MOV             R0, R4
BL              sub_483FC
BL              sub_483F0
SUBS            R9, R0, #0
BEQ             loc_2406C
MOV             R1, R8  ; s2
MOV             R0, R4  ; s1
BL              strcasecmp
CMP             R0, #0
BNE             loc_24170
MOV             R0, R4  ; s
BL              strlen
CMP             R0, #0xF
BNE             loc_24170
LDR             R3, [R9]
LDRB            R2, [R11]
CMP             R3, #5
BNE             loc_242D0
CMP             R2, #0
BNE             loc_24288
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24288
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_241F0

loc_24288
MOVW            R2, #:lower16:aPoolDSupportAb ; "POOL %d support ab mode!"
ADD             R0, SP, #0x914+s ; s
MOVT            R2, #:upper16:aPoolDSupportAb ; "POOL %d support ab mode!"
LDR             R3, [R10]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x914+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
B               loc_241F0

loc_242B4
MOV             R0, R9
MOV             R6, #1
BL              sub_48630
MOV             R1, R0  ; s
MOV             R0, R10 ; int
BL              sub_22E7C
B               loc_241F0

loc_242D0
CMP             R2, #0
BNE             loc_24300
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24300
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_24328

loc_24300
MOVW            R2, #:lower16:aPoolDDonTSuppo ; "Pool %d don't support ab!"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPoolDDonTSuppo ; "Pool %d don't support ab!"
ADD             R0, SP, #0x914+s ; s
LDR             R3, [R10]
BL              snprintf
ADD             R1, SP, #0x914+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_24328
MOV             R3, #1
MOV             R2, #0
STRB            R2, [R10,#0x284]
MOV             R6, R3
STR             R3, [R10,#0x288]
B               loc_2406C
; End of function sub_23FF8




; int __fastcall sub_24340(int)
sub_24340

var_80C= -0x80C
s= -0x804

MOVW            R3, #:lower16:byte_74500
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:byte_74500
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24378
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_243E8

loc_24378
MOVW            R2, #:lower16:aClosingSocketF ; "Closing socket for stratum pool %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aClosingSocketF ; "Closing socket for stratum pool %d"
ADD             R0, SP, #0x814+s ; s
LDR             R3, [R4]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_243A0
ADD             R5, R4, #0x2C0
MOV             R0, R5  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_24450

loc_243B4
MOV             R0, R4
BL              sub_223C0
MOV             R0, R5  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_24400

loc_243CC
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_243E8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_243A0
B               loc_24378

loc_24400
BL              __errno_location
LDR             LR, =aSuspendStratum ; "suspend_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0xC3C
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_243CC

loc_24450
BL              __errno_location
LDR             LR, =aSuspendStratum ; "suspend_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0xC3A
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_24340

B               loc_243B4
off_244A0 DCD aSuspendStratum ; "suspend_stratum"



; int __fastcall sub_244A4(int, char *, int)
sub_244A4

var_80C= -0x80C
s= -0x804

MOVW            R3, #:lower16:byte_73398
PUSH            {R4-R7,LR}
MOVT            R3, #:upper16:byte_73398
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R0
LDRB            R3, [R3]
MOV             R4, R1
MOV             R7, R2
CMP             R3, #0
BEQ             loc_244E4
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24568

loc_244E4
ADD             R6, R5, #0x2C0
MOV             R0, R6  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_247BC

loc_244F8
LDRB            R3, [R5,#0x281]
CMP             R3, #0
BNE             loc_24668
MOV             R0, R6  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
MOVNE           R4, #3
BEQ             loc_245D0

loc_24518
BL              __errno_location
LDR             LR, =aStratumSend ; "stratum_send"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x69E
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_2468C

loc_24568
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_245A4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_245A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_244E4

loc_245A4
MOVW            R2, #:lower16:aSendS ; "SEND: %s"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aSendS ; "SEND: %s"
MOV             R3, R4
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_244E4

loc_245D0
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98

loc_245E0
MOV             R3, #byte_68BD5
LDRB            R0, [R3]
CMP             R0, #0
BEQ             loc_2465C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2461C
MOV             R3, #byte_68BD4
LDRB            R0, [R3]
CMP             R0, #0
BEQ             loc_2483C

loc_2461C
MOVW            R12, #:lower16:aStratumSendFai ; "Stratum send failed due to no pool stra"...
ADD             LR, SP, #0x814+s
MOVT            R12, #:upper16:aStratumSendFai ; "Stratum send failed due to no pool stra"...
LDM             R12!, {R0-R3} ; "Stratum send failed due to no pool stra"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "led due to no pool stratum_active"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ol stratum_active"
LDR             R12, [R12] ; "e"
STM             LR!, {R0-R3}
MOV             R0, #7
ADD             R1, SP, #0x814+s
MOV             R2, #0
STRH            R12, [LR]
BL              sub_20F58
MOV             R0, #0

loc_2465C
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_24668               ; s
MOV             R1, R4
MOV             R2, R7
MOV             R0, R5  ; int
BL              sub_21CA0
MOV             R4, R0
MOV             R0, R6  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_24518

loc_2468C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R4, #2
BEQ             loc_24738
CMP             R4, #3
BEQ             loc_245E0
CMP             R4, #1
CLZNE           R0, R4
MOVNE           R0, R0,LSR#5
BNE             loc_2465C
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_24720
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_246F8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2480C

loc_246F8
MOVW            R2, #:lower16:aWriteSelectFai ; "Write select failed on pool %d sock"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aWriteSelectFai ; "Write select failed on pool %d sock"
ADD             R0, SP, #0x814+s ; s
LDR             R3, [R5]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_24720
MOV             R0, R5
BL              sub_24340
MOV             R0, #0

loc_2472C
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_24738
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_24720
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24774
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_24824

loc_24774
MOVW            LR, #:lower16:aFailedToSendIn ; "Failed to send in stratum_send"
ADD             R12, SP, #0x814+s
MOVT            LR, #:upper16:aFailedToSendIn ; "Failed to send in stratum_send"
LDM             LR!, {R0-R3} ; "Failed to send in stratum_send"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "n stratum_send"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x814+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #7
STRB            LR, [R12]
BL              sub_20F58
MOV             R0, R5
BL              sub_24340
MOV             R0, #0
B               loc_2472C

loc_247BC
BL              __errno_location
LDR             LR, =aStratumSend ; "stratum_send"
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x698
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_244F8

loc_2480C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_246F8
B               loc_24720

loc_24824
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_24774
B               loc_24720

loc_2483C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_2461C
B               loc_2465C
; End of function sub_244A4

off_24854 DCD aStratumSend ; "stratum_send"



; char *__fastcall sub_24858(int)
sub_24858

var_281C= -0x281C
tv= -0x2814
var_280C= -0x280C
var_2804= -0x2804
var_200C= -0x200C
var_2004= -0x2004

PUSH            {R4-R9,LR}
MOV             R1, #0xA ; c
VPUSH           {D8}
SUB             SP, SP, #0x2800
SUB             SP, SP, #0x1C
MOV             R4, R0
LDR             R7, [R0,#0x250]
MOV             R0, R7  ; s
BL              strchr
SUBS            R1, R0, #0 ; tz
BEQ             loc_249DC

loc_24884               ; s
MOV             R0, R7
BL              strlen
MOVW            R1, #:lower16:word_4C858
MOV             R6, R0
MOVT            R1, #:upper16:word_4C858 ; delim
MOV             R0, R7  ; s
BL              strtok
CMP             R0, #0
BEQ             loc_24B58
BL              __strdup
MOV             R5, R0
BL              strlen
ADD             R1, R0, #1
MOV             R7, R0
CMP             R1, R6
BLT             loc_249C4
LDR             R3, [R4,#0x250]
MOV             R2, #0
STRB            R2, [R3]

loc_248D0
LDR             R1, [R4,#0x208]
MOV             R12, #0
LDR             R6, [R4,#0x20C]
LDR             R2, [R4,#0x210]
ADDS            R1, R1, #1
LDR             LR, [R4,#0x214]
ADC             R6, R6, R12
LDR             R3, [R4,#0x218]
ADDS            R2, R2, R7
STR             R1, [R4,#0x208]
STR             R2, [R4,#0x210]
MOVW            R2, #:lower16:byte_73398
ADC             R1, LR, R12
MOVT            R2, #:upper16:byte_73398
STR             R1, [R4,#0x214]
ADDS            R0, R3, R7
LDRB            R1, [R2]
LDR             R2, [R4,#0x21C]
STR             R6, [R4,#0x20C]
STR             R0, [R4,#0x218]
ADC             R3, R2, R12
CMP             R1, R12
STR             R3, [R4,#0x21C]
BEQ             loc_249B0
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_249B0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24980
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24980
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_249B0

loc_24980
MOVW            R2, #:lower16:aRecvdS ; "RECVD: %s"
ADD             R0, SP, #0x281C+var_200C
MOVT            R2, #:upper16:aRecvdS ; "RECVD: %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #8 ; s
MOV             R3, R5
BL              snprintf
ADD             R1, SP, #0x281C+var_200C
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #7
BL              sub_20F58

loc_249B0
MOV             R0, R5
ADD             SP, SP, #0x2800
ADD             SP, SP, #0x1C
VPOP            {D8}
POP             {R4-R9,PC}

loc_249C4               ; dest
LDR             R0, [R4,#0x250]
SUB             R2, R6, R7
ADD             R2, R2, #1 ; n
ADD             R1, R0, R1 ; src
BL              memmove
B               loc_248D0

loc_249DC               ; tv
ADD             R0, SP, #0x281C+tv
BL              gettimeofday
MOV             R1, #0x3C ; '<'
LDR             R0, [R4,#0x24C]
BL              sub_22428
CMP             R0, #0
BEQ             loc_24D20
MOV             R6, #0xE000
VLDR            D8, =1000000.0
MOVT            R6, #0xFFFF
B               loc_24A4C

loc_24A08
BL              __errno_location
LDR             R3, [R0]
RSB             R1, R5, #0x3C ; '<'
CMP             R3, #0xB
BNE             loc_24BFC
LDR             R0, [R4,#0x24C]
BL              sub_22428
CMP             R0, #0
BEQ             loc_24BFC

loc_24A2C
LDR             R7, [R4,#0x250]
CMP             R5, #0x3B ; ';'
MOV             R1, #0xA ; c
MOV             R0, R7  ; s
BGT             loc_24884
BL              strchr
CMP             R0, #0
BNE             loc_24884

loc_24A4C
ADD             R0, SP, #0x281C+var_200C
MOV             R2, #0x2000 ; n
MOV             R1, #0  ; c
ADD             R0, R0, #8 ; s
BL              memset
ADD             R1, SP, #0x281C+var_200C
MOV             R3, #0  ; flags
ADD             R1, R1, #8 ; buf
MOVW            R2, #0x1FFC ; n
LDR             R0, [R4,#0x24C] ; fd
BL              recv
SUBS            R5, R0, #0
MOV             R1, #0  ; tz
ADD             R0, SP, #0x281C+var_280C ; tv
BEQ             loc_24C90
BL              gettimeofday
LDR             R2, [SP,#0x281C+var_280C.tv_usec]
CMP             R5, #0
LDR             R12, [SP,#0x281C+tv.tv_usec]
ADD             R0, SP, #0x281C+var_200C
LDR             R3, [SP,#0x281C+var_280C]
ADD             R0, R0, #8 ; s
LDR             R1, [SP,#0x281C+tv]
SUB             R2, R2, R12
SUB             R3, R3, R1
VMOV            S15, R2
VCVT.F64.S32    D5, S15
VMOV            S14, R3
VCVT.F64.S32    D6, S14
VDIV.F64        D7, D5, D8
VADD.F64        D7, D7, D6
VCVT.S32.F64    S15, D7
VMOV            R5, S15
BLT             loc_24A08
BL              strlen
LDR             R9, [R4,#0x250]
MOV             R7, R0
MOV             R0, R9  ; s
BL              strlen
LDR             R3, [R4,#0x254]
MOV             R8, R0
ADD             R0, R7, R0
ADD             R0, R0, #1
CMP             R0, R3
BCC             loc_24B44
AND             R0, R0, R6
MOVW            R3, #0x70B
ADD             R7, R0, #0x2000
MOVW            R2, #:lower16:aUtilC ; "util.c"
MOV             R0, R9
MOV             R1, R7
STR             R3, [SP,#0x281C+var_281C]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aRecallocSock ; "recalloc_sock"
BL              sub_22AD4
SUB             R2, R7, R8 ; n
STR             R0, [R4,#0x250]
MOV             R1, #0  ; c
ADD             R0, R0, R8 ; s
BL              memset
LDR             R9, [R4,#0x250]
STR             R7, [R4,#0x254]

loc_24B44
ADD             R1, SP, #0x281C+var_200C
MOV             R0, R9  ; dest
ADD             R1, R1, #8 ; src
BL              strcat
B               loc_24A2C

loc_24B58
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_24BEC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24BA8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24BA8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24BEC

loc_24BA8
MOVW            R12, #:lower16:aFailedToParseA ; "Failed to parse a \\n terminated string"...
ADD             LR, SP, #0x281C+var_200C
MOVT            R12, #:upper16:aFailedToParseA ; "Failed to parse a \\n terminated string"...
ADD             LR, LR, #8
LDM             R12!, {R0-R3} ; "Failed to parse a \\n terminated string"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "a \\n terminated string in recv_line"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "string in recv_line"
LDR             R12, [R12] ; "ine"
STM             LR!, {R0-R3}
ADD             R1, SP, #0x281C+var_200C
ADD             R1, R1, #8
MOV             R2, #0
MOV             R0, #7
STR             R12, [LR]
BL              sub_20F58

loc_24BEC
MOV             R0, R4
MOV             R5, #0
BL              sub_228C8
B               loc_249B0

loc_24BFC
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_24C80
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24C4C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24C4C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24C80

loc_24C4C
MOVW            R12, #:lower16:aFailedToRecvSo ; "Failed to recv sock in recv_line"
ADD             LR, SP, #0x281C+var_2804
MOVT            R12, #:upper16:aFailedToRecvSo ; "Failed to recv sock in recv_line"
LDM             R12!, {R0-R3} ; "Failed to recv sock in recv_line"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ock in recv_line"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x281C+var_2804
MOV             R2, #0
MOV             R0, #7
STRB            R12, [LR]
BL              sub_20F58

loc_24C80
MOV             R0, R4
BL              sub_24340
LDR             R7, [R4,#0x250]
B               loc_24884

loc_24C90
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, R1
BEQ             loc_24C80
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, R1
BNE             loc_24CE0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R1
BNE             loc_24CE0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24C80

loc_24CE0
MOVW            LR, #:lower16:aSocketClosedWa ; "Socket closed waiting in recv_line"
ADD             R12, SP, #0x281C+var_2804
MOVT            LR, #:upper16:aSocketClosedWa ; "Socket closed waiting in recv_line"
LDM             LR!, {R0-R3} ; "Socket closed waiting in recv_line"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "iting in recv_line"
LDR             LR, [LR] ; "ne"
STM             R12!, {R0-R3}
ADD             R1, SP, #0x281C+var_2804
MOV             R2, #0
MOV             R0, #7
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58
B               loc_24C80

loc_24D20
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_24BEC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24D70
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_24D70
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_24BEC

loc_24D70
MOVW            LR, #:lower16:aTimedOutWaitin ; "Timed out waiting for data on socket_fu"...
ADD             R12, SP, #0x281C+var_200C
MOVT            LR, #:upper16:aTimedOutWaitin ; "Timed out waiting for data on socket_fu"...
ADD             R12, R12, #8
LDM             LR!, {R0-R3} ; "Timed out waiting for data on socket_fu"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "g for data on socket_full"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "cket_full"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x281C+var_200C
STRH            R2, [R12]
ADD             R1, R1, #8
MOV             R0, #7
MOV             R2, #0
BL              sub_20F58
B               loc_24BEC
; End of function sub_24858

ALIGN 8
dbl_24DB8 DCFD 1000000.0
off_24DC0 DCD aRecallocSock ; "recalloc_sock"



; time_t __fastcall sub_24DC4(_DWORD *, int)
sub_24DC4
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
MOV             R0, #0  ; timer
BL              time
STR             R5, [R4,#0xF8]
STR             R0, [R4,#0xF4]
CMP             R5, #9  ; switch 10 cases
LDRLS           PC, [PC,R5,LSL#2] ; switch jump
B               def_24DE4 ; jumptable 00024DE4 default case
jpt_24DE4 DCD loc_24E24 ; jump table for switch statement
DCD loc_24E34
DCD loc_24E44
DCD loc_24E54
DCD loc_24E64
DCD loc_24E74
DCD loc_24E84
DCD loc_24E94
DCD loc_24EA4
DCD loc_24E14

loc_24E14               ; jumptable 00024DE4 case 9
LDR             R3, [R4,#0x120]
ADD             R3, R3, #1
STR             R3, [R4,#0x120]

def_24DE4               ; jumptable 00024DE4 default case
POP             {R4-R6,PC}

loc_24E24               ; jumptable 00024DE4 case 0
LDR             R3, [R4,#0xFC]
ADD             R3, R3, #1
STR             R3, [R4,#0xFC]
POP             {R4-R6,PC}

loc_24E34               ; jumptable 00024DE4 case 1
LDR             R3, [R4,#0x100]
ADD             R3, R3, #1
STR             R3, [R4,#0x100]
POP             {R4-R6,PC}

loc_24E44               ; jumptable 00024DE4 case 2
LDR             R3, [R4,#0x104]
ADD             R3, R3, #1
STR             R3, [R4,#0x104]
POP             {R4-R6,PC}

loc_24E54               ; jumptable 00024DE4 case 3
LDR             R3, [R4,#0x108]
ADD             R3, R3, #1
STR             R3, [R4,#0x108]
POP             {R4-R6,PC}

loc_24E64               ; jumptable 00024DE4 case 4
LDR             R3, [R4,#0x10C]
ADD             R3, R3, #1
STR             R3, [R4,#0x10C]
POP             {R4-R6,PC}

loc_24E74               ; jumptable 00024DE4 case 5
LDR             R3, [R4,#0x110]
ADD             R3, R3, #1
STR             R3, [R4,#0x110]
POP             {R4-R6,PC}

loc_24E84               ; jumptable 00024DE4 case 6
LDR             R3, [R4,#0x114]
ADD             R3, R3, #1
STR             R3, [R4,#0x114]
POP             {R4-R6,PC}

loc_24E94               ; jumptable 00024DE4 case 7
LDR             R3, [R4,#0x118]
ADD             R3, R3, #1
STR             R3, [R4,#0x118]
POP             {R4-R6,PC}

loc_24EA4               ; jumptable 00024DE4 case 8
LDR             R3, [R4,#0x11C]
ADD             R3, R3, #1
STR             R3, [R4,#0x11C]
POP             {R4-R6,PC}
; End of function sub_24DC4




; char *__fastcall sub_24EB4(char *, char *s)
sub_24EB4
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R6, R1
BL              strlen
CMP             R0, #0
MOVEQ           R4, R5
BEQ             loc_24F34
CMP             R5, #0
ADD             R4, R0, #1
BEQ             loc_24F3C
MOV             R0, R5  ; s
BL              strlen
ADD             R0, R0, R4
TST             R0, #3
BICNE           R0, R0, #3
MOVWNE          R1, #0xD630
ADDNE           R0, R0, #4
BEQ             loc_24F7C

loc_24F00
MOVT            R1, #4
MOVW            R3, #0xD2A
LDR             R2, =aReallocStrcat ; "realloc_strcat"
BL              sub_229BC
MOVW            R1, #:lower16:(aXDSS_0+4) ; "%s%s"
MOV             R4, R0
MOV             R3, R6
MOVT            R1, #:upper16:(aXDSS_0+4) ; format
MOV             R2, R5
MOV             R0, R4  ; s
BL              sprintf
MOV             R0, R5  ; ptr
BL              free

loc_24F34
MOV             R0, R4
POP             {R4-R6,PC}

loc_24F3C
TST             R4, #3
MOVW            R3, #0xD2A
BICNE           R0, R4, #3
MOVWEQ          R1, #0xD630
MOVWNE          R1, #0xD630
MOVEQ           R0, R4
ADDNE           R0, R0, #4
LDR             R2, =aReallocStrcat ; "realloc_strcat"
MOVT            R1, #4
BL              sub_229BC
MOV             R4, R0
MOV             R1, R6  ; src
MOV             R0, R4  ; dest
BL              strcpy
MOV             R0, R4
POP             {R4-R6,PC}

loc_24F7C
MOVW            R1, #0xD630
B               loc_24F00
; End of function sub_24EB4

off_24F84 DCD aReallocStrcat ; "realloc_strcat"



; char *__fastcall sub_24F88(const char *)
sub_24F88

var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R7,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
BEQ             loc_2502C

loc_24F9C               ; s
MOV             R0, R4
MOVW            R6, #:lower16:a0x02x ; "0x%02x"
BL              strlen
MOV             R0, R0,LSL#2
MOV             R1, #aUtilC ; "util.c"
LDR             R2, =aStrText ; "str_text"
ADD             R0, R0, #5
MOVW            R3, #0xD48
BL              sub_229BC
SUB             R5, R4, #1
MOV             R7, R0
MOV             R4, R0
MOVT            R6, #:upper16:a0x02x ; "0x%02x"
B               loc_24FE4

loc_24FD8
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_25018

loc_24FE4
LDRB            R2, [R5,#1]!
SUB             R3, R2, #0x20 ; ' '
CMP             R3, #0x5E ; '^'
STRBLS          R2, [R4]
ADDLS           R4, R4, #1
BLS             loc_24FD8
MOV             R0, R4  ; s
MOV             R1, R6  ; format
BL              sprintf
LDRB            R3, [R5]
ADD             R4, R4, #4
CMP             R3, #0
BNE             loc_24FE4

loc_25018
MOV             R0, R7
STRB            R3, [R4]
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_2502C               ; size
MOV             R0, #7
BL              malloc
SUBS            R2, R0, #0
BEQ             loc_2505C
MOV             R3, #aNull ; "(null)"
LDM             R3, {R0,R1} ; "(null)"
STR             R0, [R2]
MOV             R3, R1,LSR#16
STRH            R1, [R2,#4]
STRB            R3, [R2,#6]
B               loc_24F9C

loc_2505C
LDR             R1, =aStrText ; "str_text"
MOVW            R0, #0xD43
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aFailedToMalloc_7 ; "Failed to malloc null in %s %s():%d"
STR             R0, [SP,#0x80C+var_808]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R1, [SP,#0x80C+var_80C]
ADD             R0, SP, #0x80C+s ; s
MOVT            R2, #:upper16:aFailedToMalloc_7 ; "Failed to malloc null in %s %s():%d"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_24F88

B               loc_24F9C
off_250A4 DCD aStrText  ; "str_text"



; int __fastcall sub_250A8(const char *)
sub_250A8

var_1C= -0x1C
s= -0x14

PUSH            {LR}
MOVW            R2, #:lower16:aCgS ; "cg@%s"
SUB             SP, SP, #0x1C
MOV             R3, R0
MOVT            R2, #:upper16:aCgS ; "cg@%s"
ADD             R0, SP, #0x1C+s ; s
MOV             R1, #0x10 ; maxlen
BL              snprintf
MOV             R3, #0
ADD             R1, SP, #0x1C+s
STR             R3, [SP,#0x1C+var_1C]
MOV             R2, R3
MOV             R0, #0xF ; option
BL              prctl
ADD             SP, SP, #0x1C
POP             {PC}
; End of function sub_250A8




; int __fastcall sub_250E8(sem_t *, const char *, const char *, int)
sub_250E8

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4-R7,LR}
MOV             R6, R2
SUB             SP, SP, #0x810
MOV             R2, #0  ; value
SUB             SP, SP, #4
MOV             R5, R1
MOV             R1, R2  ; pshared
MOV             R7, R3
BL              sem_init
SUBS            R4, R0, #0
BEQ             loc_25158
BL              __errno_location
STRD            R6, R7, [SP,#0x814+var_80C]
MOVW            R2, #:lower16:aFailedToSemIni ; "Failed to sem_init ret=%d errno=%d in %"...
STR             R5, [SP,#0x814+var_810]
MOV             R3, R4
LDR             R12, [R0]
MOVT            R2, #:upper16:aFailedToSemIni ; "Failed to sem_init ret=%d errno=%d in %"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
STR             R12, [SP,#0x814+var_814]
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x814+s
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_25158
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}
; End of function sub_250E8




; int __fastcall sub_25164(int, const pthread_attr_t *, void *(*)(void *), void *)
sub_25164
PUSH            {R4-R8,LR}
MOV             R5, R1
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOV             R4, R0
MOV             R6, R2
MOV             R7, R3
ADD             R0, R0, #0x10
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0x4A7
LDR             R2, =aThrInfoCreate ; "thr_info_create"
BL              sub_250E8
MOV             R3, R7  ; arg
MOV             R2, R6  ; start_routine
MOV             R1, R5  ; attr
ADD             R0, R4, #0xC ; newthread
POP             {R4-R8,LR}
B               pthread_create
; End of function sub_25164

off_251A8 DCD aThrInfoCreate ; "thr_info_create"



; int __fastcall sub_251AC(sem_t *, const char *, const char *, int)
sub_251AC
PUSH            {R4-R8,LR}
MOV             R5, R1
MOV             R6, R2
MOV             R7, R3
MOV             R4, R0
BL              sem_post
CMP             R0, #0
POPEQ           {R4-R8,PC}
MOV             R3, R7
MOV             R2, R6
MOV             R1, R5
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_22538
; End of function sub_251AC




; int __fastcall sub_251E4(int)
sub_251E4
PUSH            {R4,LR}
MOV             R1, #0  ; oldtype
MOV             R4, R0
MOV             R0, #1  ; type
BL              pthread_setcanceltype
LDR             R3, [R4,#0x10]
LDR             R0, [R4,#0x14]
BLX             R3
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOV             R0, R4
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0xE2A
LDR             R2, =aCompletionThre ; "completion_thread"
BL              sub_251AC
MOV             R0, #0
POP             {R4,PC}
; End of function sub_251E4

off_25224 DCD aCompletionThre ; "completion_thread"



; int __fastcall sub_25228(sem_t *sem, const char *, const char *, int)
sub_25228

var_808= -0x808
s= -0x804

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R0
MOV             R5, R1
MOV             R6, R2
MOV             R7, R3

loc_25244               ; sem
MOV             R0, R4
BL              sem_wait
CMP             R0, #0
BNE             loc_25260

loc_25254
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_25260
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_25244
MOVW            R2, #:lower16:aFailedToSemWai ; "Failed to sem_wait errno=%d cgsem=0x%p "...
STR             R7, [SP,#0x814+var_808]
STMEA           SP, {R4-R6}
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aFailedToSemWai ; "Failed to sem_wait errno=%d cgsem=0x%p "...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_25228



; Attributes: thunk

sub_252A4
B               loc_25254
; End of function sub_252A4




; int __fastcall sub_252A8(sem_t *, int, const char *, const char *, int)
sub_252A8

var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_818= -0x818
abstime= -0x814
tv= -0x80C
s= -0x804
arg_0=  0x24

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x820
SUB             SP, SP, #0xC
MOV             R5, R1
MOV             R9, R0
MOV             R1, #0  ; tz
ADD             R0, SP, #0x82C+tv ; tv
STR             R2, [SP,#0x82C+var_818]
MOV             R11, R3
MOVW            R6, #0xC9FF
BL              gettimeofday
LDR             R1, [SP,#0x82C+tv.tv_usec]
MOV             R4, #0xCA00
MOV             R7, #0x3600
MOV             R2, R5
MOV             R3, R5,ASR#31
MOV             R8, #0x6C00
MOV             R5, #0x3E8
LDR             R10, [SP,#0x82C+tv]
ADD             R0, SP, #0x82C+abstime
MOVT            R6, #0x3B9A
MOVT            R4, #0x3B9A
MOVT            R7, #0xC465
MUL             R5, R5, R1
MOVT            R8, #0x88CA
BL              sub_23768

loc_25310
LDRD            R2, R3, [SP,#0x82C+abstime]
ADD             R3, R5, R3
ADD             R2, R10, R2
CMP             R3, R6
STRD            R2, R3, [SP,#0x82C+abstime]
BLE             loc_25370
ADD             R1, R3, R7
ADD             R0, R2, #1
CMP             R1, R6
ADDGT           R1, R3, R8
ADDGT           R0, R2, #2
STRD            R0, R1, [SP,#0x82C+abstime]

loc_25340               ; abstime
ADD             R1, SP, #0x82C+abstime
MOV             R0, R9  ; sem
BL              sem_timedwait
CMP             R0, #0
BEQ             loc_25364
BL              __errno_location
LDR             R0, [R0]
CMP             R0, #0x6E ; 'n'
BNE             loc_2538C

loc_25364
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_25370
CMP             R3, #0
BGE             loc_25340

loc_25378
ADDS            R3, R3, R4
SUB             R2, R2, #1
BMI             loc_25378
STRD            R2, R3, [SP,#0x82C+abstime]
B               loc_25340

loc_2538C
CMP             R0, #4
BEQ             loc_25310
LDR             R3, [SP,#0x82C+arg_0]
MOVW            R2, #:lower16:aFailedToSemTim ; "Failed to sem_timedwait errno=%d cgsem="...
LDR             R1, [SP,#0x82C+var_818]
MOVT            R2, #:upper16:aFailedToSemTim ; "Failed to sem_timedwait errno=%d cgsem="...
STR             R11, [SP,#0x82C+var_824]
STR             R3, [SP,#0x82C+var_820]
MOV             R3, R0
STR             R1, [SP,#0x82C+var_828]
ADD             R0, SP, #0x82C+s ; s
MOV             R1, #0x800 ; maxlen
STR             R9, [SP,#0x82C+var_82C]
BL              snprintf
ADD             R1, SP, #0x82C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_252A8




; void sub_253DC()
sub_253DC
MOV             R0, #0
B               loc_25364
; End of function sub_253DC




; int *__fastcall sub_253E4(sem_t *sem)
sub_253E4
PUSH            {R4,LR}
MOV             R4, R0
B               loc_253F4

locret_253F0
POPNE           {R4,PC}

loc_253F4               ; sem
MOV             R0, R4
BL              sem_trywait
CMP             R0, #0
BGE             locret_253F0
BL              __errno_location
LDR             R3, [R0]
CMP             R3, #4
POPNE           {R4,PC}
B               loc_253F4
; End of function sub_253E4

; [00000004 BYTES: COLLAPSED FUNCTION j_sem_destroy]



; bool __fastcall sub_2541C(int, int, int)
sub_2541C

var_14= -0x14
newthread= -8

PUSH            {R4-R7,LR}
MOV             R6, R1
MOVW            R1, #:lower16:aUtilC ; "util.c"
SUB             SP, SP, #0x14
MOV             R5, R2
MOV             R7, R0
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0xE35
LDR             R2, =aCgCompletionTi ; "cg_completion_timeout"
MOV             R0, #0x18
BL              sub_229BC
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOVW            R3, #0xE36
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R2, =aCgCompletionTi ; "cg_completion_timeout"
MOV             R4, R0
BL              sub_250E8
MOVW            R2, #:lower16:sub_251E4
MOV             R3, R4  ; arg
MOVT            R2, #:upper16:sub_251E4 ; start_routine
MOV             R1, #0  ; attr
STR             R7, [R4,#0x10]
ADD             R0, SP, #0x14+newthread ; newthread
STR             R6, [R4,#0x14]
BL              pthread_create
MOVW            R3, #0xE3C
MOVW            R2, #:lower16:aUtilC ; "util.c"
MOV             R1, R5
STR             R3, [SP,#0x14+var_14]
MOV             R0, R4
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aCgCompletionTi ; "cg_completion_timeout"
BL              sub_252A8
SUBS            R5, R0, #0
BEQ             loc_254C0
LDR             R0, [SP,#0x14+newthread] ; th
BL              pthread_cancel
CLZ             R0, R5
MOV             R0, R0,LSR#5
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_254C0               ; thread_return
MOV             R1, R5
LDR             R0, [SP,#0x14+newthread] ; th
BL              pthread_join
MOV             R0, R4  ; ptr
BL              free
CLZ             R0, R5
MOV             R0, R0,LSR#5
ADD             SP, SP, #0x14
POP             {R4-R7,PC}
; End of function sub_2541C

off_254E4 DCD aCgCompletionTi ; "cg_completion_timeout"



; void __fastcall sub_254E8(void *, const void *, size_t, int, int, int)
sub_254E8

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800
arg_0=  0x10
arg_4=  0x14

CMP             R2, #1
PUSH            {R4-R6,LR}
SUB             SP, SP, #0x810
MOV             R12, R2
MOV             R4, R3
LDR             R5, [SP,#0x810+arg_0]
LDR             R6, [SP,#0x810+arg_4]
BMI             loc_25528
CMP             R0, #0
BEQ             loc_255A0
CMP             R1, #0
MOV             LR, R1
BEQ             loc_255FC
ADD             SP, SP, #0x810
POP             {R4-R6,LR}
B               memcpy

loc_25528
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25564
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25564
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_25598

loc_25564
MOVW            R2, #:lower16:aErrAskedToMemc ; "ERR: Asked to memcpy %u bytes from %s %"...
MOV             R3, R12
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aErrAskedToMemc ; "ERR: Asked to memcpy %u bytes from %s %"...
STR             R6, [SP,#0x810+var_808]
STR             R5, [SP,#0x810+var_80C]
STR             R4, [SP,#0x810+var_810]

loc_25580               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_25598
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_255A0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_255DC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_255DC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_25598

loc_255DC
MOVW            R2, #:lower16:aErrAskedToMemc_0 ; "ERR: Asked to memcpy %u bytes to NULL f"...
STR             R6, [SP,#0x810+var_808]
MOV             R3, R12
STR             R5, [SP,#0x810+var_80C]
ADD             R0, SP, #0x810+s
STR             R4, [SP,#0x810+var_810]
MOVT            R2, #:upper16:aErrAskedToMemc_0 ; "ERR: Asked to memcpy %u bytes to NULL f"...
B               loc_25580

loc_255FC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25638
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25638
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_25598

loc_25638
MOVW            R2, #:lower16:aErrAskedToMemc_1 ; "ERR: Asked to memcpy %u bytes from NULL"...
STR             R6, [SP,#0x810+var_808]
MOV             R3, R12
STR             R5, [SP,#0x810+var_80C]
ADD             R0, SP, #0x810+s
STR             R4, [SP,#0x810+var_810]
MOVT            R2, #:upper16:aErrAskedToMemc_1 ; "ERR: Asked to memcpy %u bytes from NULL"...
B               loc_25580
; End of function sub_254E8

PUSH            {R4,LR}
SUB             SP, SP, #0x28 ; '('
MOV             R3, #0
MOV             R4, R0
ADD             R0, SP, #0xC
STR             R3, [SP,#0x10]
STR             R3, [SP,#0xC]
STR             R3, [SP,#0x14]
STR             R3, [SP,#0x18]
STR             R3, [SP,#0x1C]
STR             R3, [SP,#0x20]
STRB            R3, [SP,#0x24]
BL              sub_22FEC
LDR             R12, =aAddressToPubke ; "address_to_pubkeyhash"
MOV             R3, #0x76 ; 'v'
STRB            R3, [R4]
MOV             R2, #0x14
MOV             R0, #0xFFFFFFA9
MOVW            R1, #0x3C6
MOVW            R3, #:lower16:aUtilC ; "util.c"
STRB            R0, [R4,#1]
STRB            R2, [R4,#2]
ADD             R0, R4, #3
STR             R1, [SP,#4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R12, [SP]
ADD             R1, SP, #0xD
BL              sub_254E8
MOV             R2, #0xFFFFFF88
MOV             R3, #0xFFFFFFAC
STRB            R2, [R4,#0x17]
STRB            R3, [R4,#0x18]
ADD             SP, SP, #0x28 ; '('
POP             {R4,PC}
off_256E0 DCD aAddressToPubke ; "address_to_pubkeyhash"
PUSH            {R4-R8,LR}
SUB             SP, SP, #8
LDR             R6, =aSerString ; "ser_string"
MOV             R7, R1
MOV             R8, R0
BL              strlen
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOV             R4, R0
MOV             R2, R6
ADD             R0, R0, #9
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOV             R3, #0x3E4
BL              sub_229BC
CMP             R4, #0xFC
MOV             R5, R0
BLS             loc_257BC
CMP             R4, #0x10000
BCC             loc_25774
MOV             R3, #0xFFFFFFFE
REV             R2, R4
STRB            R3, [R5]
MOVW            R0, #0x3FB
MOVW            R3, #:lower16:aUtilC ; "util.c"
STR             R2, [R5,#1]
MOV             R1, R8
MOV             R2, R4
STR             R0, [SP,#4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
ADD             R0, R5, #5
STR             R6, [SP]
ADD             R4, R4, #5
BL              sub_254E8
MOV             R0, R5
STR             R4, [R7]
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_25774
MOV             R3, #0xFFFFFFFD
REV16           R2, R4
STRB            R3, [R5]
MOVW            R0, #0x3F1
MOVW            R3, #:lower16:aUtilC ; "util.c"
STRH            R2, [R5,#1]
MOV             R1, R8
MOV             R2, R4
STR             R0, [SP,#4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
ADD             R0, R5, #3
STR             R6, [SP]
ADD             R4, R4, #3
BL              sub_254E8
MOV             R0, R5
STR             R4, [R7]
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_257BC
MOV             R2, #0x3E8
MOVW            R3, #:lower16:aUtilC ; "util.c"
STRB            R4, [R0],#1
MOV             R1, R8
STR             R2, [SP,#4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOV             R2, R4
STR             R6, [SP]
ADD             R4, R4, #1
BL              sub_254E8
MOV             R0, R5
STR             R4, [R7]
ADD             SP, SP, #8
POP             {R4-R8,PC}
off_257F4 DCD aSerString ; "ser_string"



; void __fastcall sub_257F8(void *, const void *)
sub_257F8

var_C= -0xC
var_8= -8

LDR             R12, =aCopyTime ; "copy_time"
MOVW            R2, #0x4D4
PUSH            {LR}
MOVW            R3, #:lower16:aUtilC ; "util.c"
SUB             SP, SP, #0xC
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R2, [SP,#0xC+var_8]
MOV             R2, #8
STR             R12, [SP,#0xC+var_C]
BL              sub_254E8
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_257F8

off_25828 DCD aCopyTime ; "copy_time"


; Attributes: bp-based frame fpd=0xFFFFFFE0

; int __fastcall sub_2582C(int, _DWORD *)
sub_2582C

var_95C= -0x95C
var_958= -0x958
var_954= -0x954
var_950= -0x950
var_94C= -0x94C
var_948= -0x948
var_944= -0x944
var_940= -0x940
var_93C= -0x93C
var_938= -0x938
var_934= -0x934
var_930= -0x930
var_92C= -0x92C
var_928= -0x928
var_924= -0x924
var_920= -0x920
var_91C= -0x91C
var_918= -0x918
var_914= -0x914
var_910= -0x910
var_90C= -0x90C
var_908= -0x908
var_904= -0x904
var_900= -0x900
var_8FC= -0x8FC
var_8F8= -0x8F8
s= -0x8F4
ptr= -0x8F0
var_8E0= -0x8E0
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R8, R1
ADD             R11, SP, #0x20
SUB             SP, SP, #0x950
SUB             SP, SP, #0xC
MOV             R9, R0
MOV             R1, #4
MOV             R0, R8
BL              sub_48484
SUBS            R5, R0, #0
BEQ             loc_25864
LDR             R3, [R5]
CMP             R3, #1
BEQ             loc_25874

loc_25864
MOV             R6, #0

loc_25868
MOV             R0, R6
SUB             SP, R11, #0x20 ; ' '
POP             {R4-R11,PC}

loc_25874
BL              sub_48468
SUBS            R10, R0, #0
BLE             loc_259E8
MOV             R4, #0
MOV             R6, R4
B               loc_2589C

loc_2588C
ADD             R4, R4, #1
BL              free
CMP             R10, R4
BEQ             loc_259EC

loc_2589C
SUB             R0, R11, #-(-0x20+var_8E0)
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
SUB             R0, R0, #8 ; s
BL              memset
MOV             R1, R4
MOV             R0, R5
BL              sub_22520
SUBS            R7, R0, #0
SUB             R0, R11, #-(-0x20+var_8E0)
MOV             R2, #0x20 ; ' '
MOV             R1, R7
SUB             R0, R0, #8
BEQ             loc_25868
BL              sub_22CD8
SUBS            R6, R0, #0
MOV             R0, R7  ; ptr
BNE             loc_2588C
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2590C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_259D0

loc_2590C
SUB             R8, R11, #-(-0x20+var_804+4)
MOVW            R2, #:lower16:aMerkleDS ; "merkle %d: %s"
SUB             R8, R8, #4
MOV             R3, R4
MOVT            R2, #:upper16:aMerkleDS ; "merkle %d: %s"
MOV             R1, #0x800 ; maxlen
STR             R7, [SP,#0x95C+var_95C]
MOV             R0, R8  ; s
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_2597C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2597C
MOV             R3, #dword_67DB4

loc_25968
LDR             R3, [R3]
CMP             R3, #2
SUBGT           R8, R11, #-(-0x20+var_804+4)
SUBGT           R8, R8, #4
BLE             loc_259C4

loc_2597C
MOVW            LR, #:lower16:aFailedToConver ; "Failed to convert merkle to merkle_bin "...
MOV             R12, R8
MOVT            LR, #:upper16:aFailedToConver ; "Failed to convert merkle to merkle_bin "...
LDM             LR!, {R0-R3} ; "Failed to convert merkle to merkle_bin "...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "t merkle to merkle_bin in parse_notify"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "le_bin in parse_notify"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "notify"
STR             R0, [R12],#4
MOV             R0, #3
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R8
STRB            R3, [R12]
BL              sub_20F58

loc_259C4               ; ptr
MOV             R0, R7
BL              free
B               loc_25868

loc_259D0
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #2
BLE             loc_25968
B               loc_2590C

loc_259E8
MOV             R6, #0

loc_259EC
MOV             R1, #0
MOV             R0, R8
BL              sub_22520
MOV             R1, #1
MOV             R4, R0
MOV             R0, R8
BL              sub_224BC
MOV             R1, #2
STR             R0, [R11,#-0x20+var_8F8]
MOV             R0, R8
BL              sub_22520
MOV             R1, #3
STR             R0, [R11,#-0x20+ptr]
MOV             R0, R8
BL              sub_22520
MOV             R1, #5
STR             R0, [R11,#-0x20+s]
MOV             R0, R8
BL              sub_224BC
MOV             R1, #6
STR             R0, [R11,#-0x20+var_8FC]
MOV             R0, R8
BL              sub_224BC
MOV             R1, #7
STR             R0, [R11,#-0x20+var_900]
MOV             R0, R8
BL              sub_224BC
MOV             R1, #8
STR             R0, [R11,#-0x20+var_904]
MOV             R0, R8
BL              sub_48484
SUBS            R7, R0, #0
STREQ           R7, [R11,#-0x20+var_908]
BEQ             loc_25A94
MOV             R0, R8
MOV             R1, #8
BL              sub_48484
LDR             R7, [R0]
SUB             R7, R7, #5
CLZ             R7, R7
MOV             R7, R7,LSR#5
STR             R7, [R11,#-0x20+var_908]

loc_25A94
CMP             R4, #0
BEQ             loc_25D50
MOV             R0, R4  ; s
BL              strlen
CMP             R0, #0
MOVNE           R2, R4
BNE             loc_25ABC
B               loc_25DC0

loc_25AB4
CMP             R0, R12
BLE             loc_25B70

loc_25ABC
LDRB            R3, [R2],#1
SUB             R1, R3, #0x20 ; ' '
SUB             R12, R2, R4
CMP             R1, #0x5E ; '^'
BLS             loc_25AB4
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_25B0C
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_25B0C
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #2
BLE             loc_25B54

loc_25B0C
LDR             R0, =aParseNotify ; "parse_notify"
MOV             R1, #aUtilC ; "util.c"
MOVW            R12, #0x7B1
MOVW            R2, #:lower16:aInvalidChar0xX_0 ; "Invalid char 0x%x passed to valid_ascii"...
STR             R1, [SP,#0x95C+var_95C]
STR             R0, [SP,#0x95C+var_958]
SUB             R0, R11, #-(-0x20+var_804+4)
SUB             R0, R0, #4 ; s
STR             R12, [SP,#0x95C+var_954]
MOVT            R2, #:upper16:aInvalidChar0xX_0 ; "Invalid char 0x%x passed to valid_ascii"...
MOV             R1, #0x800 ; maxlen
BL              snprintf

loc_25B40
SUB             R1, R11, #-(-0x20+var_804+4)
MOV             R2, #0
SUB             R1, R1, #4
MOV             R0, #3
BL              sub_20F58

loc_25B54               ; ptr
MOV             R0, R4
BL              free
LDR             R0, [R11,#-0x20+ptr] ; ptr
BL              free
LDR             R0, [R11,#-0x20+s] ; ptr
BL              free
B               loc_25868

loc_25B70
LDR             R8, =aParseNotify ; "parse_notify"
MOVW            R2, #0x7B1
LDR             R0, [R11,#-0x20+var_8F8]
MOV             R1, R8
BL              sub_225A0
CMP             R0, #0
BEQ             loc_25B54
MOVW            R2, #0x7B1
MOV             R1, R8
LDR             R0, [R11,#-0x20+ptr]
BL              sub_225A0
CMP             R0, #0
BEQ             loc_25B54
MOVW            R2, #0x7B2
MOV             R1, R8
LDR             R0, [R11,#-0x20+s]
BL              sub_225A0
CMP             R0, #0
BEQ             loc_25B54
MOVW            R2, #0x7B2
MOV             R1, R8
LDR             R0, [R11,#-0x20+var_8FC]
BL              sub_225A0
CMP             R0, #0
BEQ             loc_25B54
MOVW            R2, #0x7B2
MOV             R1, R8
LDR             R0, [R11,#-0x20+var_900]
BL              sub_225A0
CMP             R0, #0
BEQ             loc_25B54
MOVW            R2, #0x7B3
MOV             R1, R8
LDR             R0, [R11,#-0x20+var_904]
BL              sub_225A0
CMP             R0, #0
BEQ             loc_25B54
ADD             R3, R9, #0xD4
MOV             R0, R3  ; mutex
STR             R3, [R11,#-0x20+var_930]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_267C8

loc_25C1C
ADD             R3, R9, #0xEC
MOVW            R2, #0x7BC
MOV             R0, R3
LDR             R1, =aParseNotify ; "parse_notify"
STR             R3, [R11,#-0x20+var_934]
BL              sub_226F0
ADD             R3, R9, #0x6B0
LDR             R0, [R9,#0x2A0] ; ptr
MOV             R6, R3
STR             R3, [R11,#-0x20+var_91C]
BL              free
MOVW            R2, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
MOV             R1, #0x41 ; 'A' ; maxlen
MOVT            R2, #:upper16:(aApiMcastFromSS+0x14) ; format
LDR             R3, [R11,#-0x20+var_8F8]
MOV             R0, R6  ; s
STR             R4, [R9,#0x2A0]
BL              snprintf
LDR             R0, [R11,#-0x20+ptr] ; s
ADD             R6, R9, #0x6F0
BL              strlen
MOV             R3, R0,LSR#1
LDR             R0, [R11,#-0x20+s] ; s
STR             R3, [R11,#-0x20+var_90C]
BL              strlen
MOV             R1, R0,LSR#1
ADD             R3, R6, #4
MOVW            R2, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
STR             R3, [R11,#-0x20+var_920]
STR             R1, [R11,#-0x20+var_910]
MOVT            R2, #:upper16:(aApiMcastFromSS+0x14) ; format
MOV             R0, R3  ; s
MOV             R1, #9  ; maxlen
LDR             R3, [R11,#-0x20+var_8FC]
BL              snprintf
ADD             R3, R9, #0x700
MOVW            R2, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
MOV             R0, R3  ; s
STR             R3, [R11,#-0x20+var_924]
MOV             R6, R0
MOVT            R2, #:upper16:(aApiMcastFromSS+0x14) ; format
LDR             R3, [R11,#-0x20+var_900]
MOV             R1, #9  ; maxlen
BL              snprintf
ADD             R3, R6, #0xC
MOVW            R2, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
STR             R3, [R11,#-0x20+var_928]
MOV             R0, R3  ; s
MOVT            R2, #:upper16:(aApiMcastFromSS+0x14) ; format
LDR             R3, [R11,#-0x20+var_904]
MOV             R1, #9  ; maxlen
MOV             R6, #0
BL              snprintf
ADD             R3, R9, #0x720
STRB            R7, [R9,#0x2A8]
VLDR            D7, [R3,#-8]
LDR             R1, [R11,#-0x20+var_90C]
VCMPE.F64       D7, #0.0
VMRS            APSR_nzcv, FPSCR
VSTRGT          D7, [R3]
LDR             R3, [R9,#0x61C]
LDR             R2, [R9,#0x278]
ADD             R3, R1, R3
LDR             R1, [R11,#-0x20+var_910]
STR             R3, [R9,#0x628]
ADD             R2, R1, R2
ADD             R3, R2, R3
STR             R3, [R11,#-0x20+var_92C]
STR             R3, [R9,#0x624]

loc_25D30
LDR             R3, [R9,#0x6AC]
CMP             R3, R6
BLE             loc_25E28
LDR             R3, [R9,#0x2A4]
LDR             R0, [R3,R6,LSL#2] ; ptr
ADD             R6, R6, #1
BL              free
B               loc_25D30

loc_25D50
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25D8C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25D8C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_25B54

loc_25D8C
MOVW            R0, #0x7B1
LDR             R1, =aParseNotify ; "parse_notify"
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aNullStringPass_0 ; "Null string passed to valid_ascii from "...
STR             R0, [SP,#0x95C+var_958]
SUB             R0, R11, #-(-0x20+var_804+4)
SUB             R0, R0, #4 ; s
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVT            R2, #:upper16:aNullStringPass_0 ; "Null string passed to valid_ascii from "...
STR             R1, [SP,#0x95C+var_95C]

loc_25DB4               ; maxlen
MOV             R1, #0x800
BL              snprintf
B               loc_25B40

loc_25DC0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25DFC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_25DFC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_25B54

loc_25DFC
LDR             R1, =aParseNotify ; "parse_notify"
MOVW            R0, #0x7B1
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aZeroLengthStri ; "Zero length string passed to valid_asci"...
STR             R0, [SP,#0x95C+var_958]
SUB             R0, R11, #-(-0x20+var_804+4)
STR             R1, [SP,#0x95C+var_95C]
SUB             R0, R0, #4
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVT            R2, #:upper16:aZeroLengthStri ; "Zero length string passed to valid_asci"...
B               loc_25DB4

loc_25E28
CMP             R10, #0
BNE             loc_26660
MOVW            R3, #:lower16:byte_73398
STR             R10, [R9,#0x6AC]
MOVT            R3, #:upper16:byte_73398
STR             R3, [R11,#-0x20+var_914]

loc_25E40
LDR             R3, [R9,#0x178]
LDR             R1, [R9,#0x17C]
ADDS            R3, R3, #1
ADC             R1, R1, #0
STR             R3, [R9,#0x178]
STR             R1, [R9,#0x17C]

loc_25E58
LDR             R3, [R11,#-0x20+var_908]
CMP             R3, #0
ADDNE           R3, R9, #0x270
MOVNE           R0, #0
MOVNE           R1, #0
STRDNE          R0, R1, [R3]
LDR             R2, [R11,#-0x20+var_924]
MOV             R3, #off_687EC ; "000000800000000000000000000000000000000"...
MOV             R0, #(a00000000000000+0x38) ; "00000000"
MOVW            R1, #:lower16:a00000000000000 ; "000000000000000000000000000000000000000"...
STR             R2, [SP,#0x95C+var_950]
MOVT            R1, #:upper16:a00000000000000 ; "000000000000000000000000000000000000000"...
LDR             R12, [R3] ; "000000800000000000000000000000000000000"... ...
MOVW            R2, #:lower16:aSSSSSSS ; "%s%s%s%s%s%s%s"
LDR             R3, [R11,#-0x20+var_928]
MOVT            R2, #:upper16:aSSSSSSS ; "%s%s%s%s%s%s%s"
STR             R0, [SP,#0x95C+var_94C]
SUB             R0, R11, #-(-0x20+var_8E0)
STR             R12, [SP,#0x95C+var_948]
SUB             R0, R0, #8 ; s
STR             R3, [SP,#0x95C+var_954]
LDR             R3, [R11,#-0x20+var_91C]
STR             R1, [SP,#0x95C+var_958]
MOV             R1, #0xE1 ; maxlen
STR             R3, [SP,#0x95C+var_95C]
LDR             R3, [R11,#-0x20+var_920]
BL              snprintf
ADD             R0, R9, #0x620
SUB             R1, R11, #-(-0x20+var_8E0)
SUB             R1, R1, #8
ADD             R0, R0, #0xC
MOV             R2, #0x70 ; 'p'
BL              sub_22CD8
SUBS            R6, R0, #0
BEQ             loc_265D0
LDR             R2, [R11,#-0x20+var_90C]
LDR             R1, [R11,#-0x20+ptr]
ADD             R3, R2, #0xE
BIC             R3, R3, #7
SUB             SP, SP, R3
ADD             R5, SP, #0x95C+var_944
MOV             R0, R5
BL              sub_22CD8
SUBS            R6, R0, #0
BEQ             loc_26580
LDR             R2, [R11,#-0x20+var_910]
LDR             R1, [R11,#-0x20+s]
ADD             R3, R2, #0xE
BIC             R3, R3, #7
SUB             SP, SP, R3
ADD             R7, SP, #0x95C+var_944
MOV             R0, R7
BL              sub_22CD8
SUBS            R6, R0, #0
BEQ             loc_26458
LDR             R0, [R9,#0x620] ; ptr
BL              free
MOVW            R3, #0x80F
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x95C+var_95C]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aParseNotify ; "parse_notify"
MOV             R1, #1
LDR             R0, [R11,#-0x20+var_92C]
BL              sub_22A44
MOV             R2, #0x810
MOVW            R3, #:lower16:aUtilC ; "util.c"
STR             R0, [R9,#0x620]
MOV             R1, R5
STR             R2, [SP,#0x95C+var_958]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R8, [SP,#0x95C+var_95C]
LDR             R2, [R11,#-0x20+var_90C]
BL              sub_254E8
LDR             R12, [R9,#0x61C]
CMP             R12, #0
BEQ             loc_25FC4
MOVW            R1, #0x812
LDR             R0, [R9,#0x620]
STR             R1, [SP,#0x95C+var_958]
MOVW            R3, #:lower16:aUtilC ; "util.c"
LDR             R1, [R11,#-0x20+var_90C]
MOV             R2, R12
STR             R8, [SP,#0x95C+var_95C]
MOVT            R3, #:upper16:aUtilC ; "util.c"
ADD             R0, R0, R1
LDR             R1, [R9,#0x268]
BL              sub_254E8
LDR             R12, [R9,#0x61C]

loc_25FC4
LDR             R3, [R9,#0x278]
MOVW            LR, #0x813
LDR             R0, [R9,#0x620]
MOVW            R5, #:lower16:byte_68BD5
LDR             R2, [R11,#-0x20+var_910]
MOV             R1, R7
ADD             R12, R12, R3
LDR             R3, [R11,#-0x20+var_90C]
STR             R8, [SP,#0x95C+var_95C]
MOVT            R5, #:upper16:byte_68BD5
STR             LR, [SP,#0x95C+var_958]
ADD             R12, R12, R3
MOVW            R3, #:lower16:aUtilC ; "util.c"
ADD             R0, R0, R12
MOVT            R3, #:upper16:aUtilC ; "util.c"
BL              sub_254E8
LDRB            R10, [R5]
CMP             R10, #0
BNE             loc_264DC

loc_26010
LDR             R0, [R11,#-0x20+var_934]
MOVW            R2, #0x81C
LDR             R1, =aParseNotify ; "parse_notify"
BL              sub_2276C
LDR             R0, [R11,#-0x20+var_930]
MOVW            R2, #0x81C
LDR             R1, =aParseNotify ; "parse_notify"
BL              sub_227E8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [R11,#-0x20+var_914]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_26400
MOV             R7, #byte_68BD5
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_26220
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_260A0
MOV             R3, #byte_68BD4
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_260A0
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_260F0

loc_260A0
SUB             R8, R11, #-(-0x20+var_804+4)
MOVW            R2, #:lower16:aJobIdS ; "job_id: %s"
SUB             R8, R8, #4
MOV             R3, R4
MOVT            R2, #:upper16:aJobIdS ; "job_id: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R8  ; s
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_26298
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_26118
MOV             R3, #byte_68BD4

loc_260F0
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_26110
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_26160

loc_26110
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4

loc_26118
MOVW            R2, #:lower16:aPrevHashS ; "prev_hash: %s"
LDR             R3, [R11,#-0x20+var_8F8]
MOVT            R2, #:upper16:aPrevHashS ; "prev_hash: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R8  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R8
MOV             R0, #7
BL              sub_20F58
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_26308
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_26188
MOV             R3, #byte_68BD4

loc_26160
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_26180
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_261D0

loc_26180
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4

loc_26188
MOVW            R2, #:lower16:aCoinbase1S ; "coinbase1: %s"
LDR             R3, [R11,#-0x20+ptr]
MOVT            R2, #:upper16:aCoinbase1S ; "coinbase1: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R8  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R8
MOV             R0, #7
BL              sub_20F58
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_26378
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_261F8
MOV             R3, #byte_68BD4

loc_261D0
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_261F0
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_26248

loc_261F0
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4

loc_261F8
MOVW            R2, #:lower16:aCoinbase2S ; "coinbase2: %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aCoinbase2S ; "coinbase2: %s"
LDR             R3, [R11,#-0x20+s]
MOV             R0, R8  ; s
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_26220
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_26400
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_26268
MOV             R3, #byte_68BD4

loc_26248
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_26268
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_262B8

loc_26268
SUB             R8, R11, #-(-0x20+var_804+4)
MOVW            R2, #:lower16:aBbversionS ; "bbversion: %s"
SUB             R8, R8, #4
MOVT            R2, #:upper16:aBbversionS ; "bbversion: %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R11,#-0x20+var_8FC]
MOV             R0, R8  ; s
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_26298
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_26400
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_262E0
MOV             R3, #byte_68BD4

loc_262B8
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_262D8
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_26328

loc_262D8
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4

loc_262E0
MOVW            R2, #:lower16:aNbitS ; "nbit: %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aNbitS ; "nbit: %s"
LDR             R3, [R11,#-0x20+var_900]
MOV             R0, R8  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R8
MOV             R0, #7
BL              sub_20F58

loc_26308
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_26400
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_26350
MOV             R3, #byte_68BD4

loc_26328
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_26348
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_26398

loc_26348
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4

loc_26350
MOVW            R2, #:lower16:aNtimeS ; "ntime: %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aNtimeS ; "ntime: %s"
LDR             R3, [R11,#-0x20+var_904]
MOV             R0, R8  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R8
MOV             R0, #7
BL              sub_20F58

loc_26378
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_26400
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_263C0
MOV             R3, #byte_68BD4

loc_26398
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_263B8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_26400

loc_263B8
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4

loc_263C0
LDR             R0, [R11,#-0x20+var_908]
MOV             R1, #dword_4B184
MOVW            R3, #:lower16:aYes ; "yes"
MOVW            R2, #:lower16:aCleanS ; "clean: %s"
MOVT            R3, #:upper16:aYes ; "yes"
CMP             R0, #0
MOVT            R2, #:upper16:aCleanS ; "clean: %s"
MOVEQ           R3, R1
MOV             R0, R8  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_26400               ; ptr
LDR             R0, [R11,#-0x20+ptr]
BL              free
LDR             R0, [R11,#-0x20+s] ; ptr
BL              free
MOVW            R3, #:lower16:dword_755E8
LDR             R0, [R9,#0x74]
MOVT            R3, #:upper16:dword_755E8
LDR             R2, [R3]
LDR             R1, [R3,#(dword_755EC - 0x755E8)]
ADD             R0, R0, #1
STR             R0, [R9,#0x74]
ADDS            R2, R2, #1
ADC             R1, R1, #0
STR             R2, [R3]
STR             R1, [R3,#(dword_755EC - 0x755E8)]
BL              sub_31FF4
CMP             R9, R0
MOVWEQ          R3, #:lower16:byte_767F0
MOVEQ           R2, #1
MOVTEQ          R3, #:upper16:byte_767F0
STRBEQ          R2, [R3]
B               loc_25868

loc_26458
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26494
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26494
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_26578

loc_26494
MOVW            R12, #:lower16:unk_4DD34
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4
MOVT            R12, #:upper16:unk_4DD34

loc_264A4
LDM             R12!, {R0-R3}
MOV             LR, R8
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3}
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3}
LDR             R12, [R12]
STM             LR!, {R0-R3}
MOV             R1, R8
MOV             R2, #0
MOV             R0, #3
STRB            R12, [LR]
BL              sub_20F58
B               loc_26010

loc_264DC
LDR             R1, [R9,#0x624]
LDR             R0, [R9,#0x620]
BL              sub_22C24
LDRB            R3, [R5]
MOV             R7, R0
CMP             R3, #0
BEQ             loc_26568
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26534
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26534
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_26568

loc_26534
SUB             R8, R11, #-(-0x20+var_804+4)
MOVW            R2, #:lower16:aPoolDCoinbaseS ; "Pool %d coinbase %s"
SUB             R8, R8, #4
STR             R7, [SP,#0x95C+var_95C]
MOVT            R2, #:upper16:aPoolDCoinbaseS ; "Pool %d coinbase %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R8  ; s
LDR             R3, [R9]
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_26568               ; ptr
MOV             R0, R7
MOV             R6, R10
BL              free
B               loc_26010

loc_26578
MOV             R6, #0
B               loc_26010

loc_26580
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_265BC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_265BC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_26578

loc_265BC
MOVW            R12, #:lower16:unk_4DD00
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4
MOVT            R12, #:upper16:unk_4DD00
B               loc_264A4

loc_265D0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2660C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2660C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_26578

loc_2660C
MOVW            LR, #:lower16:aFailedToConver_0 ; "Failed to convert header to header_bin "...
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4
MOVT            LR, #:upper16:aFailedToConver_0 ; "Failed to convert header to header_bin "...

loc_2661C
LDM             LR!, {R0-R3}
MOV             R12, R8
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1}
STR             R0, [R12],#4
MOV             R0, #3
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R8
STRB            R3, [R12]
BL              sub_20F58
B               loc_26010

loc_26660
MOV             R1, R10,LSL#2
MOVW            R3, #0x7D1
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x95C+var_95C]
ADD             R1, R1, #1
LDR             R3, =aParseNotify ; "parse_notify"
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R0, [R9,#0x2A4]
BL              sub_22AD4
MOVW            R6, #:lower16:byte_73398
MOVW            R7, #:lower16:aUtilC ; "util.c"
MOVW            R3, #:lower16:byte_68BD5
MOVT            R7, #:upper16:aUtilC ; "util.c"
MOVT            R6, #:upper16:byte_73398
MOVT            R3, #:upper16:byte_68BD5
STR             R7, [R11,#-0x20+var_93C]
MOV             R7, #0
STR             R0, [R9,#0x2A4]
STR             R6, [R11,#-0x20+var_914]
STR             R3, [R11,#-0x20+var_940]
STR             R4, [R11,#-0x20+var_918]
B               loc_2679C

loc_266B8
BL              sub_22520
MOVW            R3, #0x7D6
MOV             R4, R0
LDR             R2, =aParseNotify ; "parse_notify"
MOV             R0, #0x20 ; ' '
LDR             R1, [R11,#-0x20+var_93C]
LDR             R6, [R9,#0x2A4]
BL              sub_229BC
LDR             R3, [R11,#-0x20+var_914]
STR             R0, [R6,R7,LSL#2]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2676C
LDR             R3, [R11,#-0x20+var_940]
SUB             R6, R11, #-(-0x20+var_804+4)
MOVW            R12, #:lower16:byte_74500
SUB             R6, R6, #4
MOVW            R2, #:lower16:aMerkleDS ; "merkle %d: %s"
MOVT            R12, #:upper16:byte_74500
LDRB            R1, [R3]
MOVT            R2, #:upper16:aMerkleDS ; "merkle %d: %s"
MOV             R3, R7
MOV             R0, R6  ; s
CMP             R1, #0
MOV             R1, #0x800 ; maxlen
BEQ             loc_2676C
LDRB            R12, [R12]
MOV             LR, #byte_68BD4
CMP             R12, #0
BNE             loc_26754
LDRB            LR, [LR]
MOV             R12, #dword_67DB4
CMP             LR, #0
BNE             loc_26754
LDR             R12, [R12]
CMP             R12, #6
BLE             loc_2676C

loc_26754
STR             R4, [SP,#0x95C+var_95C]
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_2676C
LDR             R3, [R9,#0x2A4]
MOV             R2, #0x20 ; ' '
LDR             R0, [R11,#-0x20+var_938]
MOV             R1, R4
ADD             R7, R7, #1
LDR             R0, [R3,R0]
BL              sub_22CD8
MOV             R6, R0
MOV             R0, R4  ; ptr
BL              free
CMP             R6, #0
BEQ             loc_267D8

loc_2679C
MOV             R3, R7,LSL#2
CMP             R7, R10
MOV             R1, R7
MOV             R0, R5
STR             R3, [R11,#-0x20+var_938]
BLT             loc_266B8
CMP             R10, #1
LDR             R4, [R11,#-0x20+var_918]
STR             R10, [R9,#0x6AC]
BGT             loc_25E58
B               loc_25E40

loc_267C8
MOVW            R1, #0x7BC
MOV             R0, R8
BL              sub_22864
B               loc_25C1C

loc_267D8
MOVW            R3, #:lower16:byte_74500
LDR             R4, [R11,#-0x20+var_918]
MOVT            R3, #:upper16:byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26818
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26818
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_26578

loc_26818
MOVW            LR, #:lower16:aFailedToConver ; "Failed to convert merkle to merkle_bin "...
SUB             R8, R11, #-(-0x20+var_804+4)
SUB             R8, R8, #4
MOVT            LR, #:upper16:aFailedToConver ; "Failed to convert merkle to merkle_bin "...
B               loc_2661C
; End of function sub_2582C

off_2682C DCD aParseNotify ; "parse_notify"



; int __fastcall sub_26830(const char **, int, int)
sub_26830

var_A30= -0xA30
var_A2C= -0xA2C
pai= -0xA28
var_A24= -0xA24
var_A04= -0xA04
var_A02= -0xA02
var_A01= -0xA01
var_A00= -0xA00
var_9FC= -0x9FC
flags= -0x800
var_7FC= -0x7FC
var_s0=  0

PUSH            {R4-R10,LR}
SUB             SP, SP, #0xA30
MOV             R3, #0x104
ADD             R4, SP, #0xA30+var_A00
MOV             R5, R0
MOV             R6, R1
STRH            R3, [R4,#-4]
MOV             R1, #0  ; endptr
MOV             R8, R2
LDR             R0, [R0,#0x248] ; nptr
MOV             R2, #0xA ; base
ADD             R9, SP, #0xA30+flags
BL              strtol
MOVW            R2, #:lower16:aCgminer ; "CGMINER"
STRB            R0, [SP,#0xA30+var_A01]
MOVT            R2, #:upper16:aCgminer ; "CGMINER"
UBFX            R3, R0, #8, #8
LDM             R2, {R0,R1} ; "CGMINER"
STRB            R3, [SP,#0xA30+var_A02]
STMIB           R4, {R0,R1}
LDR             R0, [R5,#0x258] ; cp
BL              inet_addr
REV             R10, R0
CMN             R10, #1
BEQ             loc_26964

loc_26894
MOV             R3, R10,LSR#24
MOV             R0, R10,LSR#16
MOV             R12, R10,LSR#8
STRB            R10, [SP,#0xA30+var_A00+3]
STRB            R3, [SP,#0xA30+var_A00]
SUB             R1, R4, #4 ; buf
STRB            R0, [SP,#0xA30+var_A00+1]
MOV             R3, #0  ; flags
MOV             R2, #0x10 ; n
MOV             R0, R6  ; fd
STRB            R12, [SP,#0xA30+var_A00+2]
BL              send

loc_268C4               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_268EC
LDRB            R3, [SP,#0xA30+flags] ; flags
CMP             R3, #0
BEQ             loc_26A1C

loc_268EC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26928
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26928
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_26AC0

loc_26928
LDR             R12, [R5,#0x260]
MOVW            R2, #:lower16:aBadResponseFro ; "Bad response from %s:%s SOCKS4 server"
LDR             R3, [R5,#0x25C]
MOVT            R2, #:upper16:aBadResponseFro ; "Bad response from %s:%s SOCKS4 server"
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
STR             R12, [SP,#0xA30+var_A30]
BL              snprintf

loc_26948
MOV             R0, #4
MOV             R1, R9
MOV             R2, #0
BL              sub_20F58
MOV             R0, #0

loc_2695C
ADD             SP, SP, #0xA30
POP             {R4-R10,PC}

loc_26964
ADD             R3, SP, #0xA30+var_A24
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
MOV             R0, R9  ; s
STR             R3, [SP,#0xA30+pai]
BL              memset
MOV             R12, #2
ADD             R3, SP, #0xA30+pai ; pai
MOV             R2, R9  ; req
MOV             R1, #0  ; service
LDR             R0, [R5,#0x258] ; name
STR             R12, [SP,#0xA30+var_7FC]
BL              getaddrinfo
CMP             R0, #0
BEQ             loc_26A68
CMP             R8, #0
BEQ             loc_26A84
LDR             R10, [R5,#0x258]
MOV             R3, #0x1000000
STR             R3, [SP,#0xA30+var_A00]
SUB             R7, R4, #4
MOV             R0, R10 ; s
BL              strlen
LDR             R3, =aSocks4Negotiat ; "socks4_negotiate"
CMP             R0, #0xFF
MOVCC           R8, R0
MOVCS           R8, #0xFF
MOVW            R12, #0xB52
MOV             R1, R10
STR             R3, [SP,#0xA30+var_A30]
MOVW            R3, #:lower16:aUtilC ; "util.c"
ADD             R0, R4, #0xC
MOV             R2, R8
STR             R12, [SP,#0xA30+var_A2C]
MOVT            R3, #:upper16:aUtilC ; "util.c"
BL              sub_254E8
MOV             R12, #0
ADD             R3, SP, #0xA30+var_s0
ADD             LR, R3, R8
MOV             R1, R7  ; buf
ADD             R2, R8, #0x11 ; n
MOV             R3, R12 ; flags
MOV             R0, R6  ; fd
STRB            R12, [LR,#-0x9F4]
BL              send
B               loc_268C4

loc_26A1C               ; n
MOV             R2, #1
MOV             R1, R9  ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_268EC
LDRB            R3, [SP,#0xA30+flags]
CMP             R3, #0x5A ; 'Z'
MOVEQ           R4, #6
BNE             loc_268EC

loc_26A44               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
MOV             R1, R9  ; buf
MOV             R0, R6  ; fd
BL              recv
SUBS            R4, R4, #1
BNE             loc_26A44
MOV             R0, #1
B               loc_2695C

loc_26A68               ; ai
LDR             R0, [SP,#0xA30+pai]
LDR             R3, [R0,#0x14]
LDR             R10, [R3,#4]
BL              freeaddrinfo
REV             R10, R10
CMN             R10, #1
BNE             loc_26894

loc_26A84
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26ACC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26ACC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_26ACC

loc_26AC0
MOV             R0, #0
ADD             SP, SP, #0xA30
POP             {R4-R10,PC}

loc_26ACC
MOVW            R2, #:lower16:aInvalidIpAddre ; "Invalid IP address specified for socks4"...
LDR             R3, [R5,#0x258]
MOVT            R2, #:upper16:aInvalidIpAddre ; "Invalid IP address specified for socks4"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R9  ; s
BL              snprintf
B               loc_26948
; End of function sub_26830

off_26AE8 DCD aSocks4Negotiat ; "socks4_negotiate"



; int __fastcall sub_26AEC(_DWORD *)
sub_26AEC

timeout= -0x2B7C
var_2B78= -0x2B78
var_2B74= -0x2B74
var_2B68= -0x2B68
service= -0x2B64
name= -0x2B60
mutex= -0x2B5C
var_2B58= -0x2B58
var_2B54= -0x2B54
var_2B50= -0x2B50
var_2B4C= -0x2B4C
var_2B48= -0x2B48
var_2B44= -0x2B44
var_2B40= -0x2B40
pai= -0x2B38
optlen= -0x2B34
optval= -0x2B30
var_2B2C= -0x2B2C
s= -0x2B24
var_2B1C= -0x2B1C
var_2B04= -0x2B04
var_2AA8= -0x2AA8
var_2A0C= -0x2A0C
writefds= -0x2A08
var_2804= -0x2804
var_200C= -0x200C

MOV             R3, #0
PUSH            {R4-R11,LR}
MOVW            R2, #:lower16:off_67ED8
MOV             R11, R0
SUB             SP, SP, #0x2B40
MOVW            R1, #:lower16:byte_68BD5
MOVW            R0, #0x105
MOV             R10, R3
SUB             SP, SP, #0x3C
ADD             R12, R11, #0x2C0
MOVT            R2, #:upper16:off_67ED8
MOVT            R1, #:upper16:byte_68BD5
MOVT            R0, #0x300
STR             R3, [SP,#0x2B7C+var_2B50]
STR             R12, [SP,#0x2B7C+mutex]
STR             R3, [SP,#0x2B7C+var_2B4C]
STR             R2, [SP,#0x2B7C+var_2B58]
STR             R1, [SP,#0x2B7C+var_2B54]
STR             R0, [SP,#0x2B7C+var_2B40]

loc_26B38               ; mutex
LDR             R0, [SP,#0x2B7C+mutex]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_27974

loc_26B48               ; fd
LDR             R0, [R11,#0x24C]
STRB            R10, [R11,#0x281]
CMP             R0, #0
BEQ             loc_26B5C
BL              close

loc_26B5C
STR             R10, [R11,#0x24C]
LDR             R0, [SP,#0x2B7C+mutex] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2791C

loc_26B70
LDR             R3, [SP,#0x2B7C+var_2B58]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R2, #0x20 ; ' ' ; n
MOV             R1, #0  ; c
ADD             R0, SP, #0x2B7C+s ; s
BL              memset
LDR             R3, [R11,#0xB8]
MOV             R2, #1
STR             R2, [SP,#0x2B7C+var_2B1C]
CMP             R3, #0
BEQ             loc_27454

loc_26BA0
LDR             R3, [R11,#0x25C]
STR             R3, [SP,#0x2B7C+name]
LDR             R3, [R11,#0x260]
STR             R3, [SP,#0x2B7C+service]

loc_26BB0               ; pai
ADD             R3, SP, #0x2B7C+pai
ADD             R2, SP, #0x2B7C+s ; req
LDR             R1, [SP,#0x2B7C+service] ; service
LDR             R0, [SP,#0x2B7C+name] ; name
BL              getaddrinfo
SUBS            R3, R0, #0
STR             R3, [SP,#0x2B7C+var_2B48]
BEQ             loc_27030
LDRB            R2, [R11,#0x63]
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R2, #0
BNE             loc_274A0
CMP             R3, #0
BNE             loc_26C18
MOV             R2, #byte_68BD4
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_26C18
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_26C48

loc_26C18
LDR             R3, [SP,#0x2B7C+service]
MOV             R2, #aFailedToResolv ; "Failed to resolve (?wrong URL) %s:%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x2B7C+var_2804 ; s
STR             R3, [SP,#0x2B7C+timeout]
LDR             R3, [SP,#0x2B7C+name]
BL              snprintf
ADD             R1, SP, #0x2B7C+var_2804
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_26C48
MOVW            R4, #:lower16:byte_68BD5
MOV             R3, #1
MOVT            R4, #:upper16:byte_68BD5
STRB            R3, [R11,#0x63]

loc_26C58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_284F8

loc_26C64
LDR             R3, [SP,#0x2B7C+var_2B50]
CMP             R3, #0
MOVNE           R5, #0
BNE             loc_26FE4
LDR             R5, [SP,#0x2B7C+var_2B50]

loc_26C78
MOV             R0, R5
ADD             SP, SP, #0x2B40
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}

loc_26C88
CMP             R6, #0
STR             R0, [SP,#0x2B7C+service]
BEQ             loc_26D18
LDR             R1, [R11,#0x27C] ; s2
CMP             R1, #0
BEQ             loc_26D18
MOV             R0, R6  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_26D18
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26CEC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26CEC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_26D18

loc_26CEC
LDR             R4, [SP,#0x2B7C+var_2B68]
MOV             R2, #aPoolDSuccessfu ; "Pool %d successfully negotiated resume "...
MOV             R1, #0x800 ; maxlen
LDR             R3, [R11]
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #5
BL              sub_20F58

loc_26D18
ADD             R10, R11, #0xD4
MOV             R0, R10 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BEQ             loc_26D38
MOVW            R1, #0xCA4
LDR             R0, =aInitiateStratu_0 ; "initiate_stratum"
BL              sub_22864

loc_26D38
ADD             R9, R11, #0xEC
MOV             R0, R9  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_284A4
LDR             R7, =aInitiateStratu_0 ; "initiate_stratum"
MOV             R4, #aUtilC ; "util.c"

loc_26D58               ; ptr
LDR             R0, [R11,#0x264]
BL              free
LDR             R0, [R11,#0x27C] ; ptr
BL              free
STR             R6, [R11,#0x27C]
MOV             R0, R8  ; s
STR             R8, [R11,#0x264]
BL              strlen
MOV             R3, R0,LSR#1
LDR             R0, [R11,#0x268] ; ptr
STR             R3, [R11,#0x61C]
BL              free
MOVW            R3, #0xCAB
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x2B7C+timeout]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aInitiateStratu_0 ; "initiate_stratum"
MOV             R1, #1
LDR             R0, [R11,#0x61C]
BL              sub_22A44
LDR             R2, [R11,#0x61C]
LDR             R1, [R11,#0x264]
STR             R0, [R11,#0x268]
BL              sub_22CD8
LDR             R3, [SP,#0x2B7C+service]
MOV             R0, R9  ; rwlock
STR             R3, [R11,#0x278]
BL              pthread_rwlock_unlock
CMP             R0, #0
BEQ             loc_26E18
BL              __errno_location
LDR             R8, [SP,#0x2B7C+var_2B68]
MOVW            R3, #0xCAE
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R7, [SP,#0x2B7C+var_2B78]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R4, [SP,#0x2B7C+timeout]
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x2B7C+var_2B74]
LDR             R3, [R0]
MOV             R0, R8  ; s
BL              snprintf
MOV             R0, #3
MOV             R2, #1
MOV             R1, R8
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_26E18               ; mutex
MOV             R0, R10
BL              pthread_mutex_unlock
CMP             R0, #0
BEQ             loc_26E70
BL              __errno_location
STR             R4, [SP,#0x2B7C+timeout]
MOVW            R3, #0xCAE
LDR             R4, [SP,#0x2B7C+var_2B68]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R7, [SP,#0x2B7C+var_2B78]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x2B7C+var_2B74]
LDR             R3, [R0]
MOV             R0, R4  ; s
BL              snprintf
MOV             R0, #3
MOV             R2, #1
MOV             R1, R4
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0

loc_26E70
LDR             R3, [SP,#0x2B7C+var_2B58]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R6, #0
BEQ             loc_26F08
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_26F08
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26ED4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26ED4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_26F08

loc_26ED4
LDR             R4, [SP,#0x2B7C+var_2B68]
MOVW            R2, #:lower16:aPoolDStratumSe ; "Pool %d stratum session id: %s"
LDR             R12, [R11,#0x27C]
MOVT            R2, #:upper16:aPoolDStratumSe ; "Pool %d stratum session id: %s"
LDR             R3, [R11]
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
STR             R12, [SP,#0x2B7C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #7
BL              sub_20F58

loc_26F08
LDR             R3, [R11,#0x240]
MOV             R0, #0
MOV             R1, #0
MOV             R12, #1
STRB            R12, [R11,#0x281]
CMP             R3, #0
LDREQ           R3, [R11,#0x258]
STREQ           R3, [R11,#0x240]
MOV             R3, #byte_73398
LDRB            R2, [R3]
ADD             R3, R11, #0x720
STRD            R0, R1, [R3,#-8]
MOV             R1, #0
MOV             R0, #0
MOVT            R1, #0x3FF0
CMP             R2, #0
STRD            R0, R1, [R3]
BEQ             loc_26FE4
MOV             R3, #byte_68BD5
LDRB            R5, [R3]
CMP             R5, #0
MOVEQ           R5, R2
BEQ             loc_26FE4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26FA8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_26FA8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_26FE4

loc_26FA8
LDR             R0, [R11,#0x278]
MOVW            R2, #:lower16:aPoolDConfirmed ; "Pool %d confirmed mining.subscribe with"...
LDR             R12, [R11,#0x264]
MOVT            R2, #:upper16:aPoolDConfirmed ; "Pool %d confirmed mining.subscribe with"...
LDR             R4, [SP,#0x2B7C+var_2B68]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R11]
STR             R0, [SP,#0x2B7C+var_2B78]
STR             R12, [SP,#0x2B7C+timeout]
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_26FE4
LDR             R2, [SP,#0x2B7C+var_2B50]
LDR             R3, [R2,#4]
CMN             R3, #1
BEQ             loc_26C78
ADD             R3, R2, #4
DMB             ISH

loc_26FFC
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_26FFC
CMP             R2, #0
BNE             loc_26C78
LDR             R0, [SP,#0x2B7C+var_2B50]
BL              sub_48A34
MOV             R0, R5
ADD             SP, SP, #0x2B40
ADD             SP, SP, #0x3C ; '<'
POP             {R4-R11,PC}

loc_27030
LDR             R5, [SP,#0x2B7C+pai]
CMP             R5, #0
BEQ             loc_27EE0
STR             R11, [SP,#0x2B7C+var_2B44]
LDR             R11, [SP,#0x2B7C+var_2B54]
B               loc_2712C

loc_27048
MOV             R2, #0
MOV             R1, #3  ; cmd
BL              fcntl
MOV             R1, #4  ; cmd
ORR             R2, R0, #0x800
MOV             R0, R6  ; fd
BL              fcntl
LDR             R2, [R5,#0x10] ; len
MOV             R0, R6  ; fd
LDR             R1, [R5,#0x14] ; addr
BL              connect
CMN             R0, #1
BNE             loc_27528
MOV             R8, #1
STR             R10, [SP,#0x2B7C+var_2B2C.tv_usec]
STR             R8, [SP,#0x2B7C+var_2B2C]
BL              __errno_location
LDR             R3, [R0]
MOV             R9, R0
CMP             R3, #0x73 ; 's'
BEQ             loc_27240
MOV             R0, R6  ; fd
MOV             R4, R11
BL              close
LDRB            R3, [R11]
CMP             R3, #0
BEQ             loc_27120
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_270F0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_270F0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_27120

loc_270F0
MOVW            R12, #:lower16:aFailedSockConn ; "Failed sock connect"
ADD             R6, SP, #0x2B7C+var_2804
MOVT            R12, #:upper16:aFailedSockConn ; "Failed sock connect"
MOV             LR, R6
LDM             R12!, {R0-R3} ; "Failed sock connect"
LDR             R12, [R12] ; "ect"
STM             LR!, {R0-R3}
MOV             R1, R6
MOV             R2, #0
MOV             R0, #7
STR             R12, [LR]
BL              sub_20F58

loc_27120
LDR             R5, [R5,#0x1C]
CMP             R5, #0
BEQ             loc_271C4

loc_2712C               ; protocol
LDMIB           R5, {R0-R2}
BL              socket
CMN             R0, #1
MOV             R6, R0
BNE             loc_27048
LDRB            R3, [R11]
MOV             R4, R11
CMP             R3, #0
BEQ             loc_27120
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2718C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2718C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_27120

loc_2718C
MOVW            R3, #:lower16:aFailedSocket ; "Failed socket"
ADD             R6, SP, #0x2B7C+var_2804
MOVT            R3, #:upper16:aFailedSocket ; "Failed socket"
MOV             R12, R6
LDM             R3, {R0-R3} ; "Failed socket"

loc_271A0
STM             R12!, {R0-R2}
MOV             R1, R6
MOV             R2, #0
MOV             R0, #7
STRH            R3, [R12]
BL              sub_20F58
LDR             R5, [R5,#0x1C]
CMP             R5, #0
BNE             loc_2712C

loc_271C4
LDR             R11, [SP,#0x2B7C+var_2B44]

loc_271C8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27204
MOV             R2, #byte_68BD4
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_27204
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_27234

loc_27204
LDR             R3, [SP,#0x2B7C+service]
MOV             R2, #aFailedToConnec ; "Failed to connect to stratum on %s:%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x2B7C+var_2804 ; s
STR             R3, [SP,#0x2B7C+timeout]
LDR             R3, [SP,#0x2B7C+name]
BL              snprintf
ADD             R1, SP, #0x2B7C+var_2804
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_27234               ; ai
LDR             R0, [SP,#0x2B7C+pai]
BL              freeaddrinfo
B               loc_26C58

loc_27240
CMP             R6, #0
ADD             R7, R6, #0x1F
MOVGE           R7, R6
RSBS            R2, R6, #0
AND             R2, R2, #0x1F
AND             R3, R6, #0x1F
RSBPL           R3, R2, #0
ADD             R2, R6, #1
MOV             R7, R7,ASR#5
STR             R2, [SP,#0x2B7C+var_2B68]
ADD             R2, SP, #0x2B7C+var_200C
MOV             R8, R8,LSL R3
ADD             R2, R2, #8
ADD             R7, R2, R7,LSL#2
ADD             R4, SP, #0x2B7C+writefds.__fds_bits+0x7C

loc_2727C
ADD             R3, SP, #0x2B7C+var_2A0C

loc_27280
STR             R10, [R3,#4]!
CMP             R4, R3
BNE             loc_27280
LDR             R12, [R7,#-0xA04]
MOV             R3, #0  ; exceptfds
ADD             R2, SP, #0x2B7C+var_2B2C
MOV             R1, R3  ; readfds
STR             R2, [SP,#0x2B7C+timeout] ; timeout
ADD             R2, SP, #0x2B7C+writefds ; writefds
ORR             R12, R12, R8
LDR             R0, [SP,#0x2B7C+var_2B68] ; nfds
STR             R12, [R7,#-0xA04]
BL              select
CMP             R0, #0
BLE             loc_2733C
LDR             R3, [R7,#-0xA04]
TST             R8, R3
BNE             loc_27350

loc_272C8               ; fd
MOV             R0, R6
MOV             R4, R11
BL              close
LDRB            R3, [R11]
CMP             R3, #0
BEQ             loc_27120
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2731C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2731C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_27120

loc_2731C
MOVW            LR, #:lower16:aSelectTimeoutF ; "Select timeout/failed connect"
ADD             R6, SP, #0x2B7C+var_2804
MOVT            LR, #:upper16:aSelectTimeoutF ; "Select timeout/failed connect"
MOV             R12, R6
LDM             LR!, {R0-R3} ; "Select timeout/failed connect"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "ailed connect"
B               loc_271A0

loc_2733C
BEQ             loc_272C8
LDR             R3, [R9]
CMP             R3, #4
BEQ             loc_2727C
B               loc_272C8

loc_27350
MOV             R12, #4
ADD             R3, SP, #0x2B7C+optlen
STR             R3, [SP,#0x2B7C+timeout] ; optlen
MOV             R2, R12 ; optname
ADD             R3, SP, #0x2B7C+optval ; optval
MOV             R1, #1  ; level
MOV             R0, R6  ; fd
STR             R12, [SP,#0x2B7C+optlen]
BL              getsockopt
CMP             R0, #0
BNE             loc_272C8
LDR             R3, [SP,#0x2B7C+optval]
CMP             R3, #0
BNE             loc_272C8
LDR             R3, [SP,#0x2B7C+var_2B54]
LDR             R11, [SP,#0x2B7C+var_2B44]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_27410
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_273D8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_273D8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_27410

loc_273D8
MOVW            LR, #:lower16:aSucceededDelay ; "Succeeded delayed connect"
ADD             R3, SP, #0x2B7C+var_2804
MOVT            LR, #:upper16:aSucceededDelay ; "Succeeded delayed connect"
MOV             R4, R3
MOV             R12, R3
LDM             LR!, {R0-R3} ; "Succeeded delayed connect"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "d connect"
STM             R12!, {R0,R1}
MOV             R1, R4
STRH            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_20F58

loc_27410
MOV             R0, R6
BL              sub_22400
LDR             R0, [SP,#0x2B7C+pai] ; ai
BL              freeaddrinfo
LDR             R3, [R11,#0xB8]
CMP             R3, #0
BEQ             loc_275B8
LDR             R3, [R11,#0xB4]
CMP             R3, #5  ; switch 6 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_27434 ; jumptable 00027434 default case
jpt_27434 DCD loc_279CC ; jump table for switch statement
DCD loc_27A94
DCD loc_27A8C
DCD loc_279F0
DCD loc_275A0
DCD loc_279F0

loc_27454
MOV             R3, #dword_6AB9C
LDR             R0, [R3]
CMP             R0, #0
BEQ             loc_278F4
ADD             R2, R11, #0x260
STR             R0, [R11,#0xB8]
ADD             R1, R11, #0x25C
BL              sub_23CD8
LDR             R3, [R11,#0xB8]
MOV             R2, #3
STR             R2, [R11,#0xB4]
LDR             R2, [R11,#0x258]
CMP             R3, #0
STR             R2, [SP,#0x2B7C+name]
BNE             loc_26BA0

loc_27494
LDR             R3, [R11,#0x248]
STR             R3, [SP,#0x2B7C+service]
B               loc_26BB0

loc_274A0
CMP             R3, #0
BNE             loc_274EC
MOV             R2, #byte_68BD4
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_274EC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_274EC

loc_274D0
MOV             R4, #byte_68BD5

loc_274D8
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_26C64
MOV             R4, #0
B               loc_2778C

loc_274EC
LDR             R3, [SP,#0x2B7C+service]
MOVW            R2, #:lower16:aFailedToGetadd ; "Failed to getaddrinfo for %s:%s"
ADD             R0, SP, #0x2B7C+var_2804 ; s
MOVT            R2, #:upper16:aFailedToGetadd ; "Failed to getaddrinfo for %s:%s"
MOV             R1, #0x800 ; maxlen
MOVW            R4, #:lower16:byte_68BD5
STR             R3, [SP,#0x2B7C+timeout]
MOVT            R4, #:upper16:byte_68BD5
LDR             R3, [SP,#0x2B7C+name]
BL              snprintf
ADD             R1, SP, #0x2B7C+var_2804
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
B               loc_26C58

loc_27528
MOVW            R5, #:lower16:byte_74500
LDR             R11, [SP,#0x2B7C+var_2B44]
MOVT            R5, #:upper16:byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_27568
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27568
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_27410

loc_27568
MOVW            R12, #:lower16:aSucceededImmed ; "Succeeded immediate connect"
ADD             R3, SP, #0x2B7C+var_2804
MOVT            R12, #:upper16:aSucceededImmed ; "Succeeded immediate connect"
MOV             R4, R3
MOV             LR, R3
LDM             R12!, {R0-R3} ; "Succeeded immediate connect"
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; "ate connect"
STM             LR, {R0-R2}
MOV             R1, R4
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
B               loc_27410

loc_275A0               ; jumptable 00027434 case 4
MOV             R2, #1

loc_275A4
MOV             R1, R6
MOV             R0, R11
BL              sub_26830
CMP             R0, #0
BEQ             loc_279E4

loc_275B8
ADD             R8, SP, #0x2B7C+writefds
ADD             R3, SP, #0x2B7C+var_2804
STR             R3, [SP,#0x2B7C+var_2B68]

loc_275C4
LDR             R3, [R11,#0x250]
CMP             R3, #0
BEQ             loc_27EEC

loc_275D0
MOV             R12, #0x2D ; '-'
MOV             R3, #0x1E
MOV             R4, #1
MOV             R2, #0
MOV             R1, #3  ; cmd
STR             R6, [R11,#0x24C]
MOV             R0, R6  ; fd
STR             R12, [SP,#0x2B7C+writefds]
STR             R3, [SP,#0x2B7C+var_2804]
STR             R4, [SP,#0x2B7C+var_2B2C]
BL              fcntl
MOV             R1, #4  ; cmd
ORR             R2, R0, #0x800
MOV             R0, R6  ; fd
BL              fcntl
MOV             R2, #4
ADD             R3, SP, #0x2B7C+var_2B2C ; optval
STR             R2, [SP,#0x2B7C+timeout] ; optlen
MOV             R1, R4  ; level
MOV             R2, #9  ; optname
MOV             R0, R6  ; fd
BL              setsockopt
MOV             R3, #byte_74501
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2764C
MOV             R2, R4
MOV             R1, #2  ; cmd
MOV             R0, R6  ; fd
BL              fcntl

loc_2764C
MOV             R4, #4
ADD             R3, SP, #0x2B7C+var_2B2C ; optval
MOV             R2, #1  ; optname
MOV             R1, #6  ; level
STR             R4, [SP,#0x2B7C+timeout] ; optlen
MOV             R0, R6  ; fd
BL              setsockopt
MOV             R2, #6  ; optname
ADD             R3, SP, #0x2B7C+var_2B2C ; optval
MOV             R1, R2  ; level
STR             R4, [SP,#0x2B7C+timeout] ; optlen
MOV             R0, R6  ; fd
BL              setsockopt
MOV             R3, R8  ; optval
MOV             R2, R4  ; optname
MOV             R1, #6  ; level
STR             R4, [SP,#0x2B7C+timeout] ; optlen
MOV             R0, R6  ; fd
BL              setsockopt
LDR             R3, [SP,#0x2B7C+var_2B68] ; optval
MOV             R0, R6  ; fd
STR             R4, [SP,#0x2B7C+timeout] ; optlen
MOV             R2, #5  ; optname
MOV             R1, #6  ; level
BL              setsockopt
LDR             R3, [SP,#0x2B7C+var_2B4C]
CMP             R3, #0
BNE             loc_278C0
MOVW            R0, #:lower16:dword_7448C
LDR             R3, [R11,#0x27C]
MOVT            R0, #:upper16:dword_7448C
LDR             R2, [R0]
CMP             R3, #0
ADD             R12, R2, #1
BEQ             loc_27900
MOVW            R1, #:lower16:aIdDMethodMinin ; "{\"id\": %d, \"method\": \"mining.subsc"...
STR             R12, [R0]
ADD             R0, SP, #0x2B7C+var_200C
MOVT            R1, #:upper16:aIdDMethodMinin ; "{\"id\": %d, \"method\": \"mining.subsc"...
ADD             R0, R0, #8 ; s
BL              sprintf

loc_276F0
ADD             R0, SP, #0x2B7C+var_200C
ADD             R0, R0, #8 ; s
BL              strlen
ADD             R1, SP, #0x2B7C+var_200C
MOV             R2, R0
ADD             R1, R1, #8 ; s
MOV             R0, R11 ; int
BL              sub_21CA0
SUBS            R5, R0, #0
BEQ             loc_27824
MOV             R4, #byte_68BD5
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_27738

loc_2772C
MOV             R0, R11
BL              sub_24340
B               loc_26C64

loc_27738
MOV             R3, #byte_74500
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_277D0
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_277D0
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BGT             loc_277D0

loc_27774
MOV             R4, #1

loc_27778
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27798
MOV             R2, #byte_68BD4

loc_2778C
LDRB            R3, [R2]
CMP             R3, #0
BEQ             loc_27FB8

loc_27798
MOVW            R12, #:lower16:aInitiateStratu ; "Initiate stratum failed"
ADD             LR, SP, #0x2B7C+var_2804
MOVT            R12, #:upper16:aInitiateStratu ; "Initiate stratum failed"
LDM             R12!, {R0-R3} ; "Initiate stratum failed"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; " failed"
STM             LR, {R0,R1}
ADD             R1, SP, #0x2B7C+var_2804
MOV             R0, #7
BL              sub_20F58

loc_277C4
CMP             R4, #0
BEQ             loc_26C64
B               loc_2772C

loc_277D0
MOVW            R12, #:lower16:aFailedToSendSI ; "Failed to send s in initiate_stratum"
LDR             R5, [SP,#0x2B7C+var_2B68]
MOVT            R12, #:upper16:aFailedToSendSI ; "Failed to send s in initiate_stratum"
LDM             R12!, {R0-R3} ; "Failed to send s in initiate_stratum"
MOV             LR, R5
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " in initiate_stratum"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "atum"
STR             R0, [LR],#4
MOV             R0, #7
STRB            R1, [LR]
MOV             R1, R5
BL              sub_20F58

loc_2780C
LDRB            R4, [R4]
CMP             R4, #0
BEQ             loc_2772C
MOV             R3, #byte_74500
B               loc_27778

loc_27824
MOV             R1, #0x3C ; '<'
LDR             R0, [R11,#0x24C]
BL              sub_22428
CMP             R0, #0
BNE             loc_27C98
MOV             R4, #byte_68BD5
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_2772C
MOV             R3, #byte_74500
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_27874
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_27FA0

loc_27874
MOVW            LR, #:lower16:aTimedOutWaitin_0 ; "Timed out waiting for response in initi"...
LDR             R5, [SP,#0x2B7C+var_2B68]
MOVT            LR, #:upper16:aTimedOutWaitin_0 ; "Timed out waiting for response in initi"...
LDM             LR!, {R0-R3} ; "Timed out waiting for response in initi"...
MOV             R12, R5
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "g for response in initiate_stratum"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "n initiate_stratum"
LDR             LR, [LR] ; "um"
STM             R12!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58
B               loc_2780C

loc_278C0
MOV             R0, R11
BL              sub_228C8
MOVW            R3, #:lower16:dword_7448C
ADD             R0, SP, #0x2B7C+var_200C
MOVT            R3, #:upper16:dword_7448C
MOVW            R1, #:lower16:aIdDMethodMinin_0 ; "{\"id\": %d, \"method\": \"mining.subsc"...
LDR             R2, [R3]
MOVT            R1, #:upper16:aIdDMethodMinin_0 ; "{\"id\": %d, \"method\": \"mining.subsc"...
ADD             R0, R0, #8 ; s
ADD             R12, R2, #1
STR             R12, [R3]
BL              sprintf
B               loc_276F0

loc_278F4
LDR             R3, [R11,#0x258]
STR             R3, [SP,#0x2B7C+name]
B               loc_27494

loc_27900
STR             R12, [R0]
MOVW            R1, #:lower16:aIdDMethodMinin_1 ; "{\"id\": %d, \"method\": \"mining.subsc"...
ADD             R0, SP, #0x2B7C+var_200C
MOVT            R1, #:upper16:aIdDMethodMinin_1 ; "{\"id\": %d, \"method\": \"mining.subsc"...
ADD             R0, R0, #8 ; s
BL              sprintf
B               loc_276F0

loc_2791C
BL              __errno_location
LDR             LR, =aSetupStratumSo ; "setup_stratum_socket"
ADD             R2, SP, #0x2B7C+var_2804
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOV             R4, R2
MOVW            R12, #0xB86
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x2B7C+var_2B74]
MOV             R0, R4  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_26B70

loc_27974
BL              __errno_location
LDR             LR, =aSetupStratumSo ; "setup_stratum_socket"
ADD             R2, SP, #0x2B7C+var_2804
MOVW            R1, #:lower16:aUtilC ; "util.c"
MOV             R4, R2
MOVW            R12, #0xB81
MOVT            R1, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x2B7C+var_2B74]
MOV             R0, R4  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_26B48

loc_279CC               ; jumptable 00027434 case 0
MOV             R2, #0

loc_279D0
MOV             R1, R6
MOV             R0, R11
BL              sub_21F0C
CMP             R0, #0
BNE             loc_275B8

loc_279E4
MOV             R4, #byte_68BD5
B               loc_26C58

loc_279F0               ; jumptable 00027434 cases 3,5
LDR             R4, [SP,#0x2B7C+var_2B54]
ADD             R9, SP, #0x2B7C+writefds.__fds_bits+4
MOVW            R2, #0x105
STRB            R10, [SP,#0x2B7C+writefds.__fds_bits+2]
STRH            R2, [R9,#-4]
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_27A9C
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_27A4C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27A4C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_27A9C

loc_27A4C
LDR             R12, [R11,#0x260]
ADD             R2, SP, #0x2B7C+var_2804
MOV             R5, R2
STR             R2, [SP,#0x2B7C+var_2B68]
MOVW            R2, #:lower16:aAttemptingToNe ; "Attempting to negotiate with %s:%s SOCK"...
LDR             R3, [R11,#0x25C]
MOV             R0, R5  ; s
MOVT            R2, #:upper16:aAttemptingToNe ; "Attempting to negotiate with %s:%s SOCK"...
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x2B7C+timeout]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_27AA4

loc_27A8C               ; jumptable 00027434 case 2
MOV             R2, #0
B               loc_275A4

loc_27A94               ; jumptable 00027434 case 1
MOV             R2, #1
B               loc_279D0

loc_27A9C
ADD             R3, SP, #0x2B7C+var_2804
STR             R3, [SP,#0x2B7C+var_2B68]

loc_27AA4
SUB             R8, R9, #4
MOV             R3, #0  ; flags
MOV             R1, R8  ; buf
MOV             R2, #3  ; n
MOV             R0, R6  ; fd
BL              send
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
LDR             R1, [SP,#0x2B7C+var_2B68] ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_27C18
LDRB            R3, [SP,#0x2B7C+var_2804]
CMP             R3, #5
BNE             loc_27C18
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
LDR             R1, [SP,#0x2B7C+var_2B68] ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_27C18
LDRB            R3, [SP,#0x2B7C+var_2804]
LDRB            R2, [SP,#0x2B7C+writefds.__fds_bits+2]
CMP             R2, R3
BNE             loc_27C18
LDR             R1, [R11,#0x258]
LDR             R3, [SP,#0x2B7C+var_2B40]
MOV             R0, R1  ; s
STR             R1, [SP,#0x2B7C+service]
STR             R3, [SP,#0x2B7C+writefds]
BL              strlen
LDR             R3, =aSocks5Negotiat ; "socks5_negotiate"
CMP             R0, #0xFF
MOVCC           R5, R0
MOVCS           R5, #0xFF
MOVW            R12, #0xAEC
LDR             R1, [SP,#0x2B7C+service]
STR             R3, [SP,#0x2B7C+timeout]
MOVW            R3, #:lower16:aUtilC ; "util.c"
STR             R12, [SP,#0x2B7C+var_2B78]
MOVT            R3, #:upper16:aUtilC ; "util.c"
ADD             R0, R9, #1
MOV             R2, R5
STRB            R5, [SP,#0x2B7C+writefds.__fds_bits+4]
BL              sub_254E8
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
LDR             R0, [R11,#0x248] ; nptr
BL              strtol
ADD             R3, SP, #0x2B7C+var_200C
MOV             R1, R0
ADD             R3, R3, #8
UBFX            LR, R1, #8, #8
ADD             R12, R3, R5
ADD             R2, R5, #7 ; n
STRB            R1, [R12,#-0x9FE]
MOV             R3, #0  ; flags
MOV             R1, R8  ; buf
MOV             R0, R6  ; fd
STRB            LR, [R12,#-0x9FF]
BL              send
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
LDR             R1, [SP,#0x2B7C+var_2B68] ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_27BC8
LDRB            R3, [SP,#0x2B7C+var_2804]
CMP             R3, #5
BEQ             loc_28508

loc_27BC8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27C04
MOV             R2, #byte_68BD4
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_27C04
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_26C58

loc_27C04
MOVW            R2, #:lower16:aBadResponseFro_0 ; "Bad response from %s:%s SOCKS5 server"
LDR             R12, [R11,#0x260]
MOVT            R2, #:upper16:aBadResponseFro_0 ; "Bad response from %s:%s SOCKS5 server"
LDR             R3, [R11,#0x25C]
B               loc_27C64

loc_27C18
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27C54
MOV             R2, #byte_68BD4
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_27C54
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_274D8

loc_27C54
LDR             R3, [R11,#0x25C]
MOVW            R2, #:lower16:aBadResponseFro_0 ; "Bad response from %s:%s SOCKS5 server"
LDR             R12, [R11,#0x260]
MOVT            R2, #:upper16:aBadResponseFro_0 ; "Bad response from %s:%s SOCKS5 server"

loc_27C64
LDR             R5, [SP,#0x2B7C+var_2B68]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x2B7C+timeout]
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
B               loc_26C58
off_27C8C DCD aSocks5Negotiat ; "socks5_negotiate"
off_27C90 DCD aSetupStratumSo ; "setup_stratum_socket"
off_27C94 DCD aInitiateStratu_0 ; "initiate_stratum"

loc_27C98
MOV             R0, R11
BL              sub_24858
SUBS            R4, R0, #0
BEQ             loc_27F94
MOV             R1, R5
ADD             R2, SP, #0x2B7C+var_2B04
BL              sub_47258
MOV             R5, R0
STR             R0, [SP,#0x2B7C+var_2B50]
MOV             R0, R4  ; ptr
BL              free
CMP             R5, #0
BEQ             loc_27FD0
LDR             R5, [SP,#0x2B7C+var_2B50]
MOV             R1, #aResult ; "result"
MOV             R0, R5
BL              sub_480FC
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R4, R0
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R5
BL              sub_480FC
CMP             R4, #0
BEQ             loc_2846C
LDR             R3, [R4]
CMP             R3, #7
BEQ             loc_2846C
CMP             R0, #0
BEQ             loc_281B0
LDR             R3, [R0]
CMP             R3, #7
BEQ             loc_281B0

loc_27D1C
MOV             R1, #3
BL              sub_45074
MOV             R4, R0

loc_27D28
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_27D64
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27D64
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_27D90

loc_27D64
LDR             R6, [SP,#0x2B7C+var_2B68]
MOV             R2, #aJsonRpcDecodeF ; "JSON-RPC decode failed: %s"
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
MOV             R0, R6  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R6
MOV             R0, #6
BL              sub_20F58

loc_27D90
LDR             R3, [SP,#0x2B7C+var_2B4C]
MOV             R0, R4  ; ptr
EOR             R3, R3, #1
STR             R3, [SP,#0x2B7C+var_2B4C]
BL              free

loc_27DA4
LDR             R3, [SP,#0x2B7C+var_2B4C]
CMP             R3, #0
BEQ             loc_27F94
ADD             R4, R11, #0xD4
MOV             R0, R4  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_28158

loc_27DC4
ADD             R6, R11, #0xEC
MOV             R0, R6  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_28100

loc_27DD8               ; ptr
LDR             R0, [R11,#0x27C]
BL              free
LDR             R0, [R11,#0x264] ; ptr
BL              free
STR             R10, [R11,#0x264]
MOV             R0, R6  ; rwlock
STR             R10, [R11,#0x27C]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_280A8

loc_27E00               ; mutex
MOV             R0, R4
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_28050

loc_27E10
LDR             R3, [SP,#0x2B7C+var_2B58]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [SP,#0x2B7C+var_2B54]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_27E98
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_27E60
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27E60
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_27E98

loc_27E60
MOVW            R12, #:lower16:aFailedToResume ; "Failed to resume stratum, trying afresh"
LDR             R4, [SP,#0x2B7C+var_2B68]
MOVT            R12, #:upper16:aFailedToResume ; "Failed to resume stratum, trying afresh"
LDM             R12!, {R0-R3} ; "Failed to resume stratum, trying afresh"
MOV             LR, R4
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " stratum, trying afresh"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; " afresh"
STM             LR, {R0,R1}
MOV             R1, R4
MOV             R0, #7
BL              sub_20F58

loc_27E98
LDR             R2, [SP,#0x2B7C+var_2B50]
CMP             R2, #0
BEQ             loc_26B38
LDR             R3, [R2,#4]
CMN             R3, #1
BEQ             loc_26B38
ADD             R3, R2, #4
DMB             ISH

loc_27EB8
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_27EB8
CMP             R2, #0
BNE             loc_26B38
LDR             R0, [SP,#0x2B7C+var_2B50]
BL              sub_48A34
B               loc_26B38

loc_27EE0
MOV             R4, #byte_68BD5
B               loc_271C8

loc_27EEC
MOVW            R3, #0xC0F
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x2B7C+timeout]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aSetupStratumSo ; "setup_stratum_socket"
MOV             R1, #1
MOV             R0, #0x2000
BL              sub_22A44
MOV             R3, #0x2000
STR             R0, [R11,#0x250]
STR             R3, [R11,#0x254]
B               loc_275D0

def_27434               ; jumptable 00027434 default case
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_27F58
MOV             R2, #byte_68BD4
LDRB            R3, [R2]
CMP             R3, #0
BNE             loc_27F58
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_274D0

loc_27F58
LDR             R12, [R11,#0x260]
MOVW            R2, #:lower16:aUnsupportedPro ; "Unsupported proxy type for %s:%s"
LDR             R3, [R11,#0x25C]
ADD             R0, SP, #0x2B7C+var_2804 ; s
MOVT            R2, #:upper16:aUnsupportedPro ; "Unsupported proxy type for %s:%s"
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x2B7C+timeout]
MOVW            R4, #:lower16:byte_68BD5
BL              snprintf
ADD             R1, SP, #0x2B7C+var_2804
MOV             R2, #0
MOV             R0, #4
MOVT            R4, #:upper16:byte_68BD5
BL              sub_20F58
B               loc_26C58

loc_27F94
MOV             R4, #byte_68BD5
B               loc_2780C

loc_27FA0
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_27774
B               loc_27874

loc_27FB8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_277C4
B               loc_27798

loc_27FD0
LDR             R3, [SP,#0x2B7C+var_2B4C]
MOV             R5, #byte_74500
EOR             R3, R3, #1
STR             R3, [SP,#0x2B7C+var_2B4C]
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_28018
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28018
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_27DA4

loc_28018
LDR             R4, [SP,#0x2B7C+var_2B68]
ADD             R1, SP, #0x2B7C+var_2AA8
MOVW            R2, #:lower16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
STR             R1, [SP,#0x2B7C+timeout]
LDR             R3, [SP,#0x2B7C+var_2B04]
MOVT            R2, #:upper16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #6
BL              sub_20F58
B               loc_27DA4

loc_28050
BL              __errno_location
LDR             R12, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R4, [SP,#0x2B7C+var_2B68]
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVW            R0, #0xCCE
STR             R1, [SP,#0x2B7C+timeout]
STR             R12, [SP,#0x2B7C+var_2B78]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x2B7C+var_2B74]
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R4
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_27E10

loc_280A8
BL              __errno_location
LDR             R12, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R6, [SP,#0x2B7C+var_2B68]
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVW            R0, #0xCCE
STR             R1, [SP,#0x2B7C+timeout]
STR             R12, [SP,#0x2B7C+var_2B78]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R0, [SP,#0x2B7C+var_2B74]
MOV             R1, #0x800 ; maxlen
MOV             R0, R6  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R6
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_27E00

loc_28100
BL              __errno_location
LDR             R12, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R7, [SP,#0x2B7C+var_2B68]
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOVW            R0, #0xCCA
STR             R1, [SP,#0x2B7C+timeout]
STR             R12, [SP,#0x2B7C+var_2B78]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R0, [SP,#0x2B7C+var_2B74]
MOV             R1, #0x800 ; maxlen
MOV             R0, R7  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R7
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_27DD8

loc_28158
BL              __errno_location
LDR             R12, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R6, [SP,#0x2B7C+var_2B68]
MOVT            R1, #:upper16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R0, #0xCCA
STR             R1, [SP,#0x2B7C+timeout]
STR             R12, [SP,#0x2B7C+var_2B78]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0x2B7C+var_2B74]
MOV             R1, #0x800 ; maxlen
MOV             R0, R6  ; s
BL              snprintf
MOV             R2, #1
MOV             R1, R6
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_27DC4

loc_281B0
MOV             R1, #0
MOV             R0, R4
BL              sub_48484
SUBS            R9, R0, #0
BEQ             loc_28210
LDR             R3, [R9]
CMP             R3, #1
BNE             loc_28210
BL              sub_48468
SUBS            R3, R0, #0
MOV             R7, R3
BLE             loc_28210
MOVW            R5, #:lower16:aMiningNotify ; "mining.notify"
MOV             R6, R4
MOVT            R5, #:upper16:aMiningNotify ; "mining.notify"

loc_281EC
LDR             R1, [SP,#0x2B7C+var_2B48]
MOV             R0, R9
BL              sub_48484
SUBS            R8, R0, #0
BEQ             loc_2820C
LDR             R4, [R8]
CMP             R4, #1
BEQ             loc_28354

loc_2820C
MOV             R4, R6

loc_28210
LDR             R3, [SP,#0x2B7C+var_2B54]
LDRB            R6, [R3]
CMP             R6, #0
BEQ             loc_28298
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2825C
MOV             R3, #byte_68BD4
LDRB            R6, [R3]
CMP             R6, #0
BNE             loc_2825C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_28298

loc_2825C
MOVW            R12, #:lower16:aFailedToGetSes ; "Failed to get sessionid in initiate_str"...
LDR             R5, [SP,#0x2B7C+var_2B68]
MOVT            R12, #:upper16:aFailedToGetSes ; "Failed to get sessionid in initiate_str"...
MOV             R6, #0
LDM             R12!, {R0-R3} ; "Failed to get sessionid in initiate_str"...
MOV             LR, R5
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ssionid in initiate_stratum"
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; "ate_stratum"
STM             LR, {R0-R2}
MOV             R2, R6
MOV             R1, R5
MOV             R0, #7
BL              sub_20F58

loc_28298
MOV             R1, #1
MOV             R0, R4
BL              sub_22520
MOV             R2, #0xC90
LDR             R1, =aInitiateStratu_0 ; "initiate_stratum"
MOV             R8, R0
BL              sub_225A0
SUBS            R5, R0, #0
BNE             loc_283B0
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_282F8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_282F8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2833C

loc_282F8
MOVW            LR, #:lower16:aFailedToGetVal ; "Failed to get valid nonce1 in initiate_"...
LDR             R4, [SP,#0x2B7C+var_2B68]
MOVT            LR, #:upper16:aFailedToGetVal ; "Failed to get valid nonce1 in initiate_"...
LDM             LR!, {R0-R3} ; "Failed to get valid nonce1 in initiate_"...
MOV             R12, R4
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "lid nonce1 in initiate_stratum"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "itiate_stratum"
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R1, R4
MOV             R0, #6
STRB            LR, [R12]
BL              sub_20F58

loc_2833C
LDR             R3, [SP,#0x2B7C+var_2B4C]
MOV             R0, R6  ; ptr
EOR             R3, R3, #1
STR             R3, [SP,#0x2B7C+var_2B4C]
BL              free
B               loc_27DA4

loc_28354
MOV             R1, #0
BL              sub_224BC
CMP             R0, #0
MOV             R2, #0xD ; n
MOV             R1, R5  ; s2
BEQ             loc_28378
BL              strncasecmp
CMP             R0, #0
BEQ             loc_28390

loc_28378
LDR             R3, [SP,#0x2B7C+var_2B48]
ADD             R3, R3, #1
CMP             R7, R3
STR             R3, [SP,#0x2B7C+var_2B48]
BNE             loc_281EC
B               loc_2820C

loc_28390
MOV             R3, R4
MOV             R0, R8
MOV             R1, R3
MOV             R4, R6
BL              sub_22520
SUBS            R6, R0, #0
BNE             loc_28298
B               loc_28210

loc_283B0
MOV             R1, #2
MOV             R0, R4
BL              sub_48484
BL              sub_4888C
SUB             R3, R0, #2
CMP             R3, #0xE
BLS             loc_26C88
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_28408
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28408
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2844C

loc_28408
MOVW            LR, #:lower16:aFailedToGetVal_0 ; "Failed to get valid n2size in initiate_"...
LDR             R4, [SP,#0x2B7C+var_2B68]
MOVT            LR, #:upper16:aFailedToGetVal_0 ; "Failed to get valid n2size in initiate_"...
LDM             LR!, {R0-R3} ; "Failed to get valid n2size in initiate_"...
MOV             R12, R4
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "lid n2size in initiate_stratum"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "itiate_stratum"
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R1, R4
MOV             R0, #6
STRB            LR, [R12]
BL              sub_20F58

loc_2844C
LDR             R3, [SP,#0x2B7C+var_2B4C]
MOV             R0, R6  ; ptr
EOR             R3, R3, #1
STR             R3, [SP,#0x2B7C+var_2B4C]
BL              free
MOV             R0, R8  ; ptr
BL              free
B               loc_27DA4

loc_2846C
CMP             R0, #0
BNE             loc_27D1C
MOV             R0, #0x11 ; size
BL              malloc
SUBS            R4, R0, #0
BEQ             loc_27D28
MOVW            R12, #:lower16:aUnknownReason ; "(unknown reason)"
MOV             LR, R4
MOVT            R12, #:upper16:aUnknownReason ; "(unknown reason)"
LDM             R12!, {R0-R3} ; "(unknown reason)"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
STRB            R12, [LR]
B               loc_27D28

loc_284A4
LDR             R7, =aInitiateStratu_0 ; "initiate_stratum"
MOVW            R4, #:lower16:aUtilC ; "util.c"
BL              __errno_location
MOVT            R4, #:upper16:aUtilC ; "util.c"
MOVW            R3, #0xCA4
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R4, [SP,#0x2B7C+timeout]
STR             R7, [SP,#0x2B7C+var_2B78]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R3, [SP,#0x2B7C+var_2B74]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
LDR             R0, [SP,#0x2B7C+var_2B68] ; s
BL              snprintf
MOV             R2, #1
LDR             R1, [SP,#0x2B7C+var_2B68]
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_26D58

loc_284F8
MOVW            R3, #:lower16:byte_74500
MOV             R4, #0
MOVT            R3, #:upper16:byte_74500
B               loc_27778

loc_28508               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
LDR             R1, [SP,#0x2B7C+var_2B68] ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_27BC8
LDRB            R5, [SP,#0x2B7C+var_2804]
CMP             R5, #0
BNE             loc_27BC8
LDR             R7, [SP,#0x2B7C+var_2B68]
MOV             R3, R5  ; flags
MOV             R2, #1  ; n
MOV             R0, R6  ; fd
MOV             R1, R7  ; buf
BL              recv
MOV             R3, R5  ; flags
MOV             R2, #1  ; n
MOV             R1, R7  ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
BEQ             loc_27BC8
LDRB            R3, [SP,#0x2B7C+var_2804]
CMP             R3, #1
BEQ             loc_285C0
CMP             R3, #3
BNE             loc_27BC8
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
LDR             R1, [SP,#0x2B7C+var_2B68] ; buf
MOV             R0, R6  ; fd
BL              recv
CMN             R0, #1
MOV             R5, #0
LDRBNE          R4, [SP,#0x2B7C+var_2804]
MOVEQ           R4, R0

loc_2859C
CMP             R5, R4
MOV             R3, #0  ; flags
ADD             R5, R5, #1
MOV             R2, #1  ; n
LDR             R1, [SP,#0x2B7C+var_2B68] ; buf
MOV             R0, R6  ; fd
BGE             loc_285E0
BL              recv
B               loc_2859C

loc_285C0
MOV             R4, #4

loc_285C4               ; flags
MOV             R3, #0
MOV             R2, #1  ; n
LDR             R1, [SP,#0x2B7C+var_2B68] ; buf
MOV             R0, R6  ; fd
BL              recv
SUBS            R4, R4, #1
BNE             loc_285C4

loc_285E0
LDR             R4, [SP,#0x2B7C+var_2B68]
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
MOV             R0, R6  ; fd
MOV             R1, R4  ; buf
BL              recv
MOV             R3, #0  ; flags
MOV             R2, #1  ; n
MOV             R1, R4  ; buf
MOV             R0, R6  ; fd
BL              recv
LDR             R3, [SP,#0x2B7C+var_2B54]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_275C4
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_28658
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28658
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_275C4

loc_28658
LDR             R4, [SP,#0x2B7C+var_2B68]
MOVW            R2, #:lower16:aSuccessNegotia_0 ; "Success negotiating with %s:%s SOCKS5 p"...
LDR             R12, [R11,#0x260]
MOVT            R2, #:upper16:aSuccessNegotia_0 ; "Success negotiating with %s:%s SOCKS5 p"...
LDR             R3, [R11,#0x25C]
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
STR             R12, [SP,#0x2B7C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #7
BL              sub_20F58
B               loc_275C4
; End of function sub_26AEC




; int __fastcall sub_28690(int)
sub_28690
PUSH            {R4-R6,LR}
MOV             R4, R0
LDRB            R3, [R0,#0x281]
CMP             R3, #0
BNE             loc_28704

loc_286A4
MOV             R0, R4
BL              sub_26AEC
CMP             R0, #0
BEQ             loc_286D0
LDRB            R3, [R4,#0x244]
CMP             R3, #0
BEQ             loc_286E4
MOV             R0, R4
BL              sub_296D0
CMP             R0, #0
BNE             loc_286E4

loc_286D0
MOV             R0, R4
MOV             R5, #0
BL              sub_3466C
MOV             R0, R5
POP             {R4-R6,PC}

loc_286E4
MOV             R0, R4
BL              sub_29AC8
SUBS            R5, R0, #0
BEQ             loc_286D0
MOV             R0, R4
BL              sub_32400
MOV             R0, R5
POP             {R4-R6,PC}

loc_28704
BL              sub_24340
B               loc_286A4
; End of function sub_28690



; Attributes: bp-based frame fpd=0xFFFFFFE8

; int __fastcall sub_2870C(_DWORD *, _DWORD *)
sub_2870C

var_A24= -0xA24
var_A1C= -0xA1C
s= -0xA14
var_90C= -0x90C
var_908= -0x908
var_8F8= -0x8F8
var_7F8= -0x7F8

PUSH            {R4-R8,R11,LR}
ADD             R11, SP, #0x18
MOV             R4, R0
SUB             SP, SP, #0x910
SUB             R0, R11, #-(-0x18+var_8F8)
SUB             SP, SP, #0xC
MOV             R2, #0xFF ; n
MOV             R5, R1
MOV             R1, #0  ; c
SUB             R0, R0, #0xC ; s
BL              memset
MOV             R1, #0
MOV             R0, R5
BL              sub_48484
BL              sub_48630
SUBS            R6, R0, #0
LDREQ           R6, [R4,#0x258]
BEQ             loc_28790
LDR             R7, [R4,#0x258]
MOV             R1, #0x2E ; '.' ; c
MOV             R0, R7  ; s
BL              strchr
SUBS            R8, R0, #0
BEQ             loc_288F0
MOV             R1, #0x2E ; '.' ; c
MOV             R0, R6  ; s
BL              strchr
SUBS            R1, R0, #0 ; s2
BEQ             loc_289D8
MOV             R0, R8  ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_28984

loc_28790
MOV             R1, #1
MOV             R0, R5
BL              sub_48484
BL              sub_4888C
SUBS            R2, R0, #0
BEQ             loc_28968
SUB             SP, SP, #0x108
MOVW            R1, #:lower16:(aStaleSubmissio_0+0x30) ; "%d"
ADD             R5, SP, #0xA24+s
MOVT            R1, #:upper16:(aStaleSubmissio_0+0x30) ; format
MOV             R0, R5  ; s
BL              sprintf

loc_287C0
MOVW            R2, #:lower16:(aFailedToConnec+0x20) ; "%s:%s"
SUB             R0, R11, #-(-0x18+var_8F8)
MOV             R3, R6
MOVT            R2, #:upper16:(aFailedToConnec+0x20) ; format
MOV             R1, #0xFE ; maxlen
STR             R5, [SP,#0xA24+var_A24]
SUB             R0, R0, #0xC ; s
BL              snprintf
SUB             R3, R11, #-(-0x18+var_8F8)
SUB             R2, R11, #-(-0x18+var_908)
SUB             R3, R3, #0xC
SUB             R1, R3, #8
MOV             R0, R3
BL              sub_23CD8
CMP             R0, #0
BEQ             loc_2895C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2883C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2883C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_28878

loc_2883C
SUB             R1, R11, #-(-0x18+var_8F8)
MOVW            R2, #:lower16:aStratumReconne ; "Stratum reconnect requested from pool %"...
SUB             R1, R1, #0xC
SUB             R0, R11, #-(-0x18+var_7F8)
LDR             R3, [R4]
MOVT            R2, #:upper16:aStratumReconne ; "Stratum reconnect requested from pool %"...
STR             R1, [SP,#0xA24+var_A24]
SUB             R0, R0, #0xC ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
SUB             R1, R11, #-(-0x18+var_7F8)
MOV             R2, #0
SUB             R1, R1, #0xC
MOV             R0, #4
BL              sub_20F58

loc_28878
MOV             R0, R4
ADD             R5, R4, #0x2C0
BL              sub_33AB4
MOV             R0, R5  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_28A2C

loc_28894
MOV             R0, R4
BL              sub_223C0
LDR             R3, [R11,#-0x18+var_90C]
LDR             R0, [R4,#0x258] ; ptr
STR             R3, [R4,#0x240]
STR             R3, [R4,#0x258]
BL              free
LDR             R3, [R11,#-0x18+var_908]
LDR             R0, [R4,#0x248] ; ptr
STR             R3, [R4,#0x248]
BL              free
MOV             R0, R5  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_28A84

loc_288D0
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
BL              sub_28690
SUB             SP, R11, #0x18
POP             {R4-R8,R11,PC}

loc_288F0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2892C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2892C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2895C

loc_2892C
MOVW            R2, #:lower16:aDeniedStratumR ; "Denied stratum reconnect request for po"...
SUB             R0, R11, #-(-0x18+var_7F8)
MOV             R3, R7
SUB             R0, R0, #0xC ; s
MOVT            R2, #:upper16:aDeniedStratumR ; "Denied stratum reconnect request for po"...

loc_28940               ; maxlen
MOV             R1, #0x800
BL              snprintf
SUB             R1, R11, #-(-0x18+var_7F8)
MOV             R2, #0
SUB             R1, R1, #0xC
MOV             R0, #3
BL              sub_20F58

loc_2895C
MOV             R0, #0
SUB             SP, R11, #0x18
POP             {R4-R8,R11,PC}

loc_28968
MOV             R0, R5
MOV             R1, #1
BL              sub_48484
BL              sub_48630
SUBS            R5, R0, #0
LDREQ           R5, [R4,#0x248]
B               loc_287C0

loc_28984
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_289C0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_289C0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2895C

loc_289C0
MOVW            R2, #:lower16:aDeniedStratumR_0 ; "Denied stratum reconnect request to non"...
SUB             R0, R11, #-(-0x18+var_7F8)
MOV             R3, R7
SUB             R0, R0, #0xC
MOVT            R2, #:upper16:aDeniedStratumR_0 ; "Denied stratum reconnect request to non"...
B               loc_28940

loc_289D8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28A14
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28A14
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2895C

loc_28A14
MOVW            R2, #:lower16:aDeniedStratumR_1 ; "Denied stratum reconnect request to url"...
SUB             R0, R11, #-(-0x18+var_7F8)
MOV             R3, R6
SUB             R0, R0, #0xC
MOVT            R2, #:upper16:aDeniedStratumR_1 ; "Denied stratum reconnect request to url"...
B               loc_28940

loc_28A2C
BL              __errno_location
LDR             LR, =aParseReconnect ; "parse_reconnect"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVW            R12, #0x942
MOVT            R1, #:upper16:aUtilC ; "util.c"
SUB             R0, R11, #-(-0x18+var_7F8)
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0xA24+var_A1C]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOV             R1, #0x800 ; maxlen
SUB             R0, R0, #0xC ; s
BL              snprintf
SUB             R1, R11, #-(-0x18+var_7F8)
MOV             R2, #1
SUB             R1, R1, #0xC
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_28894

loc_28A84
BL              __errno_location
LDR             LR, =aParseReconnect ; "parse_reconnect"
MOVW            R1, #:lower16:aUtilC ; "util.c"
LDR             R3, [R0]
MOVW            R12, #0x94B
MOVT            R1, #:upper16:aUtilC ; "util.c"
SUB             R0, R11, #-(-0x18+var_7F8)
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0xA24+var_A1C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOV             R1, #0x800 ; maxlen
SUB             R0, R0, #0xC ; s
BL              snprintf
SUB             R1, R11, #-(-0x18+var_7F8)
MOV             R2, #1
SUB             R1, R1, #0xC
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_2870C

B               loc_288D0
off_28ADC DCD aParseReconnect ; "parse_reconnect"



; int __fastcall sub_28AE0(_DWORD *, int)
sub_28AE0

var_211C= -0x211C
var_2114= -0x2114
var_2108= -0x2108
var_2100= -0x2100
var_20A4= -0x20A4
s= -0x2004

PUSH            {R4-R11,LR}
MOV             R6, R0
VPUSH           {D8-D9}
SUB             SP, SP, #0x2100
SUB             SP, SP, #0x1C
MOV             R0, R1
ADD             R2, SP, #0x211C+var_2100
MOV             R1, #0
BL              sub_47258
SUBS            R5, R0, #0
BEQ             loc_28C78
MOV             R1, #aMethod ; "method"
BL              sub_480FC
SUBS            R7, R0, #0
BEQ             loc_28C30
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R5
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
BL              sub_480FC
MOVW            R1, #:lower16:aParams ; "params"
MOV             R4, R0
MOVT            R1, #:upper16:aParams ; "params"
MOV             R0, R5
BL              sub_480FC
CMP             R4, #0
MOV             R8, R0
BEQ             loc_28B5C
LDR             R3, [R4]
CMP             R3, #7
BNE             loc_28CEC

loc_28B5C
MOV             R0, R7
BL              sub_48630
SUBS            R7, R0, #0
BEQ             loc_28C30
MOVW            R1, #:lower16:aMiningMultiVer ; "mining.multi_version"
MOV             R2, #0x14 ; n
MOVT            R1, #:upper16:aMiningMultiVer ; "mining.multi_version"
BL              strncasecmp
SUBS            R4, R0, #0
BNE             loc_28D68
MOVW            R3, #:lower16:byte_74500
MOV             R2, #1
MOVT            R3, #:upper16:byte_74500
STRB            R2, [R6,#0x284]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28BC8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28BC8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_28C00

loc_28BC8
MOVW            LR, #:lower16:aPoolSupportMul ; "Pool support multi version"
ADD             R12, SP, #0x211C+s
MOVT            LR, #:upper16:aPoolSupportMul ; "Pool support multi version"
LDM             LR!, {R0-R3} ; "Pool support multi version"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "ti version"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x211C+s
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #6
MOV             R2, #0
STRB            R3, [R12]
BL              sub_20F58

loc_28C00
ADD             R6, R6, #0x28C

loc_28C04
MOV             R0, R8
BL              sub_48468
CMP             R4, R0
MOV             R1, R4
MOV             R0, R8
ADD             R4, R4, #1
BCS             loc_28F4C
BL              sub_48484
BL              sub_4888C
STR             R0, [R6],#4
B               loc_28C04

loc_28C30
MOV             R4, #0

loc_28C34
LDR             R3, [R5,#4]
CMN             R3, #1
BEQ             loc_28C64
ADD             R3, R5, #4
DMB             ISH

loc_28C48
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_28C48
CMP             R2, #0
BEQ             loc_28D5C

loc_28C64
MOV             R0, R4
ADD             SP, SP, #0x2100
ADD             SP, SP, #0x1C
VPOP            {D8-D9}
POP             {R4-R11,PC}

loc_28C78
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28CB4
MOV             R3, #byte_68BD4
LDRB            R4, [R3]
CMP             R4, #0
BNE             loc_28CB4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_28C64

loc_28CB4
ADD             R1, SP, #0x211C+var_20A4
MOVW            R2, #:lower16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
STR             R1, [SP,#0x211C+var_211C]
ADD             R0, SP, #0x211C+s ; s
LDR             R3, [SP,#0x211C+var_2100]
MOVT            R2, #:upper16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
MOV             R1, #0x800 ; maxlen
MOV             R4, #0
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, R4
MOV             R0, #6
BL              sub_20F58
B               loc_28C64

loc_28CEC
MOV             R0, R4
MOV             R1, #3
BL              sub_45074
MOVW            R3, #:lower16:byte_74500
MOV             R4, R0
MOVT            R3, #:upper16:byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28D24
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_28F10

loc_28D24
MOVW            R2, #:lower16:aJsonRpcMethodD ; "JSON-RPC method decode failed: %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aJsonRpcMethodD ; "JSON-RPC method decode failed: %s"
ADD             R0, SP, #0x211C+s ; s
MOV             R3, R4
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_28D4C               ; ptr
MOV             R0, R4
MOV             R4, #0
BL              free
B               loc_28C34

loc_28D5C
MOV             R0, R5
BL              sub_48A34
B               loc_28C64

loc_28D68
MOVW            R1, #:lower16:aMiningNotify ; "mining.notify"
MOV             R2, #0xD ; n
MOVT            R1, #:upper16:aMiningNotify ; "mining.notify"
MOV             R0, R7  ; s1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_28F28
MOVW            R1, #:lower16:aMiningSetVersi ; "mining.set_version_mask"
MOV             R2, #0x17 ; n
MOVT            R1, #:upper16:aMiningSetVersi ; "mining.set_version_mask"
MOV             R0, R7  ; s1
BL              strncasecmp
SUBS            R1, R0, #0
BEQ             loc_28F54
MOVW            R1, #:lower16:aMiningSetDiffi ; "mining.set_difficulty"
MOV             R2, #0x15 ; n
MOVT            R1, #:upper16:aMiningSetDiffi ; "mining.set_difficulty"
MOV             R0, R7  ; s1
BL              strncasecmp
SUBS            R1, R0, #0
BEQ             loc_28F74
MOVW            R1, #:lower16:aMiningSetExtra ; "mining.set_extranonce"
MOV             R2, #0x15 ; n
MOVT            R1, #:upper16:aMiningSetExtra ; "mining.set_extranonce"
MOV             R0, R7  ; s1
BL              strncasecmp
SUBS            R1, R0, #0
BEQ             loc_29094
MOVW            R1, #:lower16:aClientReconnec ; "client.reconnect"
MOV             R2, #0x10 ; n
MOVT            R1, #:upper16:aClientReconnec ; "client.reconnect"
MOV             R0, R7  ; s1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_29138
MOVW            R1, #:lower16:aClientGetVersi ; "client.get_version"
MOV             R2, #0x12 ; n
MOVT            R1, #:upper16:aClientGetVersi ; "client.get_version"
MOV             R0, R7  ; s1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_2914C
MOVW            R1, #:lower16:aClientShowMess ; "client.show_message"
MOV             R2, #0x13 ; n
MOVT            R1, #:upper16:aClientShowMess ; "client.show_message"
MOV             R0, R7  ; s1
BL              strncasecmp
CMP             R0, #0
BEQ             loc_29230
MOVW            R1, #:lower16:aMiningPing ; "mining.ping"
MOV             R0, R7  ; s1
MOVT            R1, #:upper16:aMiningPing ; "mining.ping"
MOV             R2, #0xB ; n
BL              strncasecmp
CMP             R0, #0
BNE             loc_28C30
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28E84
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_28E84
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_28EAC

loc_28E84
MOVW            R2, #:lower16:aPoolDPing ; "Pool %d ping"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPoolDPing ; "Pool %d ping"
ADD             R0, SP, #0x211C+s ; s
LDR             R3, [R6]
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_28EAC
MOVW            R1, #:lower16:aId_0 ; "id"
MOV             R0, R5
MOVT            R1, #:upper16:aId_0 ; "id"
BL              sub_480FC
CMP             R0, #0
MOVEQ           R4, R0
BEQ             loc_28C34
MOVW            R1, #:lower16:aId_0 ; "id"
MOV             R0, R5
MOVT            R1, #:upper16:aId_0 ; "id"
BL              sub_480FC
BL              sub_4888C
MOVW            R1, #:lower16:aIdDResultPongE ; "{\"id\": %d, \"result\": \"pong\", \"er"...
MOV             R2, R0
MOVT            R1, #:upper16:aIdDResultPongE ; "{\"id\": %d, \"result\": \"pong\", \"er"...

loc_28EE8               ; s
ADD             R0, SP, #0x211C+s
BL              sprintf
ADD             R0, SP, #0x211C+s ; s
BL              strlen
ADD             R1, SP, #0x211C+s
MOV             R2, R0
MOV             R0, R6
BL              sub_244A4
MOV             R4, R0
B               loc_28C34

loc_28F10
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_28D4C
B               loc_28D24

loc_28F28
MOV             R1, R8
MOV             R0, R6
BL              sub_2582C
SUBS            R4, R0, #0
MOVNE           R3, #1
STRBNE          R3, [R6,#0x283]
BNE             loc_28C34

loc_28F44
STRB            R4, [R6,#0x283]
B               loc_28C34

loc_28F4C
MOV             R4, #1
B               loc_28C34

loc_28F54
MOV             R0, R8
MOV             R4, #1
BL              sub_48484
BL              sub_48630
MOV             R1, R0  ; s
MOV             R0, R6  ; int
BL              sub_22E7C
B               loc_28F44

loc_28F74
MOV             R0, R8
BL              sub_48484
BL              sub_489C8
VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
VMOV.F64        D8, D0
BEQ             loc_28C30
ADD             R4, R6, #0xD4
MOV             R0, R4  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_295C0

loc_28FA4
ADD             R7, R6, #0xEC
MOV             R0, R7  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2956C

loc_28FB8
ADD             R3, R6, #0x720
MOV             R0, R7  ; rwlock
VLDR            D9, [R3,#-8]
VSTR            D8, [R3,#-8]
VCMPE.F64       D9, #0.0
VMRS            APSR_nzcv, FPSCR
VLDRLE          D9, [R3]
VSTRLE          D8, [R3]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_29518

loc_28FE4               ; mutex
MOV             R0, R4
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_294C4

loc_28FF4
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
VCMP.F64        D8, D9
VMRS            APSR_nzcv, FPSCR
BEQ             loc_292B0
VCVT.S32.F64    S15, D8
MOV             R3, #byte_74500
LDRB            R3, [R3]
VCVT.F64.S32    D6, S15
VCMP.F64        D8, D6
VMRS            APSR_nzcv, FPSCR
BNE             loc_29330
CMP             R3, #0
BNE             loc_29060
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29060
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_28F4C

loc_29060
VSTR            S15, [SP,#0x211C+var_211C]
MOVW            R2, #:lower16:aPoolDDifficult ; "Pool %d difficulty changed to %d"
LDR             R3, [R6]
ADD             R0, SP, #0x211C+s ; s
MOVT            R2, #:upper16:aPoolDDifficult ; "Pool %d difficulty changed to %d"

loc_29074               ; maxlen
MOV             R1, #0x800
MOV             R4, #1
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
B               loc_28C34

loc_29094
LDR             R7, =aParseExtranonc ; "parse_extranonce"
MOV             R0, R8
BL              sub_22520
MOVW            R2, #0x8E6
MOV             R9, R0
MOV             R1, R7
BL              sub_225A0
SUBS            R4, R0, #0
BNE             loc_29188
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_290F4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_290F4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_28C30

loc_290F4
MOVW            LR, #:lower16:aFailedToGetVal_1 ; "Failed to get valid nonce1 in parse_ext"...
ADD             R12, SP, #0x211C+s
MOVT            LR, #:upper16:aFailedToGetVal_1 ; "Failed to get valid nonce1 in parse_ext"...
LDM             LR!, {R0-R3} ; "Failed to get valid nonce1 in parse_ext"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "lid nonce1 in parse_extranonce"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "rse_extranonce"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x211C+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #6
STRB            LR, [R12]
BL              sub_20F58
B               loc_28C34

loc_29138
MOV             R1, R8
MOV             R0, R6
BL              sub_2870C
MOV             R4, R0
B               loc_28C34

loc_2914C
MOVW            R1, #:lower16:aId_0 ; "id"
MOV             R0, R5
MOVT            R1, #:upper16:aId_0 ; "id"
BL              sub_480FC
CMP             R0, #0
BEQ             loc_28C30
MOVW            R1, #:lower16:aId_0 ; "id"
MOV             R0, R5
MOVT            R1, #:upper16:aId_0 ; "id"
BL              sub_480FC
BL              sub_4888C
MOVW            R1, #:lower16:aIdDResultCgmin ; "{\"id\": %d, \"result\": \"cgminer/1.0."...
MOV             R2, R0
MOVT            R1, #:upper16:aIdDResultCgmin ; "{\"id\": %d, \"result\": \"cgminer/1.0."...
B               loc_28EE8

loc_29188
MOV             R1, #1
MOV             R0, R8
BL              sub_48484
BL              sub_4888C
SUBS            R3, R0, #0
STR             R3, [SP,#0x211C+var_2108]
BNE             loc_29394
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_291E0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_291E0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_29220

loc_291E0
MOVW            LR, #:lower16:aFailedToGetVal_2 ; "Failed to get valid n2size in parse_ext"...
ADD             R12, SP, #0x211C+s
MOVT            LR, #:upper16:aFailedToGetVal_2 ; "Failed to get valid n2size in parse_ext"...
LDM             LR!, {R0-R3} ; "Failed to get valid n2size in parse_ext"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "lid n2size in parse_extranonce"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "rse_extranonce"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x211C+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #6
STRB            LR, [R12]
BL              sub_20F58

loc_29220               ; ptr
MOV             R0, R9
MOV             R4, #0
BL              free
B               loc_28C34

loc_29230
CMP             R8, #0
BEQ             loc_28C30
LDR             R3, [R8]
CMP             R3, #1
BNE             loc_28C30
MOV             R1, #0
MOV             R0, R8
BL              sub_48484
BL              sub_48630
CMP             R0, #0
BEQ             loc_28C30
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29298
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29298
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_28F4C

loc_29298
MOVW            R2, #:lower16:aPoolDMessageS ; "Pool %d message: %s"
STR             R0, [SP,#0x211C+var_211C]
MOVT            R2, #:upper16:aPoolDMessageS ; "Pool %d message: %s"
ADD             R0, SP, #0x211C+s
LDR             R3, [R6]
B               loc_29074

loc_292B0
MOV             R3, #byte_68BD5
LDRB            R4, [R3]
CMP             R4, #0
BEQ             loc_28F4C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29300
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29300
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_28F4C

loc_29300
MOVW            R2, #:lower16:aPoolDDifficult_0 ; "Pool %d difficulty set to %f"
VSTR            D8, [SP,#0x211C+var_211C]
ADD             R0, SP, #0x211C+s ; s
LDR             R3, [R6]
MOVT            R2, #:upper16:aPoolDDifficult_0 ; "Pool %d difficulty set to %f"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_28C34

loc_29330
CMP             R3, #0
BNE             loc_29360
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29360
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_28F4C

loc_29360
MOVW            R2, #:lower16:aPoolDDifficult_1 ; "Pool %d difficulty changed to %.1f"
VSTR            D8, [SP,#0x211C+var_211C]
ADD             R0, SP, #0x211C+s ; s
LDR             R3, [R6]
MOVT            R2, #:upper16:aPoolDDifficult_1 ; "Pool %d difficulty changed to %.1f"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #5
MOV             R4, #1
BL              sub_20F58
B               loc_28C34

loc_29394
ADD             R10, R6, #0xD4
MOV             R0, R10 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_296A4

loc_293A8
ADD             R11, R6, #0xEC
MOVW            R8, #:lower16:aUtilC ; "util.c"
MOV             R0, R11 ; rwlock
MOVT            R8, #:upper16:aUtilC ; "util.c"
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2965C

loc_293C4               ; ptr
LDR             R0, [R6,#0x264]
BL              free
STR             R9, [R6,#0x264]
MOV             R0, R9  ; s
BL              strlen
MOV             R3, R0,LSR#1
LDR             R0, [R6,#0x268] ; ptr
STR             R3, [R6,#0x61C]
BL              free
MOVW            R3, #0x8F7
MOVW            R2, #:lower16:aUtilC ; "util.c"
STR             R3, [SP,#0x211C+var_211C]
MOVT            R2, #:upper16:aUtilC ; "util.c"
LDR             R3, =aParseExtranonc ; "parse_extranonce"
MOV             R1, #1
LDR             R0, [R6,#0x61C]
BL              sub_22A44
CMP             R0, #0
STR             R0, [R6,#0x268]
BEQ             loc_29618

loc_29414
LDR             R2, [R6,#0x61C]
LDR             R1, [R6,#0x264]
LDR             R0, [R6,#0x268]
BL              sub_22CD8
LDR             R3, [SP,#0x211C+var_2108]
MOV             R0, R11 ; rwlock
STR             R3, [R6,#0x278]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_295D0

loc_2943C
MOV             R0, R10
MOVW            R2, #0x8FC
LDR             R1, =aParseExtranonc ; "parse_extranonce"
BL              sub_227E8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29498
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29498
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_28F4C

loc_29498
MOVW            R2, #:lower16:aPoolDExtranonc ; "Pool %d extranonce change requested"
LDR             R3, [R6]
ADD             R0, SP, #0x211C+s ; s
MOVT            R2, #:upper16:aPoolDExtranonc ; "Pool %d extranonce change requested"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
B               loc_28C34

loc_294C4
BL              __errno_location
LDR             R1, =aParseDiff ; "parse_diff"
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x8C8
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x211C+var_2114]
STR             R1, [SP,#0x211C+var_211C+4]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R3, [SP,#0x211C+var_211C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_28FF4

loc_29518
BL              __errno_location
LDR             R1, =aParseDiff ; "parse_diff"
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x8C8
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R12, [SP,#0x211C+var_2114]
STR             R1, [SP,#0x211C+var_211C+4]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R3, [SP,#0x211C+var_211C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_28FE4

loc_2956C
BL              __errno_location
LDR             R1, =aParseDiff ; "parse_diff"
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R12, #0x8BB
MOVT            R3, #:upper16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R12, [SP,#0x211C+var_2114]
STR             R1, [SP,#0x211C+var_211C+4]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R3, [SP,#0x211C+var_211C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_28FB8

loc_295C0
MOVW            R1, #0x8BB
LDR             R0, =aParseDiff ; "parse_diff"
BL              sub_22864
B               loc_28FA4

loc_295D0
BL              __errno_location
MOVW            R3, #0x8FC
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R7, [SP,#0x211C+var_211C+4]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R8, [SP,#0x211C+var_211C]
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x211C+var_2114]
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_2943C

loc_29618
MOVW            R1, #0x8F9
MOVW            R3, #:lower16:aUtilC ; "util.c"
MOVW            R2, #:lower16:aFailedToCalloc_5 ; "Failed to calloc pool->nonce1bin in %s "...
STR             R1, [SP,#0x211C+var_211C+4]
MOVT            R3, #:upper16:aUtilC ; "util.c"
STR             R7, [SP,#0x211C+var_211C]
ADD             R0, SP, #0x211C+s ; s
MOVT            R2, #:upper16:aFailedToCalloc_5 ; "Failed to calloc pool->nonce1bin in %s "...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_29414

loc_2965C
BL              __errno_location
MOVW            R3, #0x8F2
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R8, [SP,#0x211C+var_211C]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R7, [SP,#0x211C+var_211C+4]
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x211C+var_2114]
LDR             R3, [R0]
ADD             R0, SP, #0x211C+s ; s
BL              snprintf
ADD             R1, SP, #0x211C+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_293C4

loc_296A4
MOVW            R1, #0x8F2
MOV             R0, R7
BL              sub_22864
; End of function sub_28AE0

B               loc_293A8
off_296B4 DCD aParseExtranonc ; "parse_extranonce"
off_296B8 DCD aParseDiff ; "parse_diff"



; int __fastcall sub_296BC(_DWORD *, int)
sub_296BC
SUBS            R3, R1, #0
BEQ             loc_296C8
B               sub_28AE0

loc_296C8
MOV             R0, R3
BX              LR
; End of function sub_296BC




; int __fastcall sub_296D0(_DWORD *)
sub_296D0

var_2908= -0x2908
var_28FC= -0x28FC
s= -0x2800
var_2008= -0x2008

MOVW            R3, #:lower16:dword_7448C
PUSH            {R4-R8,LR}
MOVT            R3, #:upper16:dword_7448C
SUB             SP, SP, #0x2900
SUB             SP, SP, #8
MOV             R4, R0
LDR             R2, [R3]
MOVW            R1, #:lower16:aIdDMethodMinin_2 ; "{\"id\": %d, \"method\": \"mining.extra"...
ADD             R0, SP, #0x2908+var_2008
MOVT            R1, #:upper16:aIdDMethodMinin_2 ; "{\"id\": %d, \"method\": \"mining.extra"...
ADD             R0, R0, #8 ; s
ADD             R12, R2, #1
STR             R12, [R3]
BL              sprintf
ADD             R0, SP, #0x2908+var_2008
ADD             R0, R0, #8 ; s
BL              strlen
ADD             R1, SP, #0x2908+var_2008
MOV             R2, R0
ADD             R1, R1, #8
MOV             R0, R4
BL              sub_244A4
SUBS            R7, R0, #0
BNE             loc_2975C
B               loc_29808

loc_29734
BL              sub_24858
SUBS            R5, R0, #0
MOV             R0, R4
MOV             R1, R5
BEQ             loc_29818
BL              sub_28AE0
SUBS            R1, R0, #0
MOV             R0, R5  ; ptr
BEQ             loc_2982C
BL              free

loc_2975C
MOV             R1, #2
LDR             R0, [R4,#0x24C]
BL              sub_22428
SUBS            R6, R0, #0
MOV             R0, R4
BNE             loc_29734
MOV             R3, #byte_68BD5
LDRB            R4, [R3]
CMP             R4, #0
BEQ             loc_29808
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_297C8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_297C8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
MOVLE           R7, R4
BLE             loc_29808

loc_297C8
MOVW            R12, #:lower16:aTimedOutWaitin_1 ; "Timed out waiting for response extranon"...
ADD             LR, SP, #0x2908+s
MOVT            R12, #:upper16:aTimedOutWaitin_1 ; "Timed out waiting for response extranon"...
MOV             R7, R4
LDM             R12!, {R0-R3} ; "Timed out waiting for response extranon"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "g for response extranonce.subscribe"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "xtranonce.subscribe"
LDR             R12, [R12] ; "ibe"
STM             LR!, {R0-R3}
ADD             R1, SP, #0x2908+s
MOV             R2, #0
MOV             R0, #7
STR             R12, [LR]
BL              sub_20F58

loc_29808
MOV             R0, R7
ADD             SP, SP, #0x2900
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_29818
MOV             R7, R5
MOV             R0, R7
ADD             SP, SP, #0x2900
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_2982C
ADD             R2, SP, #0x2908+var_28FC
BL              sub_47258
MOV             R8, R0
MOV             R0, R5  ; ptr
BL              free
MOVW            R1, #:lower16:aResult ; "result"
MOV             R0, R8
MOVT            R1, #:upper16:aResult ; "result"
BL              sub_480FC
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R7, R0
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R8
BL              sub_480FC
CMP             R7, #0
MOV             R5, R0
BEQ             loc_2992C
LDR             R3, [R7]
CMP             R3, #6
BEQ             loc_2992C
CMP             R0, #0
BEQ             loc_29A18
LDR             R3, [R0]
CMP             R3, #7
BEQ             loc_29A18

loc_29890
MOV             R1, #1
MOV             R0, R5
BL              sub_224BC
SUBS            R7, R0, #0
BEQ             loc_29AB4

loc_298A4
MOVW            R1, #:lower16:aMethodSubscrib ; "Method 'subscribe' not found for servic"...
MOV             R0, R7  ; s1
MOVT            R1, #:upper16:aMethodSubscrib ; "Method 'subscribe' not found for servic"...
BL              strcmp
CMP             R0, #0
BEQ             loc_298E8
MOVW            R1, #:lower16:aUnrecognizedRe ; "Unrecognized request provided"
MOV             R0, R7  ; s1
MOVT            R1, #:upper16:aUnrecognizedRe ; "Unrecognized request provided"
BL              strcmp
CMP             R0, #0
BEQ             loc_298E8

loc_298D4
MOV             R0, R5
MOV             R1, #3
BL              sub_45074
MOV             R5, R0
B               loc_29960

loc_298E8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29A84
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29A84
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_29A84

loc_29924
MOV             R7, R6
B               loc_299D4

loc_2992C
CMP             R5, #0
BNE             loc_29890
MOV             R0, #0x11 ; size
BL              malloc
SUBS            R5, R0, #0
BEQ             loc_29960
MOVW            R12, #:lower16:aUnknownReason ; "(unknown reason)"
MOV             LR, R5
MOVT            R12, #:upper16:aUnknownReason ; "(unknown reason)"
LDM             R12!, {R0-R3} ; "(unknown reason)"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
STRB            R12, [LR]

loc_29960
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2999C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2999C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_299C8

loc_2999C
MOVW            R2, #:lower16:aPoolDJsonExtra ; "Pool %d JSON extranonce subscribe faile"...
LDR             R3, [R4]
MOVT            R2, #:upper16:aPoolDJsonExtra ; "Pool %d JSON extranonce subscribe faile"...
MOV             R1, #0x800 ; maxlen
STR             R5, [SP,#0x2908+var_2908]
ADD             R0, SP, #0x2908+s ; s
BL              snprintf
ADD             R1, SP, #0x2908+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_299C8               ; ptr
MOV             R0, R5
MOV             R7, #0
BL              free

loc_299D4
CMP             R8, #0
BEQ             loc_29808
LDR             R3, [R8,#4]
CMN             R3, #1
BEQ             loc_29808
ADD             R3, R8, #4
DMB             ISH

loc_299F0
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_299F0
CMP             R2, #0
BNE             loc_29808
MOV             R0, R8
BL              sub_48A34
B               loc_29808

loc_29A18
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29A54
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29A54
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_29924

loc_29A54
MOVW            R2, #:lower16:aStratumExtrano ; "Stratum extranonce subscribe for pool %"...
LDR             R3, [R4]
ADD             R0, SP, #0x2908+s ; s
MOVT            R2, #:upper16:aStratumExtrano ; "Stratum extranonce subscribe for pool %"...
MOV             R1, #0x800 ; maxlen
MOV             R7, R6
BL              snprintf
ADD             R1, SP, #0x2908+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
B               loc_299D4

loc_29A84
MOVW            R2, #:lower16:aCannotSubscrib ; "Cannot subscribe to mining.extranonce f"...
LDR             R3, [R4]
ADD             R0, SP, #0x2908+s ; s
MOVT            R2, #:upper16:aCannotSubscrib ; "Cannot subscribe to mining.extranonce f"...
MOV             R1, #0x800 ; maxlen
MOV             R7, R6
BL              snprintf
ADD             R1, SP, #0x2908+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
B               loc_299D4

loc_29AB4
MOV             R0, R5
BL              sub_48630
SUBS            R7, R0, #0
BEQ             loc_298D4
B               loc_298A4
; End of function sub_296D0




; int __fastcall sub_29AC8(_DWORD *)
sub_29AC8

var_290C= -0x290C
var_2900= -0x2900
s= -0x2804
var_200C= -0x200C

PUSH            {R4-R9,LR}
MOVW            R7, #:lower16:dword_7448C
LDR             R3, [R0,#0xAC]
MOV             R4, R0
MOVT            R7, #:upper16:dword_7448C
SUB             SP, SP, #0x2900
LDR             R0, [R0,#0xB0]
SUB             SP, SP, #0xC
LDR             R2, [R7]
MOV             R1, #aIdDMethodMinin_3 ; "{\"id\": %d, \"method\": \"mining.autho"...
STR             R0, [SP,#0x290C+var_290C]
ADD             R0, SP, #0x290C+var_200C
ADD             R12, R2, #1
ADD             R0, R0, #8 ; s
STR             R12, [R7]
BL              sprintf
ADD             R0, SP, #0x290C+var_200C
ADD             R0, R0, #8 ; s
BL              strlen
ADD             R1, SP, #0x290C+var_200C
MOV             R2, R0
ADD             R1, R1, #8
MOV             R0, R4
BL              sub_244A4
SUBS            R9, R0, #0
BNE             loc_29B4C
B               loc_29B64

loc_29B38
BL              sub_28AE0
SUBS            R6, R0, #0
MOV             R0, R5  ; ptr
BEQ             loc_29B78
BL              free

loc_29B4C
MOV             R0, R4
BL              sub_24858
SUBS            R5, R0, #0
MOV             R0, R4
MOV             R1, R5
BNE             loc_29B38

loc_29B64
MOV             R6, #0

loc_29B68
MOV             R0, R6
ADD             SP, SP, #0x2900
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_29B78
ADD             R2, SP, #0x290C+var_2900
MOV             R1, R6
BL              sub_47258
MOV             R8, R0
MOV             R0, R5  ; ptr
BL              free
MOVW            R1, #:lower16:aResult ; "result"
MOV             R0, R8
MOVT            R1, #:upper16:aResult ; "result"
BL              sub_480FC
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
MOV             R5, R0
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R8
BL              sub_480FC
CMP             R5, #0
BEQ             loc_29C78
LDR             R3, [R5]
CMP             R3, #6
BEQ             loc_29C78
CMP             R0, #0
BEQ             loc_29CE0
LDR             R3, [R0]
CMP             R3, #7
BEQ             loc_29CE0

loc_29BDC
MOV             R1, #3
BL              sub_45074
MOV             R5, R0

loc_29BE8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29CB0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29CB0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_29CB0

loc_29C24               ; ptr
MOV             R0, R5
BL              free
MOV             R0, R4
BL              sub_24340

loc_29C34
CMP             R8, #0
BEQ             loc_29B68
LDR             R3, [R8,#4]
CMN             R3, #1
BEQ             loc_29B68
ADD             R3, R8, #4
DMB             ISH

loc_29C50
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_29C50
CMP             R2, #0
BNE             loc_29B68
MOV             R0, R8
BL              sub_48A34
B               loc_29B68

loc_29C78
CMP             R0, #0
BNE             loc_29BDC
MOV             R0, #0x11 ; size
BL              malloc
SUBS            R5, R0, #0
BEQ             loc_29BE8
MOVW            R12, #:lower16:aUnknownReason ; "(unknown reason)"
MOV             LR, R5
MOVT            R12, #:upper16:aUnknownReason ; "(unknown reason)"
LDM             R12!, {R0-R3} ; "(unknown reason)"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
STRB            R12, [LR]
B               loc_29BE8

loc_29CB0
MOVW            R2, #:lower16:aPoolDJsonStrat ; "pool %d JSON stratum auth failed: %s"
LDR             R3, [R4]
ADD             R0, SP, #0x290C+s ; s
STR             R5, [SP,#0x290C+var_290C]
MOVT            R2, #:upper16:aPoolDJsonStrat ; "pool %d JSON stratum auth failed: %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x290C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
B               loc_29C24

loc_29CE0
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_29D1C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29D1C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_29D44

loc_29D1C
MOVW            R2, #:lower16:aStratumAuthori ; "Stratum authorisation success for pool "...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aStratumAuthori ; "Stratum authorisation success for pool "...
ADD             R0, SP, #0x290C+s ; s
LDR             R3, [R4]
BL              snprintf
ADD             R1, SP, #0x290C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_29D44
MOVW            R3, #:lower16:dword_73480
MOVW            R2, #:lower16:byte_68BD6
MOVT            R3, #:upper16:dword_73480
MOV             R1, #1
LDR             R3, [R3]
MOVT            R2, #:upper16:byte_68BD6
STRB            R1, [R2]
STRB            R1, [R4,#0x63]
CMP             R3, #0
BNE             loc_29E34

loc_29D6C
MOV             R3, #byte_68820
LDRB            R6, [R3]
CMP             R6, #0
MOVEQ           R6, R9
BEQ             loc_29C34
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_29DB8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_29DB8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_29DDC

loc_29DB8
MOVW            R3, #:lower16:aLowPowerMode ; "LOW POWER MODE!"
ADD             R12, SP, #0x290C+s
MOVT            R3, #:upper16:aLowPowerMode ; "LOW POWER MODE!"
LDM             R3, {R0-R3} ; "LOW POWER MODE!"
STM             R12, {R0-R3}
MOV             R1, R12
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_29DDC
LDR             R2, [R7]
MOV             R3, #3
MOVW            R1, #:lower16:aIdDMethodMinin_4 ; "{\"id\":%d, \"method\":\"mining.configu"...
STR             R3, [SP,#0x290C+var_290C]
MOVT            R1, #:upper16:aIdDMethodMinin_4 ; "{\"id\":%d, \"method\":\"mining.configu"...
MOV             R3, #0xE00000
ADD             R0, R2, #1
STR             R0, [R7]
ADD             R0, SP, #0x290C+var_200C
ADD             R0, R0, #8 ; s
BL              sprintf
ADD             R0, SP, #0x290C+var_200C
ADD             R0, R0, #8 ; s
BL              strlen
ADD             R1, SP, #0x290C+var_200C
MOV             R2, R0
ADD             R1, R1, #8
MOV             R0, R4
BL              sub_244A4
MOV             R3, #8
STR             R3, [R4,#0x288]
B               loc_29C34

loc_29E34
LDR             R2, [R7]
ADD             R0, SP, #0x290C+var_200C
MOVW            R1, #:lower16:aIdDMethodMinin_5 ; "{\"id\": %d, \"method\": \"mining.sugge"...
ADD             R0, R0, #8 ; s
MOVT            R1, #:upper16:aIdDMethodMinin_5 ; "{\"id\": %d, \"method\": \"mining.sugge"...
ADD             R12, R2, #1
STR             R12, [R7]
BL              sprintf
ADD             R0, SP, #0x290C+var_200C
ADD             R0, R0, #8 ; s
BL              strlen
ADD             R1, SP, #0x290C+var_200C
MOV             R2, R0
ADD             R1, R1, #8
MOV             R0, R4
BL              sub_244A4
B               loc_29D6C
; End of function sub_29AC8




; int __fastcall sub_29E78(int *, _DWORD *, _DWORD *)
sub_29E78
LDR             R12, [R1]
LDR             R3, [R2]
CMP             R12, R3
BGT             loc_29EEC
PUSH            {R4,LR}
BEQ             loc_29ED4

loc_29E90
SUB             R12, R3, R12
STR             R12, [R0]
LDR             R3, [R2,#4]
LDR             R2, [R1,#4]
SUB             R3, R3, R2
CMP             R3, #0
STR             R3, [R0,#4]
BLT             loc_29EB8
MOV             R0, #0
POP             {R4,PC}

loc_29EB8
ADD             R3, R3, #0xF4000
SUB             R12, R12, #1
ADD             R3, R3, #0x240
STR             R12, [R0]
STR             R3, [R0,#4]
MOV             R0, #0
POP             {R4,PC}

loc_29ED4
LDR             R4, [R1,#4]
LDR             LR, [R2,#4]
CMP             R4, LR
BLE             loc_29E90
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_29EEC
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_29E78




; _BYTE *__fastcall sub_29EF4(_BYTE *result, int)
sub_29EF4
CMP             R1, #1
BXEQ            LR
SUB             R12, R0, #1
MOV             R3, #0
ADD             R0, R0, R1
PUSH            {R4,LR}

loc_29F0C
ADD             R3, R3, #1
LDRB            LR, [R12,#1]!
MVN             R2, R3
LDRB            R4, [R0,#-1]!
ADD             R2, R2, R1
CMP             R3, R2
STRB            R4, [R12]
STRB            LR, [R0]
BCC             loc_29F0C
POP             {R4,PC}
; End of function sub_29EF4




; int __fastcall sub_29F34(int result, char)
sub_29F34
SUB             R3, R0, #1
CMP             R3, #0x3F ; switch 64 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_29F3C ; jumptable 00029F3C default case, cases 2,4-6,8-14,16-30,32-62
jpt_29F3C DCD locret_2A07C, loc_2A0AC, def_29F3C, loc_2A0BC ; jump table for switch statement
DCD def_29F3C, def_29F3C, def_29F3C, loc_2A0E0
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, loc_2A044
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, loc_2A110
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, def_29F3C
DCD def_29F3C, def_29F3C, def_29F3C, loc_2A080

loc_2A044               ; jumptable 00029F3C case 15
AND             R1, R1, #0xF0
CMP             R1, #0x80
BEQ             loc_2A1EC
BHI             loc_2A14C
CMP             R1, #0x40 ; '@'
BEQ             loc_2A1E4
BHI             loc_2A198
CMP             R1, #0x20 ; ' '
BEQ             loc_2A144
CMP             R1, #0x30 ; '0'
BEQ             loc_2A1DC
CMP             R1, #0x10
BEQ             loc_2A108

loc_2A078
MOV             R0, #1

locret_2A07C            ; jumptable 00029F3C case 0
BX              LR

loc_2A080               ; jumptable 00029F3C case 63
BIC             R1, R1, #3
SUB             R1, R1, #4
UXTB            R1, R1
CMP             R1, #0xF8
BHI             loc_2A078
MOVW            R3, #:lower16:dword_4C8CC
MOVW            R2, #0x8C8
MOVT            R3, #:upper16:dword_4C8CC
ADD             R1, R3, R1
LDRSB           R0, [R1,R2]
BX              LR

loc_2A0AC               ; jumptable 00029F3C case 1
AND             R1, R1, #0x80
CMP             R1, #0x80
MOVNE           R0, #1
BX              LR

loc_2A0BC               ; jumptable 00029F3C case 3
AND             R1, R1, #0xC0
CMP             R1, #0x80
BEQ             loc_2A144
CMP             R1, #0xC0
BXEQ            LR
CMP             R1, #0x40 ; '@'
MOVEQ           R0, #2
MOVNE           R0, #1
BX              LR

loc_2A0E0               ; jumptable 00029F3C case 7
AND             R1, R1, #0xE0
CMP             R1, #0x80
BEQ             loc_2A1E4
BHI             loc_2A178
CMP             R1, #0x40 ; '@'
BEQ             loc_2A144
CMP             R1, #0x60 ; '`'
BEQ             loc_2A1DC
CMP             R1, #0x20 ; ' '
BNE             loc_2A078

loc_2A108
MOV             R0, #2
BX              LR

loc_2A110               ; jumptable 00029F3C case 31
BIC             R1, R1, #7
SUB             R1, R1, #8
UXTB            R1, R1
CMP             R1, #0xF0
BHI             loc_2A078
MOVW            R3, #:lower16:dword_4C8CC
MOVW            R2, #0x7D4
MOVT            R3, #:upper16:dword_4C8CC
ADD             R1, R3, R1
LDRSB           R0, [R1,R2]
BX              LR

def_29F3C               ; jumptable 00029F3C default case, cases 2,4-6,8-14,16-30,32-62
MOV             R0, #0
BX              LR

loc_2A144
MOV             R0, #3
BX              LR

loc_2A14C
CMP             R1, #0xC0
BEQ             loc_2A1FC
BLS             loc_2A1B4
CMP             R1, #0xE0
BEQ             loc_2A1F4
CMP             R1, #0xF0
BXEQ            LR
CMP             R1, #0xD0
BNE             loc_2A078
MOV             R0, #0xE
BX              LR

loc_2A178
CMP             R1, #0xC0
BEQ             loc_2A1D4
CMP             R1, #0xE0
BXEQ            LR
CMP             R1, #0xA0
BNE             loc_2A078

loc_2A190
MOV             R0, #6
BX              LR

loc_2A198
CMP             R1, #0x60 ; '`'
BEQ             loc_2A1D4
CMP             R1, #0x70 ; 'p'
BEQ             loc_2A204
CMP             R1, #0x50 ; 'P'
BNE             loc_2A078
B               loc_2A190

loc_2A1B4
CMP             R1, #0xA0
BEQ             loc_2A214
CMP             R1, #0xB0
BEQ             loc_2A20C
CMP             R1, #0x90
BNE             loc_2A078
MOV             R0, #0xA
BX              LR

loc_2A1D4
MOV             R0, #7
BX              LR

loc_2A1DC
MOV             R0, #4
BX              LR

loc_2A1E4
MOV             R0, #5
BX              LR

loc_2A1EC
MOV             R0, #9
BX              LR

loc_2A1F4
MOV             R0, #0xF
BX              LR

loc_2A1FC
MOV             R0, #0xD
BX              LR

loc_2A204
MOV             R0, #8
BX              LR

loc_2A20C
MOV             R0, #0xC
BX              LR

loc_2A214
MOV             R0, #0xB
BX              LR
; End of function sub_29F34




; void __fastcall sub_2A21C(int, char *, int)
sub_2A21C

var_C9C= -0xC9C
var_C98= -0xC98
var_C94= -0xC94
var_C90= -0xC90
var_C8C= -0xC8C
var_C88= -0xC88
var_C84= -0xC84
var_C80= -0xC80
ptr= -0xC7C
var_C78= -0xC78
var_C74= -0xC74
var_C70= -0xC70
var_C6C= -0xC6C
var_C65= -0xC65
var_C64= -0xC64
var_C55= -0xC55
var_C44= -0xC44
var_C38= -0xC38
var_C34= -0xC34
var_C25= -0xC25
var_C24= -0xC24
var_C15= -0xC15
s= -0xC04
var_80C= -0x80C

PUSH            {R4-R11,LR}
SUB             SP, SP, #0xC90
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R10, R1
ADD             R0, SP, #0xC9C+s ; s
STR             R2, [SP,#0xC9C+var_C78]
MOV             R1, #0  ; c
MOV             R2, #0x400 ; n
MOV             R8, R4
BL              memset
MOV             LR, R4
ADD             R12, SP, #0xC9C+var_C64
LDR             R0, [LR,#0x80]!
MOV             R6, #0
ADD             R5, SP, #0xC9C+var_C34
STR             R6, [SP,#0xC9C+var_C38]
ADD             R7, SP, #0xC9C+var_C44
STR             R6, [R5],#-4
LDR             R1, [LR,#4]
LDR             R2, [LR,#8]
LDR             R3, [LR,#0xC]
STR             R6, [R5,#8]
STR             R6, [R5,#0xC]
STM             R12!, {R0-R3}
LDR             R0, [LR,#0x10]
LDR             R1, [LR,#0x14]
LDR             R2, [LR,#0x18]
LDR             R3, [LR,#0x1C]
MOV             LR, R7
STR             R6, [R5,#0x10]
MOV             R5, R4
ADD             R6, SP, #0xC9C+var_C24
STM             R12!, {R0-R3}
ADD             R12, SP, #0xC9C+var_C65
LDR             R0, [R8,#0x40]!
LDR             R1, [R8,#4]
LDR             R2, [R8,#8]
STM             R7!, {R0-R2}
LDR             R0, [R5,#0xC0]!
LDR             R1, [R5,#4]
LDR             R2, [R5,#8]
LDR             R3, [R5,#0xC]
STM             R6!, {R0-R3}
LDR             R0, [R5,#0x10]
LDR             R1, [R5,#0x14]
LDR             R2, [R5,#0x18]
LDR             R3, [R5,#0x1C]
ADD             R5, SP, #0xC9C+var_C55
STM             R6!, {R0-R3}

loc_2A2E4
LDRB            R3, [R12,#1]!
LDRB            R2, [LR,#-1]!
CMP             R12, R5
STRB            R2, [R12]
STRB            R3, [LR]
BNE             loc_2A2E4
ADD             R2, SP, #0xC9C+var_C44
ADD             R3, R2, #0xC
ADD             R12, R2, #6

loc_2A308
LDRB            R0, [R3,#-1]!
LDRB            R1, [R2]
CMP             R12, R3
STRB            R0, [R2],#1
STRB            R1, [R3]
BNE             loc_2A308
ADD             R3, SP, #0xC9C+var_C25
ADD             R2, SP, #0xC9C+s
ADD             R12, SP, #0xC9C+var_C15

loc_2A32C
LDRB            R1, [R3,#1]!
LDRB            R0, [R2,#-1]!
CMP             R3, R12
STRB            R0, [R3]
STRB            R1, [R2]
BNE             loc_2A32C
MOV             R1, #0x80
MOV             R0, R4
BL              sub_22C24
MOV             R1, #0x20 ; ' '
STR             R0, [SP,#0xC9C+ptr]
ADD             R0, SP, #0xC9C+var_C64
MOVW            R5, #:lower16:aO ; "o"
BL              sub_22C24
MOV             R1, #0xC
MOV             R8, R0
ADD             R0, SP, #0xC9C+var_C44
MOVT            R5, #:upper16:aO ; "o"
BL              sub_22C24
MOV             R1, #4
MOV             R7, R0
MOV             R0, R10
BL              sub_22C24
MOV             R1, #5
STR             R0, [SP,#0xC9C+var_C74]
MOV             R0, R10
BL              sub_22C24
MOV             R1, #0x20 ; ' '
MOV             R9, R0
ADD             R0, SP, #0xC9C+var_C24
BL              sub_22C24
MOV             R6, R0
MOV             R0, R4
BL              sub_2CDF0
LDR             LR, [SP,#0xC9C+var_C78]
MOV             R2, #(aAcceptedSDBenc+0x28) ; "x"
MOV             R12, R1
STR             R1, [SP,#0xC9C+var_C6C]
MOVW            R1, #:lower16:aS08xMidstateSD ; "%s %08x midstate %s data %s nonce %s ha"...
CMP             LR, #0
LDR             R3, [R4,#0x154]
MOVEQ           R5, R2
STR             R0, [SP,#0xC9C+var_C70]
STR             R0, [SP,#0xC9C+var_C8C]
MOV             R2, R5
STR             R12, [SP,#0xC9C+var_C88]
MOVT            R1, #:upper16:aS08xMidstateSD ; "%s %08x midstate %s data %s nonce %s ha"...
STR             R6, [SP,#0xC9C+var_C90]
ADD             R0, SP, #0xC9C+s ; s
STR             R9, [SP,#0xC9C+var_C94]
STR             R7, [SP,#0xC9C+var_C98]
STR             R8, [SP,#0xC9C+var_C9C]
BL              sprintf
MOVW            R3, #:lower16:dword_68DE0
MOVW            R1, #:lower16:aScreen ; "screen"
MOVT            R3, #:upper16:dword_68DE0
MOVT            R1, #:upper16:aScreen ; "screen"
LDR             R0, [R3] ; s1
BL              strcmp
CMP             R0, #0
MOV             R3, #byte_74500
BNE             loc_2A4E8
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2A44C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2A7A0

loc_2A44C
ADD             R0, SP, #0xC9C+var_80C
ADD             R2, SP, #0xC9C+s ; format
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #8 ; s
BL              snprintf
ADD             R1, SP, #0xC9C+var_80C
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #3
BL              sub_20F58

loc_2A474
LDR             R3, [SP,#0xC9C+ptr]
CMP             R3, #0
BEQ             loc_2A488
MOV             R0, R3  ; ptr
BL              free

loc_2A488
CMP             R8, #0
BEQ             loc_2A498
MOV             R0, R8  ; ptr
BL              free

loc_2A498
CMP             R7, #0
BEQ             loc_2A4A8
MOV             R0, R7  ; ptr
BL              free

loc_2A4A8
LDR             R3, [SP,#0xC9C+var_C74]
CMP             R3, #0
BEQ             loc_2A4BC
MOV             R0, R3  ; ptr
BL              free

loc_2A4BC
CMP             R9, #0
BEQ             loc_2A4CC
MOV             R0, R9  ; ptr
BL              free

loc_2A4CC
CMP             R6, #0
BEQ             loc_2A4DC
MOV             R0, R6  ; ptr
BL              free

loc_2A4DC
ADD             SP, SP, #0xC90
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2A4E8
STR             R3, [SP,#0x34]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2A50C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2A7B8

loc_2A50C
ADD             R0, SP, #0xC9C+var_80C
ADD             R2, SP, #0xC9C+s ; format
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #8 ; s
BL              snprintf
ADD             R1, SP, #0xC9C+var_80C
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #3
BL              sub_20F58

loc_2A534
MOV             R11, #dword_6A974
LDR             R3, [R11]
CMP             R3, #0
BEQ             loc_2A474
LDR             R12, [SP,#0xC9C+ptr]
MOVW            R1, #:lower16:aS08xWorkSMidst ; "%s %08x work %s midstate %s data %s non"...
LDR             R2, [SP,#0xC9C+var_C70]
MOVT            R1, #:upper16:aS08xWorkSMidst ; "%s %08x work %s midstate %s data %s non"...
LDR             R0, [SP,#0xC9C+var_C6C]
LDR             R3, [R4,#0x154]
STR             R12, [SP,#0xC9C+var_C9C]
STR             R2, [SP,#0xC9C+var_C84]
MOV             R2, R5
STR             R0, [SP,#0xC9C+var_C80]
ADD             R0, SP, #0xC9C+s ; s
STR             R6, [SP,#0xC9C+var_C8C]
STR             R9, [SP,#0xC9C+var_C90]
STR             R7, [SP,#0xC9C+var_C94]
STR             R8, [SP,#0xC9C+var_C98]
BL              sprintf
ADD             R0, SP, #0xC9C+s ; s
BL              strlen
LDR             R3, [R11] ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
ADD             R0, SP, #0xC9C+s ; ptr
BL              fwrite
MOV             R2, #1  ; n
MOVW            R0, #:lower16:word_4C858
LDR             R3, [R11] ; s
MOV             R1, R2  ; size
MOVT            R0, #:upper16:word_4C858 ; ptr
BL              fwrite
LDR             R0, [R11] ; stream
BL              fflush
LDR             R3, [SP,#0xC9C+var_C78]
CMP             R3, #0
BEQ             loc_2A474
MOV             R5, #dword_6A970
LDR             R4, [R5]
CMP             R4, #1
BEQ             loc_2A7D0
SUB             R4, R4, #0x20 ; ' '
BICS            R3, R4, #0x20 ; ' '
BNE             loc_2A668
LDR             R3, [SP,#0xC9C+var_C74]
MOVW            R1, #:lower16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
MOV             R2, R8
MOVT            R1, #:upper16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
STR             R6, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+s ; s
STR             R3, [SP,#0xC9C+var_C9C]
MOV             R3, R7
BL              sprintf
MOVW            R11, #:lower16:dword_6A978
LDRB            R1, [R10]
LDR             R0, [R5]
MOVT            R11, #:upper16:dword_6A978
BL              sub_29F34
MOV             R4, R0
ADD             R0, SP, #0xC9C+s ; s
BL              strlen
LDR             R3, [R11,R4,LSL#2] ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
ADD             R0, SP, #0xC9C+s ; ptr
BL              fwrite
MOV             R2, #1  ; n
MOVW            R0, #:lower16:word_4C858
LDR             R3, [R11,R4,LSL#2] ; s
MOV             R1, R2  ; size
MOVT            R0, #:upper16:word_4C858 ; ptr
BL              fwrite
LDR             R0, [R11,R4,LSL#2] ; stream
BL              fflush

loc_2A668
MOV             R3, #byte_6AA7C
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2A474
LDR             R2, [SP,#0xC9C+var_C70]
MOV             R4, #0
LDR             R3, [SP,#0xC9C+var_C6C]
B               loc_2A698

loc_2A68C
ADD             R4, R4, #1
CMP             R4, #0x40 ; '@'
BEQ             loc_2A6A8

loc_2A698
MOVS            R3, R3,LSR#1
MOV             R2, R2,RRX
ORRS            R1, R2, R3
BNE             loc_2A68C

loc_2A6A8
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2A734
LDR             R3, [SP,#0x34]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2A6F4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2A6F4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2A734

loc_2A6F4
LDR             R3, [SP,#0xC9C+var_C70]
MOVW            R2, #:lower16:aWorkDiffLldDif ; "work diff %lld diffnum %d"
ADD             R0, SP, #0xC9C+var_80C
MOVT            R2, #:upper16:aWorkDiffLldDif ; "work diff %lld diffnum %d"
MOV             R1, #0x800 ; maxlen
STR             R4, [SP,#0xC9C+var_C94]
STR             R3, [SP,#0xC9C+var_C9C]
ADD             R0, R0, #8 ; s
LDR             R3, [SP,#0xC9C+var_C6C]
STR             R3, [SP,#0xC9C+var_C98]
BL              snprintf
ADD             R1, SP, #0xC9C+var_80C
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #7
BL              sub_20F58

loc_2A734
LDR             R3, [SP,#0xC9C+var_C74]
MOVW            R1, #:lower16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
MOV             R2, R8
MOVT            R1, #:upper16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
STR             R6, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+s ; s
STR             R3, [SP,#0xC9C+var_C9C]
MOVW            R5, #:lower16:unk_6AA80
MOV             R3, R7
MOVT            R5, #:upper16:unk_6AA80
BL              sprintf
ADD             R0, SP, #0xC9C+s ; s
BL              strlen
LDR             R3, [R5,R4,LSL#2] ; s
MOV             R1, R0  ; size
MOV             R2, #1  ; n
ADD             R0, SP, #0xC9C+s ; ptr
BL              fwrite
MOV             R2, #1  ; n
MOVW            R0, #:lower16:word_4C858
LDR             R3, [R5,R4,LSL#2] ; s
MOV             R1, R2  ; size
MOVT            R0, #:upper16:word_4C858 ; ptr
BL              fwrite
LDR             R0, [R5,R4,LSL#2] ; stream
BL              fflush
B               loc_2A474

loc_2A7A0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2A474
B               loc_2A44C

loc_2A7B8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2A534
B               loc_2A50C

loc_2A7D0
LDR             R3, [SP,#0xC9C+var_C74]
MOVW            R1, #:lower16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
MOV             R2, R8
MOVT            R1, #:upper16:aMidstateSDataS ; "midstate %s data %s nonce %s hash %s"
STR             R6, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+s ; s
STR             R3, [SP,#0xC9C+var_C9C]
MOVW            R5, #:lower16:dword_6A978
MOV             R3, R7
MOVT            R5, #:upper16:dword_6A978
BL              sprintf
ADD             R0, SP, #0xC9C+s ; s
BL              strlen
LDR             R3, [R5] ; s
MOV             R1, R0  ; size
MOV             R2, R4  ; n
ADD             R0, SP, #0xC9C+s ; ptr
BL              fwrite
MOVW            R0, #:lower16:word_4C858
LDR             R3, [R5] ; s
MOV             R2, R4  ; n
MOV             R1, R4  ; size
MOVT            R0, #:upper16:word_4C858 ; ptr
BL              fwrite
LDR             R0, [R5] ; stream
BL              fflush
B               loc_2A668
; End of function sub_2A21C




; void __fastcall sub_2A83C(int, char *, int)
sub_2A83C
MOV             R3, #dword_68DE0
LDR             R3, [R3]
CMP             R3, #0
BXEQ            LR
B               sub_2A21C
; End of function sub_2A83C




; void __fastcall sub_2A854(int, int, int)
sub_2A854

var_10= -0x10
var_C= -0xC
var_8= -8

MOV             R3, #dword_68DE0
LDR             R3, [R3]
CMP             R3, #0
BXEQ            LR
PUSH            {LR}
SUB             SP, SP, #0xC
MOV             R3, R1
ADD             R1, SP, #0x10+var_8
MOV             R12, #0
STR             R3, [R1,#-8]!
STRB            R12, [SP,#0x10+var_C]
BL              sub_2A21C
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2A854

CMP             R1, #0
BEQ             loc_2A8E4
SUB             R1, R1, #1
PUSH            {LR}
UXTH            R1, R1
MOV             R3, #0xFF
MOVW            LR, #:lower16:dword_4C8CC
ADD             R1, R0, R1
SUB             R2, R0, #1
MOV             R12, R3
MOVT            LR, #:upper16:dword_4C8CC

loc_2A8BC
LDRB            R0, [R2,#1]!
EOR             R3, R3, R0
CMP             R1, R2
ADD             R0, LR, R3
LDRB            R3, [R0,#0x9C4]
EOR             R3, R3, R12
LDRB            R12, [R0,#0xAC4]
BNE             loc_2A8BC
ORR             R0, R3, R12,LSL#8
POP             {PC}

loc_2A8E4
MOVW            R0, #0xFFFF
BX              LR
CMP             R1, #0
BEQ             loc_2A9AC
PUSH            {R4-R10,LR}
MOV             R9, #1
MOV             R4, #0
MOV             R6, R9
MOV             R2, R4
MOV             R8, R9
MOV             R5, R9
MOV             R7, R9
MOV             LR, #0x80
B               loc_2A92C

loc_2A91C
MOV             R6, R8
MOV             R5, R7
MOV             R8, R12
MOV             R7, R3

loc_2A92C
LDRB            R3, [R0]
ADD             R2, R2, #1
UXTB            R2, R2
ADD             R4, R4, #1
UXTB            R10, R4
AND             R3, R3, LR
MOV             LR, LR,LSR#1
CMP             R3, #0
MOVEQ           R3, R9
EORNE           R3, R9, #1
UXTB            R3, R3
CMP             R2, #8
ADDEQ           R0, R0, #1
MOVEQ           R2, #0
MOVEQ           LR, #0x80
CMP             R10, R1
EOR             R12, R3, R5
UXTB            R12, R12
MOV             R9, R6
BCC             loc_2A91C
CMP             R6, #0
MOVNE           R0, #0x10
MOVEQ           R0, #0
CMP             R8, #0
ORRNE           R0, R0, #8
CMP             R3, R5
ORRNE           R0, R0, #4
CMP             R7, #0
ORRNE           R0, R0, #2
CMP             R3, #0
ORRNE           R0, R0, #1
POP             {R4-R10,PC}

loc_2A9AC
MOV             R3, #1
MOV             R0, #0x1E
CMP             R3, #0
ORRNE           R0, R0, #1
BX              LR



; int __fastcall sub_2A9C4(int result, unsigned int *, unsigned int)
sub_2A9C4
MOVS            R2, R2,LSR#2
BXEQ            LR
ADD             R2, R1, R2,LSL#2
SUB             R0, R0, #4

loc_2A9D4
LDR             R3, [R1],#4
CMP             R1, R2
REV             R3, R3
STR             R3, [R0,#4]!
BNE             loc_2A9D4
BX              LR
; End of function sub_2A9C4

ALIGN 0x10



; int __fastcall sub_2A9F0(_DWORD *)
sub_2A9F0
MOV             R3, #4
STR             R3, [R0]
MOV             R0, #0
BX              LR
; End of function sub_2A9F0




; int __fastcall sub_2AA00(_DWORD *)
sub_2AA00
MOV             R3, #3
STR             R3, [R0]
MOV             R0, #0
BX              LR
; End of function sub_2AA00




; int __fastcall sub_2AA10(_DWORD *)
sub_2AA10
MOV             R3, #1
STR             R3, [R0]
MOV             R0, #0
BX              LR
; End of function sub_2AA10




; int __fastcall sub_2AA20(_BYTE *)
sub_2AA20
MOVW            R3, #:lower16:byte_68BD4
MOV             R2, #1
MOVT            R3, #:upper16:byte_68BD4
STRB            R2, [R0]
STRB            R2, [R3]
MOV             R0, #0
BX              LR
; End of function sub_2AA20




; int sub_2AA3C()
sub_2AA3C
MOV             R0, #0
BX              LR
; End of function sub_2AA3C

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_3]
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_1]



; int sub_2AA4C()
sub_2AA4C
MOV             R0, #1
BX              LR
; End of function sub_2AA4C




; __int64 sub_2AA54()
sub_2AA54
MOV             R0, #0xFFFFFFFF
MOV             R1, #0
BX              LR
; End of function sub_2AA54




; int sub_2AA60()
sub_2AA60
MOV             R0, #1
BX              LR
; End of function sub_2AA60

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_4]



; int sub_2AA6C()
sub_2AA6C
MOV             R0, #0
BX              LR
; End of function sub_2AA6C




; int __fastcall sub_2AA74(int result)
sub_2AA74
MOV             R2, #0
MOV             R3, #0
MOV             R1, #0
STRD            R2, R3, [R0,#0xD0]
STR             R1, [R0,#0x2C]
STRD            R2, R3, [R0,#0xC8]
BX              LR
; End of function sub_2AA74



; Attributes: noreturn

; void __noreturn sub_2AA90(const char *, ...)
sub_2AA90

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
MOVW            R4, #:lower16:byte_68BD8
PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R12, SP, #0xC+varg_r1
MOVT            R4, #:upper16:byte_68BD8
MOV             R3, R12 ; arg
MOV             R1, #0x200 ; maxlen
LDR             R2, [SP,#0xC+varg_r0] ; format
MOV             R0, R4  ; s
STR             R12, [SP,#0xC+var_8]
BL              vsnprintf
MOV             R0, #3
MOV             R1, R4
MOV             R2, #1
BL              sub_20F58
MOV             R0, #1  ; status
BL              exit
; End of function sub_2AA90




; int __fastcall sub_2AAD8(int)
sub_2AAD8
PUSH            {R4,LR}
LDR             R1, =dword_68DD8
BL              sub_4014C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2AAD8

off_2AAEC DCD dword_68DD8



; int __fastcall sub_2AAF0(int)
sub_2AAF0
PUSH            {R4,LR}
LDR             R1, =dword_68DDC
BL              sub_4014C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2AAF0

off_2AB04 DCD dword_68DDC



; int __fastcall sub_2AB08(int)
sub_2AB08
PUSH            {R4,LR}
LDR             R1, =dword_68DE0
BL              sub_4014C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2AB08

off_2AB1C DCD dword_68DE0



; int __fastcall sub_2AB20(int)
sub_2AB20
PUSH            {R4,LR}
LDR             R1, =dword_68DE4
BL              sub_4014C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2AB20

off_2AB34 DCD dword_68DE4



; int __fastcall sub_2AB38(int)
sub_2AB38
PUSH            {R4,LR}
LDR             R1, =dword_68DE8
BL              sub_4014C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2AB38

off_2AB4C DCD dword_68DE8



; int __fastcall sub_2AB50(int)
sub_2AB50
MOVW            R1, #:lower16:dword_73478
PUSH            {R4,LR}
MOVT            R1, #:upper16:dword_73478
BL              sub_4014C
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2AB50

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
MOV             R3, #(asc_4D5C4+4) ; ""
ADD             R1, SP, #4
MOV             R2, #0xA
STR             R3, [SP,#4]
MOV             R4, R0
BL              strtol
LDR             R3, [SP,#4]
LDRB            R3, [R3]
CMP             R0, #0
CMPGE           R3, #0
BEQ             loc_2AC70
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
BNE             loc_2ABEC
LDRB            R3, [R4,#1]
CMP             R3, #0
BNE             loc_2ABEC
MOVW            R2, #:lower16:stdout
MOVW            R3, #:lower16:byte_68BD8
MOVT            R2, #:upper16:stdout
MOVT            R3, #:upper16:byte_68BD8
LDR             R2, [R2]
CMP             R2, #0
STR             R2, [R3,#(dword_68DEC - 0x68BD8)]
BEQ             loc_2ACE0

loc_2ABDC
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2ABEC
MOVW            R1, #:lower16:(aQuota+4) ; "a"
MOV             R0, R4
MOVT            R1, #:upper16:(aQuota+4) ; "a"
BL              fopen64
MOVW            R3, #:lower16:byte_68BD8
CMP             R0, #0
MOVT            R3, #:upper16:byte_68BD8
STR             R0, [R3,#(dword_68DEC - 0x68BD8)]
BNE             loc_2ABDC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2AC38
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2AD64

loc_2AC38
MOVW            R2, #:lower16:aFailedToOpenSF ; "Failed to open %s for share log"
MOV             R3, R4
MOVT            R2, #:upper16:aFailedToOpenSF ; "Failed to open %s for share log"

loc_2AC44
MOV             R1, #0x800
ADD             R0, SP, #8
BL              snprintf
ADD             R1, SP, #8
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2AC70
MOVW            R1, #:lower16:(aQuota+4) ; "a"
MOV             R5, R0
MOVT            R1, #:upper16:(aQuota+4) ; "a"
BL              fdopen
MOVW            R3, #:lower16:byte_68BD8
CMP             R0, #0
MOVT            R3, #:upper16:byte_68BD8
STR             R0, [R3,#(dword_68DEC - 0x68BD8)]
BNE             loc_2ABDC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2ACD0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2ACD0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2ABDC

loc_2ACD0
MOVW            R2, #:lower16:aFailedToOpenFd ; "Failed to open fd %u for share log"
MOV             R3, R5
MOVT            R2, #:upper16:aFailedToOpenFd ; "Failed to open fd %u for share log"
B               loc_2AC44

loc_2ACE0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2AD1C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2AD1C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2ABDC

loc_2AD1C
MOVW            R12, #:lower16:aStandardOutput ; "Standard output missing for share log"
ADD             LR, SP, #8
MOVT            R12, #:upper16:aStandardOutput ; "Standard output missing for share log"
LDM             R12!, {R0-R3} ; "Standard output missing for share log"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "missing for share log"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "e log"
STR             R0, [LR],#4
MOV             R0, #3
STRH            R1, [LR]
ADD             R1, SP, #8
BL              sub_20F58
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2AD64
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_2AC38
B               loc_2ABDC



; _BYTE *__fastcall sub_2AD7C(const char *)
sub_2AD7C
PUSH            {R4-R6,LR}
MOV             R4, R0
BL              strlen
MOV             R0, R0,LSL#1
MOVW            R2, #:lower16:aJsonEscape ; "json_escape"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVT            R2, #:upper16:aJsonEscape ; "json_escape"
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1721
ADD             R0, R0, #1
BL              sub_229BC
MOVW            R2, #:lower16:aJsonEscape ; "json_escape"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOV             R5, R0
MOVT            R2, #:upper16:aJsonEscape ; "json_escape"
MOVW            R3, #0x1722
MOV             R0, #8
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
BL              sub_229BC
MOVW            R3, #:lower16:byte_68BD8
STR             R5, [R0]
MOVT            R3, #:upper16:byte_68BD8
LDR             R2, [R3,#(dword_68DF0 - 0x68BD8)]
STR             R0, [R3,#(dword_68DF0 - 0x68BD8)]
STR             R2, [R0,#4]
MOV             R2, R5
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_2AE24
MOV             R0, #0x5C ; '\'

loc_2ADF4
CMP             R3, #0x22 ; '"'
CMPNE           R3, #0x5C ; '\'
ADD             R3, R2, #1
MOV             R1, R3
STRBEQ          R0, [R2],#2
MOVNE           R3, R2
MOVNE           R2, R1
LDRB            R1, [R4],#1
STRB            R1, [R3]
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2ADF4

loc_2AE24
MOV             R3, #0
MOV             R0, R5
STRB            R3, [R2]
POP             {R4-R6,PC}
; End of function sub_2AD7C



; Attributes: noreturn

; void __fastcall __noreturn sub_2AE34(const char *)
sub_2AE34
PUSH            {R4,LR}
MOV             R4, R0
MOVW            R0, #:lower16:aSBuiltWithBitm ; "%s\nBuilt with bitmain_c5 mining suppor"...
LDR             R1, =s
MOVT            R0, #:upper16:aSBuiltWithBitm ; "%s\nBuilt with bitmain_c5 mining suppor"...
BL              printf
MOVW            R3, #:lower16:dword_76868
MOV             R1, R4
MOVT            R3, #:upper16:dword_76868
LDR             R0, [R3]
BL              sub_410E8
MOV             R1, R0
MOV             R0, #(aApiMcastFromSS+0x14) ; format
BL              printf
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
MOV             R0, #0  ; status
BL              exit
; End of function sub_2AE34

off_2AE88 DCD s



; time_t __fastcall sub_2AE8C(int)
sub_2AE8C
MOV             R3, #1
PUSH            {R4,LR}
STRB            R3, [R0,#0x3D]
MOV             R4, R0
ADD             R0, R0, #0x2C ; ','
BL              sub_239A4
LDR             R2, [R4,#0x24]
MOV             R3, #0
MOV             R0, R3  ; timer
STR             R3, [R2,#0x60]
LDR             R4, [R4,#0x24]
BL              time
STR             R0, [R4,#0xF0]
POP             {R4,PC}
; End of function sub_2AE8C




; time_t __fastcall sub_2AEC4(int)
sub_2AEC4
PUSH            {R4-R6,LR}
MOV             R5, #0
MOV             R4, R0
STRB            R5, [R0,#0x3D]
ADD             R0, R0, #0x2C ; ','
BL              sub_239A4
LDR             R3, [R4,#0x24]
MOV             R0, R5  ; timer
STR             R5, [R3,#0x60]
LDR             R4, [R4,#0x24]
BL              time
STR             R0, [R4,#0xF0]
POP             {R4-R6,PC}
; End of function sub_2AEC4




; int __fastcall sub_2AEF8(unsigned __int64, char *s, size_t maxlen, int)
sub_2AEF8

var_20= -0x20
var_18= -0x18
var_10= -0x10
var_4= -4
arg_0=  0x28

PUSH            {R4-R8,R10,R11,LR}
MOV             R12, #0
ADR             R11, dword_2B168
LDRD            R10, R11, [R11]
MOV             R7, R2
MOV             R8, R3
VPUSH           {D8}
SUB             SP, SP, #0x20
CMP             R1, R11
STRH            R12, [SP,#0x20+var_4]
CMPEQ           R0, R10
LDR             R6, [SP,#0x20+arg_0]
BLS             loc_2B010
ADR             R3, dword_2B170
LDRD            R2, R3, [R3]
BLX             sub_4A178
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x45 ; 'E'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BNE             loc_2AFCC

loc_2AF58
ADD             R3, SP, #0x20+var_4
MOVW            R2, #:lower16:a3gS ; "%.3g%s"
VSTR            D8, [SP,#0x20+var_20]
MOV             R1, R8  ; maxlen
MOV             R0, R7  ; s
STR             R3, [SP,#0x20+var_18]
MOVT            R2, #:upper16:a3gS ; "%.3g%s"
BL              snprintf
ADD             SP, SP, #0x20 ; ' '
VPOP            {D8}
POP             {R4-R8,R10,R11,PC}

loc_2AF84
ADR             R3, dword_2B180
LDRD            R2, R3, [R3]
CMP             R1, R3
CMPEQ           R0, R2
BHI             loc_2B100
MOV             R3, #0
MOVW            R2, #0x3E7
CMP             R1, R3
VMOV            S15, R0 ; x
CMPEQ           R0, R2
VCVT.F64.S32    D8, S15
BLS             loc_2B130
VLDR            D7, =1000.0
CMP             R6, #0
MOV             R3, #0x4B ; 'K'
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D8, D7
BEQ             loc_2AF58

loc_2AFCC
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
MOVLE           R1, #3  ; x
BGT             loc_2B0B0

loc_2AFDC
ADD             R12, SP, #0x20+var_4
MOVW            R2, #:lower16:aFS ; "%*.*f%s"
STR             R1, [SP,#0x20+var_20]
ADD             R3, R6, #1
VSTR            D8, [SP,#0x20+var_18]
MOV             R1, R8  ; maxlen
MOV             R0, R7  ; s
STR             R12, [SP,#0x20+var_10]
MOVT            R2, #:upper16:aFS ; "%*.*f%s"
BL              snprintf
ADD             SP, SP, #0x20 ; ' '
VPOP            {D8}
POP             {R4-R8,R10,R11,PC}

loc_2B010
ADR             R3, dword_2B188
LDRD            R2, R3, [R3]
CMP             R1, R3
CMPEQ           R0, R2
BLS             loc_2B054
ADR             R3, dword_2B190
LDRD            R2, R3, [R3]
BLX             sub_4A178
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x50 ; 'P'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BEQ             loc_2AF58
B               loc_2AFCC

loc_2B054
ADR             R3, dword_2B198
LDRD            R2, R3, [R3]
CMP             R1, R3
CMPEQ           R0, R2
BHI             loc_2B0D0
ADR             R3, dword_2B1A0
LDRD            R2, R3, [R3]
CMP             R1, R3
CMPEQ           R0, R2
BLS             loc_2AF84
MOVW            R2, #0x4240
MOV             R3, #0
MOVT            R2, #0xF
BLX             sub_4A178
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x47 ; 'G'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BEQ             loc_2AF58
B               loc_2AFCC

loc_2B0B0
VMOV.F64        D0, D8
BL              log10
BL              floor
VMOV.F64        D7, #3.0
VSUB.F64        D0, D7, D0
VCVT.S32.F64    S15, D0
VMOV            R1, S15
B               loc_2AFDC

loc_2B0D0
ADR             R3, dword_2B1A8
LDRD            R2, R3, [R3]
BLX             sub_4A178
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x54 ; 'T'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BEQ             loc_2AF58
B               loc_2AFCC

loc_2B100
MOV             R3, #0
MOV             R2, #0x3E8
BLX             sub_4A178
VMOV            S13, R0
CMP             R6, #0
VLDR            D7, =1000.0
MOV             R3, #0x4D ; 'M'
VCVT.F64.S32    D6, S13
STRH            R3, [SP,#0x20+var_4]
VDIV.F64        D8, D6, D7
BEQ             loc_2AF58
B               loc_2AFCC

loc_2B130
CMP             R6, #0
BNE             loc_2AFCC
ADD             R12, SP, #0x20+var_4
MOVW            R2, #:lower16:aDS ; "%d%s"
MOV             R3, R0
MOV             R1, R8  ; maxlen
MOV             R0, R7  ; s
STR             R12, [SP,#0x20+var_20]
MOVT            R2, #:upper16:aDS ; "%d%s"
BL              snprintf
ADD             SP, SP, #0x20 ; ' '
VPOP            {D8}
POP             {R4-R8,R10,R11,PC}
; End of function sub_2AEF8

ALIGN 8
dword_2B168 DCD 0xA763FFFF
DCD 0xDE0B6B3
dword_2B170 DCD 0xA4C68000
DCD 0x38D7E
dbl_2B178 DCFD 1000.0
dword_2B180 DCD 0xF423F
DCD 0
dword_2B188 DCD 0xA4C67FFF
DCD 0x38D7E
dword_2B190 DCD 0xD4A51000
DCD 0xE8
dword_2B198 DCD 0xD4A50FFF
DCD 0xE8
dword_2B1A0 DCD 0x3B9AC9FF
DCD 0
dword_2B1A8 DCD 0x3B9ACA00
DCD 0



; int __fastcall sub_2B1B0(int)
sub_2B1B0

var_C= -0xC

VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
PUSH            {R4,R5,LR}
MOV             R5, R0
VPUSH           {D8}
SUB             SP, SP, #0xC
LDR             R4, [R0,#0x104]
BEQ             loc_2B24C
VSTR            D0, [R5,#0x178]
VMOV.F64        D8, D0
BL              round
VMOV            R0, R1, D0
BLX             __fixunsdfdi

loc_2B1E4
VSTR            D8, [R4,#0x1E0]
MOV             R3, #0
LDR             R2, [R5,#0x104]
STR             R3, [SP,#0xC+var_C] ; int
MOV             R3, #8  ; maxlen
ADD             R2, R2, #0x30 ; '0' ; s
BL              sub_2AEF8
VLDR            D7, [R4,#0x1D0]
VCMP.F64        D7, D8
VMRS            APSR_nzcv, FPSCR
BNE             loc_2B2C4
LDR             R3, [R4,#0x1E8]
ADD             R3, R3, #1
STR             R3, [R4,#0x1E8]

loc_2B21C
VLDR            D7, [R4,#0x1D8]
VCMP.F64        D7, D8
VMRS            APSR_nzcv, FPSCR
BEQ             loc_2B2EC

loc_2B22C
VCMPE.F64       D7, D8
VMRS            APSR_nzcv, FPSCR
MOVMI           R3, #1
VSTRMI          D8, [R4,#0x1D8]
STRMI           R3, [R4,#0x1EC]
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4,R5,PC}

loc_2B24C
VLDR            D8, =6.27710174e57
LDRD            R0, R1, [R0,#0xB8]
BLX             sub_4A10C
VMOV            D7, R0, R1
LDRD            R0, R1, [R5,#0xB0]
VMUL.F64        D8, D7, D8
BLX             sub_4A10C
VLDR            D7, =3.40282367e38
VMOV            D6, R0, R1
LDRD            R0, R1, [R5,#0xA8]
VMLA.F64        D8, D6, D7
BLX             sub_4A10C
VLDR            D7, =1.84467441e19
VMOV            D6, R0, R1
LDRD            R0, R1, [R5,#0xA0]
VMLA.F64        D8, D6, D7
BLX             sub_4A10C
VMOV            D7, R0, R1
VADD.F64        D7, D7, D8
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
BEQ             loc_2B320
VLDR            D6, =2.69595353e67
VDIV.F64        D8, D6, D7
VMOV.F64        D0, D8
BL              round
VMOV            R0, R1, D0
BLX             __fixunsdfdi

loc_2B2BC
VSTR            D8, [R5,#0x178]
B               loc_2B1E4

loc_2B2C4
VCMPE.F64       D7, D8
VMRS            APSR_nzcv, FPSCR
BLE             loc_2B304
MOV             R3, #1
VSTR            D8, [R4,#0x1D0]
STR             R3, [R4,#0x1E8]

loc_2B2DC
VLDR            D7, [R4,#0x1D8]
VCMP.F64        D7, D8
VMRS            APSR_nzcv, FPSCR
BNE             loc_2B22C

loc_2B2EC
LDR             R3, [R4,#0x1EC]
ADD             R3, R3, #1
STR             R3, [R4,#0x1EC]
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4,R5,PC}

loc_2B304
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
BNE             loc_2B21C
MOV             R3, #1
VSTR            D8, [R4,#0x1D0]
STR             R3, [R4,#0x1E8]
B               loc_2B2DC

loc_2B320
VLDR            D8, =2.69595353e67
MOV             R0, #0xFFFFFFFF
MOV             R1, #0xFFFFFFFF
B               loc_2B2BC
; End of function sub_2B1B0

dbl_2B330 DCFD 6.27710174e57
dbl_2B338 DCFD 3.40282367e38
dbl_2B340 DCFD 1.84467441e19
dbl_2B348 DCFD 2.69595353e67



; int __fastcall sub_2B350(int)
sub_2B350

var_54= -0x54
var_50= -0x50
var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #0x70
MOV             R4, R0
SUB             R1, R0, #4
ADD             R2, SP, #0x70+var_54
ADD             R0, SP, #0x70+var_4

loc_2B368
LDR             R3, [R1,#4]!
REV             R3, R3
STR             R3, [R2,#4]!
CMP             R2, R0
BNE             loc_2B368
MOV             R2, SP
ADD             R0, SP, #0x70+var_50 ; int
MOV             R1, #0x50 ; 'P' ; n
BL              sub_21C34
MOV             R0, SP  ; int
ADD             R2, R4, #0xC0
MOV             R1, #0x20 ; ' ' ; n
BL              sub_21C34
ADD             SP, SP, #0x70 ; 'p'
POP             {R4,PC}
; End of function sub_2B350




; void __fastcall sub_2B3A4(int)
sub_2B3A4

var_F0= -0xF0
var_EC= -0xEC
var_E8= -0xE8
var_AC= -0xAC
var_A8= -0xA8
var_20= -0x20

PUSH            {R4,LR}
SUB             SP, SP, #0xF0
MOV             R4, R0
SUB             R1, R0, #4
ADD             R2, SP, #0xF0+var_EC
ADD             R0, SP, #0xF0+var_AC

loc_2B3BC
LDR             R3, [R1,#4]!
REV             R3, R3
STR             R3, [R2,#4]!
CMP             R2, R0
BNE             loc_2B3BC
ADD             R0, SP, #0xF0+var_A8
BL              sub_21A6C
ADD             R0, SP, #0xF0+var_A8 ; int
ADD             R1, SP, #0xF0+var_E8 ; int
MOV             R2, #0x40 ; '@' ; n
BL              sub_21A9C
LDR             R2, =aCalcMidstate ; "calc_midstate"
MOV             R1, #0x8D0
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0xF0+var_EC]
ADD             R0, R4, #0x80
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R2, [SP,#0xF0+var_F0]
ADD             R1, SP, #0xF0+var_20
MOV             R2, #0x20 ; ' '
BL              sub_254E8
ADD             SP, SP, #0xF0
POP             {R4,PC}
; End of function sub_2B3A4

off_2B418 DCD aCalcMidstate ; "calc_midstate"



; void sub_2B41C()
sub_2B41C
PUSH            {R4-R10,LR}
MOV             R5, #dword_733CC
SUB             SP, SP, #0x800
LDR             R3, [R5]
CMP             R3, #0
BLE             loc_2B4E4
MOVW            R9, #:lower16:dword_744C8
MOVW            R8, #:lower16:byte_74500
MOVW            R7, #:lower16:sub_35D3C
MOVW            R6, #:lower16:aCreateTestPool ; "create test_pool_thread pool[%d]\n"
MOVW            R10, #:lower16:byte_68BD4
MOVT            R9, #:upper16:dword_744C8
MOVT            R8, #:upper16:byte_74500
MOVT            R7, #:upper16:sub_35D3C
MOVT            R6, #:upper16:aCreateTestPool ; "create test_pool_thread pool[%d]\n"
MOVT            R10, #:upper16:byte_68BD4
MOV             R4, #0

loc_2B464
LDR             R3, [R9]
MOV             R0, #1
MOV             R2, R7  ; start_routine
MOV             R1, #0  ; attr
LDR             R3, [R3,R4,LSL#2] ; arg
STRB            R0, [R3,#0x11C]
ADD             R0, R3, #0x118 ; newthread
BL              pthread_create
LDRB            R12, [R8]
MOV             R3, R4
MOV             R2, R6  ; format
ADD             R4, R4, #1
MOV             R1, #0x800 ; maxlen
MOV             R0, SP  ; s
CMP             R12, #0
BNE             loc_2B4C4
LDRB            LR, [R10]
MOV             R12, #dword_67DB4
CMP             LR, #0
BNE             loc_2B4C4
LDR             R12, [R12]
CMP             R12, #4
BLE             loc_2B4D8

loc_2B4C4
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_2B4D8
LDR             R3, [R5]
CMP             R3, R4
BGT             loc_2B464

loc_2B4E4
ADD             SP, SP, #0x800
POP             {R4-R10,PC}
; End of function sub_2B41C




; int sub_2B4EC()
sub_2B4EC
PUSH            {R4,LR}
BL              pthread_self
BL              pthread_detach
MOV             R0, #0
POP             {R4,PC}
; End of function sub_2B4EC




; int __fastcall sub_2B500(int)
sub_2B500

var_800= -0x800

PUSH            {R4-R6,LR}
MOVW            R2, #:lower16:aDMiner ; "%d/Miner"
LDR             R6, [R0,#0x24]
SUB             SP, SP, #0x810
MOV             R1, #0x10 ; maxlen
MOVT            R2, #:upper16:aDMiner ; "%d/Miner"
LDR             R3, [R0]
MOV             R4, R0
LDR             R5, [R6,#4]
MOV             R0, SP  ; s
BL              snprintf
MOV             R0, SP
BL              sub_250A8
MOV             R0, R4
BL              sub_2AE8C
LDR             R3, [R5,#0x34]
MOV             R0, R4
BLX             R3
SUBS            R1, R0, #0
BEQ             loc_2B60C
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2B5C4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2B58C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2B620

loc_2B58C
MOVW            LR, #:lower16:aWaitingOnSemIn ; "Waiting on sem in miner thread"
ADD             R12, SP, #0x810+var_800
MOVT            LR, #:upper16:aWaitingOnSemIn ; "Waiting on sem in miner thread"
LDM             LR!, {R0-R3} ; "Waiting on sem in miner thread"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "n miner thread"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x810+var_800
MOV             LR, R3,LSR#16
MOV             R2, #0
MOV             R0, #7
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_20F58

loc_2B5C4
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R2, =aMinerThread ; "miner_thread"
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2649
ADD             R0, R4, #0x10 ; sem
BL              sub_25228
MOV             R0, #0  ; timer
BL              time
STR             R0, [R6,#0xE8]
MOV             R0, R4
LDR             R3, [R5,#0x3C]
BLX             R3
MOV             R0, R4
LDR             R3, [R5,#0x58]
BLX             R3
MOV             R0, #0
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_2B60C
MOV             R0, R6
BL              sub_24DC4
MOV             R0, #0
ADD             SP, SP, #0x810
POP             {R4-R6,PC}

loc_2B620
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2B5C4
B               loc_2B58C
; End of function sub_2B500

off_2B638 DCD aMinerThread ; "miner_thread"


; Attributes: noreturn

; void __noreturn sub_2B63C()
sub_2B63C
PUSH            {R4,LR}
BL              pthread_self
BL              pthread_detach
MOV             R1, #0  ; oldtype
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOV             R0, #7  ; seconds
BL              sleep
MOV             R0, #1  ; status
BL              exit
; End of function sub_2B63C




; _DWORD *__fastcall sub_2B664(_DWORD *result)
sub_2B664
MOVW            R3, #:lower16:dword_74578
MOV             R1, #1
MOVT            R3, #:upper16:dword_74578
LDR             R2, [R3]
ADD             R2, R2, R1
STR             R2, [R3]
STR             R1, [R0]
BX              LR
; End of function sub_2B664




; int __fastcall sub_2B684(unsigned __int8 *)
sub_2B684
LDRB            R3, [R0,#0x280]
CMP             R3, #0
BEQ             loc_2B6A0
LDRB            R2, [R0,#0x281]
CMP             R2, #0
LDRBNE          R3, [R0,#0x283]
EORNE           R3, R3, #1

loc_2B6A0
MOV             R0, R3
BX              LR
; End of function sub_2B684




; int __fastcall sub_2B6A8(int)
sub_2B6A8
MOVW            R3, #:lower16:dword_733CC
PUSH            {R4-R8,LR}
MOVT            R3, #:upper16:dword_733CC
LDR             R7, [R0,#0x9C]
MOV             R5, R0
LDR             R6, [R3]
CMP             R6, #0
BLE             loc_2B720
MOV             R3, #dword_744C8
LDR             R4, [R3]
ADD             R6, R4, R6,LSL#2

loc_2B6D8
LDR             R1, [R4],#4
LDRB            R3, [R1,#0x61]
CMP             R3, #0
BNE             loc_2B714
LDR             R3, [R1,#0x64]
MOV             R0, R1
CMP             R3, #1
BNE             loc_2B714
BL              sub_2B684
CMP             R0, #0
BNE             loc_2B714
LDR             R3, [R1,#0x9C]
CMP             R3, R7
MOVLT           R5, R1
MOVLT           R7, R3

loc_2B714
CMP             R4, R6
BNE             loc_2B6D8
LDR             R7, [R5,#0x9C]

loc_2B720
ADD             R7, R7, #1
MOV             R0, R5
STR             R7, [R5,#0x9C]
POP             {R4-R8,PC}
; End of function sub_2B6A8




; int __fastcall sub_2B730(int)
sub_2B730
MOVW            R3, #:lower16:byte_74500
PUSH            {R4,LR}
MOVT            R3, #:upper16:byte_74500
SUB             SP, SP, #0x800
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2B764
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2B7A4

loc_2B764
MOVW            R2, #:lower16:aWtfNoPoolDFoun ; "WTF No pool %d found!"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aWtfNoPoolDFoun ; "WTF No pool %d found!"
MOV             R0, SP  ; s
MOV             R3, R4
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_2B78C
MOV             R3, #dword_744C8
LDR             R3, [R3]
LDR             R0, [R3,R4,LSL#2]
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_2B7A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2B78C
B               loc_2B764
; End of function sub_2B730




; int __fastcall sub_2B7BC(int)
sub_2B7BC
MOVW            R3, #:lower16:dword_733CC
PUSH            {LR}
MOVT            R3, #:upper16:dword_733CC
LDR             LR, [R3]
CMP             LR, #0
BLE             loc_2B814
MOV             R3, #dword_744C8
LDR             R2, [R3]
LDR             R1, [R2]
LDR             R3, [R1,#4]
CMP             R3, R0
BEQ             loc_2B81C
MOV             R3, #0
B               loc_2B808

loc_2B7F8
LDR             R1, [R2,#4]!
LDR             R12, [R1,#4]
CMP             R12, R0
BEQ             loc_2B81C

loc_2B808
ADD             R3, R3, #1
CMP             R3, LR
BNE             loc_2B7F8

loc_2B814
POP             {LR}
B               sub_2B730

loc_2B81C
MOV             R0, R1
POP             {PC}
; End of function sub_2B7BC




; const char *__fastcall sub_2B824(const char *)
sub_2B824
PUSH            {R4,LR}
MOVW            R1, #:lower16:aDD ; "%d:%d"
LDR             R4, =dword_732EC
MOVT            R1, #:upper16:aDD ; "%d:%d"
MOV             R3, R4
ADD             R2, R4, #4
BL              sscanf
CMP             R0, #2
BEQ             loc_2B854
MOV             R0, #aInvalidTimeSet ; "Invalid time set, should be HH:MM"
POP             {R4,PC}

loc_2B854
LDR             R2, [R4,#(dword_732F0 - 0x732EC)]
SUB             R3, R4, #8
CMP             R2, #0x17
BHI             loc_2B870
LDR             R3, [R3,#(dword_732EC - 0x732E4)]
CMP             R3, #0x3B ; ';'
BLS             loc_2B87C

loc_2B870
MOV             R0, #aInvalidTimeSet_0 ; "Invalid time set."
POP             {R4,PC}

loc_2B87C
MOV             R3, #1
MOV             R0, #0
STRB            R3, [R4,#(byte_732E4 - 0x732EC)]
POP             {R4,PC}
; End of function sub_2B824

off_2B88C DCD dword_732EC



; char *__fastcall sub_2B890(char *)
sub_2B890

var_10C= -0x10C
var_100= -0x100
var_A4= -0xA4

PUSH            {R4-R7,LR}
MOV             R4, #byte_68BD8
SUB             SP, SP, #0x10C
MOV             R5, R0
LDR             R3, [R4,#(dword_68EF4 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_2B97C

loc_2B8B0
LDR             R3, [R4,#(dword_68EF8 - 0x68BD8)]
ADD             R3, R3, #1
CMP             R3, #0xA
STR             R3, [R4,#(dword_68EF8 - 0x68BD8)]
MOVGT           R4, #aTooManyLevelsO ; "Too many levels of JSON includes (limit"...
BLE             loc_2B8D8
MOV             R0, R4
ADD             SP, SP, #0x10C
POP             {R4-R7,PC}

loc_2B8D8
ADD             R2, SP, #0x10C+var_100
MOV             R1, #0
MOV             R0, R5
BL              sub_475B0
SUBS            R3, R0, #0
BEQ             loc_2B8FC
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_2B95C

loc_2B8FC
ADD             R7, SP, #0x10C+var_A4
MOV             R0, R5  ; s
BL              strlen
MOV             R6, R0
MOV             R0, R7  ; s
BL              strlen
ADD             R6, R6, R0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R6, R6, #0x23 ; '#'
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R0, R6
MOVW            R3, #0x84C
LDR             R2, =aLoadConfig ; "load_config"
BL              sub_229BC
MOVW            R2, #:lower16:aJsonDecodeOfFi ; "JSON decode of file '%s' failed\n %s"
MOV             R4, R0
STR             R7, [SP,#0x10C+var_10C]
MOV             R1, R6  ; maxlen
MOV             R3, R5
MOVT            R2, #:upper16:aJsonDecodeOfFi ; "JSON decode of file '%s' failed\n %s"
BL              snprintf
MOV             R0, R4
ADD             SP, SP, #0x10C
POP             {R4-R7,PC}

loc_2B95C
MOV             R3, #1
MOV             R1, R3
STRB            R3, [R4,#0x324]
BL              sub_2B98C
MOV             R4, R0
MOV             R0, R4  ; s
ADD             SP, SP, #0x10C
POP             {R4-R7,PC}

loc_2B97C
BL              __strdup
STR             R0, [R4,#(dword_68EF4 - 0x68BD8)]
B               loc_2B8B0
; End of function sub_2B890

off_2B988 DCD aLoadConfig ; "load_config"



; char *__fastcall sub_2B98C(_DWORD *, int)
sub_2B98C

var_824= -0x824
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R11,LR}
SUBS            R3, R1, #0
SUB             SP, SP, #0x820
MOV             R7, R0
SUB             SP, SP, #4
STR             R3, [SP,#0x824+var_818]
BEQ             loc_2B9C0
MOV             R3, #byte_68BD8
LDR             R2, [R3,#(dword_68FC8 - 0x68BD8)]
CMP             R2, #0
MOVEQ           R2, #1
STREQ           R2, [R3,#(dword_68FC8 - 0x68BD8)]

loc_2B9C0
MOV             R4, #off_67FE0 ; "--version-file"
LDR             R3, [R4,#(dword_67FE4 - 0x67FE0)]
CMP             R3, #0x10
BEQ             loc_2BB34
TST             R3, #8
BNE             loc_2BCF0
MOVW            R6, #:lower16:asc_4A4AC ; "|"
MOVW            R9, #:lower16:byte_74500
MOVW            R8, #:lower16:byte_68BD8
MOVW            R11, #:lower16:aInvalidConfigO ; "Invalid config option %s: %s"
ADD             R4, R4, #0x1C
MOVT            R6, #:upper16:asc_4A4AC ; "|"
MOVT            R9, #:upper16:byte_74500
MOVT            R8, #:upper16:byte_68BD8
MOVT            R11, #:upper16:aInvalidConfigO ; "Invalid config option %s: %s"
B               loc_2BA1C

loc_2BA04
LDR             R3, [R4,#4]
CMP             R3, #0x10
BEQ             loc_2BB34

loc_2BA10
TST             R3, #8
ADD             R4, R4, #0x1C
BNE             loc_2BCF0

loc_2BA1C               ; s
LDR             R0, [R4,#-0x1C]
CMP             R0, #0
BEQ             loc_2BA04
BL              __strdup
MOV             R1, R6  ; delim
MOV             R10, R0
BL              strtok
SUBS            R5, R0, #0
BNE             loc_2BA58
B               loc_2BB20

loc_2BA44               ; delim
MOV             R1, R6
MOV             R0, #0  ; s
BL              strtok
SUBS            R5, R0, #0
BEQ             loc_2BB20

loc_2BA58
LDRB            R3, [R5,#1]
CMP             R3, #0x2D ; '-'
BNE             loc_2BA44
ADD             R1, R5, #2
MOV             R0, R7
BL              sub_480FC
SUBS            R2, R0, #0
BEQ             loc_2BA44
LDR             R1, [R4,#-0x18]
LDR             R3, [R2]
TST             R1, #6
BEQ             loc_2BA98
CMP             R3, #2
BEQ             loc_2BBD8
CMP             R3, #1
BEQ             loc_2BC24

loc_2BA98
SUB             R2, R3, #5
CMP             R2, #1
MOVHI           R3, #aInvalidValue ; "Invalid value"
BLS             loc_2BB70

loc_2BAAC
LDR             R2, [SP,#0x824+var_818]
CMP             R2, #0
BEQ             loc_2BB9C

loc_2BAB8
LDRB            R2, [R9]
CMP             R2, #0
BNE             loc_2BAEC
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_2BAEC
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #2
BLE             loc_2BB14

loc_2BAEC
STR             R3, [SP,#0x824+var_824]
MOV             R2, R11 ; format
MOV             R1, #0x800 ; maxlen
MOV             R3, R5
ADD             R0, SP, #0x824+s ; s
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_2BB14
MOV             R3, #0xFFFFFFFF
STR             R3, [R8,#(dword_68FC8 - 0x68BD8)]
B               loc_2BA44

loc_2BB20               ; ptr
MOV             R0, R10
BL              free
LDR             R3, [R4,#4]
CMP             R3, #0x10
BNE             loc_2BA10

loc_2BB34
MOVW            R1, #:lower16:aInclude ; "include"
MOV             R0, R7
MOVT            R1, #:upper16:aInclude ; "include"
BL              sub_480FC
SUBS            R3, R0, #0
BEQ             loc_2BBC8
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_2BBC8
BL              sub_48630
MOV             R1, #0
BL              sub_2B890
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2BB70
TST             R1, #1
LDR             R0, [R4,#-8]
BEQ             loc_2BC14
LDR             R3, [R4,#-0x14]
BLX             R3
MOV             R3, R0

loc_2BB88
CMP             R3, #0
BEQ             loc_2BA44
LDR             R2, [SP,#0x824+var_818]
CMP             R2, #0
BNE             loc_2BAB8

loc_2BB9C
MOVW            R2, #:lower16:aParsingJsonOpt ; "Parsing JSON option %s: %s"
STR             R3, [SP,#0x824+var_824]
MOVT            R2, #:upper16:aParsingJsonOpt ; "Parsing JSON option %s: %s"
MOV             R3, R5
MOV             R1, #0xC8 ; maxlen
LDR             R0, =byte_68F00 ; s
BL              snprintf
LDR             R0, =byte_68F00
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2BBC8
MOV             R0, #0
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2BBD8
BL              sub_48630
LDR             R3, [R4,#-0x10]
LDR             R1, [R4,#-8]
STR             R0, [SP,#0x824+var_814]
BLX             R3
LDR             R2, [R4,#-0x18]
MOV             R3, R0
CMP             R2, #4
BNE             loc_2BB88
STR             R0, [SP,#0x824+var_810]
LDR             R1, [R4,#-8]
LDR             R0, [SP,#0x824+var_814]
BL              sub_4014C
LDR             R3, [SP,#0x824+var_810]
B               loc_2BB88

loc_2BC14
CMP             R3, #5
BEQ             loc_2BCC4
BL              sub_40078
B               loc_2BA44

loc_2BC24
MOV             R3, #0
STR             R10, [SP,#0x824+var_814]
MOV             R10, R2
STR             R5, [SP,#0x824+var_810]
MOV             R0, R10
MOV             R5, R3
BL              sub_48468
CMP             R0, R5
BLS             loc_2BC84

loc_2BC48
MOV             R1, R5
MOV             R0, R10
BL              sub_48484
SUBS            R3, R0, #0
BEQ             loc_2BC84
LDR             R1, [R3]
CMP             R1, #2
BEQ             loc_2BC8C
CMP             R1, #0
BEQ             loc_2BCCC

loc_2BC70
ADD             R5, R5, #1
MOV             R0, R10
BL              sub_48468
CMP             R0, R5
BHI             loc_2BC48

loc_2BC84
LDR             R10, [SP,#0x824+var_814]
B               loc_2BA44

loc_2BC8C
BL              sub_48630
LDR             R3, [R4,#-0x10]
LDR             R1, [R4,#-8]
STR             R0, [SP,#0x824+var_80C]
BLX             R3
LDR             R2, [R4,#-0x18]
MOV             R3, R0
CMP             R2, #4
BEQ             loc_2BCD8

loc_2BCB0
CMP             R3, #0
BEQ             loc_2BC70
LDR             R10, [SP,#0x824+var_814]
LDR             R5, [SP,#0x824+var_810]
B               loc_2BAAC

loc_2BCC4
BL              sub_40068
B               loc_2BA44

loc_2BCCC
BL              sub_2B98C
MOV             R3, R0
B               loc_2BCB0

loc_2BCD8
STR             R0, [SP,#0x824+var_808]
LDR             R1, [R4,#-8]
LDR             R0, [SP,#0x824+var_80C]
BL              sub_4014C
LDR             R3, [SP,#0x824+var_808]
B               loc_2BCB0

loc_2BCF0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #:lower16:aOptTypeOptSubt ; "!(opt->type & OPT_SUBTABLE)"
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVT            R0, #:upper16:aOptTypeOptSubt ; "!(opt->type & OPT_SUBTABLE)"
LDR             R3, =function ; "parse_config"
MOVW            R2, #0x7A4 ; line
BL              __assert_fail
; End of function sub_2B98C

off_2BD0C DCD byte_68F00
off_2BD10 DCD function  ; "parse_config"



; int sub_2BD14()
sub_2BD14

var_10= -0x10
var_C= -0xC
var_4= -4

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x14
ADD             R0, SP, #0x14+var_C
BL              sub_239A4
LDR             R3, [SP,#0x14+var_C]
ADD             R0, SP, #0x14+var_4
STR             R3, [R0,#-0xC]! ; timer
BL              localtime
MOV             R3, #byte_7339C
LDRB            R12, [R3]
CMP             R12, #0
BEQ             loc_2BDA0
MOVW            R1, #:lower16:byte_732E4
LDR             R5, [R3,#(dword_733A4 - 0x7339C)]
MOVT            R1, #:upper16:byte_732E4
LDR             LR, [R3,#(dword_733A8 - 0x7339C)]
LDRB            R7, [R1]
LDR             R6, [R0,#4]
LDR             R4, [R0,#8]
CMP             R7, #0
BNE             loc_2BDE4
CMP             LR, R4
BGT             loc_2BD94
MOVEQ           R1, #1
MOVNE           R1, #0
CMP             R5, R6
MOVLE           R5, #0
ANDGT           R5, R1, #1
CMP             R5, #0
STRBEQ          R7, [R3]
MOVEQ           R7, R12

loc_2BD94
MOV             R0, R7
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_2BDA0
MOVW            R3, #:lower16:byte_732E4
LDR             R12, [R0,#8]
MOVT            R3, #:upper16:byte_732E4
LDR             R1, [R3,#(dword_732F0 - 0x732E4)]
CMP             R12, R1
MOVLT           R7, #1
BLT             loc_2BD94
LDR             R2, [R0,#4]
LDR             R0, [R3,#(dword_732EC - 0x732E4)]
CMP             R2, R0
MOVGE           R7, #0
MOVLT           R7, #1
CMP             R12, R1
MOVNE           R7, #0
MOV             R0, R7
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_2BDE4
LDR             R3, [R1,#(dword_732F0 - 0x732E4)]
LDR             R12, [R1,#(dword_732EC - 0x732E4)]
CMP             R3, LR
BGT             loc_2BE54
MOVEQ           R1, #1
MOVNE           R1, #0
CMP             R12, R5
MOVLE           R1, #0
ANDGT           R1, R1, #1
CMP             R1, #0
BNE             loc_2BE54
CMP             LR, R4
BGT             loc_2BE34
MOVEQ           R1, #1
MOVNE           R1, #0
CMP             R5, R6
MOVLE           R5, #0
ANDGT           R5, R1, #1
CMP             R5, #0
BEQ             loc_2BD94

loc_2BE34
CMP             R3, R4
BGT             loc_2BD94
MOVEQ           R2, #1
MOVNE           R2, #0
CMP             R12, R6
MOVLE           R7, #0
ANDGT           R7, R2, #1
B               loc_2BD94

loc_2BE54
CMP             R3, R4
BGT             loc_2BE78
MOVEQ           R2, #1
MOVNE           R2, #0
CMP             R12, R6
MOVLE           R7, #0
ANDGT           R7, R2, #1
CMP             R7, #0
BEQ             loc_2BD94

loc_2BE78
CMP             LR, R4
MOVGT           R7, #0
BGT             loc_2BD94
MOVEQ           R2, #1
MOVNE           R2, #0
CMP             R5, R6
MOVLE           R2, #0
ANDGT           R2, R2, #1
EOR             R7, R2, #1
B               loc_2BD94
; End of function sub_2BD14




; char *__fastcall sub_2BEA0(const char *, float *)
sub_2BEA0
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40158
CMP             R0, #0
POPNE           {R4,PC}
VLDR            S15, [R4]
VLDR            S14, =100.0
VCMPE.F32       S15, S14
VMRS            APSR_nzcv, FPSCR
BMI             loc_2BEE4
VLDR            S14, =250.0
MOV             R3, #aValueOutOfRang ; "Value out of range"
VCMP.F32        S15, S14
VMRS            APSR_nzcv, FPSCR
MOVGT           R0, R3
POP             {R4,PC}

loc_2BEE4
MOV             R0, #aValueOutOfRang ; "Value out of range"
POP             {R4,PC}
; End of function sub_2BEA0

flt_2BEF0 DCFS 100.0
flt_2BEF4 DCFS 250.0



; char *__fastcall sub_2BEF8(const char *, float *)
sub_2BEF8
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40158
CMP             R0, #0
POPNE           {R4,PC}
VLDR            S15, [R4]
VLDR            S14, =125.0
VCMPE.F32       S15, S14
VMRS            APSR_nzcv, FPSCR
BMI             loc_2BF3C
VLDR            S14, =500.0
MOV             R3, #aValueOutOfRang ; "Value out of range"
VCMP.F32        S15, S14
VMRS            APSR_nzcv, FPSCR
MOVGT           R0, R3
POP             {R4,PC}

loc_2BF3C
MOV             R0, #aValueOutOfRang ; "Value out of range"
POP             {R4,PC}
; End of function sub_2BEF8

flt_2BF48 DCFS 125.0
flt_2BF4C DCFS 500.0



; int __fastcall sub_2BF50(int, int, int (__fastcall **)(int))
sub_2BF50

var_804= -0x804

PUSH            {R4-R7,LR}
MOV             R4, #byte_74500
SUB             SP, SP, #0x800
SUB             SP, SP, #4
MOV             R5, R0
LDRB            R3, [R4]
MOV             R6, R1
MOV             R7, R2
CMP             R3, #0
BNE             loc_2BF90
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2C0C4

loc_2BF90
MOVW            R2, #:lower16:aThreadDBeingDi ; "Thread %d being disabled"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aThreadDBeingDi ; "Thread %d being disabled"
MOV             R0, SP  ; s
MOV             R3, R6
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_2BFB8
MOVW            R3, #:lower16:byte_68BD5
LDR             R2, [R5,#0x24]
MOVT            R3, #:upper16:byte_68BD5
MOV             R0, #0
LDRB            R3, [R3]
MOV             R1, #0
STRD            R0, R1, [R2,#0x30]
CMP             R3, #0
BEQ             loc_2C034
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2BFFC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2C0DC

loc_2BFFC
MOVW            LR, #:lower16:aWaitingOnSemIn ; "Waiting on sem in miner thread"
MOV             R12, SP
MOVT            LR, #:upper16:aWaitingOnSemIn ; "Waiting on sem in miner thread"
LDM             LR!, {R0-R3} ; "Waiting on sem in miner thread"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "n miner thread"
STM             R12!, {R0-R2}
MOV             R1, SP
MOV             LR, R3,LSR#16
MOV             R2, #0
MOV             R0, #7
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_20F58

loc_2C034
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x23C1
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aMtDisable ; "mt_disable"
ADD             R0, R5, #0x10 ; sem
BL              sub_25228
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_2C06C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2C0AC

loc_2C06C
MOVW            R2, #:lower16:aThreadDBeingRe ; "Thread %d being re-enabled"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aThreadDBeingRe ; "Thread %d being re-enabled"
MOV             R3, R6
MOV             R0, SP  ; s
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_2C094
LDR             R3, [R7]
MOV             R0, R5
BLX             R3
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_2C0AC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_2C06C
B               loc_2C094

loc_2C0C4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_2BFB8
B               loc_2BF90

loc_2C0DC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2C034
B               loc_2BFFC
; End of function sub_2BF50

off_2C0F4 DCD aMtDisable ; "mt_disable"



; void sub_2C0F8()
sub_2C0F8

var_804= -0x804

MOVW            R12, #:lower16:aUnableToSetThr_0 ; "Unable to set thread to low priority"
PUSH            {LR}
MOVT            R12, #:upper16:aUnableToSetThr_0 ; "Unable to set thread to low priority"
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDM             R12!, {R0-R3} ; "Unable to set thread to low priority"
MOV             LR, SP
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "read to low priority"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "rity"
STR             R0, [LR],#4
MOV             R0, #6
STRB            R1, [LR]
MOV             R1, SP
BL              sub_20F58
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {PC}
; End of function sub_2C0F8




; void sub_2C148()
sub_2C148
PUSH            {R4,LR}
MOV             R0, #0xA ; inc
BL              nice
CMP             R0, #0
POPNE           {R4,PC}
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2C184
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2C18C

loc_2C184
POP             {R4,LR}
B               sub_2C0F8

loc_2C18C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_2C184
POP             {R4,PC}
; End of function sub_2C148




; int __fastcall sub_2C1A4(int)
sub_2C1A4
PUSH            {R4,LR}
MOV             R4, R0
BL              pthread_self
BL              pthread_detach
MOV             R1, #0  ; oldtype
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOV             R0, #aApi ; "API"
BL              sub_250A8
BL              sub_2C148
MOV             R3, #byte_68BD8
LDR             R0, [R3,#(dword_68FCC - 0x68BD8)]
BL              sub_1DD84
MOV             R0, #0
STR             R0, [R4,#0xC]
POP             {R4,PC}
; End of function sub_2C1A4




; char *__fastcall sub_2C1EC(const char *)
sub_2C1EC
PUSH            {R4,LR}
MOVW            R4, #:lower16:dword_73464
MOVW            R3, #:lower16:byte_68BD8
MOVT            R4, #:upper16:dword_73464
MOVT            R3, #:upper16:byte_68BD8
MOV             R2, #2
MOV             R1, R4
STR             R2, [R3,#(dword_68FD0 - 0x68BD8)]
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R1, [R4]
MOVW            R2, #0x270F
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R1, R2
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C1EC




; char *__fastcall sub_2C234(const char *, _DWORD *)
sub_2C234
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R1, [R4]
MOVW            R2, #0x270F
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R1, R2
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C234




; char *__fastcall sub_2C264(const char *, _DWORD *)
sub_2C264
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOVW            R1, #0xFFFE
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #1
CMP             R2, R1
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C264




; char *__fastcall sub_2C298(const char *, _DWORD *)
sub_2C298
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x2A ; '*'
CMP             R2, #0x14
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C298




; char *__fastcall sub_2C2C8(const char *, _DWORD *)
sub_2C2C8
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x16
CMP             R2, #0x21 ; '!'
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C2C8




; char *__fastcall sub_2C2F8(const char *, _DWORD *)
sub_2C2F8
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x2A ; '*'
CMP             R2, #0x2B ; '+'
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C2F8




; char *__fastcall sub_2C328(const char *, _DWORD *)
sub_2C328
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x16
CMP             R2, #0x35 ; '5'
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C328




; char *__fastcall sub_2C358(const char *, _DWORD *)
sub_2C358
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #0x20 ; ' '
CMP             R2, #0x1F
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C358




; char *__fastcall sub_2C388(const char *, _DWORD *)
sub_2C388
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #4
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C388




; char *__fastcall sub_2C3B4(const char *, _DWORD *)
sub_2C3B4
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0xC8
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C3B4




; char *__fastcall sub_2C3E0(const char *, _DWORD *)
sub_2C3E0
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0x1E00
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C3E0




; char *__fastcall sub_2C40C(const char *, _DWORD *)
sub_2C40C
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #1
CMP             R2, #0xFE
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C40C




; char *__fastcall sub_2C43C(const char *, _DWORD *)
sub_2C43C
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0xFF
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C43C




; char *__fastcall sub_2C468(const char *, _DWORD *)
sub_2C468
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0x64 ; 'd'
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C468




; char *__fastcall sub_2C494(const char *, _DWORD *)
sub_2C494
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
SUB             R2, R2, #1
CMP             R2, #9
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C494




; char *__fastcall sub_2C4C4(const char *, _DWORD *)
sub_2C4C4
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4,PC}
LDR             R2, [R4]
MOV             R3, #aValueOutOfRang ; "Value out of range"
CMP             R2, #0xA
MOVHI           R0, R3
POP             {R4,PC}
; End of function sub_2C4C4




; void __fastcall sub_2C4F0(const char *, const char *, int)
sub_2C4F0

var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
MOV             R3, R0
ADD             R0, SP, #0x80C+s ; s
STR             R2, [SP,#0x80C+var_808]
MOVW            R2, #:lower16:aFreeWorkCalled ; "Free work called with NULL work from %s"...
STR             R1, [SP,#0x80C+var_80C]
MOVT            R2, #:upper16:aFreeWorkCalled ; "Free work called with NULL work from %s"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2C4F0




; double __fastcall sub_2C538(double)
sub_2C538
PUSH            {R4,LR}
MOV             R4, R0
VPUSH           {D8-D9}
VMOV.F64        D9, D0
VDIV.F64        D0, D1, D2
VMOV.F64        D8, D1
BL              exp
VMOV.F64        D6, #1.0
VDIV.F64        D5, D9, D8
VDIV.F64        D0, D6, D0
VLDR            D7, [R4]
VSUB.F64        D0, D6, D0
VMLA.F64        D7, D5, D0
VADD.F64        D0, D0, D6
VDIV.F64        D6, D7, D0
VSTR            D6, [R4]
VPOP            {D8-D9}
POP             {R4,PC}
; End of function sub_2C538

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_2]
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_5]



; int sub_2C588()
sub_2C588
MOV             R0, #1
BX              LR
; End of function sub_2C588




; int sub_2C590()
sub_2C590
MOV             R0, #1
BX              LR
; End of function sub_2C590

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_6]
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_7]
; [00000004 BYTES: COLLAPSED FUNCTION nullsub_8]



; const char *__fastcall sub_2C5A4(const char *)
sub_2C5A4
PUSH            {R4,LR}
MOVW            R1, #:lower16:aDD ; "%d:%d"
LDR             R4, =dword_733A4
MOVT            R1, #:upper16:aDD ; "%d:%d"
MOV             R3, R4
ADD             R2, R4, #4
BL              sscanf
CMP             R0, #2
BEQ             loc_2C5D4
MOV             R0, #aInvalidTimeSet ; "Invalid time set, should be HH:MM"
POP             {R4,PC}

loc_2C5D4
LDR             R2, [R4,#(dword_733A8 - 0x733A4)]
SUB             R3, R4, #8
CMP             R2, #0x17
BHI             loc_2C5F0
LDR             R3, [R3,#(dword_733A4 - 0x7339C)]
CMP             R3, #0x3B ; ';'
BLS             loc_2C5FC

loc_2C5F0
MOV             R0, #aInvalidTimeSet_0 ; "Invalid time set."
POP             {R4,PC}

loc_2C5FC
MOV             R3, #1
MOV             R0, #0
STRB            R3, [R4,#(byte_7339C - 0x733A4)]
POP             {R4,PC}
; End of function sub_2C5A4

off_2C60C DCD dword_733A4



; int __fastcall sub_2C610(char *, size_t, time_t *)
sub_2C610

var_24= -0x24
var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_8= -8
var_4= -4

PUSH            {R4-R7,LR}
MOVW            R4, #0x4DD3
LDR             R3, [R2,#4]
MOVT            R4, #0x1062
SUB             SP, SP, #0x24
MOV             R7, R0
LDR             R12, [R2]
ADD             R2, SP, #0x24+var_4
MOV             R6, R1
SMULL           R4, R5, R3, R4
MOV             R3, R3,ASR#31
STR             R12, [R2,#-4]!
MOV             R0, R2  ; timer
RSB             R4, R3, R5,ASR#6
BL              localtime
MOV             R12, R0
MOVW            R2, #:lower16:aD02d02d02d02d0_0 ; "[%d-%02d-%02d %02d:%02d:%02d.%03d]"
LDR             R3, [R12,#0x14]
MOV             R0, R7  ; s
STR             R4, [SP,#0x24+var_10]
MOV             R1, R6  ; maxlen
LDR             LR, [R12]
MOVT            R2, #:upper16:aD02d02d02d02d0_0 ; "[%d-%02d-%02d %02d:%02d:%02d.%03d]"
ADD             R3, R3, #0x760
ADD             R3, R3, #0xC
STR             LR, [SP,#0x24+var_14]
LDR             LR, [R12,#4]
STR             LR, [SP,#0x24+var_18]
LDR             LR, [R12,#8]
STR             LR, [SP,#0x24+var_1C]
LDR             LR, [R12,#0xC]
STR             LR, [SP,#0x24+var_20]
LDR             R12, [R12,#0x10]
ADD             R12, R12, #1
STR             R12, [SP,#0x24+var_24]
BL              snprintf
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}
; End of function sub_2C610




; void sub_2C6A8()
sub_2C6A8
MOVW            R3, #:lower16:dword_733CC
PUSH            {R4-R9,LR}
MOVT            R3, #:upper16:dword_733CC
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDR             R2, [R3]
CMP             R2, #0
BLE             loc_2C814
MOVW            R3, #:lower16:dword_744C8
MOV             R4, #0xFFFFFFFF
MOVT            R3, #:upper16:dword_744C8
LDR             R7, [R3]
MOV             R5, R7
ADD             R2, R7, R2,LSL#2

loc_2C6E0
LDR             R3, [R5],#4
LDR             R3, [R3,#0x38]
CMP             R3, #0
CMPNE           R3, R4
MOVCC           R4, R3
CMP             R2, R5
BNE             loc_2C6E0
CMN             R4, #1
BEQ             loc_2C824
MOV             R8, R7

loc_2C708
LDR             R3, [R8],#4
LDR             R6, [R3,#0x38]
CMP             R6, #0
BEQ             loc_2C744
MOV             R1, R4
MOV             R0, R6
BLX             sub_49B34
CMP             R1, #0
BEQ             loc_2C744

loc_2C72C
SUB             R4, R4, #1
MOV             R0, R6
MOV             R1, R4
BLX             sub_49B34
CMP             R1, #0
BNE             loc_2C72C

loc_2C744
CMP             R5, R8
BNE             loc_2C708

loc_2C74C
MOV             R9, #off_67FE0 ; "--version-file"
LDR             R8, [R9,#(dword_68718 - 0x67FE0)]

loc_2C758
LDR             R6, [R7],#4
MOV             R1, R4
LDR             R0, [R6,#0x40]
MUL             R0, R0, R8
BLX             __udivsi3
MOV             R1, R4
STR             R0, [R6,#0x40]
LDR             R0, [R6,#0x38]
BLX             __udivsi3
CMP             R5, R7
STR             R0, [R6,#0x3C]
BNE             loc_2C758

loc_2C788
MOVW            R3, #:lower16:byte_68BD5
STR             R4, [R9,#(dword_68718 - 0x67FE0)]
MOVT            R3, #:upper16:byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2C7F0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2C7C8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2C7FC

loc_2C7C8
MOVW            R2, #:lower16:aGlobalQuotaGre ; "Global quota greatest common denominato"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aGlobalQuotaGre ; "Global quota greatest common denominato"...
MOV             R3, R4
MOV             R0, SP  ; s
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_2C7F0
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4-R9,PC}

loc_2C7FC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_2C7C8
B               loc_2C7F0

loc_2C814
MOVW            R9, #:lower16:off_67FE0 ; "--version-file"
MOV             R4, #1
MOVT            R9, #:upper16:off_67FE0 ; "--version-file"
B               loc_2C788

loc_2C824
MOV             R4, #1
B               loc_2C74C
; End of function sub_2C6A8




; char *__fastcall sub_2C82C(const char *, _DWORD *, int, int)
sub_2C82C
PUSH            {R4-R6,LR}
MOV             R4, R2
MOV             R5, R3
MOV             R6, R1
BL              sub_40268
CMP             R0, #0
POPNE           {R4-R6,PC}
LDR             R3, [R6]
MOV             R2, #aValueOutOfRang ; "Value out of range"
CMP             R3, R4
MOVGE           R4, #0
MOVLT           R4, #1
CMP             R3, R5
MOVLE           R3, R4
ORRGT           R3, R4, #1
CMP             R3, #0
MOVNE           R0, R2
POP             {R4-R6,PC}
; End of function sub_2C82C




; int __fastcall sub_2C878(const char *, _DWORD *, _DWORD *)
sub_2C878
PUSH            {R4-R6,LR}
MOV             R5, R1
MOVW            R1, #:lower16:aDD_0 ; "%d-%d"
MOV             R3, R2
MOV             R4, R2
MOVT            R1, #:upper16:aDD_0 ; "%d-%d"
MOV             R2, R5
BL              sscanf
CMP             R0, #1
LDREQ           R3, [R5]
STREQ           R3, [R4]
POP             {R4-R6,PC}
; End of function sub_2C878




; int __fastcall sub_2C8A8(int, const char *)
sub_2C8A8
PUSH            {R4-R6,LR}
MOV             R5, R1
ADD             R2, R0, #0x248
ADD             R1, R0, #0x258
MOV             R4, R0
MOV             R0, R5
BL              sub_23CD8
SUBS            R6, R0, #0
BEQ             loc_2C8EC
MOVW            R1, #:lower16:aStratumTcp ; "stratum+tcp://"
MOV             R2, #0xE ; n
MOVT            R1, #:upper16:aStratumTcp ; "stratum+tcp://"
MOV             R0, R5  ; s1
BL              strncasecmp
CMP             R0, #0
MOVNE           R6, #0
BEQ             loc_2C8F4

loc_2C8EC
MOV             R0, R6
POP             {R4-R6,PC}

loc_2C8F4               ; s
MOV             R0, R5
BL              __strdup
LDR             R3, [R4,#0x258]
MOV             R2, #1
STR             R0, [R4,#0xA4]
MOV             R0, R6
STRB            R2, [R4,#0x280]
STR             R3, [R4,#0x240]
POP             {R4-R6,PC}
; End of function sub_2C8A8




; int __fastcall sub_2C918(int, char *s1)
sub_2C918
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, R1  ; s1
MOV             R1, R4
BL              sub_23E4C
MOV             R1, R0
MOV             R5, R0
MOV             R0, R4
BL              sub_2C8A8
CMP             R0, #0
BEQ             loc_2C94C

loc_2C944
LDR             R0, [R4,#0xA4]
POP             {R4-R6,PC}

loc_2C94C
ADD             R1, R4, #0xA4
MOV             R0, R5
BL              sub_4014C
MOVW            R1, #:lower16:aHttp_0 ; "http://"
MOV             R2, #7  ; n
MOVT            R1, #:upper16:aHttp_0 ; "http://"
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_2C944
MOVW            R1, #:lower16:aHttps ; "https://"
MOV             R2, #8  ; n
MOVT            R1, #:upper16:aHttps ; "https://"
MOV             R0, R5  ; s1
BL              strncmp
CMP             R0, #0
BEQ             loc_2C944
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x412
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aSetupUrl ; "setup_url"
MOV             R0, #0x100
BL              sub_229BC
MOVW            R3, #:lower16:aStratumTcp ; "stratum+tcp://"
MOV             R6, R0
MOVT            R3, #:upper16:aStratumTcp ; "stratum+tcp://"
LDM             R3!, {R0-R2} ; "stratum+tcp://"
LDRH            R12, [R3] ; "//"
LDRB            R3, [R3,#(aStratumTcp+0xE - 0x51B98)] ; ""
STR             R0, [R6]
MOV             R0, R6  ; dest
STR             R1, [R6,#4]
MOV             R1, R5  ; src
STR             R2, [R6,#8]
MOV             R2, #0xF2 ; n
STRH            R12, [R6,#0xC]
STRB            R3, [R6,#0xE]
BL              strncat
MOV             R1, R6
MOV             R0, R4
BL              sub_2C8A8
B               loc_2C944
; End of function sub_2C918

off_2C9F4 DCD aSetupUrl ; "setup_url"



; const char *__fastcall sub_2C9F8(const char *)
sub_2C9F8
SUBS            R3, R0, #0
BEQ             loc_2CA0C
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_2CA18

loc_2CA0C
MOV             R0, #aInvalidParamet ; "Invalid parameters for set temp cutoff"
BX              LR

loc_2CA18
PUSH            {R4,LR}
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
MOV             R4, R3
BL              strtol
CMP             R0, #0xC8
BLS             loc_2CA40
MOV             R0, #aInvalidValuePa ; "Invalid value passed to set temp cutoff"
POP             {R4,PC}

loc_2CA40
MOVW            R3, #:lower16:byte_68BD8
MOV             R0, #0
MOVT            R3, #:upper16:byte_68BD8
STR             R4, [R3,#(dword_68FD4 - 0x68BD8)]
POP             {R4,PC}
; End of function sub_2C9F8




; void *__fastcall sub_2CA54(void **)
sub_2CA54
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0,#0x120] ; ptr
BL              free
LDR             R0, [R4,#0x134] ; ptr
BL              free
LDR             R0, [R4,#0x148] ; ptr
BL              free
LDR             R0, [R4,#0x140] ; ptr
BL              free
MOV             R0, R4  ; s
MOV             R2, #0x1C0 ; n
MOV             R1, #0  ; c
POP             {R4,LR}
B               memset
; End of function sub_2CA54




; char *__fastcall sub_2CA90(int, int, int)
sub_2CA90

var_8= -8

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x14
MOV             R4, R0
MOV             R5, R1
MOV             R6, R2
LDR             R7, [R0,#0x154]
BL              sub_2CA54
LDR             R2, =aCopyWork ; "_copy_work"
MOVW            R12, #0x1357
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOV             R0, R4
MOV             R1, R5
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R2,R12}
MOV             R2, #0x1C0
BL              sub_254E8
STR             R7, [R4,#0x154]
LDR             R0, [R5,#0x120] ; s
CMP             R0, #0
BEQ             loc_2CAE8
BL              __strdup
STR             R0, [R4,#0x120]

loc_2CAE8               ; s
LDR             R0, [R5,#0x140]
CMP             R0, #0
BEQ             loc_2CAFC
BL              __strdup
STR             R0, [R4,#0x140]

loc_2CAFC               ; s
LDR             R0, [R5,#0x134]
CMP             R0, #0
BEQ             loc_2CB88
CMP             R6, #0
BNE             loc_2CB3C
BL              __strdup
STR             R0, [R4,#0x134]

loc_2CB18               ; s
LDR             R0, [R5,#0x148]
CMP             R0, #0
BEQ             loc_2CB2C
BL              __strdup
STR             R0, [R4,#0x148]

loc_2CB2C
LDR             R3, [R5,#0x1BC]
STR             R3, [R4,#0x1BC]
ADD             SP, SP, #0x14
POP             {R4-R7,PC}

loc_2CB3C
LDR             R3, [R4,#0x44]
MOV             R2, #4
ADD             R0, SP, #0x14+var_8
REV             R3, R3
ADD             R3, R6, R3
REV             R3, R3
STR             R3, [R4,#0x44]
LDR             R1, [R5,#0x134]
BL              sub_22CD8
LDR             R3, [SP,#0x14+var_8]
ADD             R0, SP, #0x14+var_8
MOV             R1, #4
REV             R3, R3
ADD             R6, R6, R3
REV             R6, R6
STR             R6, [SP,#0x14+var_8]
BL              sub_22C24
STR             R0, [R4,#0x134]
B               loc_2CB18

loc_2CB88
CMP             R6, #0
LDRNE           R3, [R4,#0x44]
REVNE           R3, R3
ADDNE           R6, R6, R3
REVNE           R6, R6
STRNE           R6, [R4,#0x44]
B               loc_2CB18
; End of function sub_2CA90

off_2CBA4 DCD aCopyWork ; "_copy_work"



; void __fastcall sub_2CBA8(void ***, const char *, const char *, int)
sub_2CBA8
PUSH            {R4-R6,LR}
LDR             R5, [R0]
CMP             R5, #0
BEQ             loc_2CBD8
MOV             R4, R0
MOV             R0, R5
BL              sub_2CA54
MOV             R0, R5  ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4]
POP             {R4-R6,PC}

loc_2CBD8
MOV             R12, R1
MOV             R1, R2
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_2CC1C
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_2CC1C
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #2
POPLE           {R4-R6,PC}

loc_2CC1C
MOV             R2, R3
MOV             R0, R12
POP             {R4-R6,LR}
B               sub_2C4F0
; End of function sub_2CBA8

VCMPE.F64       D1, #0.0
VMRS            APSR_nzcv, FPSCR
BXLS            LR
B               sub_2C538



; void __fastcall sub_2CC3C(int)
sub_2CC3C
LDR             R3, [R0,#0x170]
CMP             R3, #0
BNE             loc_2CC64
LDR             R3, =dbl_68720
VMOV.F64        D7, #1.0
VLDR            D0, [R3]
VCMP.F64        D0, D7
VMRS            APSR_nzcv, FPSCR
VMOVMI.F64      D0, D7
BX              LR

loc_2CC64
PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R0
MOV             R0, SP
BL              sub_239A4
MOV             R0, SP
ADD             R1, R4, #0x170
BL              sub_23C94
VMOV.F64        D7, #1.0
VCMP.F64        D0, D7
VMRS            APSR_nzcv, FPSCR
VMOVMI.F64      D0, D7
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_2CC3C

off_2CC9C DCD dbl_68720



; void sub_2CCA0()
sub_2CCA0

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
MOV             R0, SP
BL              sub_239A4
MOV             R0, SP
LDR             R1, =stru_68FD8
BL              sub_23C94
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2CCA0

off_2CCC4 DCD stru_68FD8



; void sub_2CCC8()
sub_2CCC8

var_C= -0xC

PUSH            {LR}
SUB             SP, SP, #0xC
MOV             R0, SP
BL              sub_239A4
MOV             R0, SP
LDR             R1, =stru_68FE0
BL              sub_23C94
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2CCC8

off_2CCEC DCD stru_68FE0



; void __fastcall sub_2CCF0(int, unsigned int)
sub_2CCF0

var_C08= -0xC08
var_C04= -0xC04
var_C00= -0xC00
var_808= -0x808

PUSH            {R4,LR}
SUB             SP, SP, #0xC00
SUB             SP, SP, #8
MOV             R2, #4
MOV             R4, #0

loc_2CD04
UXTB            R3, R1
SUBS            R2, R2, #1
MOV             R1, R1,LSR#8
ADD             R4, R3, R4,LSL#8
BNE             loc_2CD04
MOV             R1, R0
MOV             R2, #0x80
ADD             R0, SP, #0xC08+var_C00
BL              sub_22BB4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2CD50
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2CD98

loc_2CD50
ADD             R3, SP, #0xC08+var_C00
ADD             R0, SP, #0xC08+var_808
MOVW            R2, #:lower16:aBenchfileNonce ; "BENCHFILE nonce %u=0x%08x for work=%s"
STR             R3, [SP,#0xC08+var_C04]
STR             R4, [SP,#0xC08+var_C08]
MOV             R3, R4
MOVT            R2, #:upper16:aBenchfileNonce ; "BENCHFILE nonce %u=0x%08x for work=%s"
MOV             R1, #0x800 ; maxlen
ADD             R0, R0, #8 ; s
BL              snprintf
ADD             R1, SP, #0xC08+var_808
MOV             R2, #0
ADD             R1, R1, #8
MOV             R0, #3
BL              sub_20F58
ADD             SP, SP, #0xC00
ADD             SP, SP, #8
POP             {R4,PC}

loc_2CD98
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_2CD50
ADD             SP, SP, #0xC00
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_2CCF0




; _BYTE *__fastcall sub_2CDB8(_BYTE *result, unsigned int)
sub_2CDB8
LDR             R3, [R0,#0x134]
REV             R1, R1
STR             R1, [R0,#0x44]
CMP             R3, #0
BXEQ            LR
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, R3  ; ptr
BL              free
MOV             R1, #4
ADD             R0, R4, #0x44 ; 'D'
BL              sub_22C24
STR             R0, [R4,#0x134]
POP             {R4,PC}
; End of function sub_2CDB8




; unsigned __int64 __fastcall sub_2CDF0(__int64 *)
sub_2CDF0
PUSH            {R4,LR}
SUBS            R4, R0, #0
VPUSH           {D8}
BEQ             loc_2CE70
VLDR            D8, =6.27710174e57
LDRD            R0, R1, [R4,#0xD8]
BLX             sub_4A10C
VMOV            D7, R0, R1
LDRD            R0, R1, [R4,#0xD0]
VMUL.F64        D8, D7, D8
BLX             sub_4A10C
VLDR            D7, =3.40282367e38
VMOV            D6, R0, R1
LDRD            R0, R1, [R4,#0xC8]
VMLA.F64        D8, D6, D7
BLX             sub_4A10C
VLDR            D7, =1.84467441e19
VMOV            D6, R0, R1
LDRD            R0, R1, [R4,#0xC0]
VMLA.F64        D8, D6, D7
BLX             sub_4A10C
VMOV            D7, R0, R1
VADD.F64        D8, D7, D8
VCMP.F64        D8, #0.0
VMRS            APSR_nzcv, FPSCR
BEQ             loc_2CE70
VLDR            D6, =2.69595353e67
VDIV.F64        D7, D6, D8
VMOV            R0, R1, D7
BLX             __fixunsdfdi
VPOP            {D8}
POP             {R4,PC}

loc_2CE70
VPOP            {D8}
MOV             R0, #0
MOV             R1, #0
POP             {R4,PC}
; End of function sub_2CDF0

dbl_2CE80 DCFD 6.27710174e57
dbl_2CE88 DCFD 3.40282367e38
dbl_2CE90 DCFD 1.84467441e19
dbl_2CE98 DCFD 2.69595353e67



; void __fastcall sub_2CEA0(void ***, const char *, const char *, int)
sub_2CEA0

var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R7,LR}
MOV             R5, R1
LDR             R1, [R0]
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
MOV             R6, R2
MOV             R7, R3
CMP             R1, #0
BEQ             loc_2D068
LDRB            R3, [R1,#0x111]
MOV             R4, R0
CMP             R3, #0
BNE             loc_2CFE4
LDR             R3, [R1,#0xF0]
CMP             R3, #0
BNE             loc_2CFE4
LDRB            R3, [R1,#0x110]
CMP             R3, #0
BNE             loc_2CFE4
LDR             R3, [R1,#0x104]
CMP             R3, #0
BEQ             loc_2CF24
LDR             R2, [R3,#0x7C]
ADD             R2, R2, #1
STR             R2, [R3,#0x7C]
LDR             R2, [R1,#0x104]
LDR             R3, [R2,#0x40]
SUB             R3, R3, #1
STR             R3, [R2,#0x40]
LDR             R2, [R1,#0x104]
LDR             R3, [R2,#0x44]
SUB             R3, R3, #1
STR             R3, [R2,#0x44]

loc_2CF24
MOVW            R3, #:lower16:qword_73380
MOVW            R1, #:lower16:byte_68BD5
MOVT            R3, #:upper16:qword_73380
MOVT            R1, #:upper16:byte_68BD5
LDR             R2, [R3]
LDRB            R0, [R1]
LDR             R1, [R3,#(qword_73380+4 - 0x73380)]
ADDS            R2, R2, #1
STR             R2, [R3]
ADC             R2, R1, #0
CMP             R0, #0
STR             R2, [R3,#(qword_73380+4 - 0x73380)]
BEQ             loc_2CFC4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2CF94
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2CF94
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2CFC4

loc_2CF94
MOVW            R3, #:lower16:aDiscardedWork ; "Discarded work"
ADD             R12, SP, #0x80C+s
MOVT            R3, #:upper16:aDiscardedWork ; "Discarded work"
LDM             R3, {R0-R3} ; "Discarded work"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x80C+s
MOV             LR, R3,LSR#16
STRH            R3, [R12],#2
MOV             R2, #0
MOV             R0, #7
STRB            LR, [R12]
BL              sub_20F58

loc_2CFC4
MOV             R3, R7
MOV             R2, R6
MOV             R1, R5
MOV             R0, R4
BL              sub_2CBA8

loc_2CFD8
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_2CFE4
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2CFC4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D020
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2D050

loc_2D020
MOVW            R12, #:lower16:aDiscardedClone ; "Discarded cloned or rolled work"
ADD             LR, SP, #0x80C+s
MOVT            R12, #:upper16:aDiscardedClone ; "Discarded cloned or rolled work"
LDM             R12!, {R0-R3} ; "Discarded cloned or rolled work"
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; " or rolled work"
STM             LR, {R0-R3}
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_2CFC4

loc_2D050
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2CFC4
B               loc_2D020

loc_2D068
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D0A4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2D0A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2CFD8

loc_2D0A4
MOVW            R2, #:lower16:aDiscardWorkCal ; "Discard work called with NULL work from"...
STR             R7, [SP,#0x80C+var_808]
MOV             R3, R5
STR             R6, [SP,#0x80C+var_80C]
ADD             R0, SP, #0x80C+s ; s
MOVT            R2, #:upper16:aDiscardWorkCal ; "Discard work called with NULL work from"...
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
B               loc_2CFD8
; End of function sub_2CEA0




; int __fastcall sub_2D0D8(int result)
sub_2D0D8
PUSH            {R4-R6,LR}
MOV             LR, #dword_733CC
LDR             R5, [LR]
CMP             R5, #0
SUB             R6, R5, #1
BLE             loc_2D124
MOV             R3, #dword_744C8
LDR             R2, [R3]
ADD             R4, R2, R5,LSL#2

loc_2D104
LDR             R1, [R2],#4
LDR             R12, [R0,#4]
LDR             R3, [R1,#4]
CMP             R3, R12
SUB             R3, R3, #1
STRGT           R3, [R1,#4]
CMP             R2, R4
BNE             loc_2D104

loc_2D124
LDR             R2, [R0]
CMP             R2, R6
BGE             loc_2D158
MOV             R3, #dword_744C8
LDR             R1, [R3]
LDR             R1, [R1,R6,LSL#2]
STR             R2, [R1]
LDR             R3, [R3]
LDR             R2, [R0]
LDR             R1, [R3,R6,LSL#2]
STR             R1, [R3,R2,LSL#2]
LDR             R5, [LR]

loc_2D158
STR             R5, [R0]
MOV             R2, #1
LDR             R3, [LR]
STRB            R2, [R0,#0x69]
SUB             R3, R3, #1
STR             R3, [LR]
POP             {R4-R6,PC}
; End of function sub_2D0D8




; void __fastcall sub_2D174(FILE *s)
sub_2D174

var_24= -0x24
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R11,LR}
MOV             R5, R0
MOVW            R8, #:lower16:dword_733CC
MOVW            R0, #:lower16:aPools_0 ; "{\n\"pools\" : ["
MOV             R3, R5  ; s
SUB             SP, SP, #0x24
MOVT            R0, #:upper16:aPools_0 ; "{\n\"pools\" : ["
MOV             R2, #0xD ; n
MOV             R1, #1  ; size
MOVT            R8, #:upper16:dword_733CC
BL              fwrite
LDR             R3, [R8]
CMP             R3, #0
BLE             loc_2D384
MOVW            R7, #:lower16:(asc_4D5C4+4) ; ""
MOVW            R9, #:lower16:(aUserS+0x10) ; ","
MOVT            R7, #:upper16:(asc_4D5C4+4) ; ""
MOVT            R9, #:upper16:(aUserS+0x10) ; ","
MOV             R6, #0
B               loc_2D2A8

loc_2D1C4
LDR             R2, [R0,#0xB8]
CMP             R6, #0
MOVEQ           R11, R7
MOVNE           R11, R9
CMP             R2, #0
BEQ             loc_2D374
LDR             R0, [R0,#0xB4]
BL              sub_22B68
BL              sub_2AD7C
STR             R0, [SP,#0x24+var_8]
LDR             R0, [R4,#0xB8]
CMP             R0, #0
BEQ             loc_2D748
BL              sub_2AD7C
LDR             R1, [R4,#0xB8]
MOVW            R2, #:lower16:asc_4A4AC ; "|"
LDR             R3, [R4,#0x38]
MOVT            R2, #:upper16:asc_4A4AC ; "|"
MOV             R10, R0
CMP             R1, #0
MOVEQ           R2, R7

loc_2D218
LDR             R0, [R4,#0xA4]
STR             R2, [SP,#0x24+var_C]
STR             R3, [SP,#0x24+var_10]
BL              sub_2AD7C
LDR             R3, [SP,#0x24+var_10]
MOVW            R1, #:lower16:aSQuotaSSSDS ; "%s\n\t{\n\t\t\"quota\" : \"%s%s%s%d;%s"...
STR             R0, [SP,#0x24+var_18]
MOVT            R1, #:upper16:aSQuotaSSSDS ; "%s\n\t{\n\t\t\"quota\" : \"%s%s%s%d;%s"...
STR             R10, [SP,#0x24+var_24]
MOV             R0, R5  ; stream
STR             R3, [SP,#0x24+var_1C]
LDRD            R2, R3, [SP,#0x24+var_C]
STR             R2, [SP,#0x24+var_24+4]
MOV             R2, R11
BL              fprintf
LDRB            R3, [R4,#0x244]
CMP             R3, #0
BNE             loc_2D358

loc_2D260
LDR             R0, [R4,#0xAC]
ADD             R6, R6, #1
BL              sub_2AD7C
MOVW            R1, #:lower16:aUserS ; "\n\t\t\"user\" : \"%s\","
MOV             R2, R0
MOVT            R1, #:upper16:aUserS ; "\n\t\t\"user\" : \"%s\","
MOV             R0, R5  ; stream
BL              fprintf
LDR             R0, [R4,#0xB0]
BL              sub_2AD7C
MOVW            R1, #:lower16:aPassS ; "\n\t\t\"pass\" : \"%s\"\n\t}"
MOV             R2, R0
MOVT            R1, #:upper16:aPassS ; "\n\t\t\"pass\" : \"%s\"\n\t}"
MOV             R0, R5  ; stream
BL              fprintf
LDR             R3, [R8]
CMP             R3, R6
BLE             loc_2D384

loc_2D2A8
MOV             R0, R6
BL              sub_2B7BC
LDR             R3, [R0,#0x38]
MOV             R4, R0
CMP             R3, #1
BNE             loc_2D1C4
LDR             R3, [R0,#0xB8]
CMP             R6, #0
MOVEQ           R10, R7
MOVNE           R10, R9
CMP             R3, #0
BEQ             loc_2D6A4
LDR             R0, [R0,#0xB4]
BL              sub_22B68
BL              sub_2AD7C
STR             R0, [SP,#0x24+var_C]
LDR             R0, [R4,#0xB8]
CMP             R0, #0
MOVEQ           R11, R7
MOVEQ           R3, R7
BEQ             loc_2D318
BL              sub_2AD7C
LDR             R1, [R4,#0xB8]
MOV             R3, #asc_4A4AC ; "|"
MOV             R11, R0
CMP             R1, #0
MOVEQ           R3, R7

loc_2D318
LDR             R0, [R4,#0xA4]
STR             R3, [SP,#0x24+var_10]
BL              sub_2AD7C
LDR             R3, [SP,#0x24+var_10]
MOVW            R1, #:lower16:aSUrlSSSS ; "%s\n\t{\n\t\t\"url\" : \"%s%s%s%s\","
STR             R0, [SP,#0x24+var_1C]
MOV             R2, R10
STR             R11, [SP,#0x24+var_24]
MOVT            R1, #:upper16:aSUrlSSSS ; "%s\n\t{\n\t\t\"url\" : \"%s%s%s%s\","
STR             R3, [SP,#0x24+var_24+4]
MOV             R0, R5  ; stream
LDR             R3, [SP,#0x24+var_C]
BL              fprintf
LDRB            R3, [R4,#0x244]
CMP             R3, #0
BEQ             loc_2D260

loc_2D358
MOVW            R0, #:lower16:unk_51CDC
MOV             R3, R5  ; s
MOV             R2, #0x21 ; '!' ; n
MOV             R1, #1  ; size
MOVT            R0, #:upper16:unk_51CDC ; ptr
BL              fwrite
B               loc_2D260

loc_2D374
MOV             R10, R7
STR             R7, [SP,#0x24+var_8]
MOV             R2, R7
B               loc_2D218

loc_2D384
MOVW            R0, #:lower16:asc_51D28 ; "\n]\n"
MOVW            R4, #:lower16:off_67FE0 ; "--version-file"
MOV             R3, R5  ; s
MOVT            R0, #:upper16:asc_51D28 ; "\n]\n"
MOV             R2, #3  ; n
MOV             R1, #1  ; size
MOVT            R4, #:upper16:off_67FE0 ; "--version-file"
BL              fwrite
LDR             R3, [R4,#(dword_67FE4 - 0x67FE0)]
CMP             R3, #0x10
BEQ             loc_2D5E8
LDR             R9, =unk_68FE8
MOVW            R6, #:lower16:asc_4A4AC ; "|"
MOVW            R7, #:lower16:unk_76870
MOVW            R10, #:lower16:aSS_2 ; ",\n\"%s\" : \"%s\""
ADD             R4, R4, #0x1C
MOVT            R6, #:upper16:asc_4A4AC ; "|"
MOVT            R7, #:upper16:unk_76870
MOVT            R10, #:upper16:aSS_2 ; ",\n\"%s\" : \"%s\""

loc_2D3D0               ; s
LDR             R0, [R4,#-0x1C]
BL              __strdup
MOV             R1, R6  ; delim
MOV             R8, R0
BL              strtok
SUBS            R11, R0, #0
BNE             loc_2D52C
B               loc_2D5D0

loc_2D3F0
LDR             R2, [R4,#-0x10]
MOVW            R3, #:lower16:sub_40268
MOVW            R0, #:lower16:sub_2C234
MOVT            R3, #:upper16:sub_40268
MOVT            R0, #:upper16:sub_2C234
MOVW            R12, #:lower16:sub_2C264
CMP             R2, R0
CMPNE           R2, R3
MOVT            R12, #:upper16:sub_2C264
MOVEQ           R3, #1
MOVNE           R3, #0
MOVW            R0, #:lower16:sub_2C4C4
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_2C4C4
MOVW            R12, #:lower16:sub_2C494
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_2C494
MOVW            R0, #:lower16:sub_2C468
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_2C468
MOVW            R12, #:lower16:sub_2C43C
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_2C43C
MOVW            R0, #:lower16:sub_2C40C
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_2C40C
MOVW            R12, #:lower16:sub_2C3E0
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_2C3E0
MOVW            R0, #:lower16:sub_2C3B4
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_2C3B4
MOVW            R12, #:lower16:sub_2C388
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_2C388
MOVW            R0, #:lower16:sub_2C358
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_2C358
MOVW            R12, #:lower16:sub_2C328
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_2C328
MOVW            R0, #:lower16:sub_2C2F8
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_2C2F8
MOVW            R12, #:lower16:sub_2C2C8
CMP             R2, R0
ORREQ           R3, R3, #1
MOVT            R12, #:upper16:sub_2C2C8
MOVW            R0, #:lower16:sub_2C298
CMP             R2, R12
ORREQ           R3, R3, #1
MOVT            R0, #:upper16:sub_2C298
CMP             R2, R0
ORREQ           R3, R3, #1
CMP             R3, #0
BEQ             loc_2D660
LDR             R3, [R4,#-8]
MOVW            R1, #:lower16:aSD_1 ; ",\n\"%s\" : \"%d\""
ADD             R2, R11, #2
MOVT            R1, #:upper16:aSD_1 ; ",\n\"%s\" : \"%d\""
MOV             R0, R5  ; stream
LDR             R3, [R3]
BL              fprintf

loc_2D518               ; delim
MOV             R1, R6
MOV             R0, #0  ; s
BL              strtok
SUBS            R11, R0, #0
BEQ             loc_2D5D0

loc_2D52C
LDRB            R3, [R11,#1]
CMP             R3, #0x2D ; '-'
BNE             loc_2D518
LDR             R3, [R4,#-4]
CMP             R3, R7
BEQ             loc_2D518
LDR             R1, [R4,#-0x18]
TST             R1, #1
BEQ             loc_2D58C
LDR             R2, [R4,#-0x14]
MOVW            R3, #:lower16:sub_40068
MOVW            R0, #:lower16:sub_40088
MOVT            R3, #:upper16:sub_40068
MOVT            R0, #:upper16:sub_40088
SUB             R12, R2, R3
CMP             R2, R3
CMPNE           R2, R0
CLZ             R12, R12
MOV             R12, R12,LSR#5
BNE             loc_2D58C
LDR             R3, [R4,#-8]
LDRB            R3, [R3]
CMP             R3, R12
BEQ             loc_2D6B4

loc_2D58C
TST             R1, #2
BNE             loc_2D3F0

loc_2D594
TST             R1, #6
BEQ             loc_2D518
LDR             R3, [R4,#-8]
CMP             R3, R9
BEQ             loc_2D518
LDR             R0, [R3]
CMP             R0, #0
BEQ             loc_2D518
BL              sub_2AD7C
ADD             R2, R11, #2
MOV             R3, R0
MOV             R1, R10 ; format
MOV             R0, R5  ; stream
BL              fprintf
B               loc_2D518

loc_2D5D0               ; ptr
MOV             R0, R8
ADD             R4, R4, #0x1C
BL              free
LDR             R3, [R4,#-0x18]
CMP             R3, #0x10
BNE             loc_2D3D0

loc_2D5E8
MOV             R6, #byte_68BD8
LDR             R1, [R6,#(dword_68FD0 - 0x68BD8)] ; size
CMP             R1, #4
BEQ             loc_2D728

loc_2D5FC
CMP             R1, #3
BEQ             loc_2D708

loc_2D604
CMP             R1, #1
BEQ             loc_2D6EC

loc_2D60C
CMP             R1, #2
BEQ             loc_2D6CC

loc_2D614
MOVW            R0, #:lower16:asc_51DC4 ; "\n}\n"
MOV             R3, R5  ; s
MOVT            R0, #:upper16:asc_51DC4 ; ptr
MOV             R2, #3  ; n
MOV             R1, #1  ; size
BL              fwrite
LDR             R4, [R6,#(dword_68DF0 - 0x68BD8)]
MOV             R3, #0
STR             R3, [R6,#(dword_68DF0 - 0x68BD8)]
CMP             R4, R3
BEQ             loc_2D658

loc_2D640               ; ptr
LDM             R4, {R0,R5}
BL              free
MOV             R0, R4  ; ptr
BL              free
SUBS            R4, R5, #0
BNE             loc_2D640

loc_2D658
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_2D660
MOVW            R0, #:lower16:sub_2BEA0
MOVW            R3, #:lower16:sub_2BEF8
MOVT            R0, #:upper16:sub_2BEA0
MOVT            R3, #:upper16:sub_2BEF8
CMP             R2, R3
CMPNE           R2, R0
BNE             loc_2D594
LDR             R3, [R4,#-8]
MOVW            R1, #:lower16:aS1f ; ",\n\"%s\" : \"%.1f\""
ADD             R2, R11, #2
MOVT            R1, #:upper16:aS1f ; ",\n\"%s\" : \"%.1f\""
MOV             R0, R5  ; stream
VLDR            S14, [R3]
VCVT.F64.F32    D7, S14
VSTR            D7, [SP,#0x24+var_24]
BL              fprintf
B               loc_2D518

loc_2D6A4
MOV             R11, R7
STR             R7, [SP,#0x24+var_C]
MOV             R3, R7
B               loc_2D318

loc_2D6B4
MOVW            R1, #:lower16:aSTrue ; ",\n\"%s\" : true"
ADD             R2, R11, #2
MOVT            R1, #:upper16:aSTrue ; ",\n\"%s\" : true"
MOV             R0, R5  ; stream
BL              fprintf
B               loc_2D518

loc_2D6CC
MOVW            R3, #:lower16:dword_73464
MOVW            R1, #:lower16:aRotateD ; ",\n\"rotate\" : \"%d\""
MOVT            R3, #:upper16:dword_73464
MOVT            R1, #:upper16:aRotateD ; ",\n\"rotate\" : \"%d\""
LDR             R2, [R3]
MOV             R0, R5  ; stream
BL              fprintf
B               loc_2D614

loc_2D6EC
MOVW            R0, #:lower16:aRoundRobinTrue ; ",\n\"round-robin\" : true"
MOV             R3, R5  ; s
MOVT            R0, #:upper16:aRoundRobinTrue ; ",\n\"round-robin\" : true"
MOV             R2, #0x16 ; n
BL              fwrite
LDR             R1, [R6,#(dword_68FD0 - 0x68BD8)]
B               loc_2D60C

loc_2D708
MOVW            R0, #:lower16:aLoadBalanceTru ; ",\n\"load-balance\" : true"
MOV             R1, #1  ; size
MOV             R3, R5  ; s
MOVT            R0, #:upper16:aLoadBalanceTru ; ",\n\"load-balance\" : true"
MOV             R2, #0x17 ; n
BL              fwrite
LDR             R1, [R6,#(dword_68FD0 - 0x68BD8)]
B               loc_2D604

loc_2D728
MOVW            R0, #:lower16:aBalanceTrue ; ",\n\"balance\" : true"
MOV             R1, #1  ; size
MOV             R3, R5  ; s
MOVT            R0, #:upper16:aBalanceTrue ; ",\n\"balance\" : true"
MOV             R2, #0x12 ; n
BL              fwrite
LDR             R1, [R6,#(dword_68FD0 - 0x68BD8)]
B               loc_2D5FC

loc_2D748
LDR             R3, [R4,#0x38]
MOV             R10, R7
MOV             R2, R7
B               loc_2D218
; End of function sub_2D174

off_2D758 DCD unk_68FE8



; int sub_2D75C()
sub_2D75C

var_C= -0xC

PUSH            {R4,R5,LR}
MOV             R3, #0
LDR             R12, =dword_68FF8
MOVW            R1, #:lower16:off_67FE0 ; "--version-file"
MOV             R5, R3
SUB             SP, SP, #0xC
LDR             LR, =dword_68728
MOVT            R1, #:upper16:off_67FE0 ; "--version-file"
STR             R3, [SP,#0xC+var_C] ; int
MOV             R0, R3  ; int
STR             R3, [R1,#(dword_68728 - 0x67FE0)]
MOV             R1, R3  ; int
STR             R3, [LR,#(dword_6872C - 0x68728)]
MOV             R2, LR  ; s
MOV             R3, #8  ; maxlen
STR             R5, [R12,#(qword_68FF0 - 0x68FF8)]
STR             R5, [R12,#(qword_68FF0+4 - 0x68FF8)]
BL              sub_2AEF8
MOV             R3, #dword_733CC
LDR             R12, [R3]
CMP             R12, R5
BLE             loc_2D7E4
MOVW            R3, #:lower16:dword_744C8
MOV             R0, R5
MOVT            R3, #:upper16:dword_744C8
MOV             R1, R5
LDR             R2, [R3]
ADD             R12, R2, R12,LSL#2

loc_2D7D0
LDR             R3, [R2],#4
CMP             R2, R12
STR             R0, [R3,#0x170]
STR             R1, [R3,#0x174]
BNE             loc_2D7D0

loc_2D7E4
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_2D75C

off_2D7EC DCD dword_68FF8
off_2D7F0 DCD dword_68728



; char *__fastcall sub_2D7F4(char *)
sub_2D7F4
MOVW            R3, #:lower16:dword_73478
PUSH            {R4,LR}
MOVT            R3, #:upper16:dword_73478
MOV             R4, R0
LDR             R1, [R3] ; src
CMP             R1, #0
BEQ             loc_2D81C
LDRB            R3, [R1]
CMP             R3, #0
BNE             loc_2D8BC

loc_2D81C
MOV             R0, #aHome ; "HOME"
BL              getenv
CMP             R0, #0
BEQ             loc_2D848
MOV             R0, #aHome ; "HOME"
BL              getenv
LDRB            R3, [R0]
CMP             R3, #0
BNE             loc_2D8C4

loc_2D848
MOV             R3, #0
STRB            R3, [R4]

loc_2D850               ; s
MOV             R0, R4
BL              strlen
MOVW            R3, #:lower16:unk_51DD0
ADD             R2, R4, R0
MOVT            R3, #:upper16:unk_51DD0
MOV             R12, R0
LDM             R3!, {R0,R1}
LDRH            R3, [R3]
STR             R0, [R4,R12]
MOV             R0, R4  ; path
STR             R1, [R2,#4]
MOVW            R1, #0x1FF ; mode
STRH            R3, [R2,#8]
BL              mkdir
MOV             R0, R4  ; s
BL              strlen
MOVW            R3, #:lower16:aBmminerConf ; "bmminer.conf"
ADD             R12, R4, R0
MOVT            R3, #:upper16:aBmminerConf ; "bmminer.conf"
MOV             LR, R0
LDM             R3!, {R0-R2} ; "bmminer.conf"
LDRB            R3, [R3] ; ""
STR             R0, [R4,LR]
STR             R1, [R12,#4]
STRB            R3, [R12,#0xC]
STR             R2, [R12,#8]
POP             {R4,PC}

loc_2D8BC
POP             {R4,LR}
B               strcpy

loc_2D8C4
MOV             R0, #aHome ; "HOME"
BL              getenv
MOV             R1, R0
MOV             R0, R4
BL              stpcpy
MOV             R3, #word_51DD8
LDRH            R3, [R3]
STRH            R3, [R0]
B               loc_2D850
; End of function sub_2D7F4




; void sub_2D8F0()
sub_2D8F0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
PUSH            {R4,LR}
MOVW            R3, #0x865
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R0, #0x1000
MOVW            R4, #:lower16:byte_68BD8
LDR             R2, =aLoadDefaultCon ; "load_default_config"
MOVT            R4, #:upper16:byte_68BD8
BL              sub_229BC
STR             R0, [R4,#(dword_68EF4 - 0x68BD8)]
BL              sub_2D7F4
MOV             R1, #4  ; type
LDR             R0, [R4,#(dword_68EF4 - 0x68BD8)] ; name
BL              access
SUBS            R1, R0, #0
LDR             R0, [R4,#(dword_68EF4 - 0x68BD8)] ; ptr
BEQ             loc_2D944
BL              free
MOV             R3, #0
STR             R3, [R4,#(dword_68EF4 - 0x68BD8)]
POP             {R4,PC}

loc_2D944
POP             {R4,LR}
B               sub_2B890
; End of function sub_2D8F0

off_2D94C DCD aLoadDefaultCon ; "load_default_config"



; void __fastcall sub_2D950(void *)
sub_2D950

var_824= -0x824
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

VCMP.F64        D0, #0.0
VMRS            APSR_nzcv, FPSCR
PUSH            {R4-R11,LR}
MOV             R5, R0
VPUSH           {D8}
SUB             SP, SP, #0x820
SUB             SP, SP, #0xC
BEQ             loc_2DAE4
VLDR            D6, =2.69595353e67
VLDR            D7, =1.59309191e-58
VDIV.F64        D8, D6, D0
VMUL.F64        D7, D8, D7
VMOV            R0, R1, D7
BLX             __fixunsdfdi
MOV             R6, R0
MOV             R7, R1
BLX             sub_4A10C
VLDR            D6, =6.27710174e57
VMOV            D5, R0, R1
VLDR            D7, =2.93873588e-39
VMLS.F64        D8, D5, D6
VMUL.F64        D7, D8, D7
VMOV            R0, R1, D7
BLX             __fixunsdfdi
MOV             R11, R0
MOV             R10, R1
BLX             sub_4A10C
VLDR            D6, =3.40282367e38
VMOV            D5, R0, R1
VLDR            D7, =5.42101086e-20
VMLS.F64        D8, D5, D6
VMUL.F64        D7, D8, D7
VMOV            R0, R1, D7
BLX             __fixunsdfdi
MOV             R9, R0
MOV             R8, R1
BLX             sub_4A10C
VLDR            D7, =1.84467441e19
VMOV            D6, R0, R1
VMLS.F64        D8, D6, D7
VMOV            R0, R1, D8
BLX             __fixunsdfdi

loc_2D9F8
MOVW            R4, #:lower16:byte_68BD5
STRD            R6, R7, [SP,#0x82C+var_80C]
MOVT            R4, #:upper16:byte_68BD5
STR             R11, [SP,#0x82C+var_814]
LDRB            R3, [R4]
STR             R10, [SP,#0x82C+var_810]
STR             R9, [SP,#0x82C+var_81C]
CMP             R3, #0
STR             R8, [SP,#0x82C+var_818]
STRD            R0, R1, [SP,#0x82C+var_824]
BNE             loc_2DA58

loc_2DA24
LDR             R2, =aSetTarget ; "set_target"
MOVW            R12, #0x207C
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
ADD             R1, SP, #0x82C+var_824
MOV             R0, R5
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R2,R12}
MOV             R2, #0x20 ; ' '
BL              sub_254E8
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_2DA58
MOV             R1, #0x20 ; ' '
ADD             R0, SP, #0x82C+var_824
BL              sub_22C24
LDRB            R3, [R4]
MOV             R6, R0
CMP             R3, #0
BEQ             loc_2DAD8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2DAB0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2DAB0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2DAD8

loc_2DAB0
MOVW            R2, #:lower16:aGeneratedTarge ; "Generated target %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aGeneratedTarge ; "Generated target %s"
ADD             R0, SP, #0x82C+s ; s
MOV             R3, R6
BL              snprintf
ADD             R1, SP, #0x82C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_2DAD8               ; ptr
MOV             R0, R6
BL              free
B               loc_2DA24

loc_2DAE4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2DB48
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2DB48
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_2DB48
MOV             R0, #0
MOV             R6, #0
MOV             R1, R0
MOV             R9, R0
MOV             R11, R0
MOV             R8, R0
MOV             R10, R0
MOVT            R6, #0xFFFF
MOV             R7, #0
B               loc_2D9F8

loc_2DB48
MOVW            LR, #:lower16:aDiffZeroPassed ; "Diff zero passed to set_target"
ADD             R12, SP, #0x82C+s
MOVT            LR, #:upper16:aDiffZeroPassed ; "Diff zero passed to set_target"
MOV             R6, #0
LDM             LR!, {R0-R3} ; "Diff zero passed to set_target"
MOVT            R6, #0xFFFF
MOV             R7, #0
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " to set_target"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x82C+s
MOV             LR, R3,LSR#16
MOV             R0, #3
MOV             R2, #0
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_20F58
MOV             R0, #0
MOV             R1, R0
MOV             R9, R0
MOV             R11, R0
MOV             R8, R0
MOV             R10, R0
B               loc_2D9F8
; End of function sub_2D950

dbl_2DBA8 DCFD 2.69595353e67
dbl_2DBB0 DCFD 1.59309191e-58
dbl_2DBB8 DCFD 6.27710174e57
dbl_2DBC0 DCFD 2.93873588e-39
dbl_2DBC8 DCFD 3.40282367e38
dbl_2DBD0 DCFD 5.42101086e-20
dbl_2DBD8 DCFD 1.84467441e19
off_2DBE0 DCD aSetTarget ; "set_target"



; int __fastcall sub_2DBE4(int)
sub_2DBE4
MOVW            R3, #:lower16:dword_744A0
LDR             R2, [R0,#0xE8]
MOVT            R3, #:upper16:dword_744A0
LDR             R0, [R3]
SUB             R0, R0, R2
BX              LR
; End of function sub_2DBE4




; bool __fastcall sub_2DBFC(int, int)
sub_2DBFC
PUSH            {R4,LR}
MOV             R4, R0
STR             R1, [R0,#0x4C]
BL              sub_2B350
LDR             R0, [R4,#0xDC]
CLZ             R0, R0
MOV             R0, R0,LSR#5
POP             {R4,PC}
; End of function sub_2DBFC




; bool __fastcall sub_2DC1C(int, int)
sub_2DC1C
PUSH            {R4,LR}
MOV             R4, R0
VPUSH           {D8}
STR             R1, [R0,#0x4C]
VMOV.F64        D8, D0
BL              sub_2B350
VLDR            D7, =4.29490176e9
VDIV.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             __fixunsdfdi
LDRD            R2, R3, [R4,#0xD8]
VPOP            {D8}
CMP             R3, R1
CMPEQ           R2, R0
MOVLS           R0, #1
MOVHI           R0, #0
POP             {R4,PC}
; End of function sub_2DC1C

dbl_2DC60 DCFD 4.29490176e9



; int __fastcall sub_2DC68(int, int)
sub_2DC68

var_810= -0x810
s= -0x808

LDR             R3, [R0,#0x24]
LDR             R2, [R3,#0xEC]
CMP             R2, R1
BEQ             loc_2DC84
MOV             R0, #1
STR             R1, [R3,#0xEC]
BX              LR

loc_2DC84
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_2DCC0
MOV             R2, #byte_68BD4
LDRB            R0, [R2]
CMP             R0, #0
BNE             loc_2DCC0
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #5
BXLE            LR

loc_2DCC0
PUSH            {LR}
SUB             SP, SP, #0x800
LDMIB           R3, {R1,R12}
SUB             SP, SP, #0xC
MOVW            R2, #:lower16:aSDDuplicateSha ; "%s %d duplicate share detected as HW er"...
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aSDDuplicateSha ; "%s %d duplicate share detected as HW er"...
LDR             R3, [R1,#8]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2DC68




; void __fastcall sub_2DD0C(int *, int)
sub_2DD0C

var_4B4= -0x4B4
var_4B0= -0x4B0
ptr= -0x4A8
var_4A4= -0x4A4
var_484= -0x484
var_478= -0x478
var_474= -0x474
var_464= -0x464
var_444= -0x444
s= -0x404

PUSH            {R4-R11,LR}
MOV             R4, #byte_68BD8
SUB             SP, SP, #0x4B0
SUB             SP, SP, #4
MOV             R5, R0
LDR             R3, [R4,#(dword_68FF8 - 0x68BD8)]
MOV             R9, R1
CMP             R3, #0
BEQ             loc_2DFA4

loc_2DD34               ; n
MOV             R2, #0x400
ADD             R0, SP, #0x4B4+s ; s
MOV             R1, #0  ; c
ADD             R6, SP, #0x4B4+var_444
BL              memset
ADD             R7, R5, #0x40 ; '@'
MOV             R12, R5
MOV             R2, #0
ADD             R3, SP, #0x4B4+var_474
STR             R2, [SP,#0x4B4+var_478]
STR             R2, [R3],#-4
STR             R2, [R3,#8]
STR             R2, [R3,#0xC]
STR             R2, [R3,#0x10]

loc_2DD6C
LDR             R0, [R12]
ADD             R12, R12, #0x10
LDR             R1, [R12,#-0xC]
MOV             LR, R6
LDR             R2, [R12,#-8]
ADD             R6, R6, #0x10
LDR             R3, [R12,#-4]
CMP             R12, R7
STM             LR!, {R0-R3}
BNE             loc_2DD6C
MOV             R8, R5
ADD             R6, SP, #0x4B4+var_4A4
MOV             R7, R5
ADD             R10, SP, #0x4B4+var_484
LDR             R0, [R8,#0x80]!
ADD             LR, SP, #0x4B4+var_464
LDR             R1, [R8,#4]
LDR             R2, [R8,#8]
LDR             R3, [R8,#0xC]
STM             R6!, {R0-R3}
LDR             R0, [R8,#0x10]
LDR             R1, [R8,#0x14]
LDR             R2, [R8,#0x18]
LDR             R3, [R8,#0x1C]
STM             R6!, {R0-R3}
LDR             R0, [R12]
LDR             R1, [R12,#4]
LDR             R2, [R12,#8]
STM             R10!, {R0-R2}
LDR             R0, [R7,#0xC0]!
LDR             R1, [R7,#4]
LDR             R3, [R7,#0xC]
LDR             R2, [R7,#8]
STM             LR!, {R0-R3}
LDR             R0, [R7,#0x10]
LDR             R1, [R7,#0x14]
LDR             R2, [R7,#0x18]
LDR             R3, [R7,#0x1C]
STM             LR!, {R0-R3}
MOV             R1, #0x40 ; '@'
ADD             R0, SP, #0x4B4+var_444
BL              sub_29EF4
ADD             R0, SP, #0x4B4+var_4A4
MOV             R1, #0x20 ; ' '
BL              sub_29EF4
ADD             R0, SP, #0x4B4+var_484
MOV             R1, #0xC
BL              sub_29EF4
ADD             R0, SP, #0x4B4+var_464
MOV             R1, #0x20 ; ' '
BL              sub_29EF4
MOV             R1, #0x80
MOV             R0, R5
BL              sub_22C24
ADD             R2, SP, #0x4B4+var_444
STR             R0, [SP,#0x4B4+ptr]
MOV             R1, #0x40 ; '@'
MOV             R0, R2
BL              sub_22C24
ADD             R2, SP, #0x4B4+var_4A4
MOV             R1, #0x20 ; ' '
MOV             R11, R0
MOV             R0, R2
BL              sub_22C24
ADD             R2, SP, #0x4B4+var_484
MOV             R8, R0
MOV             R1, #0xC
MOV             R0, R2
BL              sub_22C24
MOV             R1, #4
MOV             R7, R0
MOV             R0, R9
BL              sub_22C24
MOV             R1, #5
MOV             R6, R0
MOV             R0, R9
BL              sub_22C24
ADD             R2, SP, #0x4B4+var_464
MOV             R1, #0x20 ; ' '
MOV             R10, R0
MOV             R0, R2
BL              sub_22C24
MOV             R1, #4
MOV             R9, R0
ADD             R0, R5, #0x1BC
BL              sub_22C24
ADD             R2, SP, #0x4B4+s
MOV             R5, R0
MOVW            R1, #:lower16:aMidstateSDataS_0 ; "midstate %s data %s nonce %s version %s"...
MOV             R3, R7
MOVT            R1, #:upper16:aMidstateSDataS_0 ; "midstate %s data %s nonce %s version %s"...
MOV             R0, R2  ; s
STR             R6, [SP,#0x4B4+var_4B4]
MOV             R2, R8
STR             R5, [SP,#0x4B4+var_4B0]
BL              sprintf
ADD             R2, SP, #0x4B4+s
MOV             R0, R2  ; s
BL              strlen
ADD             R12, SP, #0x4B4+s
MOV             R1, R0  ; size
LDR             R3, [R4,#(dword_68FF8 - 0x68BD8)] ; s
MOV             R2, #1  ; n
MOV             R0, R12 ; ptr
BL              fwrite
LDR             R0, [R4,#(dword_68FF8 - 0x68BD8)] ; stream
BL              fflush
LDR             R0, [SP,#0x4B4+ptr] ; ptr
CMP             R0, #0
BEQ             loc_2DF28
BL              free

loc_2DF28
CMP             R11, #0
BEQ             loc_2DF38
MOV             R0, R11 ; ptr
BL              free

loc_2DF38
CMP             R8, #0
BEQ             loc_2DF48
MOV             R0, R8  ; ptr
BL              free

loc_2DF48
CMP             R7, #0
BEQ             loc_2DF58
MOV             R0, R7  ; ptr
BL              free

loc_2DF58
CMP             R6, #0
BEQ             loc_2DF68
MOV             R0, R6  ; ptr
BL              free

loc_2DF68
CMP             R10, #0
BEQ             loc_2DF78
MOV             R0, R10 ; ptr
BL              free

loc_2DF78
CMP             R9, #0
BEQ             loc_2DF88
MOV             R0, R9  ; ptr
BL              free

loc_2DF88
CMP             R5, #0
BEQ             loc_2DF98
MOV             R0, R5  ; ptr
BL              free

loc_2DF98
ADD             SP, SP, #0x4B0
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2DFA4
MOVW            R1, #:lower16:aWb ; "wb"
MOVW            R0, #:lower16:aNvdataWorklogT ; "/nvdata/worklog.txt"
MOVT            R1, #:upper16:aWb ; "wb"
MOVT            R0, #:upper16:aNvdataWorklogT ; "/nvdata/worklog.txt"
BL              fopen64
STR             R0, [R4,#(dword_68FF8 - 0x68BD8)]
B               loc_2DD34
; End of function sub_2DD0C




; void __fastcall sub_2DFC0(int *, unsigned int)
sub_2DFC0

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {LR}
SUB             SP, SP, #0xC
REV             R3, R1
ADD             R1, SP, #0xC+var_4
STR             R3, [R1,#-8]!
MOV             R3, #0
STRB            R3, [SP,#0xC+var_8]
BL              sub_2DD0C
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_2DFC0




; int __fastcall sub_2DFE8(int *, unsigned int)
sub_2DFE8

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R4,R5,LR}
MOV             R4, R0
STR             R1, [R0,#0x4C]
SUB             SP, SP, #0xC
MOV             R5, R1
BL              sub_2B350
LDR             R3, [R4,#0xDC]
CMP             R3, #0
MOVNE           R0, #0
BNE             loc_2E02C
ADD             R1, SP, #0xC+var_4
REV             R5, R5
MOV             R0, R4
STR             R5, [R1,#-8]!
STRB            R3, [SP,#0xC+var_8]
BL              sub_2DD0C
MOV             R0, #1

loc_2E02C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_2DFE8




; void __fastcall sub_2E034(int, int)
sub_2E034

var_8= -8

PUSH            {R4-R11,LR}
MOV             R9, R1
LDR             R2, [R0,#0x168]
MOV             R4, R0
ADD             LR, R9, #0x154
MOV             R0, #0x112410D
MOVW            R1, #0xF76D
ADD             R2, R2, #1
MOVT            R1, #7
STR             R2, [R4,#0x168]
MOVW            R3, #0xBAC6
LDRB            R5, [R9,#0x154]
MOVT            R3, #0x9F49
LDRB            R12, [R9,#0x157]
MOVW            R2, #0xBEF3
STR             LR, [R9,#0x16C]
MOV             LR, #4
STR             LR, [R9,#0x170]
ADD             R0, R5, R0
LDRB            LR, [R9,#0x156]
MOVT            R2, #0xFEED
ADD             R0, R0, R12,LSL#24
LDRB            R12, [R9,#0x155]
SUB             SP, SP, #0xC
ADD             R0, R0, LR,LSL#16
ADD             R0, R0, R12,LSL#8
EOR             R1, R1, R0
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSL#8
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSR#13
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#12
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSL#16
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSR#5
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#3
SUB             R3, R3, R1
SUB             R5, R2, R1
EOR             R3, R3, R1,LSL#10
SUB             R5, R5, R3
EOR             R5, R5, R3,LSR#15
STR             R5, [R9,#0x174]
LDR             R6, [R4,#0x160]
CMP             R6, #0
BEQ             loc_2E3A4
LDR             R3, [R6,#0x158]
MOV             R2, #0
STR             R2, [R9,#0x160]
ADD             R1, R9, #0x158
STR             R3, [R9,#0x158]
LDR             R3, [R4,#0x160]
LDR             R2, [R3,#0x158]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R9,#0x15C]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0x10]
STR             R9, [R3,#8]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
STR             R1, [R3,#0x10]

loc_2E158
LDR             R3, [R4,#0x160]
MOV             R0, #0
LDR             R2, [R3,#0x158]
LDR             R3, [R2,#0xC]
ADD             R3, R3, #1
STR             R3, [R2,#0xC]
LDR             R3, [R4,#0x160]
LDR             R2, [R3,#0x158]
LDRD            R2, R3, [R2]
SUB             R3, R3, #1
AND             R5, R5, R3
ADD             R5, R5, R5,LSL#1
MOV             R5, R5,LSL#2
ADD             R3, R2, R5
LDR             R2, [R3,#4]
ADD             R2, R2, #1
STR             R2, [R3,#4]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3]
LDR             R3, [R3,R5]
STR             R0, [R9,#0x164]
STR             R3, [R9,#0x168]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3]
LDR             R2, [R3,R5]
ADD             R3, R3, R5
CMP             R2, R0
STRNE           R1, [R2,#0xC]
LDRNE           R3, [R4,#0x160]
LDRNE           R3, [R3,#0x158]
LDRNE           R3, [R3]
ADDNE           R3, R3, R5
STR             R1, [R3]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3]
ADD             R5, R3, R5
LDRD            R2, R3, [R5,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_2E39C
LDR             R4, [R9,#0x158]
LDR             R3, [R4,#0x24]
CMP             R3, #1
BEQ             loc_2E39C
LDR             R0, [R4,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R6, R0, #0
BEQ             loc_2E464
LDR             R3, [R4,#4]
MOV             R7, #0
LDR             R1, [R4,#0xC]
LDR             R2, [R4,#8]
MOV             R3, R3,LSL#1
ADD             R2, R2, #1
SUB             R3, R3, #1
TST             R3, R1
MOVNE           R3, #1
MOVEQ           R3, R7
ADD             R3, R3, R1,LSR R2
STR             R3, [R4,#0x18]
LDR             R3, [R9,#0x158]
STR             R7, [R3,#0x1C]
LDR             R3, [R9,#0x158]
LDR             R4, [R3,#4]
CMP             R4, R7
BEQ             loc_2E338
MOV             R10, R7
STR             R7, [SP,#0xC+var_8]

loc_2E284
LDR             R2, [R3]
LDR             R5, [R2,R7]
CMP             R5, #0
BNE             loc_2E2A0
B               loc_2E320

loc_2E298
LDR             R4, [R3,#4]
MOV             R5, R11

loc_2E2A0
LDR             R2, [R5,#0x1C]
MOV             R4, R4,LSL#1
LDR             R11, [R5,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R2
ADD             R4, R4, R4,LSL#1
ADD             R8, R6, R4,LSL#2
LDR             R1, [R8,#4]
ADD             R1, R1, #1
STR             R1, [R8,#4]
LDR             R0, [R3,#0x18]
CMP             R1, R0
BLS             loc_2E2F4
LDR             R1, [R3,#0x1C]
ADD             R1, R1, #1
STR             R1, [R3,#0x1C]
LDR             R3, [R9,#0x158]
LDR             R0, [R8,#4]
LDR             R1, [R3,#0x18]
BLX             __udivsi3
STR             R0, [R8,#8]

loc_2E2F4
STR             R10, [R5,#0xC]
LDR             R3, [R6,R4,LSL#2]
STR             R3, [R5,#0x10]
LDR             R3, [R6,R4,LSL#2]
CMP             R3, #0
STRNE           R5, [R3,#0xC]
CMP             R11, #0
STR             R5, [R6,R4,LSL#2]
LDR             R3, [R9,#0x158]
BNE             loc_2E298
LDR             R4, [R3,#4]

loc_2E320
LDR             R2, [SP,#0xC+var_8]
ADD             R7, R7, #0xC
ADD             R2, R2, #1
CMP             R2, R4
STR             R2, [SP,#0xC+var_8]
BCC             loc_2E284

loc_2E338               ; ptr
LDR             R0, [R3]
BL              free
LDR             R2, [R9,#0x158]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R9,#0x158]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R9,#0x158]
STR             R6, [R3]
LDR             R3, [R9,#0x158]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R9,#0x158]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]

loc_2E39C
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_2E3A4
STR             R6, [R9,#0x160]
MOV             R0, #0x2C ; ',' ; size
STR             R6, [R9,#0x15C]
STR             R9, [R4,#0x160]
BL              malloc
STR             R0, [R9,#0x158]
LDR             R3, [R4,#0x160]
LDR             R0, [R3,#0x158] ; s
CMP             R0, #0
BEQ             loc_2E464
MOV             R2, #0x2C ; ',' ; n
MOV             R1, R6  ; c
BL              memset
LDR             R3, [R4,#0x160]
MOV             R12, #0x20 ; ' '
MOV             R1, #5
MOV             R2, #0x158
MOV             R0, #0x180 ; size
LDR             LR, [R3,#0x158]!
STR             R3, [LR,#0x10]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
STR             R12, [R3,#4]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
STR             R1, [R3,#8]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
STR             R2, [R3,#0x14]
LDR             R3, [R4,#0x160]
LDR             R7, [R3,#0x158]
BL              malloc
STR             R0, [R7]
LDR             R3, [R4,#0x160]
LDR             R3, [R3,#0x158]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_2E464
MOV             R1, R6  ; c
MOV             R2, #0x180 ; n
BL              memset
LDR             R2, [R4,#0x160]
MOV             R3, #0xA0111FE1
ADD             R1, R9, #0x158
LDR             R2, [R2,#0x158]
STR             R3, [R2,#0x28]
B               loc_2E158

loc_2E464               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_2E034




; int __fastcall sub_2E46C(int, void *s2, size_t n, const void *, int, size_t na)
sub_2E46C

arg_0=  0x20
n=  0x24

PUSH            {R4-R10,LR}
SUBS            R5, R0, #0
LDR             R9, [SP,#arg_0]
BEQ             loc_2E4D0
LDR             R4, [R5,#0x160]
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3

loc_2E48C               ; n
MOV             R2, R7
MOV             R1, R6  ; s2
ADD             R0, R5, #0x80 ; s1
BL              memcmp
CMP             R0, #0
LDR             R2, [SP,#n] ; n
MOV             R1, R8  ; s2
ADD             R0, R5, R9 ; s1
BNE             loc_2E4BC
BL              memcmp
CMP             R0, #0
BEQ             loc_2E4D0

loc_2E4BC
CMP             R4, #0
MOV             R5, R4
BEQ             loc_2E4D4
LDR             R4, [R4,#0x160]
B               loc_2E48C

loc_2E4D0
MOV             R4, R5

loc_2E4D4
MOV             R0, R4
POP             {R4-R10,PC}
; End of function sub_2E46C




; int __fastcall sub_2E4DC(int result, int)
sub_2E4DC
CMP             R0, #0
BXEQ            LR
LDR             R2, [R0,#0x154]
LDR             R3, [R0,#0x160]
CMP             R1, R2
BXEQ            LR
CMP             R3, #0
LDRNE           R0, [R3,#0x160]
BNE             loc_2E514
B               loc_2E520

loc_2E504
CMP             R0, #0
MOV             R3, R0
BXEQ            LR
LDR             R0, [R0,#0x160]

loc_2E514
LDR             R2, [R3,#0x154]
CMP             R2, R1
BNE             loc_2E504

loc_2E520
MOV             R0, R3
BX              LR
; End of function sub_2E4DC




; void __fastcall sub_2E528(int, _DWORD *)
sub_2E528
PUSH            {R4-R6,LR}
LDR             R3, [R0,#0x168]
LDR             R12, [R0,#0x160]
SUB             R3, R3, #1
STR             R3, [R0,#0x168]
LDR             R2, [R1,#0x15C]
CMP             R2, #0
BEQ             loc_2E640
LDR             LR, [R12,#0x158]
ADD             R12, R1, #0x158
LDR             R3, [LR,#0x14]
LDR             R4, [LR,#0x10]
SUB             R4, R4, R3
CMP             R1, R4
BEQ             loc_2E61C

loc_2E564
LDR             LR, [R1,#0x160]
ADD             R3, R2, R3
STR             LR, [R3,#8]
LDR             R4, [R0,#0x160]

loc_2E574
LDR             R3, [R1,#0x160]
LDR             R2, [R4,#0x158]
CMP             R3, #0
BEQ             loc_2E59C
LDR             LR, [R2,#0x14]
LDR             R2, [R1,#0x15C]
ADD             R3, R3, LR
STR             R2, [R3,#4]
LDR             R3, [R0,#0x160]
LDR             R2, [R3,#0x158]

loc_2E59C
LDR             R3, [R2,#4]
LDR             LR, [R1,#0x174]
LDR             R2, [R2]
SUB             R3, R3, #1
AND             R3, R3, LR
ADD             R3, R3, R3,LSL#1
MOV             R3, R3,LSL#2
ADD             R2, R2, R3
LDR             LR, [R2,#4]
SUB             LR, LR, #1
STR             LR, [R2,#4]
LDR             R2, [R0,#0x160]
LDR             R2, [R2,#0x158]
LDR             R2, [R2]
LDR             LR, [R2,R3]
CMP             LR, R12
LDREQ           R12, [R1,#0x168]
STREQ           R12, [R2,R3]
LDR             R2, [R1,#0x164]
LDR             R3, [R1,#0x168]
CMP             R2, #0
STRNE           R3, [R2,#0x10]
LDRNE           R3, [R1,#0x168]
CMP             R3, #0
LDRNE           R2, [R1,#0x164]
STRNE           R2, [R3,#0xC]
LDR             R3, [R0,#0x160]
LDR             R2, [R3,#0x158]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]
POP             {R4-R6,PC}

loc_2E61C
ADD             R3, R2, R3
STR             R3, [LR,#0x10]
LDR             R2, [R1,#0x15C]
CMP             R2, #0
BEQ             loc_2E690
LDR             R3, [R0,#0x160]
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0x14]
B               loc_2E564

loc_2E640
LDR             R4, [R1,#0x160]
LDR             LR, [R12,#0x158]
CMP             R4, #0
BEQ             loc_2E670
LDR             R3, [LR,#0x14]
ADD             R12, R1, #0x158
LDR             R5, [LR,#0x10]
SUB             R5, R5, R3
CMP             R1, R5
BEQ             loc_2E61C

loc_2E668
STR             R4, [R0,#0x160]
B               loc_2E574

loc_2E670
MOV             R5, R0
LDR             R0, [LR] ; ptr
BL              free
LDR             R3, [R5,#0x160]
LDR             R0, [R3,#0x158] ; ptr
BL              free
STR             R4, [R5,#0x160]
POP             {R4-R6,PC}

loc_2E690
LDR             R4, [R1,#0x160]
B               loc_2E668
; End of function sub_2E528




; int __fastcall sub_2E698(int result)
sub_2E698
LDR             R2, [R0,#0x20]
CMP             R2, #1
BXEQ            LR
LDR             R3, [R0,#4]
LDR             R3, [R3,#0x10]
BX              R3
; End of function sub_2E698



; Attributes: noreturn

; void __fastcall __noreturn sub_2E6B0(int, int)
sub_2E6B0

newthread= -8

PUSH            {LR}
MOV             R3, #0  ; arg
SUB             SP, SP, #0xC
MOVW            R2, #:lower16:sub_2B63C
MOV             R5, R0
MOV             R4, R1
MOVT            R2, #:upper16:sub_2B63C ; start_routine
MOV             R1, R3  ; attr
ADD             R0, SP, #0xC+newthread ; newthread
BL              pthread_create
CMP             R0, #0
BNE             loc_2E728
CMP             R4, #0
BNE             loc_2E720

loc_2E6E8
MOV             R4, #byte_68BD8
LDR             R0, [R4,#(dword_68FFC - 0x68BD8)] ; pid
CMP             R0, #0
BGT             loc_2E70C

loc_2E6FC               ; th
LDR             R0, [SP,#0xC+newthread]
BL              pthread_cancel
MOV             R0, R5  ; status
BL              exit

loc_2E70C               ; sig
MOV             R1, #0xF
BL              kill
MOV             R3, #0
STR             R3, [R4,#(dword_68FFC - 0x68BD8)]
B               loc_2E6FC

loc_2E720
BL              sub_3189C
B               loc_2E6E8

loc_2E728               ; status
MOV             R0, #1
BL              exit
; End of function sub_2E6B0



; Attributes: noreturn

; void __noreturn sub_2E730()
sub_2E730

var_804= -0x804

PUSH            {LR}
MOVW            R0, #:lower16:sub_31ECC
SUB             SP, SP, #0x800
MOVW            R2, #0x1388
SUB             SP, SP, #4
MOV             R1, #0
MOVT            R0, #:upper16:sub_31ECC
BL              sub_2541C
MOVW            LR, #:lower16:aShutdownSignal ; "Shutdown signal received."
MOV             R12, SP
MOVT            LR, #:upper16:aShutdownSignal ; "Shutdown signal received."
LDM             LR!, {R0-R3} ; "Shutdown signal received."
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "received."
STM             R12!, {R0,R1}
MOV             R1, SP
STRH            R2, [R12]
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, #0
BL              sub_2E6B0
; End of function sub_2E730



; Attributes: noreturn

; void __noreturn sub_2E78C()
sub_2E78C
MOVW            R1, #:lower16:stru_755F8
PUSH            {R4,LR}
MOV             R2, #0  ; oact
MOVT            R1, #:upper16:stru_755F8 ; act
MOV             R0, #0xF ; sig
BL              sigaction
MOVW            R1, #:lower16:stru_76730
MOV             R2, #0  ; oact
MOVT            R1, #:upper16:stru_76730 ; act
MOV             R0, #2  ; sig
BL              sigaction
MOVW            R1, #:lower16:stru_733D0
MOV             R2, #0  ; oact
MOVT            R1, #:upper16:stru_733D0 ; act
MOV             R0, #6  ; sig
BL              sigaction
BL              sub_2E730
; End of function sub_2E78C




; int __fastcall sub_2E7D0(char *, size_t, int)
sub_2E7D0

var_88C= -0x88C
var_888= -0x888
var_884= -0x884
var_87C= -0x87C
var_874= -0x874
var_86C= -0x86C
var_864= -0x864
var_854= -0x854
s= -0x844
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R4, R2
VPUSH           {D8-D10}
SUB             SP, SP, #0x880
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R0, R2
MOV             R6, R1
BL              sub_2CC3C
LDRD            R0, R1, [R4,#0xC0]
MOV             R7, #4
VMOV.F64        D10, D0
ADD             R11, SP, #0x88C+var_864
BLX             sub_4A11C
VMOV            D7, R0, R1
ADD             R10, SP, #0x88C+var_854
VLDR            D6, [R4,#0x30]
VDIV.F64        D8, D7, D10
VLDR            D9, =1000000.0
VLDR            D7, =60.0
VMUL.F64        D6, D6, D9
VMOV            R0, R1, D6
VMUL.F64        D8, D8, D7
BLX             __fixunsdfdi
VLDR            D6, [R4,#0x50]
MOV             R8, R0
MOV             R9, R1
VDIV.F64        D7, D6, D10
VMUL.F64        D7, D7, D9
VMOV            R0, R1, D7
BLX             __fixunsdfdi
MOV             R2, R11 ; s
STR             R7, [SP,#0x88C+var_88C] ; int
MOV             R3, #0x10 ; maxlen
BL              sub_2AEF8
MOV             R0, R8  ; int
MOV             R1, R9  ; int
STR             R7, [SP,#0x88C+var_88C] ; int
MOV             R2, R10 ; s
MOV             R3, #0x10 ; maxlen
BL              sub_2AEF8
LDR             R12, [R4,#8]
MOVW            R2, #:lower16:aSD ; "%s%d "
LDR             R3, [R4,#4]
MOV             R1, R6  ; maxlen
MOVT            R2, #:upper16:aSD ; "%s%d "
MOV             R0, R5  ; s
LDR             R3, [R3,#8]
STR             R12, [SP,#0x88C+var_88C]
BL              snprintf
LDR             R3, [R4,#4]
MOV             R2, R4
MOV             R1, R6
MOV             R0, R5
LDR             R3, [R3,#0x14]
BLX             R3
MOV             R0, R5  ; s
BL              strlen
MOVW            R3, #:lower16:off_67FE0 ; "--version-file"
LDR             R1, [R4,#0x2C]
MOVT            R3, #:upper16:off_67FE0 ; "--version-file"
VLDR            D7, [R4,#0xD0]
LDR             R3, [R3,#(dword_68730 - 0x67FE0)]
MOVW            R2, #:lower16:aDsSAvgShSA0fR0 ; "(%ds):%s (avg):%sh/s | A:%.0f R:%.0f HW"...
VSTR            D8, [SP,#0x88C+var_86C]
MOV             R7, R0
STRD            R10, R11, [SP,#0x88C+var_88C]
MOVT            R2, #:upper16:aDsSAvgShSA0fR0 ; "(%ds):%s (avg):%sh/s | A:%.0f R:%.0f HW"...
LDRD            R8, R9, [R4,#0xC8]
ADD             R0, SP, #0x88C+s ; s
STR             R1, [SP,#0x88C+var_874]
MOV             R1, #0x40 ; '@' ; maxlen
VSTR            D7, [SP,#0x88C+var_87C]
STRD            R8, R9, [SP,#0x88C+var_884]
BL              snprintf
ADD             R0, SP, #0x88C+s ; s
BL              strlen
ADD             R0, R7, R0
CMP             R0, R6
BCS             loc_2E944
ADD             R1, SP, #0x88C+s ; src
MOV             R0, R5  ; dest
BL              strcat
LDR             R3, [R4,#4]
MOV             R1, R6
MOV             R0, R5
MOV             R2, R4
LDR             R3, [R3,#0x18]
BLX             R3
ADD             SP, SP, #0x880
ADD             SP, SP, #0xC
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_2E944
LDR             R1, =aGetStatline ; "get_statline"
MOVW            R0, #0xC2E
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aTailsprintfBuf ; "tailsprintf buffer overflow in %s %s li"...
STR             R0, [SP,#0x88C+var_888]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0x88C+var_88C]
MOVT            R2, #:upper16:aTailsprintfBuf ; "tailsprintf buffer overflow in %s %s li"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x88C+var_804 ; s
BL              snprintf
ADD             R1, SP, #0x88C+var_804
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2E7D0

ALIGN 0x10
dbl_2E990 DCFD 1000000.0
dbl_2E998 DCFD 60.0
off_2E9A0 DCD aGetStatline ; "get_statline"


; Attributes: noreturn

; void __noreturn sub_2E9A4()
sub_2E9A4

var_804= -0x804

MOVW            R12, #:lower16:aFailedToCreate_2 ; "Failed to create restart thread"
PUSH            {LR}
MOVT            R12, #:upper16:aFailedToCreate_2 ; "Failed to create restart thread"
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDM             R12!, {R0-R3} ; "Failed to create restart thread"
MOV             LR, SP
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; " restart thread"
STM             LR, {R0-R3}
MOV             R1, SP
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2E9A4




; int sub_2E9E8()
sub_2E9E8

newthread= -8

PUSH            {LR}
SUB             SP, SP, #0xC
LDR             R0, =stru_68FD8
BL              sub_239A4
MOV             R3, #0  ; arg
MOVW            R2, #:lower16:sub_3747C
MOV             R1, R3  ; attr
MOVT            R2, #:upper16:sub_3747C ; start_routine
ADD             R0, SP, #0xC+newthread ; newthread
BL              pthread_create
CMP             R0, #0
BNE             loc_2EA20
ADD             SP, SP, #0xC
POP             {PC}

loc_2EA20
BL              sub_2E9A4
; End of function sub_2E9E8

off_2EA24 DCD stru_68FD8



; int __fastcall sub_2EA28(_BYTE *)
sub_2EA28

var_C34= -0xC34
var_C30= -0xC30
var_C2C= -0xC2C
var_C28= -0xC28
nptr= -0xC20
var_C18= -0xC18
var_C14= -0xC14
var_C10= -0xC10
src= -0xC0C
var_C08= -0xC08
s= -0xC04
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R8, #byte_68BD8
SUB             SP, SP, #0xC30
SUB             SP, SP, #4
MOV             R7, R0
LDR             R4, [R8,#(dword_69000 - 0x68BD8)]
CMP             R4, #0
BEQ             loc_2EB24
ADD             R6, SP, #0xC34+s
MOV             R2, R4  ; stream
MOV             R0, R6  ; s
MOV             R1, #0x400 ; n
BL              fgets
SUBS            R4, R0, #0
BEQ             loc_2EAB4

loc_2EA68
LDRB            R2, [SP,#0xC34+s]
LDR             R5, [R8,#(dword_69004 - 0x68BD8)]
SUBS            R4, R2, #0x23 ; '#'
MOVNE           R4, #1
CMP             R2, #0
MOVEQ           R4, #0
ADD             R5, R5, #1
CMP             R2, #0x2F ; '/'
MOVEQ           R4, #0
ANDNE           R4, R4, #1
STR             R5, [R8,#(dword_69004 - 0x68BD8)]
CMP             R4, #0
BNE             loc_2EB88
LDR             R2, [R8,#(dword_69000 - 0x68BD8)] ; stream
MOV             R1, #0x400 ; n
MOV             R0, R6  ; s
BL              fgets
CMP             R0, #0
BNE             loc_2EA68

loc_2EAB4
LDR             R3, [R8,#(dword_69008 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_2EAE8
LDR             R0, [R8,#(dword_69000 - 0x68BD8)] ; stream
BL              fclose
MOV             R0, R7
STR             R4, [R8,#(dword_69000 - 0x68BD8)]
BL              sub_2EA28
MOV             R4, R0
MOV             R0, R4
ADD             SP, SP, #0xC30
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2EAE8
MOVW            R3, #:lower16:dword_766C0
MOVW            R2, #:lower16:aBenchfileNoWor ; "BENCHFILE No work in benchfile '%s'"
MOVT            R3, #:upper16:dword_766C0
ADD             R0, SP, #0xC34+var_804 ; s
LDR             R3, [R3]
MOVT            R2, #:upper16:aBenchfileNoWor ; "BENCHFILE No work in benchfile '%s'"

loc_2EB00               ; maxlen
MOV             R1, #0x800
BL              snprintf

loc_2EB08
ADD             R1, SP, #0xC34+var_804
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_2EB24
MOV             R5, #dword_766C0
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_2EDA4
MOV             R1, #(aMiner+4) ; "r"
BL              fopen64
CMP             R0, #0
MOV             R2, R0  ; stream
STR             R0, [R8,#(dword_69000 - 0x68BD8)]
BEQ             loc_2EE20
ADD             R6, SP, #0xC34+s
MOV             R1, #0x400 ; n
MOV             R0, R6  ; s
STR             R4, [R8,#(dword_69004 - 0x68BD8)]
BL              fgets
CMP             R0, #0
STRNE           R4, [R8,#(dword_69008 - 0x68BD8)]
BNE             loc_2EA68
MOVW            R2, #:lower16:aBenchfileFaile ; "BENCHFILE Failed to read benchfile '%s'"
LDR             R3, [R5]
ADD             R0, SP, #0xC34+var_804
MOVT            R2, #:upper16:aBenchfileFaile ; "BENCHFILE Failed to read benchfile '%s'"
B               loc_2EB00

loc_2EB88
MOVW            R3, #:lower16:aJsonEscape ; "json_escape"
MOV             R0, R6  ; s
MOVT            R3, #:upper16:aJsonEscape ; "json_escape"
ADD             R9, SP, #0xC34+var_C18
ADD             R10, R3, #0x9C
MOV             R11, #0
STR             R3, [SP,#0xC34+nptr]
STR             R6, [SP,#0xC34+var_C18]

loc_2EBA8               ; c
MOV             R1, #0x2C ; ','
BL              strchr
CMP             R0, #0
STR             R0, [R9,#4]
ADD             R1, R11, #1
BEQ             loc_2ED7C
LDR             R12, [R9]
ADD             R9, R9, #4
LDR             LR, [R10,R11,LSL#3]
MOV             R11, R11,LSL#3
SUB             R12, R0, R12
SUBS            R2, LR, R12
MOVNE           R2, #1
CMP             LR, #0
MOVEQ           R2, #0
CMP             R2, #0
BNE             loc_2ED44
CMP             R1, #4
STRB            R2, [R0]
ADD             R0, R0, #1
MOV             R11, R1
STR             R0, [R9]
BNE             loc_2EBA8
LDR             R3, [SP,#0xC34+var_C08]
MOV             R0, R3  ; s
STR             R3, [SP,#0xC34+nptr]
BL              strlen
CMP             R0, #9
BLS             loc_2EDE4
LDR             R3, [SP,#0xC34+var_C18]
MOV             R1, #a0000000C ; "0000000%c"
ADD             R0, SP, #0xC34+var_804 ; s
MOVW            R11, #:lower16:a8s ; "%.8s"
LDRB            R2, [R3]
MOVT            R11, #:upper16:a8s ; "%.8s"
BL              sprintf
ADD             R0, SP, #0xC34+var_804 ; s
BL              strlen
LDR             R6, [SP,#0xC34+var_C10]
ADD             R3, SP, #0xC34+var_804
MOV             R10, R0
ADD             R9, R3, R0
ADD             R5, R6, #0x38 ; '8'
SUB             R6, R6, #8

loc_2EC5C
MOV             R2, R5
MOV             R0, R9  ; s
MOV             R1, R11 ; format
SUB             R5, R5, #8
BL              sprintf
CMP             R6, R5
ADD             R9, R9, #8
BNE             loc_2EC5C
LDR             R6, [SP,#0xC34+var_C14]
ADD             R3, R10, #0x40 ; '@'
MOVW            R11, #:lower16:a8s ; "%.8s"
ADD             R2, SP, #0xC34+var_804
ADD             R9, R2, R3
MOVT            R11, #:upper16:a8s ; "%.8s"
ADD             R5, R6, #0x38 ; '8'
SUB             R6, R6, #8

loc_2EC9C
MOV             R2, R5
MOV             R0, R9  ; s
MOV             R1, R11 ; format
SUB             R5, R5, #8
BL              sprintf
CMP             R6, R5
ADD             R9, R9, #8
BNE             loc_2EC9C
LDR             R0, [SP,#0xC34+nptr] ; nptr
MOV             R2, #0xA ; base
MOV             R1, #0  ; endptr
BL              strtol
ADD             R3, R10, #0x80
MOV             R2, R0
MOVW            R1, #:lower16:a08lx ; "%08lx"
ADD             R0, SP, #0xC34+var_804
MOVT            R1, #:upper16:a08lx ; "%08lx"
ADD             R0, R0, R3 ; s
BL              sprintf
ADD             R3, SP, #0xC34+var_804
ADD             R0, R10, #0x88
ADD             R0, R3, R0 ; dest
LDR             R1, [SP,#0xC34+src] ; src
BL              strcpy
MOV             R2, #0x1C0 ; n
MOV             R1, #0  ; c
MOV             R0, R7  ; s
BL              memset
ADD             R2, R10, #0x90
ADD             R1, SP, #0xC34+var_804
MOV             R2, R2,ASR#1
MOV             R0, R7
BL              sub_22CD8
MOV             R0, R7
BL              sub_2B3A4
LDR             R3, [R8,#(dword_69008 - 0x68BD8)]
MOV             R0, R4
ADD             R3, R3, #1
STR             R3, [R8,#(dword_69008 - 0x68BD8)]
ADD             SP, SP, #0xC30
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_2ED44
LDR             R3, [SP,#0xC34+nptr]
MOVW            R2, #:lower16:aBenchfileInval_0 ; "BENCHFILE Invalid input file line %d fi"...
STR             R1, [SP,#0xC34+var_C34]
ADD             R0, SP, #0xC34+var_804 ; s
STR             LR, [SP,#0xC34+var_C28]
MOVT            R2, #:upper16:aBenchfileInval_0 ; "BENCHFILE Invalid input file line %d fi"...
ADD             R11, R3, R11
STR             R12, [SP,#0xC34+var_C2C]
LDR             R4, [R11,#0xA0]
MOV             R3, R5
MOV             R1, #0x800 ; maxlen
STR             R4, [SP,#0xC34+var_C30]
BL              snprintf
B               loc_2EB08

loc_2ED7C
MOV             R12, #5
MOVW            R2, #:lower16:aBenchfileInval_1 ; "BENCHFILE Invalid input file line %d - "...
STR             R1, [SP,#0xC34+var_C34]
MOV             R3, R5
ADD             R0, SP, #0xC34+var_804 ; s
STR             R12, [SP,#0xC34+var_C30]
MOVT            R2, #:upper16:aBenchfileInval_1 ; "BENCHFILE Invalid input file line %d - "...
MOV             R1, #0x800 ; maxlen
BL              snprintf
B               loc_2EB08

loc_2EDA4
MOVW            R12, #:lower16:aBenchfileInval ; "BENCHFILE Invalid benchfile NULL"
ADD             LR, SP, #0xC34+var_804
MOVT            R12, #:upper16:aBenchfileInval ; "BENCHFILE Invalid benchfile NULL"
LDM             R12!, {R0-R3} ; "BENCHFILE Invalid benchfile NULL"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "d benchfile NULL"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0xC34+var_804
MOV             R0, #3
MOV             R2, #1
STRB            R12, [LR]
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_2EDE4
MOVW            R1, #:lower16:aNoncetime ; "NonceTime"
MOV             LR, #0xA
MOVT            R1, #:upper16:aNoncetime ; "NonceTime"
MOV             R12, #5
MOVW            R2, #:lower16:aBenchfileInval_2 ; "BENCHFILE Invalid input file line %d fi"...
STR             R0, [SP,#0xC34+var_C2C]
STR             R1, [SP,#0xC34+var_C30]
MOV             R3, R5
ADD             R0, SP, #0xC34+var_804 ; s
STR             LR, [SP,#0xC34+var_C28]
MOVT            R2, #:upper16:aBenchfileInval_2 ; "BENCHFILE Invalid input file line %d fi"...
STR             R12, [SP,#0xC34+var_C34]
MOV             R1, #0x800 ; maxlen
BL              snprintf
B               loc_2EB08

loc_2EE20
MOVW            R2, #:lower16:aBenchfileFaile_0 ; "BENCHFILE Failed to open benchfile '%s'"
LDR             R3, [R5]
ADD             R0, SP, #0xC34+var_804
MOVT            R2, #:upper16:aBenchfileFaile_0 ; "BENCHFILE Failed to open benchfile '%s'"
B               loc_2EB00
; End of function sub_2EA28



; Attributes: noreturn

; void __fastcall __noreturn sub_2EE34(const char *, int)
sub_2EE34

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2EE34




; int __fastcall sub_2EE90(pthread_mutex_t *, const char *, int)
sub_2EE90
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R1, #0  ; mutexattr
MOV             R5, R2
BL              pthread_mutex_init
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R1, R5
MOV             R0, R4
BL              sub_2EE34
; End of function sub_2EE90



; Attributes: noreturn

; void __fastcall __noreturn sub_2EEB8(const char *, int)
sub_2EEB8

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2EEB8




; int __fastcall sub_2EF14(pthread_rwlock_t *, const char *, int)
sub_2EF14
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R1, #0  ; attr
MOV             R5, R2
BL              pthread_rwlock_init
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R1, R5
MOV             R0, R4
BL              sub_2EEB8
; End of function sub_2EF14




; int __fastcall sub_2EF3C(int, const char *, int)
sub_2EF3C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R1, #0  ; mutexattr
MOV             R6, R2
MOV             R4, R0
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; attr
BNE             loc_2EF78
ADD             R0, R4, #0x18 ; rwlock
BL              pthread_rwlock_init
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R1, R6
MOV             R0, R5
BL              sub_2EEB8

loc_2EF78
MOV             R1, R6
MOV             R0, R5
BL              sub_2EE34
; End of function sub_2EF3C



; Attributes: noreturn

; void __fastcall __noreturn sub_2EF84(const char *, int)
sub_2EF84

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2EF84



; Attributes: noreturn

; void __fastcall __noreturn sub_2EFE0(const char *, int)
sub_2EFE0

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2EFE0



; Attributes: noreturn

; void __fastcall __noreturn sub_2F03C(const char *, int)
sub_2F03C

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2F03C




; int __fastcall sub_2F098(int, _BYTE *)
sub_2F098
PUSH            {R4-R6,LR}
ADD             R4, R0, #0xBC
MOV             R0, R4  ; mutex
MOV             R5, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2F0E8
MOV             R3, #1
MOV             R0, R4  ; mutex
LDRB            R4, [R5]
STRB            R3, [R5]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2F0F4
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4-R6,PC}

loc_2F0E8
MOV             R1, #0x328
LDR             R0, =aPoolTset ; "pool_tset"
BL              sub_2EFE0

loc_2F0F4
MOVW            R1, #0x32D
LDR             R0, =aPoolTset ; "pool_tset"
BL              sub_2F03C
; End of function sub_2F098

off_2F100 DCD aPoolTset ; "pool_tset"



; int __fastcall sub_2F104(int, int)
sub_2F104
PUSH            {R4-R6,LR}
MOV             R5, R0
MOVW            R0, #:lower16:stru_766C4
MOV             R4, R1
MOVT            R0, #:upper16:stru_766C4 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2F164
MOVW            R2, #:lower16:dword_75580
MOVW            R3, #:lower16:dword_75584
MOVW            R0, #:lower16:stru_766C4
MOVT            R2, #:upper16:dword_75580
MOVT            R3, #:upper16:dword_75584
MOVT            R0, #:upper16:stru_766C4 ; mutex
STR             R5, [R2]
STR             R4, [R3]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2F170
MOVW            R3, #:lower16:off_67ED8
POP             {R4-R6,LR}
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BX              R3      ; sub_21C98

loc_2F164
MOVW            R1, #0x224F
LDR             R0, =aIncDevStatus ; "inc_dev_status"
BL              sub_2EFE0

loc_2F170
MOVW            R1, #0x2252
LDR             R0, =aIncDevStatus ; "inc_dev_status"
BL              sub_2F03C
; End of function sub_2F104

off_2F17C DCD aIncDevStatus ; "inc_dev_status"



; int __fastcall sub_2F180(int, _BYTE *)
sub_2F180
PUSH            {R4-R6,LR}
ADD             R4, R0, #0xBC
MOV             R0, R4  ; mutex
MOV             R5, R1
BL              pthread_mutex_lock
SUBS            R3, R0, #0
BNE             loc_2F1CC
MOV             R0, R4  ; mutex
LDRB            R4, [R5]
STRB            R3, [R5]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2F1D8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4-R6,PC}

loc_2F1CC
MOVW            R1, #0x337
LDR             R0, =aPoolTclear ; "pool_tclear"
BL              sub_2EFE0

loc_2F1D8
MOV             R1, #0x33C
LDR             R0, =aPoolTclear ; "pool_tclear"
BL              sub_2F03C
; End of function sub_2F180

off_2F1E4 DCD aPoolTclear ; "pool_tclear"



; int __fastcall sub_2F1E8(_DWORD *, int)
sub_2F1E8

var_81C= -0x81C
var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4-R9,LR}
SUB             SP, SP, #0x810
LDRB            R3, [R0,#0x2E0]
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R8, R1
CMP             R3, #0
BEQ             loc_2F624
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F768

loc_2F21C
LDRB            R7, [R4,#0x280]
CMP             R7, #0
BNE             loc_2F528
MOV             R3, #off_67FE0 ; "--version-file"
LDR             R3, [R3,#(off_68734 - 0x67FE0)] ; ":D"
CMP             R3, #0
BEQ             loc_2F8C0
LDRB            R3, [R4,#0x63]
CMP             R3, #0
BNE             loc_2F344
MOV             R9, #byte_68BD5
LDRB            R3, [R9]
CMP             R3, #0
BEQ             loc_2F340
MOV             R6, #byte_74500
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_2F284
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F6EC

loc_2F284
MOVW            R12, #:lower16:aProbingForGbtS ; "Probing for GBT support"
ADD             R5, SP, #0x81C+s
MOVT            R12, #:upper16:aProbingForGbtS ; "Probing for GBT support"
MOV             LR, R5
LDM             R12!, {R0-R3} ; "Probing for GBT support"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "support"
STM             LR, {R0,R1}
MOV             R1, R5
MOV             R0, #7
BL              sub_20F58
LDRB            R2, [R4,#0x2E0]
MOV             R1, #0
LDRB            R3, [R9]
STRB            R1, [R4,#0x63]
CMP             R2, R1
BEQ             loc_2F67C
CMP             R3, R1
BEQ             loc_2F348

loc_2F2D4
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_2F2F4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F95C

loc_2F2F4
MOVW            LR, #:lower16:aGbtCoinbaseApp ; "GBT coinbase + append support found, sw"...
MOV             R12, R5
MOVT            LR, #:upper16:aGbtCoinbaseApp ; "GBT coinbase + append support found, sw"...
LDM             LR!, {R0-R3} ; "GBT coinbase + append support found, sw"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "ppend support found, switching to GBT p"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "und, switching to GBT protocol"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "o GBT protocol"
STM             R12!, {R0-R2}
MOV             R2, #0
MOV             LR, R3,LSR#16
MOV             R1, R5
MOV             R0, #7
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_20F58
B               loc_2F348

loc_2F340
STRB            R7, [R4,#0x63]

loc_2F344
ADD             R5, SP, #0x81C+s

loc_2F348
ADD             R0, SP, #0x81C+var_814
BL              sub_239A4
SUB             R0, R5, #8
BL              sub_239A4
LDR             R0, [R4,#0x240]
CMP             R0, #0
BEQ             loc_2F3F8
MOV             R3, #byte_68BD8
LDRB            R3, [R3,#(byte_6900C - 0x68BD8)]
CMP             R3, #0
BNE             loc_2F3F8
MOV             R6, #byte_74500
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_2F3B4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F3B4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2F3E4

loc_2F3B4
MOVW            R2, #:lower16:aTestingPoolDSt ; "Testing pool %d stratum %s"
LDR             R3, [R4]
MOVT            R2, #:upper16:aTestingPoolDSt ; "Testing pool %d stratum %s"
STR             R0, [SP,#0x81C+var_81C]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R0, #6
MOV             R2, #0
MOV             R1, R5
BL              sub_20F58
LDR             R0, [R4,#0x240]

loc_2F3E4
ADD             R2, R4, #0x248
ADD             R1, R4, #0x258
BL              sub_23CD8
CMP             R0, #0
BNE             loc_2F49C

loc_2F3F8
LDRB            R3, [R4,#0x280]
CMP             R3, #0
BNE             loc_2F7D4
LDRB            R3, [R4,#0x384]
CMP             R3, #0
BNE             loc_2F7D4
LDRB            R3, [R4,#0x2E0]
CMP             R3, #0
BNE             loc_2F7D4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F458
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F458
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_2F48C

loc_2F458
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aNoStratumGbtOr ; "No Stratum, GBT or Solo support in pool"...
LDR             R3, [R4]
MOVT            R2, #:upper16:aNoStratumGbtOr ; "No Stratum, GBT or Solo support in pool"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STR             R12, [SP,#0x81C+var_81C]
MOV             R7, #0
BL              snprintf
MOV             R1, R5
MOV             R2, R7
MOV             R0, #4
BL              sub_20F58

loc_2F48C
MOV             R0, R7
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_2F49C
MOV             R0, R4
BL              sub_26AEC
CMP             R0, #0
BEQ             loc_2F3F8
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_2F4E0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F4E0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_2F514

loc_2F4E0
LDR             LR, [R4,#0x240]
MOVW            R2, #:lower16:aSwitchingPoolD ; "Switching pool %d %s to %s"
LDR             R12, [R4,#0xA4]
MOVT            R2, #:upper16:aSwitchingPoolD ; "Switching pool %d %s to %s"
LDR             R3, [R4]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STMEA           SP, {R12,LR}
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_2F514
LDR             R3, [R4,#0xA4]
CMP             R3, #0
BEQ             loc_2F614

loc_2F520
MOV             R3, #1
STRB            R3, [R4,#0x280]

loc_2F528
ADD             R5, R4, #0x280
MOV             R0, R4
ADD             R5, R5, #2
MOV             R1, R5
BL              sub_2F098
SUBS            R7, R0, #0
LDRBNE          R7, [R4,#0x281]
BNE             loc_2F48C
MOV             R0, R4
BL              sub_26AEC
CMP             R0, #0
BEQ             loc_2F9A4
LDRB            R3, [R4,#0x244]
CMP             R3, #0
BEQ             loc_2F574
MOV             R0, R4
BL              sub_296D0
CMP             R0, #0
BEQ             loc_2F9A4

loc_2F574
MOV             R0, R4
BL              sub_29AC8
SUBS            R6, R0, #0
BEQ             loc_2F9A4
MOVW            R12, #:lower16:byte_74502
MOVW            R2, #:lower16:sub_3958C
MOVT            R12, #:upper16:byte_74502
MOV             R1, #0  ; attr
MOV             R5, #1
MOVT            R2, #:upper16:sub_3958C ; start_routine
MOV             R3, R4  ; arg
ADD             R0, R4, #0x2B8 ; newthread
STRB            R5, [R12]
BL              pthread_create
SUBS            R1, R0, #0 ; attr
BNE             loc_2F9B4
MOVW            R2, #:lower16:sub_3BECC
MOV             R3, R4  ; arg
MOVT            R2, #:upper16:sub_3BECC ; start_routine
ADD             R0, R4, #0x2BC ; newthread
BL              pthread_create
CMP             R0, #0
MOVEQ           R7, R6
BEQ             loc_2F48C
MOV             R12, #unk_52150

loc_2F5DC
LDM             R12!, {R0-R3}
ADD             LR, SP, #0x81C+s
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3}
LDR             R12, [R12]
STM             LR!, {R0-R3}
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, R5
STRB            R12, [LR]
BL              sub_20F58
MOV             R1, R5
MOV             R0, R5
BL              sub_2E6B0

loc_2F614               ; s
LDR             R0, [R4,#0x240]
BL              __strdup
STR             R0, [R4,#0xA4]
B               loc_2F520

loc_2F624
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F64C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F974

loc_2F64C
ADD             R5, SP, #0x81C+s
MOVW            R2, #:lower16:aTestingPoolS ; "Testing pool %s"
MOV             R0, R5  ; s
MOVT            R2, #:upper16:aTestingPoolS ; "Testing pool %s"
LDR             R3, [R4,#0xA4]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
B               loc_2F21C

loc_2F67C
LDRB            R2, [R4,#0x384]
CMP             R2, #0
BEQ             loc_2F944
CMP             R3, #0
BEQ             loc_2F348

loc_2F690
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_2F6C4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F6C4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2F348

loc_2F6C4
MOVW            R1, #:lower16:aGbtCoinbaseWit ; "GBT coinbase without append found, swit"...
MOV             R2, #0x42 ; 'B' ; n
MOVT            R1, #:upper16:aGbtCoinbaseWit ; "GBT coinbase without append found, swit"...

loc_2F6D0               ; dest
MOV             R0, R5
BL              memcpy
MOV             R2, #0
MOV             R1, R5
MOV             R0, #7
BL              sub_20F58
B               loc_2F348

loc_2F6EC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_2F284
LDRB            R3, [R4,#0x2E0]
STRB            R7, [R4,#0x63]
CMP             R3, #0
ADDNE           R5, SP, #0x81C+s
BNE             loc_2F2D4
LDRB            R3, [R4,#0x384]
ADD             R5, SP, #0x81C+s
CMP             R3, #0
BNE             loc_2F690
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_2F758

loc_2F730
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F758
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2F348

loc_2F758
MOVW            R1, #:lower16:aNoGbtCoinbaseA ; "No GBT coinbase + append support found,"...
MOV             R2, #0x4B ; 'K'
MOVT            R1, #:upper16:aNoGbtCoinbaseA ; "No GBT coinbase + append support found,"...
B               loc_2F6D0

loc_2F768
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F7A4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F7A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2F21C

loc_2F7A4
ADD             R5, SP, #0x81C+s
MOVW            R2, #:lower16:aRetrievingBloc ; "Retrieving block template from pool %s"
MOV             R0, R5  ; s
MOVT            R2, #:upper16:aRetrievingBloc ; "Retrieving block template from pool %s"
LDR             R3, [R4,#0xA4]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_2F21C

loc_2F7D4
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F854
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F824
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F824
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2F854

loc_2F824
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aFailedToRetrie ; "FAILED to retrieve work from pool %u %s"
LDR             R3, [R4]
MOVT            R2, #:upper16:aFailedToRetrie ; "FAILED to retrieve work from pool %u %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STR             R12, [SP,#0x81C+var_81C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #7
BL              sub_20F58

loc_2F854
CMP             R8, #0
BNE             loc_2F48C
LDRB            R3, [R4,#0x61]
CMP             R3, #0
BNE             loc_2F48C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F890
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_2F98C

loc_2F890
MOVW            R2, #:lower16:aPoolUSlowDownO ; "Pool %u slow/down or URL or credentials"...
LDR             R3, [R4]
MOVT            R2, #:upper16:aPoolUSlowDownO ; "Pool %u slow/down or URL or credentials"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
MOV             R7, #0
BL              snprintf
MOV             R1, R5
MOV             R2, R7
MOV             R0, #4
BL              sub_20F58
B               loc_2F48C

loc_2F8C0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F8FC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_2F8FC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_2F48C

loc_2F8FC
MOVW            LR, #:lower16:aCurlInitialisa ; "CURL initialisation failed"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aCurlInitialisa ; "CURL initialisation failed"
LDM             LR!, {R0-R3} ; "CURL initialisation failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "ion failed"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x81C+s
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #3
MOV             R2, #0
STRB            R3, [R12]
BL              sub_20F58
MOV             R0, R7
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_2F944
CMP             R3, #0
BEQ             loc_2F348
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_2F730
B               loc_2F758

loc_2F95C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2F348
B               loc_2F2F4

loc_2F974
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_2F21C
B               loc_2F64C

loc_2F98C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_2F890
B               loc_2F48C

loc_2F9A4
MOV             R1, R5
MOV             R0, R4
BL              sub_2F180
B               loc_2F48C

loc_2F9B4
MOV             R12, #unk_5212C
B               loc_2F5DC
; End of function sub_2F1E8




; int sub_2F9C0()
sub_2F9C0
PUSH            {R4,LR}
MOV             R4, #byte_68BD8
LDR             R0, [R4,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2FA0C
MOV             R0, #stru_744D0 ; cond
BL              pthread_cond_signal
LDR             R0, [R4,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2FA18
MOVW            R3, #:lower16:off_67ED8
POP             {R4,LR}
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BX              R3      ; sub_21C98

loc_2FA0C
MOVW            R1, #0x14F9
LDR             R0, =aWakeGws ; "wake_gws"
BL              sub_2EFE0

loc_2FA18
MOVW            R1, #0x14FB
LDR             R0, =aWakeGws ; "wake_gws"
BL              sub_2F03C
; End of function sub_2F9C0

off_2FA24 DCD aWakeGws  ; "wake_gws"



; int __fastcall sub_2FA28(int, unsigned int)
sub_2FA28

var_10= -0x10
var_C= -0xC
abstime= -8

MOVW            R2, #0x4DD3
PUSH            {R4-R6,LR}
MOVT            R2, #0x1062
SUB             SP, SP, #0x10
UMULL           R2, R3, R1, R2
MOV             R5, R0
MOV             R0, SP
MOV             R6, R1
MOV             R4, R3,LSR#6
BL              sub_239A4
MOV             R2, #0x3E8
MOVW            R3, #0x4240
MUL             R1, R2, R6
MOVT            R3, #0xF
LDR             R0, [SP,#0x10+var_C]
MOV             R2, #0xF423F
LDR             R12, [SP,#0x10+var_10]
MLS             R1, R3, R4, R1
MOV             R3, #0x3E8
ADD             R4, R4, R12
ADD             R1, R1, R0
MOVW            R0, #:lower16:stru_767F4
CMP             R1, R2
MOVT            R0, #:upper16:stru_767F4 ; mutex
SUBGT           R1, R1, #0xF4000
ADDGT           R4, R4, #1
SUBGT           R1, R1, #0x240
STR             R4, [SP,#0x10+abstime]
MUL             R1, R3, R1
STR             R1, [SP,#0x10+abstime.tv_nsec]
BL              pthread_mutex_lock
SUBS            R4, R0, #0
BNE             loc_2FB08
LDRB            R3, [R5,#0x3E]
CMP             R3, #0
BNE             loc_2FAD8
MOVW            R1, #:lower16:stru_767F4
MOVW            R0, #:lower16:stru_76700
MOVT            R1, #:upper16:stru_767F4 ; mutex
MOVT            R0, #:upper16:stru_76700 ; cond
ADD             R2, SP, #0x10+abstime ; abstime
BL              pthread_cond_timedwait
MOV             R4, R0

loc_2FAD8               ; mutex
MOV             R0, #stru_767F4
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2FB14
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_2FB08
MOVW            R1, #0x152E
LDR             R0, =aRestartWait ; "restart_wait"
BL              sub_2EFE0

loc_2FB14
MOVW            R1, #0x1538
LDR             R0, =aRestartWait ; "restart_wait"
BL              sub_2F03C
; End of function sub_2FA28

off_2FB20 DCD aRestartWait ; "restart_wait"


; Attributes: noreturn

; void __fastcall __noreturn sub_2FB24(const char *, int)
sub_2FB24

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2FB24




; int __fastcall sub_2FB80(pthread_rwlock_t *, const char *, int)
sub_2FB80
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R5, R2
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2FBAC
MOVW            R3, #:lower16:off_67ED8
POP             {R4-R6,LR}
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BX              R3      ; sub_21C98

loc_2FBAC
MOV             R1, R5
MOV             R0, R4
BL              sub_2FB24
; End of function sub_2FB80




; int sub_2FBB8()
sub_2FBB8
MOVW            R0, #:lower16:stru_7453C
PUSH            {R4,LR}
MOVT            R0, #:upper16:stru_7453C ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_2FC30
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2FC3C
MOVW            R3, #:lower16:byte_68BD8
LDR             R0, =rwlock ; rwlock
MOVT            R3, #:upper16:byte_68BD8
LDR             R4, [R3,#(dword_69014 - 0x68BD8)]
ADD             R2, R4, #1
STR             R2, [R3,#(dword_69014 - 0x68BD8)]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2FC48
MOV             R0, #stru_7453C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_2FC54
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4,PC}

loc_2FC30
MOVW            R1, #0x8D9
LDR             R0, =aTotalWorkInc ; "total_work_inc"
BL              sub_2EFE0

loc_2FC3C
MOVW            R1, #0x8D9
LDR             R0, =aTotalWorkInc ; "total_work_inc"
BL              sub_2EF84

loc_2FC48
MOVW            R1, #0x8DB
LDR             R0, =aTotalWorkInc ; "total_work_inc"
BL              sub_2FB24

loc_2FC54
MOVW            R1, #0x8DB
LDR             R0, =aTotalWorkInc ; "total_work_inc"
BL              sub_2F03C
; End of function sub_2FBB8

off_2FC60 DCD rwlock
off_2FC64 DCD aTotalWorkInc ; "total_work_inc"



; int __fastcall sub_2FC68(int)
sub_2FC68

var_804= -0x804

PUSH            {R4,R5,LR}
MOVW            R1, #:lower16:byte_68BD5
LDR             R3, [R0,#0x44]
MOVT            R1, #:upper16:byte_68BD5
MOVW            R2, #:lower16:dword_767E0
MOV             R4, R0
MOVT            R2, #:upper16:dword_767E0
LDRB            LR, [R1]
LDR             R0, [R0,#0xF0]
REV             R3, R3
LDR             R1, [R2]
MOV             R12, #0
ADD             R3, R3, #1
CMP             LR, R12
REV             R3, R3
SUB             SP, SP, #0x800
ADD             R0, R0, #1
STR             R3, [R4,#0x44]
ADD             R3, R1, #1
SUB             SP, SP, #4
STR             R0, [R4,#0xF0]
STR             R12, [R4,#0xF8]
STR             R3, [R2]
BEQ             loc_2FD20
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, R12
BNE             loc_2FCF0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R12
BEQ             loc_2FD74

loc_2FCF0
MOVW            LR, #:lower16:aSuccessfullyRo ; "Successfully rolled work"
MOV             R12, SP
MOVT            LR, #:upper16:aSuccessfullyRo ; "Successfully rolled work"
LDM             LR!, {R0-R3} ; "Successfully rolled work"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "led work"
STM             R12!, {R0,R1}
MOV             R1, SP
STRB            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_20F58

loc_2FD20
LDR             R5, [R4,#0x134]
CMP             R5, #0
BEQ             loc_2FD60
MOV             R2, #4
MOV             R1, R5
MOV             R0, SP
BL              sub_22CD8
LDR             R3, [SP,#0x804+var_804]
MOV             R1, SP
MOV             R0, R5
MOV             R2, #4
REV             R3, R3
ADD             R3, R3, #1
REV             R3, R3
STR             R3, [SP,#0x804+var_804]
BL              sub_22BB4

loc_2FD60
BL              sub_2FBB8
STR             R0, [R4,#0x154]
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_2FD74
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_2FD20
B               loc_2FCF0
; End of function sub_2FC68




; _DWORD *sub_2FD8C()
sub_2FD8C

var_808= -0x808
var_800= -0x800

PUSH            {R4,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOVW            R3, #0x8E2
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
MOV             R1, #0x1C0
STR             R3, [SP,#0x808+var_808]
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, =aMakeWork ; "make_work"
MOV             R0, #1
BL              sub_22A44
SUBS            R4, R0, #0
BEQ             loc_2FDD8
BL              sub_2FBB8
STR             R0, [R4,#0x154]
MOV             R0, R4
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4,PC}

loc_2FDD8
MOVW            LR, #:lower16:aFailedToCalloc ; "Failed to calloc work in make_work"
ADD             R12, SP, #0x808+var_800
MOVT            LR, #:upper16:aFailedToCalloc ; "Failed to calloc work in make_work"
LDM             LR!, {R0-R3} ; "Failed to calloc work in make_work"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " work in make_work"
LDR             LR, [LR] ; "rk"
STM             R12!, {R0-R3}
ADD             R1, SP, #0x808+var_800
MOV             R0, #3
MOV             R2, #1
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_2FD8C

off_2FE20 DCD aMakeWork ; "make_work"



; _DWORD *__fastcall sub_2FE24(int, int)
sub_2FE24
PUSH            {R4-R6,LR}
MOV             R6, R1
MOV             R5, R0
BL              sub_2FD8C
MOV             R2, R6
MOV             R4, R0
MOV             R1, R5
BL              sub_2CA90
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_2FE24




; _DWORD *__fastcall sub_2FE4C(int)
sub_2FE4C
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_2FD8C
MOV             R1, R5
MOV             R2, #0
MOV             R4, R0
BL              sub_2CA90
MOV             R3, #1
ADD             R0, R4, #0x1A0
STRB            R3, [R4,#0x111]
BL              sub_239A4
LDR             R3, [R4,#0x108]
MOV             R2, #0
STRB            R2, [R4,#0x118]
MOV             R0, R4
STRB            R2, [R4,#0x11A]
SUB             R3, R3, #1
STR             R3, [R4,#0x108]
POP             {R4-R6,PC}
; End of function sub_2FE4C




; int __fastcall sub_2FE98(pthread_rwlock_t *, int)
sub_2FE98
PUSH            {R4-R6,LR}
ADD             R4, R0, #0x140
MOV             R5, R0
MOV             R0, R4  ; rwlock
MOV             R6, R1
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2FEE8
MOV             R1, R6
MOV             R0, R5
BL              sub_2E034
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2FEF4
MOVW            R3, #:lower16:off_67ED8
POP             {R4-R6,LR}
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BX              R3      ; sub_21C98

loc_2FEE8
MOVW            R1, #0x24E9
LDR             R0, =aAddQueued ; "add_queued"
BL              sub_2EF84

loc_2FEF4
MOVW            R1, #0x24EB
LDR             R0, =aAddQueued ; "add_queued"
BL              sub_2FB24
; End of function sub_2FE98

off_2FF00 DCD aAddQueued ; "add_queued"



; void __fastcall sub_2FF04(pthread_rwlock_t *, void **)
sub_2FF04

var_8= -8

PUSH            {R4,R5,LR}
ADD             R4, R0, #0x140
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R0, R4  ; rwlock
STR             R1, [SP,#0xC+var_8]
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_2FF74
MOV             R0, R5
LDR             R1, [SP,#0xC+var_8]
BL              sub_2E528
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_2FF80
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2585
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aWorkCompleted ; "work_completed"
ADD             R0, SP, #0xC+var_8
BL              sub_2CBA8
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_2FF74
MOVW            R1, #0x2581
LDR             R0, =aWorkCompleted ; "work_completed"
BL              sub_2EF84

loc_2FF80
MOVW            R1, #0x2583
LDR             R0, =aWorkCompleted ; "work_completed"
BL              sub_2FB24
; End of function sub_2FF04

off_2FF8C DCD aWorkCompleted ; "work_completed"



; _DWORD *__fastcall sub_2FF90(pthread_rwlock_t *, void *, size_t, const void *, int, size_t)
sub_2FF90

var_8= -8
var_4= -4
arg_0=  0x18
arg_4=  0x1C

PUSH            {R4-R8,LR}
ADD             R5, R0, #0x140
SUB             SP, SP, #8
MOV             R4, R0
MOV             R0, R5  ; rwlock
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_30020
LDR             R2, [SP,#8+arg_4]
MOV             R3, R8  ; int
LDR             R1, [SP,#8+arg_0]
LDR             R0, [R4,#0x160] ; int
STR             R2, [SP,#8+var_4] ; size_t
MOV             R2, R7  ; n
STR             R1, [SP,#8+var_8] ; int
MOV             R1, R6  ; s2
BL              sub_2E46C
SUBS            R6, R0, #0
BEQ             loc_2FFF4
MOV             R0, R4
MOV             R1, R6
BL              sub_2E528

loc_2FFF4               ; rwlock
MOV             R0, R5
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3002C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R6
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_30020
MOVW            R1, #0x258E
LDR             R0, =aTakeQueuedWork ; "take_queued_work_bymidstate"
BL              sub_2EF84

loc_3002C
MOVW            R1, #0x2592
LDR             R0, =aTakeQueuedWork ; "take_queued_work_bymidstate"
BL              sub_2FB24
; End of function sub_2FF90

off_30038 DCD aTakeQueuedWork ; "take_queued_work_bymidstate"



; int __fastcall sub_3003C(pthread_rwlock_t *)
sub_3003C

var_10= -0x10
var_C= -0xC

PUSH            {R4-R9,LR}
MOV             R6, R0
VPUSH           {D8}
SUB             SP, SP, #0x14
ADD             R0, SP, #0x14+var_C
ADD             R8, R6, #0x140
VMOV.F64        D8, D0
BL              sub_239A4
MOV             R0, R8  ; rwlock
BL              pthread_rwlock_wrlock
SUBS            R5, R0, #0
BNE             loc_3011C
LDR             R1, [R6,#0x160]
CMP             R1, #0
STR             R1, [SP,#0x14+var_10]
BEQ             loc_300EC
LDR             R4, [R1,#0x160]
MOVW            R7, #:lower16:aCgminerC ; "cgminer.c"
LDR             R9, =aAgeQueuedWork ; "age_queued_work"
MOVT            R7, #:upper16:aCgminerC ; "cgminer.c"

loc_3008C
ADD             R1, R1, #0x1A8
ADD             R0, SP, #0x14+var_C
BL              sub_23C94
VCMPE.F64       D0, D8
VMRS            APSR_nzcv, FPSCR
BGT             loc_300BC
CMP             R4, #0
STR             R4, [SP,#0x14+var_10]
BEQ             loc_300EC

loc_300B0
MOV             R1, R4
LDR             R4, [R4,#0x160]
B               loc_3008C

loc_300BC
LDR             R1, [SP,#0x14+var_10]
MOV             R0, R6
BL              sub_2E528
MOVW            R3, #0x2572
MOV             R2, R9
MOV             R1, R7
ADD             R0, SP, #0x14+var_10
BL              sub_2CBA8
CMP             R4, #0
ADD             R5, R5, #1
STR             R4, [SP,#0x14+var_10]
BNE             loc_300B0

loc_300EC               ; rwlock
MOV             R0, R8
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_30128
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R5
ADD             SP, SP, #0x14
VPOP            {D8}
POP             {R4-R9,PC}

loc_3011C
MOVW            R1, #0x256C
LDR             R0, =aAgeQueuedWork ; "age_queued_work"
BL              sub_2EF84

loc_30128
MOVW            R1, #0x2577
LDR             R0, =aAgeQueuedWork ; "age_queued_work"
BL              sub_2FB24
; End of function sub_3003C

off_30134 DCD aAgeQueuedWork ; "age_queued_work"


; Attributes: noreturn

; void __fastcall __noreturn sub_30138(const char *, int)
sub_30138

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
MOV             R1, #0x800 ; maxlen
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_30138




; _DWORD *__fastcall sub_30194(pthread_rwlock_t *, int)
sub_30194
PUSH            {R4-R8,LR}
ADD             R7, R0, #0x140
MOV             R4, R0
MOV             R0, R7  ; rwlock
MOV             R6, R1
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_30244
LDR             R4, [R4,#0x160]
CMP             R4, #0
BEQ             loc_30200
LDR             R3, [R4,#0x154]
LDR             R5, [R4,#0x160]
CMP             R6, R3
BEQ             loc_30228
CMP             R5, #0
MOVEQ           R4, R5
BEQ             loc_30200
LDR             R4, [R5,#0x160]
B               loc_301EC

loc_301E4
MOV             R5, R4
LDR             R4, [R4,#0x160]

loc_301EC
LDR             R3, [R5,#0x154]
CMP             R6, R3
BEQ             loc_3022C
CMP             R4, #0
BNE             loc_301E4

loc_30200               ; rwlock
MOV             R0, R7
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_30250
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4-R8,PC}

loc_30228
MOV             R5, R4

loc_3022C
BL              sub_2FD8C
MOV             R1, R5
MOV             R2, #0
MOV             R4, R0
BL              sub_2CA90
B               loc_30200

loc_30244
MOVW            R1, #0x2552
LDR             R0, =aCloneQueuedWor ; "clone_queued_work_byid"
BL              sub_30138

loc_30250
MOVW            R1, #0x2556
LDR             R0, =aCloneQueuedWor ; "clone_queued_work_byid"
BL              sub_2FB24
; End of function sub_30194

off_3025C DCD aCloneQueuedWor ; "clone_queued_work_byid"



; _DWORD *__fastcall sub_30260(pthread_rwlock_t *, void *, size_t, const void *, int, size_t)
sub_30260

var_C= -0xC
var_8= -8
arg_0=  0x1C
arg_4=  0x20

PUSH            {R4-R9,LR}
ADD             R4, R0, #0x140
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R0, R4  ; rwlock
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              pthread_rwlock_rdlock
SUBS            R9, R0, #0
BNE             loc_302F8
LDR             R2, [SP,#0xC+arg_4]
MOV             R3, R8  ; int
LDR             R1, [SP,#0xC+arg_0]
LDR             R0, [R5,#0x160] ; int
STR             R2, [SP,#0xC+var_8] ; size_t
MOV             R2, R7  ; n
STR             R1, [SP,#0xC+var_C] ; int
MOV             R1, R6  ; s2
BL              sub_2E46C
SUBS            R5, R0, #0
BEQ             loc_30310
BL              sub_2FD8C
MOV             R2, R9
MOV             R1, R5
MOV             R6, R0
BL              sub_2CA90

loc_302CC               ; rwlock
MOV             R0, R4
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_30304
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_302F8
MOVW            R1, #0x2523
LDR             R0, =aCloneQueuedWor_0 ; "clone_queued_work_bymidstate"
BL              sub_30138

loc_30304
MOVW            R1, #0x2527
LDR             R0, =aCloneQueuedWor_0 ; "clone_queued_work_bymidstate"
BL              sub_2FB24

loc_30310
MOV             R6, R5
B               loc_302CC
; End of function sub_30260

off_30318 DCD aCloneQueuedWor_0 ; "clone_queued_work_bymidstate"



; int __fastcall sub_3031C(pthread_rwlock_t *, int)
sub_3031C
PUSH            {R4-R6,LR}
ADD             R6, R0, #0x140
MOV             R4, R0
MOV             R0, R6  ; rwlock
MOV             R5, R1
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_303B4
LDR             R4, [R4,#0x160]
CMP             R4, #0
BEQ             loc_30384
LDR             R2, [R4,#0x154]
LDR             R3, [R4,#0x160]
CMP             R5, R2
BEQ             loc_30384
CMP             R3, #0
LDRNE           R4, [R3,#0x160]
BNE             loc_30370
B               loc_303AC

loc_30368
MOV             R3, R4
LDR             R4, [R4,#0x160]

loc_30370
LDR             R2, [R3,#0x154]
CMP             R5, R2
BEQ             loc_303AC
CMP             R4, #0
BNE             loc_30368

loc_30384               ; rwlock
MOV             R0, R6
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_303C0
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4-R6,PC}

loc_303AC
MOV             R4, R3
B               loc_30384

loc_303B4
MOVW            R1, #0x2546
LDR             R0, =aFindQueuedWork ; "find_queued_work_byid"
BL              sub_30138

loc_303C0
MOVW            R1, #0x2548
LDR             R0, =aFindQueuedWork ; "find_queued_work_byid"
BL              sub_2FB24
; End of function sub_3031C

off_303CC DCD aFindQueuedWork ; "find_queued_work_byid"



; int __fastcall sub_303D0(pthread_rwlock_t *, void *, size_t, const void *, int, size_t)
sub_303D0

var_8= -8
var_4= -4
arg_0=  0x18
arg_4=  0x1C

PUSH            {R4-R8,LR}
ADD             R4, R0, #0x140
SUB             SP, SP, #8
MOV             R5, R0
MOV             R0, R4  ; rwlock
MOV             R6, R1
MOV             R7, R2
MOV             R8, R3
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_30450
LDR             R2, [SP,#8+arg_4]
MOV             R3, R8  ; int
LDR             R1, [SP,#8+arg_0]
LDR             R0, [R5,#0x160] ; int
STR             R2, [SP,#8+var_4] ; size_t
MOV             R2, R7  ; n
STR             R1, [SP,#8+var_8] ; int
MOV             R1, R6  ; s2
BL              sub_2E46C
MOV             R5, R0
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3045C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_30450
MOVW            R1, #0x2517
LDR             R0, =aFindQueuedWork_0 ; "find_queued_work_bymidstate"
BL              sub_30138

loc_3045C
MOVW            R1, #0x2519
LDR             R0, =aFindQueuedWork_0 ; "find_queued_work_bymidstate"
BL              sub_2FB24
; End of function sub_303D0

off_30468 DCD aFindQueuedWork_0 ; "find_queued_work_bymidstate"



; int __fastcall sub_3046C(int)
sub_3046C
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, #stru_7680C ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_304C4
MOVW            R3, #:lower16:dword_7346C
MOVW            R0, #:lower16:stru_7680C
MOVT            R3, #:upper16:dword_7346C
MOVT            R0, #:upper16:stru_7680C ; rwlock
LDR             R3, [R3]
LDR             R4, [R3,R4,LSL#2]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_304D0
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4,PC}

loc_304C4
MOVW            R1, #0x275
LDR             R0, =aGetDevices ; "get_devices"
BL              sub_30138

loc_304D0
MOVW            R1, #0x277
LDR             R0, =aGetDevices ; "get_devices"
BL              sub_2FB24
; End of function sub_3046C

off_304DC DCD aGetDevices ; "get_devices"



; int sub_304E0()
sub_304E0

var_92C= -0x92C
var_924= -0x924
var_91C= -0x91C
var_918= -0x918
var_914= -0x914
var_910= -0x910
format= -0x90C
var_908= -0x908
var_904= -0x904
s= -0x804

MOVW            R2, #:lower16:byte_68BD8
PUSH            {R4-R11,LR}
MOVT            R2, #:upper16:byte_68BD8
VPUSH           {D8-D10}
SUB             SP, SP, #0x920
MOVW            R0, #0xB3C5
SUB             SP, SP, #0xC
LDR             R1, [R2,#(dword_69024 - 0x68BD8)]
LDR             R3, [R2,#(dword_6901C - 0x68BD8)]
MOVT            R0, #0x91A2
STR             R2, [SP,#0x92C+var_908]
MOV             LR, #0xE10
LDR             R12, [R2,#(dword_69018 - 0x68BD8)]
MOVW            R7, #:lower16:qword_755D8
LDR             R2, [R2,#(dword_69020 - 0x68BD8)]
SUB             R3, R3, R1
CMP             R3, #0
LDR             R11, =dbl_68720
MOVT            R7, #:upper16:qword_755D8
VLDR            D8, =60.0
SUB             R12, R12, R2
MOVW            R2, #0x8889
SUBLT           R12, R12, #1
MOVT            R2, #0x8888
SMULL           R0, R1, R12, R0
MOV             R6, R12,ASR#31
VLDR            D9, [R11]
SMULL           R4, R5, R12, R2
MOV             R4, #byte_74500
ADD             R8, R12, R1
LDRD            R0, R1, [R7]
RSB             R8, R6, R8,ASR#11
MLS             LR, LR, R8, R12
ADD             R3, R12, R5
RSB             R6, R6, R3,ASR#5
SMULL           R2, R3, LR, R2
MOV             R10, LR,ASR#31
RSB             R6, R6, R6,LSL#4
SUB             R6, R12, R6,LSL#2
ADD             LR, LR, R3
RSB             R10, R10, LR,ASR#5
BLX             sub_4A11C
MOVW            R3, #:lower16:qword_76850
VMOV            D7, R0, R1
MOVT            R3, #:upper16:qword_76850
LDRD            R0, R1, [R3]
VDIV.F64        D10, D7, D9
BLX             sub_4A11C
VMOV            D7, R0, R1
LDRB            R3, [R4]
VDIV.F64        D7, D7, D9
CMP             R3, #0
VMUL.F64        D10, D10, D8
VMUL.F64        D8, D7, D8
BNE             loc_305D4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_314EC

loc_305D4
MOVW            R12, #:lower16:aSummaryOfRunti ; "\nSummary of runtime statistics:\n"
ADD             R5, SP, #0x92C+s
MOVT            R12, #:upper16:aSummaryOfRunti ; "\nSummary of runtime statistics:\n"
MOV             LR, R5
LDM             R12!, {R0-R3} ; "\nSummary of runtime statistics:\n"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ime statistics:\n"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
STRB            R12, [LR]
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_3062C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31710

loc_3062C
MOVW            R2, #:lower16:aStartedAtS ; "Started at %s"
LDR             R3, =byte_69028
MOVT            R2, #:upper16:aStartedAtS ; "Started at %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
MOVW            R9, #:lower16:dword_733CC
BL              snprintf
MOVT            R9, #:upper16:dword_733CC
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDR             R3, [R9]
CMP             R3, #1
BEQ             loc_31628

loc_30668
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30688
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31528

loc_30688
ADD             R5, SP, #0x92C+s
MOVW            R2, #:lower16:aRuntimeDHrsDMi ; "Runtime: %d hrs : %d mins : %d secs"
MOV             R3, R8
MOVT            R2, #:upper16:aRuntimeDHrsDMi ; "Runtime: %d hrs : %d mins : %d secs"
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x92C+var_92C+4]
STR             R10, [SP,#0x92C+var_92C]
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
MOVW            R3, #:lower16:dbl_756A8
LDRB            R2, [R4]
MOVT            R3, #:upper16:dbl_756A8
VLDR            D6, [R11]
VLDR            D5, [R3]
CMP             R2, #0
VDIV.F64        D7, D5, D6
BNE             loc_306F0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3172C

loc_306F0
MOVW            R2, #:lower16:aAverageHashrat ; "Average hashrate: %.1f Mhash/s"
VSTR            D7, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aAverageHashrat ; "Average hashrate: %.1f Mhash/s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30738
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3184C

loc_30738
MOVW            R3, #:lower16:dword_7345C
MOVW            R2, #:lower16:aSolvedBlocksD ; "Solved blocks: %d"
MOVT            R3, #:upper16:dword_7345C
MOVT            R2, #:upper16:aSolvedBlocksD ; "Solved blocks: %d"
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30788
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31878

loc_30788
MOVW            R2, #:lower16:aBestShareDiffi ; "Best share difficulty: %s"
LDR             R3, =dword_68728
MOVT            R2, #:upper16:aBestShareDiffi ; "Best share difficulty: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_307D0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3169C

loc_307D0
MOVW            R2, #:lower16:qword_767E8
LDR             R3, [R7]
MOVT            R2, #:upper16:qword_767E8
LDR             R1, [R7,#(qword_755D8+4 - 0x755D8)]
LDM             R2, {R0,R12}
MOV             R2, #aShareSubmissio ; "Share submissions: %lld"
ADDS            R3, R3, R0
MOV             R0, R5  ; s
ADC             R1, R1, R12
STR             R3, [SP,#0x92C+var_92C]
STR             R1, [SP,#0x92C+var_92C+4]
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30838
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31738

loc_30838
LDRD            R10, R11, [R7]
MOV             R2, #aAcceptedShares ; "Accepted shares: %lld"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30884
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31840

loc_30884
MOVW            R3, #:lower16:qword_767E8
MOVW            R2, #:lower16:aRejectedShares ; "Rejected shares: %lld"
MOVT            R3, #:upper16:qword_767E8
MOVT            R2, #:upper16:aRejectedShares ; "Rejected shares: %lld"
LDRD            R10, R11, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_308F4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31884
B               loc_308F4
ALIGN 0x10
dbl_308E0 DCFD 60.0
off_308E8 DCD dbl_68720
off_308EC DCD byte_69028
off_308F0 DCD dword_68728

loc_308F4
MOVW            R3, #:lower16:dbl_73370
MOVW            R2, #:lower16:aAcceptedDiffic ; "Accepted difficulty shares: %1.f"
MOVT            R3, #:upper16:dbl_73370
MOVT            R2, #:upper16:aAcceptedDiffic ; "Accepted difficulty shares: %1.f"
LDRD            R10, R11, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30948
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31890

loc_30948
MOVW            R3, #:lower16:dbl_73390
MOVW            R2, #:lower16:aRejectedDiffic ; "Rejected difficulty shares: %1.f"
MOVT            R3, #:upper16:dbl_73390
MOVT            R2, #:upper16:aRejectedDiffic ; "Rejected difficulty shares: %1.f"
LDRD            R10, R11, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDRD            R6, R7, [R7]
ORRS            R3, R6, R7
BEQ             loc_30D34
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_309A8

loc_30994
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31770

loc_309A8
MOVW            R3, #:lower16:qword_767E8
ADD             R5, SP, #0x92C+s
MOVT            R3, #:upper16:qword_767E8
LDM             R3, {R8,R10}
ADDS            R3, R8, R8
ADC             R1, R10, R10
ADDS            R3, R3, R8
ADC             R1, R1, R10
MOV             R0, R3,LSL#5
MOV             R2, R1,LSL#5
ADDS            R0, R3, R0
ORR             R2, R2, R3,LSR#27
ADC             R1, R1, R2
ADDS            R0, R0, R8
ADC             R1, R1, R10
BLX             sub_4A11C
VMOV            D9, R0, R1
ADDS            R0, R8, R6
ADC             R1, R10, R7
BLX             sub_4A11C
VMOV            D7, R0, R1
MOV             R2, #aRejectRatio1f ; "Reject ratio: %.1f%%"
MOV             R1, #0x800 ; maxlen
VDIV.F64        D7, D9, D7
MOV             R0, R5  ; s
VSTR            D7, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_30A28
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30A48
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31594

loc_30A48
MOVW            R3, #:lower16:dword_73368
ADD             R5, SP, #0x92C+s
MOVT            R3, #:upper16:dword_73368
MOVW            R2, #:lower16:aHardwareErrors_0 ; "Hardware errors: %d"
LDR             R3, [R3]
MOVT            R2, #:upper16:aHardwareErrors_0 ; "Hardware errors: %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30A9C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31808

loc_30A9C
MOVW            R2, #:lower16:aUtilityAccepte ; "Utility (accepted shares / min): %.2f/m"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aUtilityAccepte ; "Utility (accepted shares / min): %.2f/m"...
VSTR            D10, [SP,#0x92C+var_92C]
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30AE4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31824

loc_30AE4
MOVW            R2, #:lower16:aWorkUtilityDif ; "Work Utility (diff1 shares solved / min"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aWorkUtilityDif ; "Work Utility (diff1 shares solved / min"...
VSTR            D8, [SP,#0x92C+var_92C]
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30B2C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31798

loc_30B2C
MOVW            R3, #:lower16:qword_73318
MOVW            R2, #:lower16:aStaleSubmissio ; "Stale submissions discarded due to new "...
MOVT            R3, #:upper16:qword_73318
MOVT            R2, #:upper16:aStaleSubmissio ; "Stale submissions discarded due to new "...
LDRD            R6, R7, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R6, R7, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30B80
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_317B4

loc_30B80
MOVW            R3, #:lower16:dword_755D0
MOVW            R2, #:lower16:aUnableToGetWor ; "Unable to get work from server occasion"...
MOVT            R3, #:upper16:dword_755D0
MOVT            R2, #:upper16:aUnableToGetWor ; "Unable to get work from server occasion"...
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30BD0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_317D0

loc_30BD0
MOVW            R3, #:lower16:dword_767E0
MOVW            R2, #:lower16:aWorkItemsGener ; "Work items generated locally: %d"
MOVT            R3, #:upper16:dword_767E0
MOVT            R2, #:upper16:aWorkItemsGener ; "Work items generated locally: %d"
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30C20
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_317EC

loc_30C20
MOVW            R3, #:lower16:dword_74494
MOVW            R2, #:lower16:aSubmittingWork ; "Submitting work remotely delay occasion"...
MOVT            R3, #:upper16:dword_74494
MOVT            R2, #:upper16:aSubmittingWork ; "Submitting work remotely delay occasion"...
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30C70
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3177C

loc_30C70
MOVW            R3, #:lower16:dword_766DC
MOVW            R2, #:lower16:aNewBlocksDetec ; "New blocks detected on network: %d\n"
MOVT            R3, #:upper16:dword_766DC
MOVT            R2, #:upper16:aNewBlocksDetec ; "New blocks detected on network: %d\n"
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDR             R3, [R9]
CMP             R3, #1
BLE             loc_31124

loc_30CAC
MOVW            R7, #:lower16:byte_68BD4
MOVW            R3, #:lower16:dword_744C8
MOVW            R2, #:lower16:aSubmittingWork_0 ; " Submitting work remotely delay occasio"...
MOVW            R1, #:lower16:aUnableToGetWor_0 ; " Unable to get work from server occasio"...
MOVT            R7, #:upper16:byte_68BD4
MOV             R8, #0
MOVT            R3, #:upper16:dword_744C8
MOVT            R2, #:upper16:aSubmittingWork_0 ; " Submitting work remotely delay occasio"...
MOVT            R1, #:upper16:aUnableToGetWor_0 ; " Unable to get work from server occasio"...
STR             R3, [SP,#0x92C+var_914]
STR             R2, [SP,#0x92C+var_910]
STR             R1, [SP,#0x92C+format]

loc_30CDC
LDR             R3, [SP,#0x92C+var_914]
LDRB            R2, [R4]
LDR             R3, [R3]
CMP             R2, #0
LDR             R6, [R3,R8,LSL#2]
BNE             loc_30D60
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_30D60
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_30D60
LDR             R3, [R6,#0x20]
CMP             R3, #0
BEQ             loc_30DF0

loc_30D20
LDR             R1, [R2]
CMP             R1, #3
BLE             loc_313B8
ADD             R5, SP, #0x92C+s
B               loc_30DA4

loc_30D34
MOV             R3, #qword_767E8
LDRD            R2, R3, [R3]
ORRS            R3, R2, R3
BEQ             loc_30A28
LDRB            R3, [R4]
MOV             R6, #0
MOV             R7, #0
CMP             R3, #0
BEQ             loc_30994
B               loc_309A8

loc_30D60
ADD             R5, SP, #0x92C+s
MOVW            R2, #:lower16:aPoolS ; "Pool: %s"
LDR             R3, [R6,#0xA4]
MOVT            R2, #:upper16:aPoolS ; "Pool: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDR             R3, [R6,#0x20]
CMP             R3, #0
BEQ             loc_30DE4
LDRB            R2, [R4]
CMP             R2, #0
BEQ             loc_314D4

loc_30DA4
MOVW            R2, #:lower16:(asc_4D5C4+4) ; ""
CMP             R3, #1
MOVT            R2, #:upper16:(asc_4D5C4+4) ; ""
MOV             R1, #(aStats+4) ; "S"
MOVLE           R1, R2
MOVW            R2, #:lower16:aSolvedDBlockS ; "SOLVED %d BLOCK%s!"
STR             R1, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aSolvedDBlockS ; "SOLVED %d BLOCK%s!"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58

loc_30DE4
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30E00

loc_30DF0
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_313B0

loc_30DFC
ADD             R5, SP, #0x92C+s

loc_30E00
LDR             R1, [R6,#0x10]
MOVW            R2, #:lower16:aShareSubmissio_0 ; " Share submissions: %lld"
LDR             R3, [R6,#8]
MOVT            R2, #:upper16:aShareSubmissio_0 ; " Share submissions: %lld"
LDR             R0, [R6,#0xC]
LDR             R12, [R6,#0x14]
ADDS            R3, R3, R1
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x92C+var_92C]
ADC             R3, R0, R12
MOV             R0, R5  ; s
STR             R3, [SP,#0x92C+var_92C+4]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30E5C
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_314B0

loc_30E5C
LDRD            R10, R11, [R6,#8]
MOV             R2, #aAcceptedShares_0 ; " Accepted shares: %lld"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30EA0
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_31498

loc_30EA0
LDRD            R10, R11, [R6,#0x10]
MOV             R2, #aRejectedShares_0 ; " Rejected shares: %lld"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30EE4
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_31468

loc_30EE4
LDRD            R10, R11, [R6,#0x48]
MOV             R2, #aAcceptedDiffic_0 ; " Accepted difficulty shares: %1.f"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30F28
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_31474

loc_30F28
LDRD            R10, R11, [R6,#0x50]
MOV             R2, #aRejectedDiffic_0 ; " Rejected difficulty shares: %1.f"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
STRD            R10, R11, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDRD            R10, R11, [R6,#8]
ORRS            R3, R10, R11
BNE             loc_30F74

loc_30F60
LDRD            R2, R3, [R6,#0x10]
ORRS            R3, R2, R3
BEQ             loc_31018
MOV             R10, #0
MOV             R11, #0

loc_30F74
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_30F8C
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_314BC

loc_30F8C
LDR             R3, [R6,#0x10]
ADD             R5, SP, #0x92C+s
LDR             R2, [R6,#0x14]
ADDS            R12, R3, R3
STR             R3, [SP,#0x92C+var_918]
ADC             R1, R2, R2
ADDS            R12, R12, R3
ADC             R1, R1, R2
MOV             R0, R12,LSL#5
MOV             LR, R1,LSL#5
STR             R2, [SP,#0x92C+var_91C]
ADDS            R0, R12, R0
ORR             LR, LR, R12,LSR#27
ADC             R1, R1, LR
ADDS            R0, R0, R3
ADC             R1, R1, R2
BLX             sub_4A11C
LDR             R3, [SP,#0x92C+var_918]
LDR             R2, [SP,#0x92C+var_91C]
VMOV            D8, R0, R1
ADDS            R0, R3, R10
ADC             R1, R2, R11
BLX             sub_4A11C
VMOV            D7, R0, R1
MOV             R2, #aRejectRatio1f_0 ; " Reject ratio: %.1f%%"
MOV             R1, #0x800 ; maxlen
VDIV.F64        D7, D8, D7
MOV             R0, R5  ; s
VSTR            D7, [SP,#0x92C+var_92C]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_31018
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_31030
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_3145C

loc_31030
ADD             R5, SP, #0x92C+s
MOVW            R2, #:lower16:aItemsWorkedOnD ; " Items worked on: %d"
LDR             R3, [R6,#0x44]
MOVT            R2, #:upper16:aItemsWorkedOnD ; " Items worked on: %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_31074
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_31480

loc_31074
MOVW            R2, #:lower16:aStaleSubmissio_0 ; " Stale submissions discarded due to new"...
LDR             R3, [R6,#0x78]
MOVT            R2, #:upper16:aStaleSubmissio_0 ; " Stale submissions discarded due to new"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_310B4
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_3148C

loc_310B4
LDR             R3, [R6,#0x80]
MOV             R1, #0x800 ; maxlen
LDR             R2, [SP,#0x92C+format] ; format
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_310F0
LDRB            R3, [R7]
CMP             R3, #0
BEQ             loc_314A4

loc_310F0               ; format
LDR             R2, [SP,#0x92C+var_910]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R6,#0x84]
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_31114
LDR             R3, [R9]
ADD             R8, R8, #1
CMP             R3, R8
BGT             loc_30CDC

loc_31124
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_31144
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31564

loc_31144
MOVW            LR, #:lower16:aSummaryOfPerDe ; "Summary of per device statistics:\n"
ADD             R5, SP, #0x92C+s
MOVT            LR, #:upper16:aSummaryOfPerDe ; "Summary of per device statistics:\n"
MOV             R12, R5
LDM             LR!, {R0-R3} ; "Summary of per device statistics:\n"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "evice statistics:\n"
LDR             LR, [LR] ; ":\n"
STM             R12!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58

loc_31184
MOV             R7, #dword_755C0
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_31254
MOVW            R10, #:lower16:nullsub_1
MOVW            R9, #:lower16:nullsub_2
MOVW            R8, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
MOVW            R11, #:lower16:byte_68BD4
MOVW            R3, #:lower16:dword_67DB4
MOVT            R10, #:upper16:nullsub_1
MOVT            R9, #:upper16:nullsub_2
MOVT            R8, #:upper16:(aApiMcastFromSS+0x14) ; "%s"
MOVT            R11, #:upper16:byte_68BD4
MOV             R5, #0
MOVT            R3, #:upper16:dword_67DB4
STR             R3, [SP,#0x92C+var_91C]

loc_311C8
MOV             R0, R5
ADD             R6, SP, #0x92C+s
BL              sub_3046C
MOV             R3, R0
ADD             R0, SP, #0x92C+var_904
LDR             R1, [R3,#4]
MOV             R2, R3
ADD             R5, R5, #1
STR             R10, [R1,#0x14]
MOV             R1, #0xFF
LDR             R3, [R3,#4]
STR             R9, [R3,#0x18]
BL              sub_2E7D0
LDRB            R12, [R4]
MOV             R2, R8  ; format
MOV             R1, #0x800 ; maxlen
ADD             R3, SP, #0x92C+var_904
MOV             R0, R6  ; s
CMP             R12, #0
BNE             loc_31234
LDRB            R12, [R11]
CMP             R12, #0
BNE             loc_31234
LDR             R12, [SP,#0x92C+var_91C]
LDR             R12, [R12]
CMP             R12, #3
BLE             loc_31248

loc_31234
BL              snprintf
MOV             R1, R6
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_31248
LDR             R3, [R7]
CMP             R3, R5
BGT             loc_311C8

loc_31254
LDR             R3, [SP,#0x92C+var_908]
LDR             R1, [R3,#(dword_69050 - 0x68BD8)]
LDRB            R3, [R4]
CMP             R1, #0
BEQ             loc_31348
MOVW            R6, #:lower16:dbl_73370
CMP             R3, #0
MOVT            R6, #:upper16:dbl_73370
VLDR            D7, [R6]
BNE             loc_31290
MOV             R3, #byte_68BD4
LDRB            R2, [R3]
CMP             R2, #0
BEQ             loc_31744

loc_31290
ADD             R5, SP, #0x92C+s
MOVW            R2, #:lower16:aMined0fAccepte ; "Mined %.0f accepted shares of %d reques"...
VSTR            D7, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aMined0fAccepte ; "Mined %.0f accepted shares of %d reques"...
STR             R1, [SP,#0x92C+var_924]
MOV             R0, R5  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDR             R3, [SP,#0x92C+var_908]
VLDR            D7, [R6]
LDR             R1, [R3,#(dword_69050 - 0x68BD8)]
LDRB            R3, [R4]
VMOV            S13, R1
VCVT.F64.S32    D6, S13
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
BLE             loc_31348
CMP             R3, #0
BNE             loc_31318
MOV             R3, #byte_68BD4

loc_312F4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_31314
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_31584

loc_31314
ADD             R5, SP, #0x92C+s

loc_31318
MOVW            R2, #:lower16:aWarningMinedOn ; "WARNING - Mined only %.0f shares of %d "...
STR             R1, [SP,#0x92C+var_924]
VSTR            D7, [SP,#0x92C+var_92C]
MOVT            R2, #:upper16:aWarningMinedOn ; "WARNING - Mined only %.0f shares of %d "...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]

loc_31348
CMP             R3, #0
BNE             loc_31364
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3157C

loc_31364
ADD             R3, SP, #0x92C+s
MOV             R12, #0x20 ; ' '
MOV             R1, R3
MOV             R2, #0
MOV             R0, #4
STRH            R12, [R3]
BL              sub_20F58

loc_31380
MOV             R3, #stderr
LDR             R0, [R3] ; stream
BL              fflush
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
ADD             SP, SP, #0x920
ADD             SP, SP, #0xC
VPOP            {D8-D10}
POP             {R4-R11,PC}

loc_313B0
MOV             R2, #dword_67DB4

loc_313B8
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_30DFC

loc_313C4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30E5C

loc_313D4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30EA0

loc_313E4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30EE4

loc_313F4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30F28
LDRD            R10, R11, [R6,#8]
ORRS            R3, R10, R11
BEQ             loc_30F60
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_30F8C

loc_3141C
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_31030

loc_31428
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_31074

loc_31438
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_310B4

loc_31448
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_310F0
B               loc_31114

loc_3145C
MOV             R2, #dword_67DB4
B               loc_3141C

loc_31468
MOV             R2, #dword_67DB4
B               loc_313E4

loc_31474
MOV             R2, #dword_67DB4
B               loc_313F4

loc_31480
MOV             R2, #dword_67DB4
B               loc_31428

loc_3148C
MOV             R2, #dword_67DB4
B               loc_31438

loc_31498
MOV             R2, #dword_67DB4
B               loc_313D4

loc_314A4
MOV             R2, #dword_67DB4
B               loc_31448

loc_314B0
MOV             R2, #dword_67DB4
B               loc_313C4

loc_314BC
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_3141C
B               loc_30F8C

loc_314D4
LDRB            R2, [R7]
CMP             R2, #0
BNE             loc_30DA4
MOV             R2, #dword_67DB4
B               loc_30D20

loc_314EC
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_305D4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_3062C

loc_31510
MOV             R9, #dword_733CC
LDR             R3, [R9]
CMP             R3, #1
BNE             loc_30668
B               loc_31650

loc_31528
MOV             R2, #dword_67DB4

loc_31530
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_30688
MOVW            R3, #:lower16:dbl_756A8
VLDR            D6, [R11]
MOVT            R3, #:upper16:dbl_756A8
VLDR            D5, [R3]
VDIV.F64        D7, D5, D6

loc_31550
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_31854
ADD             R5, SP, #0x92C+s
B               loc_306F0

loc_31564
MOV             R2, #dword_67DB4

loc_3156C
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_31144
B               loc_31184

loc_3157C
MOV             R2, #dword_67DB4

loc_31584
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_31364
B               loc_31380

loc_31594
MOV             R2, #dword_67DB4

loc_3159C
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_30A48
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30A9C

loc_315B8
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30AE4

loc_315C8
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30B2C

loc_315D8
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30B80

loc_315E8
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30BD0

loc_315F8
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30C20

loc_31608
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30C70

loc_31618
LDR             R3, [R9]
CMP             R3, #1
BGT             loc_30CAC
B               loc_3156C

loc_31628
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_31660
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_31660
MOV             R2, #dword_67DB4

loc_31650
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BLE             loc_31530

loc_31660
MOVW            R3, #:lower16:dword_744C8
MOVW            R2, #:lower16:aPoolS ; "Pool: %s"
MOVT            R3, #:upper16:dword_744C8
MOVT            R2, #:upper16:aPoolS ; "Pool: %s"
LDR             R3, [R3]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, [R3]
LDR             R3, [R3,#0xA4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
B               loc_30668

loc_3169C
MOV             R2, #dword_67DB4

loc_316A4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_307D0

loc_316B4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30838

loc_316C4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30884

loc_316D4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_308F4

loc_316E4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30948
LDRD            R6, R7, [R7]
ORRS            R3, R6, R7
BEQ             loc_30D34

loc_31700
LDR             R3, [R2]
CMP             R3, #3
BLE             loc_3159C
B               loc_309A8

loc_31710
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_3062C
B               loc_31510

loc_3172C
MOV             R2, #dword_67DB4
B               loc_31550

loc_31738
MOV             R2, #dword_67DB4
B               loc_316B4

loc_31744
MOV             R2, #dword_67DB4
LDR             R0, [R2]
CMP             R0, #3
BGT             loc_31290
VMOV            S13, R1
VCVT.F64.S32    D6, S13
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
BGT             loc_312F4
B               loc_31584

loc_31770
MOV             R2, #dword_67DB4
B               loc_31700

loc_3177C
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30C70
B               loc_31618

loc_31798
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30B2C
B               loc_315D8

loc_317B4
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30B80
B               loc_315E8

loc_317D0
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30BD0
B               loc_315F8

loc_317EC
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30C20
B               loc_31608

loc_31808
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30A9C
B               loc_315B8

loc_31824
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30AE4
B               loc_315C8

loc_31840
MOV             R2, #dword_67DB4
B               loc_316C4

loc_3184C
MOV             R2, #dword_67DB4

loc_31854
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30738

loc_31864
LDR             R3, [R2]
CMP             R3, #3
ADDGT           R5, SP, #0x92C+s
BGT             loc_30788
B               loc_316A4

loc_31878
MOV             R2, #dword_67DB4
B               loc_31864

loc_31884
MOV             R2, #dword_67DB4
B               loc_316D4

loc_31890
MOV             R2, #dword_67DB4
B               loc_316E4
; End of function sub_304E0




; int __fastcall sub_3189C(int)
sub_3189C

var_84C= -0x84C
info= -0x844
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x840
SUB             SP, SP, #0xC
MOV             R4, R0
ADD             R0, SP, #0x84C+info ; info
BL              sysinfo
CMP             R0, #0
BEQ             loc_31950
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_318E4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_319A8

loc_318E4
BL              __errno_location
LDR             R5, [R0]
MOV             R0, R5  ; errnum
BL              strerror
MOVW            R2, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
STR             R0, [SP,#0x84C+var_84C]
MOVT            R2, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R1, #0x800 ; maxlen
MOV             R3, R5
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_31920               ; timer
MOV             R0, #0
BL              time
MOV             R3, #dword_74484
STR             R0, [R3]
LDR             R0, =dword_69018
BL              sub_239A4
CMP             R4, #0
BEQ             loc_31970

loc_31944
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_31950
LDR             R2, [SP,#0x84C+info]
MOV             R3, #dword_74484
LDR             R0, =dword_69018
STR             R2, [R3]
BL              sub_239A4
CMP             R4, #0
BNE             loc_31944

loc_31970
MOV             R3, #byte_7559C
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_31944
MOV             R3, #byte_68BD6
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31944
BL              sub_304E0
ADD             SP, SP, #0x840
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_319A8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_31920
B               loc_318E4
; End of function sub_3189C

off_319C0 DCD dword_69018



; void sub_319C4()
sub_319C4

var_804= -0x804

PUSH            {R4,R5,LR}
MOV             R5, #byte_74500
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_319F8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31AE8

loc_319F8
MOVW            R2, #:lower16:aAttemptingToRe ; "Attempting to restart %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aAttemptingToRe ; "Attempting to restart %s"
MOV             R0, SP  ; s
LDR             R3, =s
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_31A20
MOVW            R0, #:lower16:sub_31ECC
MOVW            R2, #0x1388
MOV             R1, #0
MOVT            R0, #:upper16:sub_31ECC
MOVW            R4, #:lower16:byte_68BD8
BL              sub_2541C
MOVT            R4, #:upper16:byte_68BD8
MOV             R0, #1
BL              sub_3189C
LDR             R0, [R4,#(dword_68FFC - 0x68BD8)] ; pid
CMP             R0, #0
BLE             loc_31A60
MOV             R1, #0xF ; sig
BL              kill
MOV             R3, #0
STR             R3, [R4,#(dword_68FFC - 0x68BD8)]

loc_31A60               ; argv
LDR             R1, [R4,#(dword_69054 - 0x68BD8)]
LDR             R0, [R1] ; path
BL              execv
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_31A8C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31AC8

loc_31A8C
MOVW            LR, #:lower16:aFailedToRestar ; "Failed to restart application"
MOV             R12, SP
MOVT            LR, #:upper16:aFailedToRestar ; "Failed to restart application"
LDM             LR!, {R0-R3} ; "Failed to restart application"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "t application"
STM             R12!, {R0-R2}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #4
STRH            R3, [R12]
BL              sub_20F58
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_31AC8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_31A8C
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_31AE8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_31A20
B               loc_319F8
; End of function sub_319C4

off_31B00 DCD s



; int __fastcall sub_31B04(int)
sub_31B04
PUSH            {R4,LR}
MOV             R4, R0
MOV             R0, #stru_744A8 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_31B5C
MOVW            R3, #:lower16:dword_744A4
MOVW            R0, #:lower16:stru_744A8
MOVT            R3, #:upper16:dword_744A4
MOVT            R0, #:upper16:stru_744A8 ; rwlock
LDR             R3, [R3]
LDR             R4, [R3,R4,LSL#2]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_31B68
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4,PC}

loc_31B5C
MOVW            R1, #0x261
LDR             R0, =aGetThread ; "get_thread"
BL              sub_30138

loc_31B68
MOVW            R1, #0x263
LDR             R0, =aGetThread ; "get_thread"
BL              sub_2FB24
; End of function sub_31B04

off_31B74 DCD aGetThread ; "get_thread"



; int __fastcall sub_31B78(int)
sub_31B78
PUSH            {R4,LR}
BL              sub_31B04
LDR             R3, [R0,#0x24]
LDR             R0, [R3,#8]
POP             {R4,PC}
; End of function sub_31B78




; bool sub_31B8C()
sub_31B8C

var_800= -0x800

PUSH            {R4-R10,LR}
MOV             R8, #byte_74500
SUB             SP, SP, #0x800
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_31BBC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31E3C

loc_31BBC
MOVW            R12, #:lower16:aReceivedKillMe ; "Received kill message"
MOV             R4, SP
MOVT            R12, #:upper16:aReceivedKillMe ; "Received kill message"
MOV             LR, R4
LDM             R12!, {R0-R3} ; "Received kill message"
MOV             R5, #byte_68BD5
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1} ; "ssage"
STR             R0, [LR],#4
MOV             R0, #6
STRH            R1, [LR]
MOV             R1, R4
BL              sub_20F58
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_31C54
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_31C24
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31EC0

loc_31C24
MOVW            LR, #:lower16:aKillingOffWatc ; "Killing off watchpool thread"
MOV             R12, R4
MOVT            LR, #:upper16:aKillingOffWatc ; "Killing off watchpool thread"
LDM             LR!, {R0-R3} ; "Killing off watchpool thread"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "hpool thread"
STM             R12!, {R0-R2}
MOV             R1, R4
MOV             R2, #1
MOV             R0, #7
STRB            R3, [R12]
BL              sub_20F58

loc_31C54
MOVW            R6, #:lower16:dword_75598
MOVW            R7, #:lower16:byte_68BD8
MOVT            R6, #:upper16:dword_75598
MOVT            R7, #:upper16:byte_68BD8
LDR             R3, [R6]
MOVW            R0, #:lower16:sub_23588
LDR             R1, [R7,#(dword_69058 - 0x68BD8)]
MOVT            R0, #:upper16:sub_23588
MOV             R2, #0x3E8
ADD             R1, R3, R1,LSL#6
BL              sub_2541C
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_31CD8
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_31CAC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31E78

loc_31CAC
MOVW            R12, #:lower16:aKillingOffWatc_0 ; "Killing off watchdog thread"
MOV             LR, SP
MOVT            R12, #:upper16:aKillingOffWatc_0 ; "Killing off watchdog thread"
LDM             R12!, {R0-R3} ; "Killing off watchdog thread"
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; "hdog thread"
STM             LR, {R0-R2}
MOV             R1, SP
MOV             R2, #1
MOV             R0, #7
BL              sub_20F58

loc_31CD8
LDR             R3, [R6]
MOVW            R0, #:lower16:sub_23588
LDR             R1, [R7,#(dword_6905C - 0x68BD8)]
MOVT            R0, #:upper16:sub_23588
MOV             R2, #0x3E8
ADD             R1, R3, R1,LSL#6
BL              sub_2541C
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_31D50
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_31D20
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31E90

loc_31D20
MOVW            LR, #:lower16:aShuttingDownMi ; "Shutting down mining threads"
MOV             R12, SP
MOVT            LR, #:upper16:aShuttingDownMi ; "Shutting down mining threads"
LDM             LR!, {R0-R3} ; "Shutting down mining threads"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "ning threads"
STM             R12!, {R0-R2}
MOV             R1, SP
MOV             R2, #1
MOV             R0, #7
STRB            R3, [R12]
BL              sub_20F58

loc_31D50
MOV             R10, #dword_75588
LDR             R3, [R10]
CMP             R3, #0
BLE             loc_31D98
MOV             R4, #0
MOV             R9, #1

loc_31D6C
MOV             R0, R4
ADD             R4, R4, #1
BL              sub_31B04
CMP             R0, #0
BEQ             loc_31D8C
LDR             R3, [R0,#0x24]
CMP             R3, #0
STRBNE          R9, [R3,#0x16C]

loc_31D8C
LDR             R3, [R10]
CMP             R4, R3
BLT             loc_31D6C

loc_31D98               ; seconds
MOV             R0, #1
BL              sleep
MOVW            R0, #:lower16:sub_31EE4
MOVW            R2, #0xBB8
MOVT            R0, #:upper16:sub_31EE4
MOV             R1, #0
BL              sub_2541C
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_31E18
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_31DE0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31EA8

loc_31DE0
MOVW            LR, #:lower16:aKillingOffApiT ; "Killing off API thread"
MOV             R12, SP
MOVT            LR, #:upper16:aKillingOffApiT ; "Killing off API thread"
LDM             LR!, {R0-R3} ; "Killing off API thread"
STM             R12!, {R0-R3}
MOV             R2, #1
LDM             LR, {R0,R1} ; "thread"
STR             R0, [R12],#4
MOV             R0, #7
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, SP
STRB            R3, [R12]
BL              sub_20F58

loc_31E18
LDR             R1, [R7,#(dword_68FCC - 0x68BD8)]
MOVW            R0, #:lower16:sub_23588
LDR             R3, [R6]
MOV             R2, #0x3E8
MOVT            R0, #:upper16:sub_23588
ADD             R1, R3, R1,LSL#6
BL              sub_2541C
ADD             SP, SP, #0x800
POP             {R4-R10,PC}

loc_31E3C
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #5
BGT             loc_31BBC
MOV             R5, #byte_68BD5
LDRB            R2, [R5]
CMP             R2, #0
BEQ             loc_31C54

loc_31E64
LDR             R3, [R3]
CMP             R3, #6
MOVGT           R4, SP
BGT             loc_31C24
B               loc_31C54

loc_31E78
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_31CD8
B               loc_31CAC

loc_31E90
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_31D50
B               loc_31D20

loc_31EA8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_31E18
B               loc_31DE0

loc_31EC0
MOV             R3, #dword_67DB4
B               loc_31E64
; End of function sub_31B8C




; bool sub_31ECC()
sub_31ECC
MOV             R3, #byte_68BD6
LDRB            R3, [R3]
CMP             R3, #0
BXEQ            LR
B               sub_31B8C
; End of function sub_31ECC




; void sub_31EE4()
sub_31EE4

var_800= -0x800

MOVW            R3, #:lower16:byte_68BD5
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_68BD5
SUB             SP, SP, #0x800
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31F60
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_31F28
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_31FDC

loc_31F28
MOVW            LR, #:lower16:aKillingOffMini ; "Killing off mining threads"
MOV             R12, SP
MOVT            LR, #:upper16:aKillingOffMini ; "Killing off mining threads"
LDM             LR!, {R0-R3} ; "Killing off mining threads"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "ng threads"
STM             R12!, {R0,R1}
MOV             R1, SP
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #7
MOV             R2, #1
STRB            R3, [R12]
BL              sub_20F58

loc_31F60
MOV             R6, #dword_75588
LDR             R3, [R6]
CMP             R3, #0
BLE             loc_31FD4
MOV             R4, #0
B               loc_31F90

loc_31F7C
BL              sub_23588

loc_31F80
LDR             R3, [R6]
ADD             R4, R4, #1
CMP             R3, R4
BLE             loc_31FD4

loc_31F90
MOV             R0, R4
BL              sub_31B04
SUBS            R5, R0, #0
BEQ             loc_31F7C
LDR             R3, [R5,#0xC]
CMP             R3, #0
BEQ             loc_31F7C
BL              sub_23588
LDR             R0, [R5,#0xC] ; th
CMP             R0, #0
BEQ             loc_31F80
MOV             R1, #0  ; thread_return
ADD             R4, R4, #1
BL              pthread_join
LDR             R3, [R6]
CMP             R3, R4
BGT             loc_31F90

loc_31FD4
ADD             SP, SP, #0x800
POP             {R4-R6,PC}

loc_31FDC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_31F60
B               loc_31F28
; End of function sub_31EE4




; int sub_31FF4()
sub_31FF4
MOVW            R0, #:lower16:stru_7453C
PUSH            {R4,LR}
MOVT            R0, #:upper16:stru_7453C ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_32064
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_32070
MOV             R0, #stru_7453C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3207C
MOVW            R3, #:lower16:byte_68BD8
LDR             R0, =rwlock ; rwlock
MOVT            R3, #:upper16:byte_68BD8
LDR             R4, [R3,#(dword_69060 - 0x68BD8)]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_32088
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4,PC}

loc_32064
MOVW            R1, #0x346
LDR             R0, =aCurrentPool ; "current_pool"
BL              sub_2EFE0

loc_32070
MOVW            R1, #0x346
LDR             R0, =aCurrentPool ; "current_pool"
BL              sub_30138

loc_3207C
MOVW            R1, #0x346
LDR             R0, =aCurrentPool ; "current_pool"
BL              sub_2F03C

loc_32088
MOVW            R1, #0x34A
LDR             R0, =aCurrentPool ; "current_pool"
BL              sub_2FB24
; End of function sub_31FF4

off_32094 DCD rwlock
off_32098 DCD aCurrentPool ; "current_pool"



; int __fastcall sub_3209C(int, int, int)
sub_3209C
PUSH            {R4-R8,LR}
MOV             R7, R0
MOVW            R0, #:lower16:stru_766C4
MOV             R6, R1
MOVT            R0, #:upper16:stru_766C4 ; mutex
MOV             R4, R2
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_32170
LDR             R1, [R7,#0x24]
MOV             R3, #qword_76850
MOV             R5, R4,ASR#31
LDM             R3, {R0,LR}
LDR             R2, [R1,#0xC0]
LDR             R12, [R1,#0xC4]
ADDS            R0, R0, R4
ADC             LR, LR, R5
ADDS            R2, R2, R4
STR             R0, [R3]
STR             LR, [R3,#(qword_76850+4 - 0x76850)]
ADC             R3, R12, R5
CMP             R6, #0
STRD            R2, R3, [R1,#0xC0]
BEQ             loc_32150
LDR             R3, [R6,#0x28]
LDR             R2, [R6,#0x2C]
ADDS            R3, R3, R4
ADC             R2, R2, R5
STR             R3, [R6,#0x28]
STR             R2, [R6,#0x2C]

loc_32118
LDR             R4, [R7,#0x24]
MOV             R0, #0  ; timer
BL              time
STR             R0, [R4,#0xE8]
MOV             R0, #stru_766C4 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3217C
MOVW            R3, #:lower16:off_67ED8
POP             {R4-R8,LR}
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BX              R3      ; sub_21C98

loc_32150
BL              sub_31FF4
LDR             R3, [R0,#0x28]
LDR             R2, [R0,#0x2C]
ADDS            R3, R3, R4
ADC             R2, R2, R5
STR             R3, [R0,#0x28]
STR             R2, [R0,#0x2C]
B               loc_32118

loc_32170
MOVW            R1, #0x228E
LDR             R0, =aIncWorkStats ; "inc_work_stats"
BL              sub_2EFE0

loc_3217C
MOVW            R1, #0x229C
LDR             R0, =aIncWorkStats ; "inc_work_stats"
BL              sub_2F03C
; End of function sub_3209C

off_32188 DCD aIncWorkStats ; "inc_work_stats"



; int sub_3218C()
sub_3218C
MOVW            R0, #:lower16:stru_7453C
PUSH            {R4,LR}
MOVT            R0, #:upper16:stru_7453C ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_32200
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_3220C
MOV             R0, #stru_7453C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_32218
MOVW            R3, #:lower16:byte_68BD8
LDR             R0, =rwlock ; rwlock
MOVT            R3, #:upper16:byte_68BD8
LDR             R3, [R3,#(dword_69060 - 0x68BD8)]
LDR             R4, [R3,#4]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_32224
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4,PC}

loc_32200
MOVW            R1, #0x1CFA
LDR             R0, =aCpPrio ; "cp_prio"
BL              sub_2EFE0

loc_3220C
MOVW            R1, #0x1CFA
LDR             R0, =aCpPrio ; "cp_prio"
BL              sub_30138

loc_32218
MOVW            R1, #0x1CFA
LDR             R0, =aCpPrio ; "cp_prio"
BL              sub_2F03C

loc_32224
MOVW            R1, #0x1CFC
LDR             R0, =aCpPrio ; "cp_prio"
BL              sub_2FB24
; End of function sub_3218C

off_32230 DCD rwlock
off_32234 DCD aCpPrio   ; "cp_prio"



; void __fastcall sub_32238(_DWORD *)
sub_32238

var_80C= -0x80C
s= -0x804

MOVW            R3, #:lower16:byte_68BD8
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:byte_68BD8
MOV             R2, #0
SUB             SP, SP, #0x800
MOV             R4, R0
LDR             R3, [R3,#(dword_68FD0 - 0x68BD8)]
SUB             SP, SP, #0xC
STR             R2, [R0,#0x1C]
CMP             R3, R2
BEQ             loc_322E8

loc_32264
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3228C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_322C8

loc_3228C
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aPoolDSAlive ; "Pool %d %s alive"
LDR             R3, [R4]
MOVT            R2, #:upper16:aPoolDSAlive ; "Pool %d %s alive"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x80C+s ; s
STR             R12, [SP,#0x80C+var_80C]
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_322BC
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_322C8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_3228C
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_322E8
LDR             R5, [R0,#4]
BL              sub_3218C
CMP             R5, R0
BGE             loc_32264
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32334
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32334
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_322BC

loc_32334
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aPoolDSAliveTes ; "Pool %d %s alive, testing stability"
LDR             R3, [R4]
ADD             R0, SP, #0x80C+s ; s
MOVT            R2, #:upper16:aPoolDSAliveTes ; "Pool %d %s alive, testing stability"
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x80C+var_80C]
BL              snprintf
ADD             R1, SP, #0x80C+s
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_32238




; void __fastcall sub_32370(_DWORD *)
sub_32370
MOVW            R3, #:lower16:byte_74500
PUSH            {R4,LR}
MOVT            R3, #:upper16:byte_74500
SUB             SP, SP, #0x800
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_323A4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_323DC

loc_323A4
MOVW            R2, #:lower16:aStratumConnect ; "Stratum connection to pool %d resumed"
LDR             R3, [R4]
MOV             R0, SP  ; s
MOVT            R2, #:upper16:aStratumConnect ; "Stratum connection to pool %d resumed"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
MOV             R0, R4
BL              sub_32238
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_323DC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_323A4
MOV             R0, R4
BL              sub_32238
ADD             SP, SP, #0x800
POP             {R4,PC}
; End of function sub_32370




; void __fastcall sub_32400(int)
sub_32400
PUSH            {R4,LR}
ADD             R1, R0, #0x61 ; 'a'
MOV             R4, R0
BL              sub_2F180
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R0, R4
POP             {R4,LR}
B               sub_32370
; End of function sub_32400




; int __fastcall sub_32424(int)
sub_32424
LDR             R3, [R0,#0x64]
CMP             R3, #1
BEQ             loc_32438
MOV             R0, #0
BX              LR

loc_32438
PUSH            {R4-R6,LR}
MOV             R5, #byte_68BD8
LDR             R3, [R5,#(dword_68FD0 - 0x68BD8)]
SUB             R3, R3, #3
CMP             R3, #1
BHI             loc_3245C

loc_32454
MOV             R0, #1
POP             {R4-R6,PC}

loc_3245C
LDRB            R3, [R0,#0x280]
CMP             R3, #0
BEQ             loc_32474
LDRB            R3, [R0,#0x61]
CMP             R3, #0
BNE             loc_32454

loc_32474
MOV             R4, R0
BL              sub_31FF4
CMP             R4, R0
BEQ             loc_32454
LDR             R3, [R4,#0x2DC]
CMP             R3, #0
BNE             loc_32454
LDR             R3, [R5,#(dword_68FD0 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_324A4

loc_3249C
LDRB            R0, [R5,#(byte_69064 - 0x68BD8)]
POP             {R4-R6,PC}

loc_324A4
LDR             R4, [R4,#4]
BL              sub_3218C
CMP             R4, R0
BGE             loc_3249C
B               loc_32454
; End of function sub_32424




; _BYTE *sub_324B8()
sub_324B8

var_814= -0x814
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4-R9,LR}
MOVW            R6, #:lower16:aCgminerC ; "cgminer.c"
LDR             R8, =aAddPool ; "add_pool"
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOVT            R6, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x2FA
MOV             R5, #dword_733CC
MOV             R2, R6
MOV             R3, R8
STR             R1, [SP,#0x814+var_814]
MOVW            R0, #0x738
MOV             R1, #1
BL              sub_22A44
LDR             R12, [R5]
MOVW            R7, #:lower16:dword_744C8
MOV             R4, R0
MOVW            LR, #0x306
MOVT            R7, #:upper16:dword_744C8
MOV             R9, #0
STR             R12, [R0]
MOV             R2, R6
LDR             R1, [R5]
MOV             R3, R8
STRB            R9, [R0,#0x284]
STR             R12, [R4,#4]
ADD             R1, R1, #2
STR             LR, [SP,#0x814+var_814]
MOV             R1, R1,LSL#2
LDR             R0, [R7]
BL              sub_22AD4
LDR             R2, [R5]
MOV             R3, R0
MOV             R1, R9  ; mutexattr
STR             R3, [R7]
ADD             R0, R4, #0xBC ; mutex
ADD             R12, R2, #1
STR             R12, [R5]
STR             R4, [R3,R2,LSL#2]
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; cond_attr
BNE             loc_32650
ADD             R0, R4, #0x128 ; cond
BL              pthread_cond_init
SUBS            R1, R0, #0 ; mutexattr
BNE             loc_3266C
ADD             R0, R4, #0xD4 ; mutex
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; attr
BNE             loc_3269C
ADD             R0, R4, #0xEC ; rwlock
BL              pthread_rwlock_init
SUBS            R1, R0, #0 ; mutexattr
BNE             loc_326B8
ADD             R0, R4, #0x2C0 ; mutex
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; mutexattr
BNE             loc_326C8
ADD             R0, R4, #0x2E4 ; mutex
BL              pthread_mutex_init
SUBS            R1, R0, #0 ; attr
BNE             loc_326E4
ADD             R0, R4, #0x2FC ; rwlock
BL              pthread_rwlock_init
SUBS            R5, R0, #0
BNE             loc_32608
MOVW            R3, #:lower16:aMethodGetworkP ; "{\"method\": \"getwork\", \"params\": ["...
ADD             R2, R4, #0x158
MOVT            R3, #:upper16:aMethodGetworkP ; "{\"method\": \"getwork\", \"params\": ["...
MOV             R0, #0xFFFFFFFF
MOV             R1, #1
STR             R0, [R4,#0x88]
STR             R5, [R4,#0xB8]
STR             R3, [R4,#0xA0]
STR             R2, [R4,#0x158]
STR             R2, [R4,#0x15C]
STR             R1, [R4,#0x38]
BL              sub_2C6A8
MOV             R0, R4
STRB            R5, [R4,#0x244]
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R9,PC}

loc_32608
BL              __errno_location
LDR             R3, [R0]
MOVW            R1, #0x312

loc_32614
MOVW            R2, #:lower16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_3 ; "Failed to pthread_rwlock_init errno=%d "...

loc_32620
STR             R1, [SP,#0x814+var_80C]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x814+var_814]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1

loc_3263C
MOV             R0, #3
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_32650
BL              __errno_location
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVW            R1, #0x309
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
B               loc_32620

loc_3266C
MOVW            R12, #:lower16:aFailedToPthrea ; "Failed to pthread_cond_init in add_pool"
ADD             LR, SP, #0x814+s
MOVT            R12, #:upper16:aFailedToPthrea ; "Failed to pthread_cond_init in add_pool"
LDM             R12!, {R0-R3} ; "Failed to pthread_cond_init in add_pool"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "d_cond_init in add_pool"
STM             LR!, {R0-R3}
MOV             R2, #1
LDM             R12, {R0,R1} ; "dd_pool"
STM             LR, {R0,R1}
ADD             R1, SP, #0x814+s
B               loc_3263C

loc_3269C
BL              __errno_location
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOV             R1, #0x310
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
B               loc_32620

loc_326B8
BL              __errno_location
MOV             R1, #0x310
LDR             R3, [R0]
B               loc_32614

loc_326C8
BL              __errno_location
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVW            R1, #0x311
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
B               loc_32620

loc_326E4
BL              __errno_location
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVW            R1, #0x312
STR             R8, [SP,#0x814+var_810]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
B               loc_32620
; End of function sub_324B8

off_32700 DCD aAddPool  ; "add_pool"



; const char *__fastcall sub_32704(char *s)
sub_32704
PUSH            {R4-R6,LR}
MOV             R4, #byte_68BD8
LDR             R3, [R4,#(dword_69068 - 0x68BD8)]
CMP             R3, #0
BNE             loc_327D4
LDR             R3, [R4,#(dword_6906C - 0x68BD8)]
CMP             R3, #0
BNE             loc_327D4
MOVW            R2, #:lower16:dword_733CC
LDR             R3, [R4,#(dword_69070 - 0x68BD8)]
MOVT            R2, #:upper16:dword_733CC
MOV             R5, R0
LDR             R2, [R2]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_69070 - 0x68BD8)]
CMP             R3, R2
BGT             loc_327E4

loc_3274C
MOVW            R2, #:lower16:dword_744C8
SUB             R3, R3, #0xC0000001
MOVT            R2, #:upper16:dword_744C8
MOV             R0, R5  ; s
LDR             R2, [R2]
LDR             R6, [R2,R3,LSL#2]
BL              __strdup
MOV             R4, R0
MOV             R0, R5
ADD             R1, R6, #0xA8
BL              sub_4014C
MOVW            R1, #:lower16:(aHttp+4) ; ":"
MOV             R0, R4  ; s
MOVT            R1, #:upper16:(aHttp+4) ; delim
BL              strtok
CMP             R0, #0
STR             R0, [R6,#0xAC]
MOVEQ           R4, #aFailedToFindDe ; "Failed to find : delimited user info"
BEQ             loc_327DC
MOVW            R1, #:lower16:(aHttp+4) ; ":"
MOV             R0, #0  ; s
MOVT            R1, #:upper16:(aHttp+4) ; delim
BL              strtok
CMP             R0, #0
MOV             R4, R0
STR             R0, [R6,#0xB0]
MOVNE           R4, #0
BNE             loc_327DC
MOV             R1, #1  ; size
MOV             R0, R1  ; nmemb
BL              calloc
STR             R0, [R6,#0xB0]
B               loc_327DC

loc_327D4
MOV             R4, #aUseOnlyUserPas ; "Use only user + pass or userpass, but n"...

loc_327DC
MOV             R0, R4
POP             {R4-R6,PC}

loc_327E4
BL              sub_324B8
LDR             R3, [R4,#(dword_69070 - 0x68BD8)]
B               loc_3274C
; End of function sub_32704




; const char *__fastcall sub_327F0(int)
sub_327F0
PUSH            {R4-R6,LR}
MOV             R4, #byte_68BD8
LDR             R3, [R4,#(dword_69070 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_32814
MOV             R0, #aUseOnlyUserPas ; "Use only user + pass or userpass, but n"...
POP             {R4-R6,PC}

loc_32814
MOVW            R2, #:lower16:dword_733CC
LDR             R3, [R4,#(dword_69068 - 0x68BD8)]
MOVT            R2, #:upper16:dword_733CC
MOV             R5, R0
LDR             R2, [R2]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_69068 - 0x68BD8)]
CMP             R3, R2
BGT             loc_32860

loc_32838
MOVW            R2, #:lower16:dword_744C8
SUB             R3, R3, #0xC0000001
MOVT            R2, #:upper16:dword_744C8
MOV             R0, R5
LDR             R2, [R2]
LDR             R1, [R2,R3,LSL#2]
ADD             R1, R1, #0xAC
BL              sub_4014C
MOV             R0, #0
POP             {R4-R6,PC}

loc_32860
BL              sub_324B8
LDR             R3, [R4,#(dword_69068 - 0x68BD8)]
B               loc_32838
; End of function sub_327F0




; int sub_3286C()
sub_3286C
PUSH            {R4,LR}
MOV             R4, #byte_68BD8
MOV             R2, #dword_733CC
LDR             R3, [R4,#(dword_69074 - 0x68BD8)]
LDR             R2, [R2]
ADD             R3, R3, #1
CMP             R3, R2
STR             R3, [R4,#(dword_69074 - 0x68BD8)]
BLE             loc_328A0

loc_32898
BL              sub_324B8
LDR             R3, [R4,#(dword_69074 - 0x68BD8)]

loc_328A0
MOVW            R2, #:lower16:dword_744C8
SUB             R3, R3, #0xC0000001
MOVT            R2, #:upper16:dword_744C8
LDR             R2, [R2]
LDR             R0, [R2,R3,LSL#2]
POP             {R4,PC}
; End of function sub_3286C

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #4
MOV             R5, R0
BL              sub_3286C
MOV             R1, R5
MOV             R4, R0
BL              sub_2C918
LDR             R5, [R4,#0xA4]
MOV             R1, #aNicehashCom ; ".nicehash.com"
MOV             R0, R5
BL              strstr
CMP             R0, #0
BEQ             loc_32970

loc_328F4
MOVW            R3, #:lower16:byte_68BD5
MOV             R2, #1
MOVT            R3, #:upper16:byte_68BD5
STRB            R2, [R4,#0x244]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_32960
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32938
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3298C

loc_32938
MOVW            R2, #:lower16:aPoolDExtranonc_0 ; "Pool %d extranonce subscribing enabled."
MOV             R1, #0x800
MOVT            R2, #:upper16:aPoolDExtranonc_0 ; "Pool %d extranonce subscribing enabled."
LDR             R3, [R4]
MOV             R0, SP
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_32960
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_32970
MOVW            R1, #:lower16:aXnsub ; "#xnsub"
MOV             R0, R5
MOVT            R1, #:upper16:aXnsub ; "#xnsub"
BL              strstr
CMP             R0, #0
BNE             loc_328F4
B               loc_32960

loc_3298C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_32938
B               loc_32960
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #0xC
MOV             R1, #0x3B ; ';'
MOV             R4, R0
BL              strchr
SUBS            R5, R0, #0
BEQ             loc_32A34
MOV             R0, R4
MOV             R7, #0
BL              strlen
STRB            R7, [R5]
MOV             R6, R0
MOV             R0, R4
BL              strlen
CMP             R0, #0
MOVEQ           R0, #aNoParameterFor ; "No parameter for quota found"
BEQ             loc_32A28
ADD             R5, R0, #1
SUB             R6, R6, R5
CMP             R6, R7
MOVLE           R0, #aNoParameterFor_0 ; "No parameter for URL found"
BLE             loc_32A28
MOV             R1, R7
MOV             R2, #0xA
MOV             R0, R4
BL              strtol
SUBS            R6, R0, #0
MOVLT           R0, #aInvalidNegativ ; "Invalid negative parameter for quota se"...
BGE             loc_32A48

loc_32A28
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_32A34
MOV             R0, #aNoSemicolonSep ; "No semicolon separated quota;URL pair f"...
ADD             SP, SP, #0x800
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_32A48
ADD             R4, R4, R5
BL              sub_3286C
MOV             R1, R4
MOV             R5, R0
BL              sub_2C918
MOVW            R3, #:lower16:byte_74500
STR             R6, [R5,#0x38]
MOVT            R3, #:upper16:byte_74500
LDRB            R3, [R3]
CMP             R3, R7
BNE             loc_32A9C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R7
BNE             loc_32A9C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_32AC8

loc_32A9C
MOVW            R2, #:lower16:aSettingPoolDTo ; "Setting pool %d to quota %d"
LDR             R3, [R5]
MOVT            R2, #:upper16:aSettingPoolDTo ; "Setting pool %d to quota %d"
MOV             R1, #0x800
STR             R6, [SP]
ADD             R0, SP, #8
BL              snprintf
ADD             R1, SP, #8
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_32AC8
BL              sub_2C6A8
MOV             R0, #0
B               loc_32A28



; const char *__fastcall sub_32AD4(int)
sub_32AD4
PUSH            {R4-R6,LR}
MOV             R4, #byte_68BD8
LDR             R3, [R4,#(dword_69070 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_32AF8
MOV             R0, #aUseOnlyUserPas ; "Use only user + pass or userpass, but n"...
POP             {R4-R6,PC}

loc_32AF8
MOVW            R2, #:lower16:dword_733CC
LDR             R3, [R4,#(dword_6906C - 0x68BD8)]
MOVT            R2, #:upper16:dword_733CC
MOV             R5, R0
LDR             R2, [R2]
ADD             R3, R3, #1
STR             R3, [R4,#(dword_6906C - 0x68BD8)]
CMP             R3, R2
BGT             loc_32B44

loc_32B1C
MOVW            R2, #:lower16:dword_744C8
SUB             R3, R3, #0xC0000001
MOVT            R2, #:upper16:dword_744C8
MOV             R0, R5
LDR             R2, [R2]
LDR             R1, [R2,R3,LSL#2]
ADD             R1, R1, #0xB0
BL              sub_4014C
MOV             R0, #0
POP             {R4-R6,PC}

loc_32B44
BL              sub_324B8
LDR             R3, [R4,#(dword_6906C - 0x68BD8)]
B               loc_32B1C
; End of function sub_32AD4




; int sub_32B50()
sub_32B50
PUSH            {R4,LR}
MOV             R4, #byte_68BD8
MOV             R2, #dword_733CC
SUB             SP, SP, #0x800
LDR             R3, [R4,#(dword_69078 - 0x68BD8)]
LDR             R2, [R2]
ADD             R3, R3, #1
CMP             R3, R2
STR             R3, [R4,#(dword_69078 - 0x68BD8)]
BGT             loc_32C0C

loc_32B80
MOVW            R1, #:lower16:byte_68BD5
MOVW            R2, #:lower16:dword_744C8
MOVT            R1, #:upper16:byte_68BD5
MOVT            R2, #:upper16:dword_744C8
LDRB            R1, [R1]
SUB             R3, R3, #0xC0000001
LDR             R2, [R2]
CMP             R1, #0
LDR             R4, [R2,R3,LSL#2]
BEQ             loc_32BF8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32BD0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_32C18

loc_32BD0
MOVW            R2, #:lower16:aEnableExtranon ; "Enable extranonce subscribe on %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aEnableExtranon ; "Enable extranonce subscribe on %d"
MOV             R0, SP  ; s
LDR             R3, [R4]
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_32BF8
ADD             R0, R4, #0x244
BL              sub_40068
MOV             R0, #0
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_32C0C
BL              sub_324B8
LDR             R3, [R4,#(dword_69078 - 0x68BD8)]
B               loc_32B80

loc_32C18
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_32BD0
B               loc_32BF8
; End of function sub_32B50




; void __fastcall sub_32C30(pthread_rwlock_t *)
sub_32C30

var_814= -0x814
var_808= -0x808
s= -0x804

PUSH            {R4,R5,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0x810
MOV             R3, #0
SUB             SP, SP, #0xC
STR             R3, [SP,#0x81C+var_808]
BEQ             loc_32C60
ADD             R5, R4, #0x140
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_trywrlock
SUBS            R3, R0, #0
BEQ             loc_32C6C

loc_32C60
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_32C6C
LDR             R2, [R4,#0x164]
MOV             R0, R5  ; rwlock
STR             R3, [R4,#0x164]
STR             R2, [SP,#0x81C+var_808]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_32D4C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [SP,#0x81C+var_808]
CMP             R3, #0
BEQ             loc_32C60
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x25AD
ADD             R0, SP, #0x81C+var_808
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aFlushQueue ; "flush_queue"
BL              sub_2CBA8
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_32C60
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32CF8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_32D34

loc_32CF8
MOVW            LR, #:lower16:aDiscardedQueue ; "Discarded queued work item"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aDiscardedQueue ; "Discarded queued work item"
LDM             LR!, {R0-R3} ; "Discarded queued work item"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; " work item"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x81C+s
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #7
MOV             R2, #0
STRB            R3, [R12]
BL              sub_20F58
B               loc_32C60

loc_32D34
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_32CF8
B               loc_32C60

loc_32D4C
BL              __errno_location
LDR             LR, =aFlushQueue ; "flush_queue"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x25A9
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x81C+var_814]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0
; End of function sub_32C30

off_32D9C DCD aFlushQueue ; "flush_queue"



; int sub_32DA0()
sub_32DA0

var_850= -0x850
var_848= -0x848
info= -0x840
s= -0x800

PUSH            {R4-R8,R10,R11,LR}
SUB             SP, SP, #0x850
ADD             R0, SP, #0x850+info ; info
BL              sysinfo
CMP             R0, #0
BEQ             loc_32E34
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_32DE0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3317C

loc_32DE0
BL              __errno_location
LDR             R4, [R0]
MOV             R0, R4  ; errnum
BL              strerror
MOVW            R2, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
STR             R0, [SP,#0x850+var_850]
MOVT            R2, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
ADD             R0, SP, #0x850+s ; s
BL              snprintf
ADD             R1, SP, #0x850+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_32E1C               ; timer
MOV             R0, #0
BL              time
MOV             R3, #dword_73320
STR             R0, [R3]
B               loc_32E44

loc_32E34
LDR             R2, [SP,#0x850+info]
MOV             R3, #dword_73320
STR             R2, [R3]

loc_32E44
LDR             R0, =dword_69020
BL              sub_239A4
LDR             R1, =dword_69020
ADD             R0, R1, #0x5C ; '\'
BL              sub_257F8
MOVW            R2, #:lower16:dbl_75590
MOV             R0, #0
MOV             R1, #0
MOVT            R2, #:upper16:dbl_75590
LDR             R3, =dbl_69088
MOVW            LR, #:lower16:dbl_75690
STRD            R0, R1, [R2]
MOVW            R12, #:lower16:dbl_75688
MOVW            R2, #:lower16:dbl_75698
MOVT            LR, #:upper16:dbl_75690
MOVT            R12, #:upper16:dbl_75688
MOVT            R2, #:upper16:dbl_75698
STRD            R0, R1, [LR]
MOV             R4, R0
STRD            R0, R1, [R12]
MOVW            LR, #:lower16:dbl_756A8
MOVW            R12, #:lower16:dbl_76830
STRD            R0, R1, [R2]
MOV             R5, R1
ADD             R2, R3, #0x60 ; '`'
MOVT            LR, #:upper16:dbl_756A8
MOVT            R12, #:upper16:dbl_76830
STRD            R0, R1, [LR]
STRD            R0, R1, [R12]

loc_32EB8
STRD            R4, R5, [R3],#8
CMP             R3, R2
BNE             loc_32EB8
LDR             R0, =dbl_68720
MOV             R3, #0
MOV             R2, #0
MOVT            R3, #0x3FF0
MOVW            R1, #:lower16:dword_733CC
MOVW            R12, #:lower16:byte_68BD8
ADD             R6, R0, #0x20 ; ' '
STRD            R2, R3, [R6]
STRD            R2, R3, [R0]
MOVT            R1, #:upper16:dword_733CC
STRD            R2, R3, [R6,#(dbl_68738 - 0x68740)]
MOVW            R3, #:lower16:dword_73368
MOV             R2, #0
LDR             LR, [R1]
MOVT            R12, #:upper16:byte_68BD8
MOVT            R3, #:upper16:dword_73368
MOVW            R0, #:lower16:dword_75580
MOVW            R1, #:lower16:dword_75584
STR             R2, [R3]
MOVT            R0, #:upper16:dword_75580
MOVT            R1, #:upper16:dword_75584
STR             R2, [R12,#(dword_690E8 - 0x68BD8)]
MOVW            R3, #:lower16:dword_7345C
MOVW            R12, #:lower16:dword_767E0
STR             R2, [R0]
MOVT            R12, #:upper16:dword_767E0
STR             R2, [R1]
MOVT            R3, #:upper16:dword_7345C
MOVW            R0, #:lower16:dword_755D0
MOVW            R1, #:lower16:dword_74494
STR             R2, [R12]
MOVT            R0, #:upper16:dword_755D0
STR             R2, [R3]
MOVT            R1, #:upper16:dword_74494
MOVW            R6, #:lower16:dword_755E8
MOVW            R12, #:lower16:qword_755D8
MOVW            R3, #:lower16:qword_767E8
MOVT            R6, #:upper16:dword_755E8
MOVT            R12, #:upper16:qword_755D8
MOVT            R3, #:upper16:qword_767E8
STR             R2, [R0]
MOV             R0, R2
STR             R2, [R1]
MOV             R1, R2
STRD            R0, R1, [R6]
MOVW            R6, #:lower16:qword_73318
STRD            R0, R1, [R12]
MOVW            R12, #:lower16:qword_73380
STRD            R0, R1, [R3]
MOVW            R3, #:lower16:qword_76850
MOVT            R6, #:upper16:qword_73318
MOVT            R12, #:upper16:qword_73380
MOVT            R3, #:upper16:qword_76850
STRD            R0, R1, [R6]
STRD            R0, R1, [R12]
MOVW            R6, #:lower16:dbl_73370
STRD            R0, R1, [R3]
MOVW            R12, #:lower16:dbl_73390
MOVW            R3, #:lower16:dbl_766B8
CMP             LR, #0
MOVT            R6, #:upper16:dbl_73370
MOVT            R12, #:upper16:dbl_73390
MOVT            R3, #:upper16:dbl_766B8
STRD            R4, R5, [R6]
STRD            R4, R5, [R12]
STRD            R4, R5, [R3]
BLE             loc_3302C
MOVW            R3, #:lower16:dword_744C8
MOV             R4, #0
MOVT            R3, #:upper16:dword_744C8
MOV             R5, #0
LDR             R12, [R3]
ADD             LR, R12, LR,LSL#2

loc_32FE8
LDR             R3, [R12],#4
CMP             LR, R12
STR             R2, [R3,#0x74]
STRD            R0, R1, [R3,#8]
STRD            R0, R1, [R3,#0x10]
STR             R2, [R3,#0x78]
STR             R2, [R3,#0x7C]
STR             R2, [R3,#0x80]
STR             R2, [R3,#0x84]
STR             R2, [R3,#0x160]
STRD            R0, R1, [R3,#0x28]
STRD            R4, R5, [R3,#0x48]
STRD            R4, R5, [R3,#0x50]
STRD            R4, R5, [R3,#0x58]
STR             R4, [R3,#0x168]
STR             R5, [R3,#0x16C]
BNE             loc_32FE8

loc_3302C
MOV             R7, #dword_755C0
BL              sub_2D75C
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_330F4
LDR             R8, =dword_69020
MOVW            R6, #:lower16:stru_76838
MOV             R10, #0
MOV             R11, #0
MOVT            R6, #:upper16:stru_76838
MOV             R5, #0

loc_3305C
MOV             R0, R5
BL              sub_3046C
MOV             R1, R8
MOV             R4, R0
ADD             R0, R0, #0x170
BL              sub_257F8
MOV             R0, R6  ; mutex
BL              pthread_mutex_lock
SUBS            R1, R0, #0
BNE             loc_330FC
MOV             R2, #0
MOV             R3, #0
STRD            R10, R11, [R4,#0x50]
MOV             R0, R6  ; mutex
STR             R1, [R4,#0x24]
STR             R1, [R4,#0x28]
STR             R1, [R4,#0x2C]
STRD            R10, R11, [R4,#0x58]
STR             R1, [R4,#0xDC]
STRD            R10, R11, [R4,#0xC8]
STRD            R10, R11, [R4,#0xD0]
STRD            R10, R11, [R4,#0xE0]
STRD            R2, R3, [R4,#0xC0]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3314C
MOVW            R3, #:lower16:off_67ED8
ADD             R5, R5, #1
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [R4,#4]
MOV             R0, R4
LDR             R3, [R3,#0x60]
BLX             R3
LDR             R3, [R7]
CMP             R3, R5
BGT             loc_3305C

loc_330F4
ADD             SP, SP, #0x850
POP             {R4-R8,R10,R11,PC}

loc_330FC
BL              __errno_location
LDR             LR, =aZeroStats ; "zero_stats"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x850+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x181F
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x850+var_848]

loc_33128               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x850+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3314C
BL              __errno_location
LDR             LR, =aZeroStats ; "zero_stats"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x182C
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x850+s
STR             R12, [SP,#0x850+var_848]
B               loc_33128

loc_3317C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_32E1C
B               loc_32DE0
; End of function sub_32DA0

off_33194 DCD dword_69020
off_33198 DCD dbl_69088
off_3319C DCD dbl_68720
off_331A0 DCD aZeroStats ; "zero_stats"



; int __fastcall sub_331A4(int)
sub_331A4

var_810= -0x810
var_808= -0x808
s= -0x800

MOVW            R3, #:lower16:byte_74500
PUSH            {R4,LR}
MOVT            R3, #:upper16:byte_74500
SUB             SP, SP, #0x810
MOV             R4, R0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_331D8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_33290

loc_331D8
LDR             R3, [R4,#0x24]
MOV             R2, #aSDInvalidNonce ; "%s %d: invalid nonce - HW error"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x810+s ; s
LDR             LR, [R3,#4]
LDR             R12, [R3,#8]
LDR             R3, [LR,#8]
STR             R12, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_33210               ; mutex
MOV             R0, #stru_766C4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_332A8
LDR             R12, [R4,#0x24]
MOV             R3, #dword_73368
MOVW            R0, #:lower16:stru_766C4
LDR             R1, [R3]
MOVT            R0, #:upper16:stru_766C4 ; mutex
LDR             R2, [R12,#0x2C]
ADD             R1, R1, #1
ADD             R2, R2, #1
STR             R1, [R3]
STR             R2, [R12,#0x2C]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_332F8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [R4,#0x24]
LDR             R3, [R3,#4]
LDR             R3, [R3,#0x54]
CMP             R3, #0
BEQ             loc_33288
MOV             R0, R4
BLX             R3

loc_33288
ADD             SP, SP, #0x810
POP             {R4,PC}

loc_33290
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_33210
B               loc_331D8

loc_332A8
BL              __errno_location
LDR             LR, =aIncHwErrors ; "inc_hw_errors"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2234
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]

loc_332D4               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_332F8
BL              __errno_location
LDR             LR, =aIncHwErrors ; "inc_hw_errors"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2237
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_332D4
; End of function sub_331A4

off_33328 DCD aIncHwErrors ; "inc_hw_errors"



; int __fastcall sub_3332C(int, int)
sub_3332C

var_814= -0x814
var_80C= -0x80C
s= -0x804

MOVW            R3, #:lower16:byte_74500
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:byte_74500
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R0
LDRB            R3, [R3]
MOV             R5, R1
CMP             R3, #0
BNE             loc_33368
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_33424

loc_33368
LDR             R3, [R4,#0x24]
MOV             R2, #aSDInvalidNonce_0 ; "%s%d: invalid nonce - HW error"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x814+s ; s
LDR             LR, [R3,#4]
LDR             R12, [R3,#8]
LDR             R3, [LR,#8]
STR             R12, [SP,#0x814+var_814]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_333A0               ; mutex
MOV             R0, #stru_766C4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3343C
LDR             R12, [R4,#0x24]
MOV             R3, #dword_73368
MOVW            R0, #:lower16:stru_766C4
LDR             R2, [R3]
MOVT            R0, #:upper16:stru_766C4 ; mutex
LDR             R1, [R12,#0x2C]
ADD             R2, R2, R5
ADD             R1, R1, R5
STR             R2, [R3]
STR             R1, [R12,#0x2C]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3348C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [R4,#0x24]
LDR             R3, [R3,#4]
LDR             R3, [R3,#0x54]
CMP             R3, #0
BEQ             loc_33418
MOV             R0, R4
BLX             R3

loc_33418
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_33424
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_333A0
B               loc_33368

loc_3343C
BL              __errno_location
LDR             LR, =aIncHwErrorsWit ; "inc_hw_errors_with_diff"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2242
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]

loc_33468               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3348C
BL              __errno_location
LDR             LR, =aIncHwErrorsWit ; "inc_hw_errors_with_diff"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2245
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_33468
; End of function sub_3332C

off_334BC DCD aIncHwErrorsWit ; "inc_hw_errors_with_diff"



; unsigned __int64 __fastcall sub_334C0(int)
sub_334C0

var_810= -0x810
var_808= -0x808
s= -0x800

PUSH            {R4-R8,LR}
MOV             R4, R0
VPUSH           {D8}
SUB             SP, SP, #0x810
VLDR            D8, =6.27710174e57
LDRD            R0, R1, [R0,#0xD8]
BLX             sub_4A10C
VMOV            D7, R0, R1
LDRD            R0, R1, [R4,#0xD0]
VMUL.F64        D8, D7, D8
BLX             sub_4A10C
VLDR            D7, =3.40282367e38
VMOV            D6, R0, R1
LDRD            R0, R1, [R4,#0xC8]
VMLA.F64        D8, D6, D7
BLX             sub_4A10C
VLDR            D7, =1.84467441e19
VMOV            D6, R0, R1
LDRD            R0, R1, [R4,#0xC0]
VMLA.F64        D8, D6, D7
BLX             sub_4A10C
VMOV            D7, R0, R1
VLDR            D0, =2.69595353e67
VADD.F64        D8, D7, D8
VCMP.F64        D8, #0.0
VMRS            APSR_nzcv, FPSCR
VLDREQ          D8, =0.0
VDIV.F64        D0, D0, D8
BL              round
VMOV            R0, R1, D0
BLX             __fixunsdfdi
MOV             R6, R0
MOV             R0, #stru_7453C ; mutex
MOV             R7, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_335E4
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_wrlock
SUBS            R8, R0, #0
BNE             loc_33634
LDR             R12, =dword_68FF8
LDRD            R2, R3, [R12,#(qword_68FF0 - 0x68FF8)]
CMP             R3, R7
CMPEQ           R2, R6
BCC             loc_33664

loc_3357C
LDR             R3, [R4,#0x104]
ADD             R3, R3, #0x170
LDRD            R4, R5, [R3]
CMP             R5, R7
CMPEQ           R4, R6
BCC             loc_33688

loc_33594               ; rwlock
LDR             R0, =rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_33690
MOV             R0, #stru_7453C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_336C0
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R8, #0
BNE             loc_336F0

loc_335D0
MOV             R0, R6
MOV             R1, R7
ADD             SP, SP, #0x810
VPOP            {D8}
POP             {R4-R8,PC}

loc_335E4
BL              __errno_location
LDR             LR, =aShareDiff ; "share_diff"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x141E
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]

loc_33610               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_33634
BL              __errno_location
LDR             LR, =aShareDiff ; "share_diff"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x141E
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_33610

loc_33664               ; int
STR             R8, [SP,#0x810+var_810]
MOV             R3, #8  ; maxlen
LDR             R2, =dword_68728 ; s
MOV             R0, R6  ; int
MOV             R1, R7  ; int
STRD            R6, R7, [R12,#(qword_68FF0 - 0x68FF8)]
MOV             R8, #1
BL              sub_2AEF8
B               loc_3357C

loc_33688
STRD            R6, R7, [R3]
B               loc_33594

loc_33690
BL              __errno_location
LDR             LR, =aShareDiff ; "share_diff"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x142C
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_33610

loc_336C0
BL              __errno_location
LDR             LR, =aShareDiff ; "share_diff"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x142C
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_33610

loc_336F0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3372C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3372C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_335D0

loc_3372C
MOVW            R2, #:lower16:aNewBestShareS ; "New best share: %s"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aNewBestShareS ; "New best share: %s"
LDR             R3, =dword_68728
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
B               loc_335D0
; End of function sub_334C0

dbl_33758 DCFD 6.27710174e57
dbl_33760 DCFD 3.40282367e38
dbl_33768 DCFD 1.84467441e19
dbl_33770 DCFD 2.69595353e67
dbl_33778 DCFD 0.0
off_33780 DCD rwlock
off_33784 DCD dword_68FF8
off_33788 DCD aShareDiff ; "share_diff"
off_3378C DCD dword_68728



; int __fastcall sub_33790(int *, int)
sub_33790

var_80C= -0x80C
s= -0x804

LDR             R3, =dword_68750
PUSH            {R4-R7,LR}
MOV             R4, R1
VPUSH           {D8}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R6, R0
VLDR            D8, [R3,#(dbl_68748 - 0x68750)]
MOV             R0, R1
BL              sub_334C0
STRD            R0, R1, [R4,#0xE8]
BLX             sub_4A10C
VMOV            D7, R0, R1
VCMPE.F64       D8, D7
VMRS            APSR_nzcv, FPSCR
BLS             loc_33894

loc_337D0               ; mutex
MOV             R0, #stru_766C4
BL              pthread_mutex_lock
SUBS            R7, R0, #0
BNE             loc_3391C
MOVW            R5, #:lower16:qword_76850
VLDR            D8, [R4,#0xE0]
MOVT            R5, #:upper16:qword_76850
LDRD            R0, R1, [R5]
BLX             sub_4A11C
VMOV            D7, R0, R1
VADD.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             __fixdfdi
STRD            R0, R1, [R5]
LDR             R5, [R6]
LDRD            R0, R1, [R5,#0xC0]
BLX             sub_4A11C
VMOV            D7, R0, R1
VADD.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             __fixdfdi
STRD            R0, R1, [R5,#0xC0]
LDR             R5, [R4,#0x104]
LDRD            R0, R1, [R5,#0x28]
BLX             sub_4A11C
VLDR            D7, [R4,#0xE0]
VMOV            D6, R0, R1
VADD.F64        D7, D6, D7
VMOV            R0, R1, D7
BLX             __fixdfdi
STRD            R0, R1, [R5,#0x28]
MOV             R0, R7  ; timer
LDR             R4, [R6]
BL              time
STR             R0, [R4,#0xE8]
MOV             R0, #stru_766C4 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3396C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
ADD             SP, SP, #0x810
ADD             SP, SP, #4
VPOP            {D8}
POP             {R4-R7,PC}

loc_33894
MOVW            R3, #:lower16:byte_74500
LDR             R12, [R4,#0x104]
MOVT            R3, #:upper16:byte_74500
MOV             R0, #1
LDRB            R2, [R3]
MOV             R3, #dword_7345C
STRB            R0, [R4,#0x11B]
LDR             R1, [R12,#0x20]
CMP             R2, #0
LDR             R2, [R3]
ADD             R1, R1, R0
ADD             R2, R2, R0
STR             R1, [R12,#0x20]
STR             R2, [R3]
STRB            R0, [R4,#0x11A]
BNE             loc_338EC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3399C

loc_338EC
LDR             R3, [R4,#0x104]
MOVW            R2, #:lower16:aFoundBlockForP ; "Found block for pool %d!"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aFoundBlockForP ; "Found block for pool %d!"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R3]
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
B               loc_337D0

loc_3391C
BL              __errno_location
LDR             LR, =aUpdateWorkStat ; "update_work_stats"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2284
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]

loc_33948               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3396C
BL              __errno_location
LDR             LR, =aUpdateWorkStat ; "update_work_stats"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2289
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_33948

loc_3399C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_337D0
B               loc_338EC
; End of function sub_33790

off_339B4 DCD dword_68750
off_339B8 DCD aUpdateWorkStat ; "update_work_stats"



; int __fastcall sub_339BC(int, _DWORD *, int, _DWORD *)
sub_339BC

var_800= -0x800

PUSH            {R4-R6,LR}
SUBS            R5, R3, #0
MOVNE           R3, #0
MOV             R4, R1
SUB             SP, SP, #0x800
MOV             R6, R0
STRNE           R3, [R5]
MOV             R0, R1
STR             R2, [R1,#0x4C]
BL              sub_2B350
LDR             R3, [R4,#0xDC]
CMP             R3, #0
BNE             loc_33A9C
MOV             R1, R4
ADD             R0, R6, #0x24 ; '$'
BL              sub_33790
ADD             R1, R4, #0xA0
ADD             R0, R4, #0xC0
BL              sub_23110
SUBS            R4, R0, #0
BNE             loc_33A90
CMP             R5, #0
MOVNE           R3, #1
STRNE           R3, [R5]
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33A5C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33A5C
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #5
MOVLE           R4, R3
BLE             loc_33A90

loc_33A5C
MOVW            LR, #:lower16:aShareAboveTarg ; "Share above target"
MOV             R12, SP
MOVT            LR, #:upper16:aShareAboveTarg ; "Share above target"
LDM             LR!, {R0-R3} ; "Share above target"
LDR             LR, [LR] ; "et"
STM             R12!, {R0-R3}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #6
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58

loc_33A90
MOV             R0, R4
ADD             SP, SP, #0x800
POP             {R4-R6,PC}

loc_33A9C
MOV             R0, R6
MOV             R4, #0
BL              sub_331A4
MOV             R0, R4
ADD             SP, SP, #0x800
POP             {R4-R6,PC}
; End of function sub_339BC




; void __fastcall sub_33AB4(_DWORD *)
sub_33AB4

var_818= -0x818
var_810= -0x810
var_804= -0x804
s= -0x800

PUSH            {R4-R10,LR}
MOVW            R5, #:lower16:byte_68BD8
SUB             SP, SP, #0x810
MOVT            R5, #:upper16:byte_68BD8
SUB             SP, SP, #8
MOV             R6, R0
LDR             R0, [R5,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_lock
SUBS            R7, R0, #0
BNE             loc_33D34
LDR             R3, [R5,#(dword_690EC - 0x68BD8)]
CMP             R3, #0
STR             R3, [SP,#0x818+var_804]
BEQ             loc_33CF0
LDR             R2, [R3,#0x104]
LDR             R4, [R3,#0x160]
LDR             R8, =aClearPoolWork ; "clear_pool_work"
CMP             R2, R6
BEQ             loc_33B20

loc_33B00
CMP             R4, #0
STR             R4, [SP,#0x818+var_804]
BEQ             loc_33C14

loc_33B0C
MOV             R3, R4
LDR             R4, [R4,#0x160]
LDR             R2, [R3,#0x104]
CMP             R2, R6
BNE             loc_33B00

loc_33B20
LDR             R10, [R3,#0x15C]
LDR             R1, [R5,#(dword_690EC - 0x68BD8)]
CMP             R10, #0
LDR             R0, [R1,#0x158]
BEQ             loc_33CA0
LDR             R2, [R0,#0x14]
ADD             R12, R3, #0x158
LDR             LR, [R0,#0x10]
SUB             LR, LR, R2
CMP             R3, LR
BEQ             loc_33CD0

loc_33B4C
LDR             R0, [R3,#0x160]
ADD             R2, R10, R2
STR             R0, [R2,#8]
LDR             R9, [R3,#0x160]

loc_33B5C
LDR             R0, [R1,#0x158]
CMP             R9, #0
LDRNE           R2, [R0,#0x14]
LDRNE           R0, [R3,#0x15C]
ADDNE           R9, R9, R2
STRNE           R0, [R9,#4]
LDRNE           R0, [R1,#0x158]
LDR             LR, [R3,#0x174]
LDR             R2, [R0,#4]
LDR             R0, [R0]
SUB             R2, R2, #1
AND             R2, R2, LR
ADD             R2, R2, R2,LSL#1
ADD             R0, R0, R2,LSL#2
LDR             LR, [R0,#4]
SUB             LR, LR, #1
STR             LR, [R0,#4]
LDR             R0, [R1,#0x158]
LDR             R0, [R0]
LDR             LR, [R0,R2,LSL#2]
CMP             LR, R12
LDREQ           R1, [R3,#0x168]
STREQ           R1, [R0,R2,LSL#2]
LDR             R0, [R3,#0x164]
LDR             R2, [R3,#0x168]
LDREQ           R1, [R5,#(dword_690EC - 0x68BD8)]
CMP             R0, #0
STRNE           R2, [R0,#0x10]
LDRNE           R2, [R3,#0x168]
CMP             R2, #0
LDRNE           R3, [R3,#0x164]
STRNE           R3, [R2,#0xC]
LDR             R2, [R1,#0x158]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_33BEC
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1CEC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R2, R8
ADD             R0, SP, #0x818+var_804
ADD             R7, R7, #1
BL              sub_2CBA8
CMP             R4, #0
STR             R4, [SP,#0x818+var_804]
BNE             loc_33B0C

loc_33C14               ; mutex
LDR             R0, [R5,#(dword_69010 - 0x68BD8)]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_33D84
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R7, #0
BEQ             loc_33C94
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33C64
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_33D1C

loc_33C64
LDR             R1, [R6]
MOV             R2, #aClearedDWorkIt ; "Cleared %d work items due to stratum di"...
MOV             R3, R7
ADD             R0, SP, #0x818+s ; s
STR             R1, [SP,#0x818+var_818]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x818+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_33C94
ADD             SP, SP, #0x810
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_33CA0
LDR             R9, [R3,#0x160]
CMP             R9, #0
BEQ             loc_33DB4
LDR             R2, [R0,#0x14]
ADD             R12, R3, #0x158
LDR             LR, [R0,#0x10]
SUB             LR, LR, R2
CMP             R3, LR
BEQ             loc_33CD0

loc_33CC4
MOV             R1, R9
STR             R9, [R5,#(dword_690EC - 0x68BD8)]
B               loc_33B5C

loc_33CD0
ADD             R2, R10, R2
STR             R2, [R0,#0x10]
LDR             R10, [R3,#0x15C]
CMP             R10, #0
BEQ             loc_33DD0
LDR             R2, [R1,#0x158]
LDR             R2, [R2,#0x14]
B               loc_33B4C

loc_33CF0               ; mutex
LDR             R0, [R5,#(dword_69010 - 0x68BD8)]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_33D84
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
ADD             SP, SP, #0x810
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_33D1C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BGT             loc_33C64
B               loc_33C94

loc_33D34
BL              __errno_location
LDR             LR, =aClearPoolWork ; "clear_pool_work"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x818+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1CE6
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x818+var_810]

loc_33D60               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x818+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_33D84
BL              __errno_location
LDR             LR, =aClearPoolWork ; "clear_pool_work"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1CF0
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x818+s
STR             R12, [SP,#0x818+var_810]
B               loc_33D60

loc_33DB4               ; ptr
LDR             R0, [R0]
BL              free
LDR             R3, [R5,#(dword_690EC - 0x68BD8)]
LDR             R0, [R3,#0x158] ; ptr
BL              free
STR             R9, [R5,#(dword_690EC - 0x68BD8)]
B               loc_33BEC

loc_33DD0
LDR             R9, [R3,#0x160]
B               loc_33CC4
; End of function sub_33AB4

off_33DD8 DCD aClearPoolWork ; "clear_pool_work"



; int *__fastcall sub_33DDC(int)
sub_33DDC

var_81C= -0x81C
var_814= -0x814
var_808= -0x808
s= -0x804

PUSH            {R4-R11,LR}
MOV             R6, R0
VPUSH           {D8}
SUB             SP, SP, #0x810
SUB             SP, SP, #0xC
LDR             R0, =stru_690F0 ; mutex
BL              pthread_mutex_lock
SUBS            R8, R0, #0
BNE             loc_340B8
MOV             R7, #byte_68BD8
LDR             R4, [R7,#(dword_69108 - 0x68BD8)]
CMP             R4, #0
BEQ             loc_34070
LDR             R3, [R4,#0x24]
MOVW            R9, #:lower16:aCgminerC ; "cgminer.c"
LDR             R5, [R4,#8]
MOVT            R9, #:upper16:aCgminerC ; "cgminer.c"
VLDR            D8, =0.0
LDR             R3, [R3,#0x104]
LDR             R10, =aClearStratumSh ; "clear_stratum_shares"
CMP             R3, R6
BEQ             loc_33E58

loc_33E38
CMP             R5, #0
BEQ             loc_33F54

loc_33E40
MOV             R4, R5
LDR             R5, [R5,#8]
LDR             R3, [R4,#0x24]
LDR             R3, [R3,#0x104]
CMP             R3, R6
BNE             loc_33E38

loc_33E58
LDR             R0, [R4,#4]
LDR             R11, [R7,#(dword_69108 - 0x68BD8)]
CMP             R0, #0
LDR             R1, [R11]
BEQ             loc_34028
LDRD            R2, R3, [R1,#0x10]
SUB             R2, R2, R3
CMP             R4, R2
BEQ             loc_34048

loc_33E7C
LDR             R2, [R4,#8]
ADD             R3, R0, R3
STR             R2, [R3,#8]
LDR             R3, [R4,#8]

loc_33E8C
LDR             R2, [R11]
CMP             R3, #0
LDRNE           R1, [R2,#0x14]
LDRNE           R2, [R4,#4]
ADDNE           R3, R3, R1
STRNE           R2, [R3,#4]
LDRNE           R2, [R11]
LDR             R1, [R4,#0x1C]
LDR             R3, [R2,#4]
LDR             R2, [R2]
SUB             R3, R3, #1
AND             R3, R3, R1
ADD             R3, R3, R3,LSL#1
ADD             R2, R2, R3,LSL#2
LDR             R1, [R2,#4]
SUB             R1, R1, #1
STR             R1, [R2,#4]
LDR             R2, [R11]
LDR             R2, [R2]
LDR             R1, [R2,R3,LSL#2]
CMP             R1, R4
LDREQ           R1, [R4,#0x10]
STREQ           R1, [R2,R3,LSL#2]
LDRD            R2, R3, [R4,#0xC]
CMP             R2, #0
STRNE           R3, [R2,#0x10]
LDRNE           R3, [R4,#0x10]
CMP             R3, #0
LDRNE           R2, [R4,#0xC]
STRNE           R2, [R3,#0xC]
LDR             R2, [R11]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_33F14
MOV             R0, R4
MOVW            R3, #0x1CCF
LDR             R12, [R0,#0x24]!
MOV             R2, R10
MOV             R1, R9
ADD             R8, R8, #1
VLDR            D7, [R12,#0x178]
VADD.F64        D8, D8, D7
BL              sub_2CBA8
LDR             R3, [R6,#0x2DC]
MOV             R0, R4  ; ptr
SUB             R3, R3, #1
STR             R3, [R6,#0x2DC]
BL              free
CMP             R5, #0
BNE             loc_33E40

loc_33F54               ; mutex
LDR             R0, =stru_690F0
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_34108
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R8, #0
BEQ             loc_34018
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_33FA4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_340A0

loc_33FA4
LDR             R1, [R6]
MOV             R2, #aLostDSharesDue ; "Lost %d shares due to stratum disconnec"...
ADD             R0, SP, #0x81C+s ; s
MOV             R3, R8
STR             R1, [SP,#0x81C+var_81C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_33FD4
MOVW            R1, #:lower16:dbl_766B8
VLDR            D6, [R6,#0x58]
MOVT            R1, #:upper16:dbl_766B8
MOVW            R0, #:lower16:qword_73318
VLDR            D7, [R1]
MOVT            R0, #:upper16:qword_73318
LDRD            R2, R3, [R0]
VADD.F64        D6, D6, D8
LDR             R12, [R6,#0x78]
VADD.F64        D8, D7, D8
ADDS            R4, R2, R8
ADC             R5, R3, R8,ASR#31
ADD             R8, R12, R8
VSTR            D6, [R6,#0x58]
STRD            R4, R5, [R0]
STR             R8, [R6,#0x78]
VSTR            D8, [R1]

loc_34018
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_34028
LDR             R2, [R4,#8]
CMP             R2, #0
BEQ             loc_34138
LDR             R3, [R1,#0x14]
LDR             R12, [R1,#0x10]
SUB             R12, R12, R3
CMP             R4, R12
BNE             loc_34060

loc_34048
ADD             R3, R0, R3
STR             R3, [R1,#0x10]
LDR             R0, [R4,#4]
CMP             R0, #0
BNE             loc_34158
LDR             R2, [R4,#8]

loc_34060
MOV             R3, R2
MOV             R11, R2
STR             R2, [R7,#(dword_69108 - 0x68BD8)]
B               loc_33E8C

loc_34070               ; mutex
LDR             R0, =stru_690F0
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_34108
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_340A0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_33FD4
B               loc_33FA4

loc_340B8
BL              __errno_location
LDR             LR, =aClearStratumSh ; "clear_stratum_shares"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x81C+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1CC7
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x81C+var_814]

loc_340E4               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_34108
BL              __errno_location
LDR             LR, =aClearStratumSh ; "clear_stratum_shares"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1CD5
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x81C+s
STR             R12, [SP,#0x81C+var_814]
B               loc_340E4

loc_34138               ; ptr
LDR             R0, [R1]
STR             R2, [SP,#0x81C+var_808]
BL              free
LDR             R0, [R11] ; ptr
BL              free
LDR             R2, [SP,#0x81C+var_808]
STR             R2, [R7,#(dword_69108 - 0x68BD8)]
B               loc_33F14

loc_34158
LDR             R3, [R11]
LDR             R3, [R3,#0x14]
B               loc_33E7C
; End of function sub_33DDC

ALIGN 8
dbl_34168 DCFD 0.0
off_34170 DCD stru_690F0
off_34174 DCD aClearStratumSh ; "clear_stratum_shares"



; int __fastcall sub_34178(int)
sub_34178

var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
MOV             R5, R0
SUB             SP, SP, #0x810
MOVW            R0, #:lower16:stru_7453C
SUB             SP, SP, #4
MOVT            R0, #:upper16:stru_7453C ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_34520
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_wrlock
SUBS            R9, R0, #0
BNE             loc_34570
MOVW            R4, #:lower16:byte_68BD8
CMP             R5, #0
MOVT            R4, #:upper16:byte_68BD8
LDR             R6, [R4,#(dword_69060 - 0x68BD8)]
LDR             LR, [R4,#(dword_68FD0 - 0x68BD8)]
LDR             R7, [R6]
BEQ             loc_342DC
LDR             R11, [R5,#4]
CMP             R11, #0
BEQ             loc_34248
MOV             R10, #dword_733CC
LDR             R12, [R10]
CMP             R12, #0
BLE             loc_34638
MOV             R8, #dword_744C8
LDR             R1, [R8]
MOV             R2, R1
ADD             R12, R1, R12,LSL#2
B               loc_34204

loc_34200
LDR             R11, [R5,#4]

loc_34204
LDR             R0, [R2],#4
LDR             R3, [R0,#4]
CMP             R3, R11
ADDLT           R3, R3, #1
STRLT           R3, [R0,#4]
CMP             R12, R2
BNE             loc_34200
MOV             R3, #0
STR             R3, [R5,#4]
CMP             LR, #4  ; switch 5 cases
LDRLS           PC, [PC,LR,LSL#2] ; switch jump
B               def_3422C ; jumptable 0003422C default case
jpt_3422C DCD loc_34284 ; jump table for switch statement
DCD loc_34470
DCD loc_34470
DCD loc_34284
DCD loc_34284

loc_34248               ; switch 5 cases
CMP             LR, #4
LDRLS           PC, [PC,LR,LSL#2] ; switch jump
B               def_3424C ; jumptable 0003424C default case
                        ; jumptable 000342E0 default case
                        ; jumptable 00034640 default case
jpt_3424C DCD loc_34268 ; jump table for switch statement
DCD loc_34464
DCD loc_34464
DCD loc_34268
DCD loc_34268

loc_34268               ; jumptable 0003424C cases 0,3,4
MOV             R10, #dword_733CC ; jumptable 000342E0 cases 0,3,4
LDR             R12, [R10]

loc_34274               ; jumptable 00034640 cases 0,3,4
CMP             R12, #0
BLE             def_3424C ; jumptable 0003424C default case
                        ; jumptable 000342E0 default case
                        ; jumptable 00034640 default case
MOV             R8, #dword_744C8

loc_34284               ; jumptable 0003422C cases 0,3,4
MOV             R0, R9
BL              sub_2B7BC
LDRB            R3, [R0,#0x61]
MOV             R1, R0
CMP             R3, #0
BNE             loc_342C0
LDR             R3, [R0,#0x64]
CMP             R3, #1
BNE             loc_342C0
BL              sub_2B684
CMP             R0, #0
LDREQ           R2, [R1]
LDREQ           R3, [R8]
LDREQ           R5, [R3,R2,LSL#2]
BEQ             loc_3430C

loc_342C0
LDR             R3, [R10]
ADD             R9, R9, #1
CMP             R3, R9
BGT             loc_34284 ; jumptable 0003422C cases 0,3,4
LDR             R3, [R8]
LDR             R5, [R3,R7,LSL#2]
B               loc_3430C

loc_342DC               ; switch 5 cases
CMP             LR, #4
LDRLS           PC, [PC,LR,LSL#2] ; switch jump
B               def_3424C ; jumptable 0003424C default case
                        ; jumptable 000342E0 default case
                        ; jumptable 00034640 default case
jpt_342E0 DCD loc_34268 ; jump table for switch statement
DCD loc_34488
DCD loc_34488
DCD loc_34268
DCD loc_34268

def_3424C               ; jumptable 0003424C default case
MOV             R3, #dword_744C8 ; jumptable 000342E0 default case
                        ; jumptable 00034640 default case
LDR             R3, [R3]
LDR             R5, [R3,R7,LSL#2]

loc_3430C               ; rwlock
LDR             R0, =rwlock
STR             R5, [R4,#(dword_69060 - 0x68BD8)]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_345A0
MOV             R0, #stru_7453C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_345D0
MOV             R7, #off_67ED8
LDR             R3, [R7] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R6, R5
BEQ             loc_3435C
LDR             R3, [R4,#(dword_68FD0 - 0x68BD8)]
SUB             R3, R3, #3
CMP             R3, #1
BHI             loc_34398

loc_3435C               ; mutex
LDR             R0, =stru_6910C
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_34600
LDR             R0, =cond ; cond
BL              pthread_cond_broadcast
LDR             R0, =stru_6910C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3461C
LDR             R3, [R7] ; sub_21C98
BLX             R3      ; sub_21C98
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_34398
MOV             R4, #byte_74500
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_343D4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_343D4
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #3
BLE             loc_3450C

loc_343D4
LDR             R12, [R5,#0xA4]
ADD             R8, SP, #0x814+s
MOVW            R2, #:lower16:aSwitchingToPoo ; "Switching to pool %d %s"
LDR             R3, [R5]
MOVT            R2, #:upper16:aSwitchingToPoo ; "Switching to pool %d %s"
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x814+var_814]
MOV             R0, R8  ; s
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_34428
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_34504

loc_34428
LDR             R12, [R6,#0xA4]
MOVW            R2, #:lower16:aLastPoolPoolNo ; "last_pool->pool_no = %d, last_pool->poo"...
LDR             R3, [R6]
MOVT            R2, #:upper16:aLastPoolPoolNo ; "last_pool->pool_no = %d, last_pool->poo"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R8  ; s
STR             R12, [SP,#0x814+var_814]
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_34458
MOV             R0, R6
BL              sub_33AB4
B               loc_3435C

loc_34464               ; jumptable 0003424C cases 1,2
MOV             R3, #dword_744C8 ; jumptable 00034640 cases 1,2
LDR             R1, [R3]

loc_34470               ; jumptable 0003422C cases 1,2
LDRB            R3, [R5,#0x61]
CMP             R3, #0
BNE             loc_34494
LDR             R3, [R5]
LDR             R5, [R1,R3,LSL#2]
B               loc_3430C

loc_34488               ; jumptable 000342E0 cases 1,2
MOV             R3, #dword_744C8
LDR             R1, [R3]

loc_34494
MOV             R3, #dword_733CC
LDR             R10, [R3]
CMP             R10, #1
MOVGT           R8, R7
MOVGT           R9, #1
BLE             def_3422C ; jumptable 0003422C default case

loc_344B0
ADD             R8, R8, #1
CMP             R8, R10
ADDLT           R3, R1, R8,LSL#2
MOVGE           R3, R1
MOVGE           R8, #0
LDR             R5, [R3]
LDRB            R3, [R5,#0x61]
CMP             R3, #0
BNE             loc_344F0
LDR             R3, [R5,#0x64]
CMP             R3, #1
BNE             loc_344F0
MOV             R0, R5
BL              sub_2B684
CMP             R0, #0
BEQ             loc_3430C

loc_344F0
ADD             R9, R9, #1
CMP             R9, R10
BNE             loc_344B0

def_3422C               ; jumptable 0003422C default case
LDR             R5, [R1,R7,LSL#2]
B               loc_3430C

loc_34504
MOV             R3, #dword_67DB4

loc_3450C
LDR             R3, [R3]
CMP             R3, #3
ADDGT           R8, SP, #0x814+s
BGT             loc_34428
B               loc_34458

loc_34520
BL              __errno_location
LDR             LR, =aSwitchPools ; "switch_pools"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x147B

loc_34538
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
ADD             R0, SP, #0x814+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x814+var_80C]

loc_3454C               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_34570
BL              __errno_location
LDR             LR, =aSwitchPools ; "switch_pools"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x147B
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_3454C

loc_345A0
BL              __errno_location
LDR             LR, =aSwitchPools ; "switch_pools"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x14CC
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
B               loc_3454C

loc_345D0
BL              __errno_location
LDR             LR, =aSwitchPools ; "switch_pools"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x14CC

loc_345E8
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x814+s
STR             R12, [SP,#0x814+var_80C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_3454C

loc_34600
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aSwitchPools ; "switch_pools"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x14D5
B               loc_34538

loc_3461C
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aSwitchPools ; "switch_pools"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x14D7
B               loc_345E8

loc_34638
STR             R9, [R5,#4]
CMP             LR, #4  ; switch 5 cases
LDRLS           PC, [PC,LR,LSL#2] ; switch jump
B               def_3424C ; jumptable 0003424C default case
; End of function sub_34178 ; jumptable 000342E0 default case
                        ; jumptable 00034640 default case
jpt_34640 DCD loc_34274 ; jump table for switch statement
DCD loc_34464
DCD loc_34464
DCD loc_34274
DCD loc_34274
off_3465C DCD rwlock
off_34660 DCD stru_6910C
off_34664 DCD cond
off_34668 DCD aSwitchPools ; "switch_pools"



; void __fastcall sub_3466C(int)
sub_3466C

var_808= -0x808
s= -0x800

PUSH            {R4,LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #8
ADD             R1, R0, #0x61 ; 'a'
MOV             R4, R0
BL              sub_2F098
CMP             R0, #0
BEQ             loc_34698

loc_3468C
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4,PC}

loc_34698
ADD             R0, R4, #0x88
BL              sub_239A4
BL              sub_31FF4
MOVW            R3, #:lower16:byte_74500
CMP             R4, R0
MOVT            R3, #:upper16:byte_74500
LDRB            R3, [R3]
BEQ             loc_34724
CMP             R3, #0
BNE             loc_346E8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_346E8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3468C

loc_346E8
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aPoolDSFailedTo ; "Pool %d %s failed to return work"
LDR             R3, [R4]
ADD             R0, SP, #0x808+s ; s
MOVT            R2, #:upper16:aPoolDSFailedTo ; "Pool %d %s failed to return work"
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x808+var_808]
BL              snprintf
ADD             R1, SP, #0x808+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4,PC}

loc_34724
CMP             R3, #0
BNE             loc_34740
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_34784

loc_34740
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aPoolDSNotRespo ; "Pool %d %s not responding!"
LDR             R3, [R4]
MOVT            R2, #:upper16:aPoolDSNotRespo ; "Pool %d %s not responding!"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x808+s ; s
STR             R12, [SP,#0x808+var_808]
BL              snprintf
ADD             R1, SP, #0x808+s
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_34770
MOV             R0, #0
BL              sub_34178
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4,PC}

loc_34784
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_34740
B               loc_34770
; End of function sub_3466C




; int sub_3479C()
sub_3479C

var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_80C= -0x80C
var_808= -0x808
s= -0x804

PUSH            {R4-R11,LR}
MOVW            R3, #:lower16:dword_75598
SUB             SP, SP, #0x810
MOVT            R3, #:upper16:dword_75598
SUB             SP, SP, #0xC
MOVW            R4, #:lower16:byte_68BD8
MOV             R5, R3
STR             R3, [SP,#0x81C+var_80C]
MOVT            R4, #:upper16:byte_68BD8
BL              pthread_self
BL              pthread_detach
LDR             R3, [R5]
MOVW            R0, #:lower16:sub_23588
LDR             R1, [R4,#(dword_69058 - 0x68BD8)]
MOV             R2, #0x3E8
MOVT            R0, #:upper16:sub_23588
ADD             R1, R3, R1,LSL#6
BL              sub_2541C
MOV             R0, #1  ; seconds
BL              sleep
ADD             R0, R4, #0x580 ; mutex
BL              pthread_mutex_lock
LDR             R0, [R4,#(dword_68EF4 - 0x68BD8)] ; ptr
CMP             R0, #0
BEQ             loc_34804
BL              free

loc_34804
MOV             R7, #dword_733CC
LDR             R9, [R7]
CMP             R9, #0
MOVLE           R8, #byte_74500
BLE             loc_348BC
MOVW            R3, #:lower16:dword_67DB4
MOVW            R5, #:lower16:dword_744C8
MOVW            R8, #:lower16:byte_74500
MOVW            R10, #:lower16:aBeforeAddPoolP ; "before add pool, pool->pool_no = %d, po"...
MOVW            R11, #:lower16:byte_68BD4
MOVT            R3, #:upper16:dword_67DB4
STR             R4, [SP,#0x81C+var_808]
MOVT            R5, #:upper16:dword_744C8
MOVT            R8, #:upper16:byte_74500
MOVT            R10, #:upper16:aBeforeAddPoolP ; "before add pool, pool->pool_no = %d, po"...
MOVT            R11, #:upper16:byte_68BD4
MOV             R6, #0
MOV             R4, R3

loc_34854
LDRB            R2, [R8]
LDR             R3, [R5]
CMP             R2, #0
LDR             R2, [R3,R6,LSL#2]
BNE             loc_34880
LDRB            R3, [R11]
CMP             R3, #0
BNE             loc_34880
LDR             R3, [R4]
CMP             R3, #4
BLE             loc_348AC

loc_34880
LDR             R12, [R2,#0xA4]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R2]
ADD             R0, SP, #0x81C+s ; s
MOV             R2, R10 ; format
STR             R12, [SP,#0x81C+var_81C]
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_348AC
ADD             R6, R6, #1
CMP             R9, R6
BNE             loc_34854
LDR             R4, [SP,#0x81C+var_808]

loc_348BC
BL              sub_2D8F0
LDR             R3, [R7]
CMP             R3, R9
BEQ             loc_34C74
MOV             R2, #0
STRB            R2, [R4,#(byte_69170 - 0x68BD8)]
BLE             loc_34924
MOVW            R5, #:lower16:dword_744C8
MOV             R11, R9,LSL#2
MOVT            R5, #:upper16:dword_744C8
MOV             R10, R9
MOV             R2, #1

loc_348EC
LDR             R3, [R5]
LDR             R6, [R3,R11]
LDR             R3, [R6,#0x64]
CMP             R3, #1
BEQ             loc_3490C
ADD             R0, R6, #0x64 ; 'd'
BL              sub_2B664
MOV             R2, #1

loc_3490C
LDR             R3, [R7]
ADD             R10, R10, #1
STRB            R2, [R6,#0x61]
ADD             R11, R11, #4
CMP             R3, R10
BGT             loc_348EC

loc_34924
LDRB            R2, [R8]
CMP             R2, #0
BNE             loc_34958
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_34958
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #4
BLE             loc_34980

loc_34958
MOVW            R2, #:lower16:aTotalPoolsDNee ; "total_pools = %d, need to remove %d poo"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aTotalPoolsDNee ; "total_pools = %d, need to remove %d poo"...
STR             R9, [SP,#0x81C+var_81C]
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_34980
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_34A24
MOVW            R3, #:lower16:dword_67DB4
MOVW            R5, #:lower16:dword_744C8
MOVW            R10, #:lower16:aAfterAddPoolPo ; "after add pool, pool->pool_no = %d, poo"...
MOVW            R11, #:lower16:byte_68BD4
MOVT            R3, #:upper16:dword_67DB4
STR             R4, [SP,#0x81C+var_808]
MOVT            R5, #:upper16:dword_744C8
MOVT            R10, #:upper16:aAfterAddPoolPo ; "after add pool, pool->pool_no = %d, poo"...
MOVT            R11, #:upper16:byte_68BD4
MOV             R6, #0
MOV             R4, R3

loc_349B8
LDRB            R2, [R8]
LDR             R3, [R5]
CMP             R2, #0
LDR             R2, [R3,R6,LSL#2]
BNE             loc_349E4
LDRB            R3, [R11]
CMP             R3, #0
BNE             loc_349E4
LDR             R3, [R4]
CMP             R3, #4
BLE             loc_34A10

loc_349E4
LDR             R12, [R2,#0xA4]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R2]
ADD             R0, SP, #0x81C+s ; s
MOV             R2, R10 ; format
STR             R12, [SP,#0x81C+var_81C]
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_34A10
LDR             R3, [R7]
ADD             R6, R6, #1
CMP             R3, R6
BGT             loc_349B8
LDR             R4, [SP,#0x81C+var_808]

loc_34A24
CMP             R9, #0
BLE             loc_34AB0
MOVW            R5, #:lower16:dword_744C8
MOVW            R10, #:lower16:dword_74578
MOV             R6, #0
MOVT            R5, #:upper16:dword_744C8
MOVT            R10, #:upper16:dword_74578
B               loc_34A90

loc_34A44
MOV             R3, #0
LDR             R12, [R10]
LDR             R1, [R4,#(dword_6906C - 0x68BD8)]
ADD             R6, R6, #1
LDR             R2, [R4,#(dword_69068 - 0x68BD8)]
MOV             R0, R11
STR             R3, [R11,#0x64]
SUB             R12, R12, #1
LDR             R3, [R4,#(dword_69074 - 0x68BD8)]
SUB             R1, R1, #1
SUB             R2, R2, #1
STR             R12, [R10]
STR             R1, [R4,#(dword_6906C - 0x68BD8)]
SUB             R3, R3, #1
STR             R2, [R4,#(dword_69068 - 0x68BD8)]
STR             R3, [R4,#(dword_69074 - 0x68BD8)]
BL              sub_2D0D8
CMP             R9, R6
BEQ             loc_34AB0

loc_34A90
LDR             R3, [R5]
LDR             R11, [R3,R6,LSL#2]
BL              sub_31FF4
CMP             R11, R0
BNE             loc_34A44
MOV             R0, #0
BL              sub_34178
B               loc_34A44

loc_34AB0
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_34AE4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_34AE4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_34B0C

loc_34AE4
MOVW            R2, #:lower16:aTotalPoolsAfte ; "total_pools after removed = %d\n"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aTotalPoolsAfte ; "total_pools after removed = %d\n"
ADD             R0, SP, #0x81C+s ; s
LDR             R3, [R7]
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_34B0C
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_34BA4
MOVW            R5, #:lower16:dword_744C8
MOVW            R9, #:lower16:aAfterRemovePoo ; "after remove pool, pool->pool_no = %d, "...
MOVW            R10, #:lower16:byte_68BD4
MOVW            R11, #:lower16:dword_67DB4
MOVT            R5, #:upper16:dword_744C8
MOVT            R9, #:upper16:aAfterRemovePoo ; "after remove pool, pool->pool_no = %d, "...
MOVT            R10, #:upper16:byte_68BD4
MOVT            R11, #:upper16:dword_67DB4
MOV             R6, #0

loc_34B3C
LDRB            R2, [R8]
LDR             R3, [R5]
CMP             R2, #0
LDR             R2, [R3,R6,LSL#2]
BNE             loc_34B68
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_34B68
LDR             R3, [R11]
CMP             R3, #4
BLE             loc_34B94

loc_34B68
LDR             R12, [R2,#0xA4]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R2]
ADD             R0, SP, #0x81C+s ; s
MOV             R2, R9  ; format
STR             R12, [SP,#0x81C+var_81C]
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_34B94
LDR             R3, [R7]
ADD             R6, R6, #1
CMP             R3, R6
BGT             loc_34B3C

loc_34BA4
MOV             R5, #0xB4
BL              sub_2B41C
B               loc_34BB8

loc_34BB0
SUBS            R5, R5, #1
BEQ             loc_34CC8

loc_34BB8               ; seconds
MOV             R0, #1
BL              sleep
LDRB            R3, [R4,#(byte_69170 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_34BB0
MOV             R3, #1
STR             R3, [R4,#(dword_69178 - 0x68BD8)]

loc_34BD4               ; mutex
LDR             R0, =mutex
BL              pthread_mutex_unlock
LDR             R3, [SP,#0x81C+var_80C]
MOVW            R2, #:lower16:sub_34DF4
LDR             R0, [R4,#(dword_69058 - 0x68BD8)]
MOVT            R2, #:upper16:sub_34DF4
LDR             R5, [R3]
MOV             R3, #0
MOV             R1, R3
ADD             R5, R5, R0,LSL#6
MOV             R0, R5
BL              sub_25164
SUBS            R6, R0, #0
BNE             loc_34C30
LDR             R0, [R5,#0xC] ; th
BL              pthread_detach
MOV             R0, #1  ; seconds
BL              sleep
MOV             R0, #0
STR             R6, [R4,#(newthread - 0x68BD8)]
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_34C30
MOVW            LR, #:lower16:aWatchpoolThrea ; "watchpool thread create failed"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWatchpoolThrea ; "watchpool thread create failed"
LDM             LR!, {R0-R3} ; "watchpool thread create failed"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " create failed"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x81C+s
MOV             LR, R3,LSR#16
MOV             R0, #3
MOV             R2, #1
STRH            R3, [R12],#2
STRB            LR, [R12]
BL              sub_20F58
MOV             R1, #0
MOV             R0, #1
BL              sub_2E6B0

loc_34C74
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_34C94
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_34DC0

loc_34C94
MOVW            LR, #:lower16:aInputPoolError ; "Input pool error, try again\n"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aInputPoolError ; "Input pool error, try again\n"
LDM             LR!, {R0-R3} ; "Input pool error, try again\n"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; ", try again\n"
STM             R12!, {R0-R2}
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #4
STRB            R3, [R12]
BL              sub_20F58
B               loc_34BD4

loc_34CC8
LDRB            R3, [R8]
CMP             R3, #0
BNE             loc_34CE8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_34DD8

loc_34CE8
MOVW            R12, #:lower16:aErrorPoolInput ; "error pool input"
ADD             LR, SP, #0x81C+s
MOVT            R12, #:upper16:aErrorPoolInput ; "error pool input"
LDM             R12!, {R0-R3} ; "error pool input"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #3
STRB            R12, [LR]
BL              sub_20F58

loc_34D14
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_34BD4
MOVW            R5, #:lower16:dword_744C8
MOVW            R9, #:lower16:aPoolDUrlSUserS_0 ; "pool%d, url = %s, user = %s, pass = %s"...
MOVW            R10, #:lower16:byte_68BD4
MOVW            R11, #:lower16:dword_67DB4
MOVT            R5, #:upper16:dword_744C8
MOVT            R9, #:upper16:aPoolDUrlSUserS_0 ; "pool%d, url = %s, user = %s, pass = %s"...
MOVT            R10, #:upper16:byte_68BD4
MOVT            R11, #:upper16:dword_67DB4
MOV             R6, #0

loc_34D44
LDRB            R2, [R8]
LDR             R3, [R5]
CMP             R2, #0
LDR             R12, [R3,R6,LSL#2]
BNE             loc_34D70
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_34D70
LDR             R3, [R11]
CMP             R3, #2
BLE             loc_34DAC

loc_34D70
LDR             R1, [R12,#0xB0]
MOV             R2, R9  ; format
LDR             R3, [R12]
ADD             R0, SP, #0x81C+s ; s
STR             R1, [SP,#0x81C+var_814]
MOV             R1, #0x800 ; maxlen
LDR             LR, [R12,#0xAC]
STR             LR, [SP,#0x81C+var_818]
LDR             R12, [R12,#0xA4]
STR             R12, [SP,#0x81C+var_81C]
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_34DAC
LDR             R3, [R7]
ADD             R6, R6, #1
CMP             R3, R6
BGT             loc_34D44
B               loc_34BD4

loc_34DC0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_34BD4
B               loc_34C94

loc_34DD8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_34D14
B               loc_34CE8
; End of function sub_3479C

off_34DF0 DCD mutex


; Attributes: noreturn

; void __noreturn sub_34DF4()
sub_34DF4

var_84C= -0x84C
var_848= -0x848
var_844= -0x844
var_83C= -0x83C
var_838= -0x838
mutex= -0x834
var_830= -0x830
var_82C= -0x82C
var_828= -0x828
var_824= -0x824
var_820= -0x820
tp= -0x81C
var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
MOV             R1, #0  ; oldtype
VPUSH           {D8-D9}
SUB             SP, SP, #0x840
SUB             SP, SP, #0xC
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOVW            R0, #:lower16:aWatchpool ; "Watchpool"
MOVW            R3, #:lower16:dword_766C0
MOVW            R2, #:lower16:off_67ED8
MOVW            R1, #:lower16:off_67FE0 ; "--version-file"
MOVT            R3, #:upper16:dword_766C0
MOVT            R2, #:upper16:off_67ED8
MOVT            R1, #:upper16:off_67FE0 ; "--version-file"
MOVT            R0, #:upper16:aWatchpool ; "Watchpool"
MOVW            R9, #:lower16:dword_744C8
STR             R3, [SP,#0x84C+var_83C]
STR             R2, [SP,#0x84C+var_830]
MOVT            R9, #:upper16:dword_744C8
STR             R1, [SP,#0x84C+var_828]
MOVW            R10, #:lower16:dword_733CC
BL              sub_250A8
VLDR            D9, =0.63
MOVT            R10, #:upper16:dword_733CC
BL              sub_2C148
VLDR            D8, =1.63
ADD             R0, SP, #0x84C+tp ; tp
MOVW            R8, #:lower16:byte_68BD8
MOV             R11, #0
BL              sub_23A18
MOV             R3, R9
MOVT            R8, #:upper16:byte_68BD8
MOV             R9, R10
MOV             R10, R3

loc_34E7C
ADD             R11, R11, #1
ADD             R0, SP, #0x84C+var_814
CMP             R11, #0x79 ; 'y'
MOVGE           R11, #0
BL              sub_239A4
LDR             R3, [R9]
CMP             R3, #0
BLE             loc_34F80
MOV             R5, #0
B               loc_34EE0

loc_34EA4
ADD             R1, R4, #0x61 ; 'a'
MOV             R0, R4
BL              sub_2F180
CMP             R0, #0
BNE             loc_35048

loc_34EB8
LDRB            R3, [R4,#0x61]
CMP             R3, #0
BNE             loc_34ED0
LDR             R3, [R8,#(dword_68FD0 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_34FB4

loc_34ED0
LDR             R3, [R9]
ADD             R5, R5, #1
CMP             R3, R5
BLE             loc_34F80

loc_34EE0
LDRB            R2, [R8,#(byte_6917C - 0x68BD8)]
LDR             R3, [R10]
CMP             R2, #0
LDR             R4, [R3,R5,LSL#2]
BNE             loc_34F04
LDR             R3, [SP,#0x84C+var_83C]
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_35054

loc_34F04
CMP             R11, #0x78 ; 'x'
BNE             loc_34F48
LDR             R0, [R4,#0x98]
LDRD            R6, R7, [R4,#0x28]
SUBS            R2, R6, R0
SBC             R3, R7, R0,ASR#31
MOV             R0, R2
MOV             R1, R3
BLX             sub_4A11C
VLDR            D7, [R4,#0x90]
VMOV            D6, R0, R1
STR             R6, [R4,#0x98]
VMLA.F64        D7, D6, D9
VDIV.F64        D6, D7, D8
VCVT.S32.F64    S15, D6
VSTR            D6, [R4,#0x90]
VSTR            S15, [R4,#0x9C]

loc_34F48
LDR             R3, [R4,#0x64]
CMP             R3, #0
BEQ             loc_34ED0
LDRB            R3, [R4,#0x11C]
CMP             R3, #0
BNE             loc_34ED0
MOV             R1, #1
MOV             R0, R4
BL              sub_2F1E8
CMP             R0, #0
BNE             loc_34EA4
ADD             R0, R4, #0x88
BL              sub_239A4
B               loc_34EB8

loc_34F80
BL              sub_31FF4
LDRB            R3, [R0,#0x61]
CMP             R3, #0
BNE             loc_353A0

loc_34F90
LDR             R3, [R8,#(dword_68FD0 - 0x68BD8)]
CMP             R3, #2
BEQ             loc_35368

loc_34F9C
ADD             R0, SP, #0x84C+tp
MOVW            R1, #0x1388
BL              sub_23A24
ADD             R0, SP, #0x84C+tp ; tp
BL              sub_23A18
B               loc_34E7C

loc_34FB4
LDR             R6, [R4,#4]
BL              sub_3218C
CMP             R6, R0
BGE             loc_34ED0
LDR             R1, [SP,#0x84C+var_828]
LDR             R3, [SP,#0x84C+var_814]
LDR             R2, [R4,#0x88]
LDR             R1, [R1,#(dword_68750 - 0x67FE0)]
SUB             R3, R3, R2
CMP             R3, R1
BLE             loc_34ED0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35008
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_354F4

loc_35008
LDR             R3, [R4]
MOVW            R2, #:lower16:aPoolDSStableFo ; "Pool %d %s stable for >%d seconds"
STR             R1, [SP,#0x84C+var_848]
MOVT            R2, #:upper16:aPoolDSStableFo ; "Pool %d %s stable for >%d seconds"
LDR             R12, [R4,#0xA4]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x84C+s ; s
STR             R12, [SP,#0x84C+var_84C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x84C+s
MOV             R0, #4
BL              sub_20F58

loc_3503C
MOV             R0, #0
BL              sub_34178
B               loc_34ED0

loc_35048
MOV             R0, R4
BL              sub_32238
B               loc_34EB8

loc_35054
ADD             R3, R4, #0xBC
ADD             R0, SP, #0x84C+var_80C
MOV             R6, R3
STR             R3, [SP,#0x84C+mutex]
BL              sub_239A4
MOV             R0, R6  ; mutex
BL              pthread_mutex_lock
SUBS            R6, R0, #0
BNE             loc_3550C
MOV             R1, R4
LDR             R12, [R1,#0x158]!
LDR             R7, [R12]
CMP             R1, R12
SUB             R12, R12, #4
SUB             R7, R7, #4
BEQ             loc_35130
LDR             LR, [R4,#0x120]
CMP             LR, #1
STRGT           R5, [SP,#0x84C+var_838]
MOVGT           R5, R6
MOVGT           R6, R1
BGT             loc_350D8
B               loc_3514C

loc_350B0
MOV             R3, R7
LDR             R1, [R3,#4]!
CMP             R6, R3
SUB             R1, R1, #4
BEQ             loc_353AC
LDR             LR, [R4,#0x120]
MOV             R12, R7
CMP             LR, #1
BLE             loc_35464
MOV             R7, R1

loc_350D8
LDR             R3, [SP,#0x84C+var_80C]
LDR             R1, [R12,#0xC]
SUB             R3, R3, R1
CMP             R3, #0x12C
BLE             loc_350B0
SUB             LR, LR, #1
MOV             R0, R12 ; ptr
STR             LR, [R4,#0x120]
ADD             R5, R5, #1
LDMIB           R12, {R1,R3}
STR             R3, [R1,#4]
STR             R1, [R3]
BL              free
B               loc_350B0
dbl_35110 DCFD 0.63
dbl_35118 DCFD 1.63
off_35120 DCD dword_69180
off_35124 DCD stru_690F0
off_35128 DCD aPruneStratumSh ; "prune_stratum_shares"
off_3512C DCD aReapCurl ; "reap_curl"

loc_35130               ; mutex
LDR             R0, [SP,#0x84C+mutex]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_355BC
LDR             R3, [SP,#0x84C+var_830]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98

loc_3514C               ; timer
MOV             R0, #0
BL              time
STR             R0, [SP,#0x84C+mutex]
LDR             R0, =stru_690F0 ; mutex
BL              pthread_mutex_lock
SUBS            R3, R0, #0
STR             R3, [SP,#0x84C+var_838]
BNE             loc_3555C
LDR             R6, [R8,#(dword_69108 - 0x68BD8)]
CMP             R6, #0
BEQ             loc_3546C
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
LDR             R7, [R6,#8]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x84C+var_82C]
LDR             R3, [R6,#0x24]
LDR             R3, [R3,#0x104]
CMP             R4, R3
BEQ             loc_351B8

loc_35198
CMP             R7, #0
BEQ             loc_352BC

loc_351A0
MOV             R6, R7
LDR             R7, [R7,#8]
LDR             R3, [R6,#0x24]
LDR             R3, [R3,#0x104]
CMP             R4, R3
BNE             loc_35198

loc_351B8
LDR             R3, [R6,#0x2C]
LDR             R2, [SP,#0x84C+mutex]
ADD             R3, R3, #0x78 ; 'x'
CMP             R2, R3
BLE             loc_35198
LDR             R0, [R6,#4]
LDR             R2, [R8,#(dword_69108 - 0x68BD8)]
CMP             R0, #0
LDR             R12, [R2]
BEQ             loc_3548C
LDR             R3, [R12,#0x14]
LDR             R1, [R12,#0x10]
SUB             R1, R1, R3
CMP             R6, R1
BEQ             loc_354B8

loc_351F4
LDR             R1, [R6,#8]
ADD             R3, R0, R3
STR             R1, [R3,#8]

loc_35200
LDR             R3, [R6,#8]
CMP             R3, #0
LDRNE           R0, [R2]
LDRNE           R1, [R6,#4]
LDRNE           R0, [R0,#0x14]
ADDNE           R3, R3, R0
STRNE           R1, [R3,#4]
LDR             R1, [R2]
LDR             R0, [R6,#0x1C]
LDM             R1, {R1,R3}
SUB             R3, R3, #1
AND             R3, R3, R0
ADD             R3, R3, R3,LSL#1
ADD             R1, R1, R3,LSL#2
LDR             R0, [R1,#4]
SUB             R0, R0, #1
STR             R0, [R1,#4]
LDR             R1, [R2]
LDR             R1, [R1]
LDR             R0, [R1,R3,LSL#2]
CMP             R0, R6
LDREQ           R0, [R6,#0x10]
STREQ           R0, [R1,R3,LSL#2]
LDR             R3, [R6,#0xC]
CMP             R3, #0
LDRNE           R1, [R6,#0x10]
STRNE           R1, [R3,#0x10]
LDR             R3, [R6,#0x10]
CMP             R3, #0
LDRNE           R1, [R6,#0xC]
STRNE           R1, [R3,#0xC]
LDR             R2, [R2]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_3528C
LDR             R3, [SP,#0x84C+var_838]
ADD             R0, R6, #0x24 ; '$'
LDR             R2, =aPruneStratumSh ; "prune_stratum_shares"
LDR             R1, [SP,#0x84C+var_82C]
ADD             R3, R3, #1
STR             R3, [SP,#0x84C+var_838]
MOVW            R3, #0x27D9
BL              sub_2CBA8
MOV             R0, R6  ; ptr
BL              free
CMP             R7, #0
BNE             loc_351A0

loc_352BC               ; mutex
LDR             R0, =stru_690F0
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_35580
LDR             R3, [SP,#0x84C+var_830]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [SP,#0x84C+var_838]
CMP             R3, #0
BEQ             loc_34F04
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3530C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_354DC

loc_3530C
LDR             R12, [R4]
MOV             R2, #aLostDSharesDue_0 ; "Lost %d shares due to no stratum share "...
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0x84C+var_838]
ADD             R0, SP, #0x84C+s ; s
STR             R12, [SP,#0x84C+var_84C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x84C+s
MOV             R0, #4
BL              sub_20F58

loc_3533C
MOVW            R1, #:lower16:qword_73318
LDR             R12, [SP,#0x84C+var_838]
MOVT            R1, #:upper16:qword_73318
LDR             R0, [R4,#0x78]
LDRD            R2, R3, [R1]
ADD             R0, R0, R12
ADDS            R6, R2, R12
STR             R0, [R4,#0x78]
ADC             R7, R3, R12,ASR#31
STRD            R6, R7, [R1]
B               loc_34F04

loc_35368
MOVW            R3, #:lower16:dword_73464
LDR             R2, [SP,#0x84C+var_814]
MOVT            R3, #:upper16:dword_73464
LDR             R1, [R8,#(dword_69180 - 0x68BD8)]
LDR             R3, [R3]
SUB             R2, R2, R1
RSB             R3, R3, R3,LSL#4
CMP             R2, R3,LSL#2
BLE             loc_34F9C
LDR             R0, =dword_69180
BL              sub_239A4
MOV             R0, #0
BL              sub_34178
B               loc_34F9C

loc_353A0
MOV             R0, #0
BL              sub_34178
B               loc_34F90

loc_353AC               ; mutex
LDR             R0, [SP,#0x84C+mutex]
MOV             R6, R5
LDR             R5, [SP,#0x84C+var_838]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_355BC
LDR             R3, [SP,#0x84C+var_830]
LDR             R2, [R3] ; sub_21C98
BLX             R2      ; sub_21C98
CMP             R6, #0
BEQ             loc_3514C
MOV             R2, #byte_68BD5
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_3514C
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_35414
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_355A4

loc_35414
LDR             R12, [R4]
MOVW            R0, #:lower16:(aCoinbase1S+0xC) ; "s"
CMP             R6, #1
MOVT            R0, #:upper16:(aCoinbase1S+0xC) ; "s"
MOVW            R1, #:lower16:(asc_4D5C4+4) ; ""
MOVW            R2, #:lower16:aReapedDCurlSFr ; "Reaped %d curl%s from pool %d"
MOVT            R1, #:upper16:(asc_4D5C4+4) ; ""
MOVNE           R1, R0
STR             R1, [SP,#0x84C+var_84C]
MOV             R3, R6
MOVT            R2, #:upper16:aReapedDCurlSFr ; "Reaped %d curl%s from pool %d"
STR             R12, [SP,#0x84C+var_848]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x84C+s
MOV             R0, #7
BL              sub_20F58
B               loc_3514C

loc_35464
LDR             R5, [SP,#0x84C+var_838]
B               loc_3514C

loc_3546C               ; mutex
LDR             R0, =stru_690F0
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_35580
LDR             R3, [SP,#0x84C+var_830]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
B               loc_34F04

loc_3548C
LDR             R1, [R6,#8]
CMP             R1, #0
BEQ             loc_355D4
LDR             R3, [R12,#0x14]
LDR             LR, [R12,#0x10]
SUB             LR, LR, R3
CMP             R6, LR
BEQ             loc_354B8

loc_354AC
MOV             R2, R1
STR             R1, [R8,#(dword_69108 - 0x68BD8)]
B               loc_35200

loc_354B8
ADD             R3, R0, R3
STR             R3, [R12,#0x10]
LDR             R0, [R6,#4]
CMP             R0, #0
LDREQ           R1, [R6,#8]
BEQ             loc_354AC
LDR             R3, [R2]
LDR             R3, [R3,#0x14]
B               loc_351F4

loc_354DC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3533C
B               loc_3530C

loc_354F4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3503C
B               loc_35008

loc_3550C
BL              __errno_location
LDR             R12, =aReapCurl ; "reap_curl"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x27AE
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R3,R12}

loc_3552C
STR             R1, [SP,#0x84C+var_844]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x84C+s ; s
BL              snprintf
ADD             R1, SP, #0x84C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3555C
BL              __errno_location
LDR             R12, =aPruneStratumSh ; "prune_stratum_shares"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R1, #0x27D2
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R3,R12}
B               loc_3552C

loc_35580
BL              __errno_location
LDR             R12, =aPruneStratumSh ; "prune_stratum_shares"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R1, #0x27DF

loc_35594
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_3552C

loc_355A4
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BGT             loc_35414
B               loc_3514C

loc_355BC
BL              __errno_location
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
LDR             R12, =aReapCurl ; "reap_curl"
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOV             R1, #0x27C0
B               loc_35594

loc_355D4               ; ptr
LDR             R0, [R12]
STR             R1, [SP,#0x84C+var_820]
STR             R2, [SP,#0x84C+var_824]
BL              free
LDR             R2, [SP,#0x84C+var_824]
LDR             R0, [R2] ; ptr
BL              free
LDR             R1, [SP,#0x84C+var_820]
STR             R1, [R8,#(dword_69108 - 0x68BD8)]
B               loc_3528C
; End of function sub_34DF4




; int __fastcall sub_355FC(int)
sub_355FC

var_818= -0x818
abstime= -0x810
var_808= -0x808
var_804= -0x804
s= -0x800

PUSH            {R4-R8,LR}
MOV             R4, #byte_68BD8
SUB             SP, SP, #0x820
MOV             R5, R0
LDR             R0, [R4,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_359EC
LDR             R3, [R4,#(dword_690EC - 0x68BD8)]
CMP             R3, #0
BEQ             loc_3563C
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0xC]
CMP             R3, #0
BNE             loc_35728

loc_3563C
CMP             R5, #0
BEQ             loc_3587C
MOVW            R6, #:lower16:dword_755E0
MOVW            R5, #:lower16:stru_744D0
MOVW            R7, #:lower16:byte_74500
MOVW            R8, #:lower16:byte_68BD4
MOVT            R6, #:upper16:dword_755E0
MOVT            R5, #:upper16:stru_744D0
MOVT            R7, #:upper16:byte_74500
MOVT            R8, #:upper16:byte_68BD4

loc_35664
ADD             R0, SP, #0x820+var_808
BL              sub_239A4
LDR             R1, [SP,#0x820+var_804]
MOV             R3, #0x3E8
LDR             R2, [SP,#0x820+var_808]
MOV             R0, R5  ; cond
MUL             R3, R3, R1
ADD             R2, R2, #0xA
STRD            R2, R3, [SP,#0x820+abstime]
BL              pthread_cond_signal
LDR             R0, [R6]
ADD             R2, SP, #0x820+abstime ; abstime
LDR             R1, [R4,#(dword_69010 - 0x68BD8)] ; mutex
ADD             R0, R0, #0x28 ; '(' ; cond
BL              pthread_cond_timedwait
CMP             R0, #0
BEQ             loc_3570C
LDRB            R3, [R4,#(byte_69064 - 0x68BD8)]
CMP             R3, #0
BNE             loc_3570C
LDRB            R3, [R7]
MOV             R2, #1
STRB            R2, [R4,#(byte_69064 - 0x68BD8)]
CMP             R3, #0
BNE             loc_356D4
LDRB            R3, [R8]
CMP             R3, #0
BEQ             loc_358A8

loc_356D4
MOVW            LR, #:lower16:aWaitingForWork ; "Waiting for work to be available from p"...
ADD             R12, SP, #0x820+s
MOVT            LR, #:upper16:aWaitingForWork ; "Waiting for work to be available from p"...
LDM             LR!, {R0-R3} ; "Waiting for work to be available from p"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " to be available from pools."
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; " from pools."
STM             R12!, {R0-R2}
MOV             R2, #0
ADD             R1, SP, #0x820+s
MOV             R0, #4
STRB            R3, [R12]
BL              sub_20F58

loc_3570C
LDR             R3, [R4,#(dword_690EC - 0x68BD8)]
CMP             R3, #0
BEQ             loc_35664
LDR             R3, [R3,#0x158]
LDR             R3, [R3,#0xC]
CMP             R3, #0
BEQ             loc_35664

loc_35728
LDRB            R3, [R4,#(byte_69064 - 0x68BD8)]
CMP             R3, #0
BNE             loc_358C0
LDR             R2, [R4,#(dword_690EC - 0x68BD8)]

loc_35738
LDR             R1, [R2,#0x158]
LDR             R3, [R4,#(dword_69188 - 0x68BD8)]
LDR             R0, [R1,#0xC]
CMP             R0, R3
BLE             loc_35758
LDRB            R3, [R2,#0x111]
CMP             R3, #0
BEQ             loc_35990

loc_35758
MOV             R5, R2

loc_3575C
LDR             R3, [R5,#0x15C]
CMP             R3, #0
BEQ             loc_35940
LDR             R12, [R1,#0x14]
ADD             R0, R5, #0x158
LDR             LR, [R1,#0x10]
SUB             LR, LR, R12
CMP             R5, LR
BEQ             loc_35970

loc_35780
LDR             R2, [R5,#0x160]
ADD             R3, R3, R12
LDR             R1, [R4,#(dword_690EC - 0x68BD8)]
STR             R2, [R3,#8]
LDR             R6, [R5,#0x160]

loc_35794
LDR             R2, [R1,#0x158]
CMP             R6, #0
LDRNE           R3, [R2,#0x14]
LDRNE           R2, [R5,#0x15C]
ADDNE           R6, R6, R3
STRNE           R2, [R6,#4]
LDRNE           R2, [R1,#0x158]
LDR             R12, [R5,#0x174]
LDR             R3, [R2,#4]
LDR             R2, [R2]
SUB             R3, R3, #1
AND             R3, R3, R12
ADD             R3, R3, R3,LSL#1
MOV             R3, R3,LSL#2
ADD             R2, R2, R3
LDR             R12, [R2,#4]
SUB             R12, R12, #1
STR             R12, [R2,#4]
LDR             R2, [R1,#0x158]
LDR             R2, [R2]
LDR             R12, [R2,R3]
CMP             R12, R0
LDREQ           R1, [R5,#0x168]
STREQ           R1, [R2,R3]
LDR             R2, [R5,#0x164]
LDR             R3, [R5,#0x168]
LDREQ           R1, [R4,#(dword_690EC - 0x68BD8)]
CMP             R2, #0
STRNE           R3, [R2,#0x10]
LDRNE           R3, [R5,#0x168]
CMP             R3, #0
LDRNE           R2, [R5,#0x164]
STRNE           R2, [R3,#0xC]
LDR             R2, [R1,#0x158]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_35828
LDRB            R3, [R5,#0x111]
CMP             R3, #0
BNE             loc_35848
LDR             R3, [R5,#0x114]
CMP             R3, #0
LDRNE           R3, [R4,#(dword_69188 - 0x68BD8)]
SUBNE           R3, R3, #1
STRNE           R3, [R4,#(dword_69188 - 0x68BD8)]

loc_35848               ; cond
MOV             R0, #stru_744D0
BL              pthread_cond_signal
MOV             R3, #dword_755E0
LDR             R0, [R3]
ADD             R0, R0, #0x28 ; '(' ; cond
BL              pthread_cond_signal
MOV             R0, #0  ; timer
BL              time
MOV             R3, #dword_744A0
STR             R0, [R3]

loc_3587C               ; mutex
LDR             R0, [R4,#(dword_69010 - 0x68BD8)]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_35A3C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R5
ADD             SP, SP, #0x820
POP             {R4-R8,PC}

loc_358A8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3570C
B               loc_356D4

loc_358C0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_358E8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_359D4

loc_358E8
MOVW            R12, #:lower16:aWorkAvailableF ; "Work available from pools, resuming."
ADD             LR, SP, #0x820+s
MOVT            R12, #:upper16:aWorkAvailableF ; "Work available from pools, resuming."
LDM             R12!, {R0-R3} ; "Work available from pools, resuming."
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "rom pools, resuming."
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "ing."
STR             R0, [LR],#4
MOV             R0, #4
STRB            R1, [LR]
ADD             R1, SP, #0x820+s
BL              sub_20F58

loc_35920
LDR             R2, [R4,#(dword_690EC - 0x68BD8)]
MOV             R3, #0
STRB            R3, [R4,#(byte_69064 - 0x68BD8)]
CMP             R2, R3
BNE             loc_35738

loc_35934
MOV             R3, #0
LDR             R3, [R3,#0x15C]
UND             #0

loc_35940
LDR             R6, [R5,#0x160]
CMP             R6, #0
BEQ             loc_35A6C
LDR             R12, [R1,#0x14]
ADD             R0, R5, #0x158
LDR             LR, [R1,#0x10]
SUB             LR, LR, R12
CMP             R5, LR
BEQ             loc_35970

loc_35964
MOV             R1, R6
STR             R6, [R4,#(dword_690EC - 0x68BD8)]
B               loc_35794

loc_35970
ADD             R3, R3, R12
STR             R3, [R1,#0x10]
LDR             R3, [R5,#0x15C]
CMP             R3, #0
BEQ             loc_35A88
LDR             R2, [R2,#0x158]
LDR             R12, [R2,#0x14]
B               loc_35780

loc_35990
LDR             R3, [R2,#0x114]
CMP             R3, #0
BEQ             loc_35758
LDR             R5, [R2,#0x160]
CMP             R5, #0
BEQ             loc_35934

loc_359A8
LDRB            R3, [R5,#0x111]
CMP             R3, #0
BNE             loc_3575C
LDR             R3, [R5,#0x114]
LDR             R0, [R5,#0x160]
CMP             R3, #0
BEQ             loc_3575C
MOV             R5, R0
CMP             R5, #0
BNE             loc_359A8
B               loc_35934

loc_359D4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_35920
B               loc_358E8

loc_359EC
BL              __errno_location
LDR             LR, =aHashPop ; "hash_pop"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x820+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1FF6
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x820+var_818]

loc_35A18               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_35A3C
BL              __errno_location
LDR             LR, =aHashPop ; "hash_pop"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x203E
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x820+s
STR             R12, [SP,#0x820+var_818]
B               loc_35A18

loc_35A6C               ; ptr
LDR             R0, [R1]
BL              free
LDR             R3, [R4,#(dword_690EC - 0x68BD8)]
LDR             R0, [R3,#0x158] ; ptr
BL              free
STR             R6, [R4,#(dword_690EC - 0x68BD8)]
B               loc_35828

loc_35A88
LDR             R6, [R5,#0x160]
B               loc_35964
; End of function sub_355FC

off_35A90 DCD aHashPop  ; "hash_pop"



; void __fastcall sub_35A94(const char *, _DWORD *)
sub_35A94

var_C24= -0xC24
var_C20= -0xC20
var_C1C= -0xC1C
var_C18= -0xC18
var_C14= -0xC14
var_C10= -0xC10
var_C0C= -0xC0C
var_C08= -0xC08
s= -0xC04
var_80C= -0x80C
var_805= -0x805
var_7F0= -0x7F0

PUSH            {R4-R11,LR}
MOV             R5, #byte_68BD8
SUB             SP, SP, #0xC20
SUB             SP, SP, #0xC
LDR             R3, [R5,#(dword_68DEC - 0x68BD8)]
CMP             R3, #0
BEQ             loc_35C48
LDR             R2, [R1,#0x100]
MOV             R4, R1
MOV             R6, R0
MOV             R0, R2
STR             R2, [SP,#0xC2C+var_C08]
BL              sub_31B04
LDR             R3, [R4,#0x1B0]
MOV             R1, #0x20 ; ' '
LDR             R10, [R0,#0x24]
ADD             R0, R4, #0xA0
LDR             R11, [R4,#0x104]
STR             R3, [SP,#0xC2C+var_C0C]
BL              sub_22C24
MOV             R1, #0x20 ; ' '
MOV             R9, R0
ADD             R0, R4, #0xC0
BL              sub_22C24
MOV             R1, #0x80
MOV             R8, R0
MOV             R0, R4
BL              sub_22C24
LDR             R2, [SP,#0xC2C+var_C08]
MOV             R7, R0
STR             R8, [SP,#0xC2C+var_C14]
ADD             R0, SP, #0xC2C+s ; s
STR             R7, [SP,#0xC2C+var_C10]
STR             R2, [SP,#0xC2C+var_C18]
MOVW            R2, #:lower16:aLuSSSSUUSS ; "%lu,%s,%s,%s,%s%u,%u,%s,%s\n"
LDR             R1, [R10,#8]
MOVT            R2, #:upper16:aLuSSSSUUSS ; "%lu,%s,%s,%s,%s%u,%u,%s,%s\n"
LDR             R3, [SP,#0xC2C+var_C0C]
STR             R1, [SP,#0xC2C+var_C1C]
MOV             R1, #0x400 ; maxlen
LDR             R12, [R10,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0xC2C+var_C20]
LDR             R12, [R11,#0xA4]
STMEA           SP, {R6,R9,R12}
BL              snprintf
MOV             R4, R0
MOV             R0, R9  ; ptr
BL              free
MOV             R0, R8  ; ptr
BL              free
MOV             R0, R7  ; ptr
BL              free
CMP             R4, #0x400
MOVGE           R3, #0
STRBGE          R3, [SP,#0xC2C+var_805]
BLT             loc_35C54

loc_35B7C               ; mutex
LDR             R0, =stru_6918C
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_35CA8
MOV             R1, R4  ; size
LDR             R3, [R5,#(dword_68DEC - 0x68BD8)] ; s
MOV             R2, #1  ; n
ADD             R0, SP, #0xC2C+s ; ptr
BL              fwrite
MOV             R4, R0
LDR             R0, [R5,#(dword_68DEC - 0x68BD8)] ; stream
BL              fflush
LDR             R0, =stru_6918C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_35D00
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R4, #1
BEQ             loc_35C48
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35C10
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35C10
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_35C48

loc_35C10
MOV             R12, #aSharelogFwrite ; "sharelog fwrite error"

loc_35C18
LDM             R12!, {R0-R3}
ADD             LR, SP, #0xC2C+var_80C
ADD             LR, LR, #8
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1}
STR             R0, [LR],#4
MOV             R0, #3
STRH            R1, [LR]
ADD             R1, SP, #0xC2C+var_80C
ADD             R1, R1, #8
BL              sub_20F58

loc_35C48
ADD             SP, SP, #0xC20
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_35C54
CMP             R4, #0
BGE             loc_35B7C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35C84
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_35C90

loc_35C84
MOV             R12, #aSharelogPrintf ; "sharelog printf error"
B               loc_35C18

loc_35C90
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_35C48
B               loc_35C84

loc_35CA8
BL              __errno_location
LDR             LR, =aSharelog ; "sharelog"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
ADD             R0, SP, #0xC2C+var_80C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, R0, #8 ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A5
STMEA           SP, {R1,LR}
STR             R12, [SP,#0xC2C+var_C24]

loc_35CD8               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0xC2C+var_80C
MOV             R0, #3
ADD             R1, R1, #8
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_35D00
BL              __errno_location
LDR             LR, =aSharelog ; "sharelog"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R12, #0x2A8
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
ADD             R0, SP, #0xC2C+var_80C
STMEA           SP, {R1,LR}
ADD             R0, R0, #8
STR             R12, [SP,#0xC2C+var_C24]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_35CD8
; End of function sub_35A94

off_35D34 DCD stru_6918C
off_35D38 DCD aSharelog ; "sharelog"



; int __fastcall sub_35D3C(_DWORD *)
sub_35D3C

var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x800

PUSH            {R4-R8,LR}
MOV             R4, R0
LDRB            R3, [R0,#0x6B]
SUB             SP, SP, #0x810
CMP             R3, #0
BEQ             loc_35F2C

loc_35D54
LDR             R8, =aTestPoolThread ; "test_pool_thread"
MOVW            R6, #:lower16:byte_74500
MOVW            R7, #:lower16:aSPoolDUrlSRetr ; "%s pool[%d] url = %s retry\n"
MOVT            R6, #:upper16:byte_74500
MOVT            R7, #:upper16:aSPoolDUrlSRetr ; "%s pool[%d] url = %s retry\n"

loc_35D68
LDRB            R5, [R4,#0x69]
CMP             R5, #0
BNE             loc_35E18

loc_35D74
MOV             R1, R5
MOV             R0, R4
BL              sub_2F1E8
CMP             R0, #0
BNE             loc_35E88
MOV             R0, R4
BL              sub_3466C
LDRB            R3, [R4,#0x6B]
CMP             R3, #0
BNE             loc_35F38
MOV             R0, #0x1E ; seconds
BL              sleep
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_35DD8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35DD8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_35D68

loc_35DD8
LDR             R1, [R4,#0xA4]
MOV             R3, R8
LDR             R12, [R4]
MOV             R2, R7  ; format
ADD             R0, SP, #0x810+s ; s
STR             R1, [SP,#0x810+var_80C]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
LDRB            R5, [R4,#0x69]
CMP             R5, #0
BEQ             loc_35D74

loc_35E18
MOV             R5, #byte_74500

loc_35E20
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_35E54
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35E54
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_35E7C

loc_35E54
MOVW            R2, #:lower16:aEndTestPoolThr ; "end test_pool_thread pool[%d]\n"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aEndTestPoolThr ; "end test_pool_thread pool[%d]\n"
LDR             R3, [R4]
ADD             R0, SP, #0x810+s ; s
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_35E7C
MOV             R0, #0
ADD             SP, SP, #0x810
POP             {R4-R8,PC}

loc_35E88
ADD             R1, R4, #0x61 ; 'a'
MOV             R0, R4
BL              sub_2F180
MOV             R0, #stru_7453C ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_35FC8
LDR             R0, =rwlock ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_36018
MOV             R3, #byte_68BD8
LDRB            R2, [R3,#(byte_69170 - 0x68BD8)]
CMP             R2, #0
BEQ             loc_35F44

loc_35ECC               ; rwlock
LDR             R0, =rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_36048
MOV             R0, #stru_7453C ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_36078
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R5, #0
MOV             R5, #byte_74500
BNE             loc_35F60

loc_35F10
MOV             R0, R4
BL              sub_32238
MOV             R0, #0
BL              sub_34178

loc_35F20
MOV             R3, #0
STRB            R3, [R4,#0x11C]
B               loc_35E20

loc_35F2C
BL              pthread_self
BL              pthread_detach
B               loc_35D54

loc_35F38
MOV             R5, #byte_74500
B               loc_35F20

loc_35F44
LDR             R5, [R4]
MOV             R2, #1
STR             R4, [R3,#(dword_69060 - 0x68BD8)]
STRB            R2, [R3,#(byte_69170 - 0x68BD8)]
MOVS            R5, R5
MOVNE           R5, #1
B               loc_35ECC

loc_35F60
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_35F94
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_35F94
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_35F10

loc_35F94
LDR             R12, [R4,#0xA4]
MOVW            R2, #:lower16:aSwitchingToPoo_0 ; "Switching to pool %d %s - first alive p"...
LDR             R3, [R4]
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aSwitchingToPoo_0 ; "Switching to pool %d %s - first alive p"...
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
B               loc_35F10

loc_35FC8
BL              __errno_location
LDR             LR, =aTestPoolThread ; "test_pool_thread"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A13
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]

loc_35FF4               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_36018
BL              __errno_location
LDR             LR, =aTestPoolThread ; "test_pool_thread"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A13
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_35FF4

loc_36048
BL              __errno_location
LDR             LR, =aTestPoolThread ; "test_pool_thread"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A21
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_35FF4

loc_36078
BL              __errno_location
LDR             LR, =aTestPoolThread ; "test_pool_thread"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x2A21
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x810+s
STR             R12, [SP,#0x810+var_808]
B               loc_35FF4
; End of function sub_35D3C

off_360A8 DCD aTestPoolThread ; "test_pool_thread"
off_360AC DCD rwlock



; int __fastcall sub_360B0(int, int)
sub_360B0

var_884= -0x884
var_87C= -0x87C
var_870= -0x870
var_868= -0x868
var_864= -0x864
var_848= -0x848
var_844= -0x844
var_824= -0x824
s= -0x804

PUSH            {R4-R11,LR}
ADD             R8, R0, #0xD4
SUB             SP, SP, #0x880
MOV             R4, R0
SUB             SP, SP, #4
MOV             R0, R8  ; mutex
MOV             R6, R1
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_36550
ADD             R10, R4, #0xEC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_365A0
ADD             R5, R4, #0x270
LDR             R11, [R4,#0x278]
LDRD            R2, R3, [R5]
MOVW            R9, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, [R4,#0x620]
ADD             R1, SP, #0x884+var_864
LDR             R0, [R4,#0x628]
MOVW            R12, #0x20AD
LDR             R7, =aGenStratumWork ; "gen_stratum_work"
MOVT            R9, #:upper16:aCgminerC ; "cgminer.c"
STRD            R2, R3, [R1,#-8]!
MOV             R2, R11
ADD             R0, LR, R0
ADD             R11, R6, #0x130
MOV             R3, R9
STR             R12, [SP,#0x884+var_884+4]
STR             R7, [SP,#0x884+var_884]
STR             R11, [SP,#0x884+var_870]
BL              sub_254E8
LDR             R3, [R5]
MOV             R0, R10 ; rwlock
LDR             R2, [R5,#4]
ADDS            R12, R3, #1
ADC             R1, R2, #0
STR             R12, [R5]
STR             R1, [R5,#4]
STR             R3, [R11,#-8]
STR             R2, [R11,#-4]
LDR             R3, [R4,#0x278]
STR             R3, [R6,#0x130]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_365D0
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_365F8
MOV             R0, R8  ; mutex
BL              pthread_mutex_unlock
SUBS            R5, R0, #0
BNE             loc_36620
LDR             R1, [R4,#0x624] ; n
ADD             R2, SP, #0x884+s
LDR             R0, [R4,#0x620] ; int
BL              sub_21C34
ADD             R2, SP, #0x884+var_864
ADD             R0, SP, #0x884+s ; int
MOV             R1, #0x20 ; ' ' ; n
BL              sub_21C34
MOVW            R3, #0x20B7
MOV             R2, #0x20 ; ' '
STR             R3, [SP,#0x884+var_884+4]
ADD             R0, SP, #0x884+var_844
MOV             R3, R9
STR             R7, [SP,#0x884+var_884]
ADD             R1, SP, R2
BL              sub_254E8
LDR             R3, [R4,#0x6AC]
CMP             R3, #0
BLE             loc_36250
MOVW            R11, #0x20BB
MOV             R8, R9

loc_361E4
LDR             R1, [R4,#0x2A4]
MOV             R3, R8
MOV             R2, #0x20 ; ' '
ADD             R0, SP, #0x884+var_824
LDR             R1, [R1,R5,LSL#2]
ADD             R5, R5, #1
STMEA           SP, {R7,R11}
BL              sub_254E8
MOV             R1, #0x40 ; '@' ; n
ADD             R2, SP, #0x884+s
ADD             R0, SP, R1 ; int
BL              sub_21C34
ADD             R2, SP, #0x884+var_864
MOV             R1, #0x20 ; ' ' ; n
ADD             R0, SP, #0x884+s ; int
BL              sub_21C34
MOVW            R3, #0x20BD
MOV             R2, #0x20 ; ' '
STR             R3, [SP,#0x884+var_884+4]
ADD             R1, SP, R2
MOV             R3, R8
STR             R7, [SP,#0x884+var_884]
ADD             R0, SP, #0x884+var_844
BL              sub_254E8
LDR             R3, [R4,#0x6AC]
CMP             R3, R5
BGT             loc_361E4

loc_36250
ADD             R3, SP, #0x884+var_844
ADD             R2, SP, #0x884+var_848
ADD             R1, R3, #0x1C
ADD             R0, SP, #0x884+var_868

loc_36260
LDR             R3, [R2,#4]!
CMP             R1, R2
REV             R3, R3
STR             R3, [R0,#4]!
BNE             loc_36260
MOVW            R2, #0x20C6
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
ADD             R1, R4, #0x620
STR             R2, [SP,#0x884+var_884+4]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
ADD             R1, R1, #0xC
MOV             R2, #0x70 ; 'p'
MOV             R0, R6
STR             R7, [SP,#0x884+var_884]
BL              sub_254E8
MOVW            R2, #0x20C7
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
STR             R2, [SP,#0x884+var_884+4]
MOV             R2, #0x20 ; ' '
ADD             R1, SP, R2
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
ADD             R0, R6, #0x24 ; '$'
STR             R7, [SP,#0x884+var_884]
BL              sub_254E8
ADD             R3, R4, #0x720
LDRD            R2, R3, [R3]
STR             R2, [R6,#0x138]
STR             R3, [R6,#0x13C]
LDR             R0, [R4,#0x2A0] ; s
BL              __strdup
STR             R0, [R6,#0x120]
LDR             R0, [R4,#0x264] ; s
BL              __strdup
STR             R0, [R6,#0x140]
ADD             R0, R4, #0x700
ADD             R0, R0, #0xC ; s
BL              __strdup
STR             R0, [R6,#0x134]
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_36648
MOVW            R3, #:lower16:off_67ED8
MOVW            R5, #:lower16:byte_68BD5
MOVT            R3, #:upper16:off_67ED8
MOVT            R5, #:upper16:byte_68BD5
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_363DC

loc_3632C
MOV             R0, R6
MOVW            R7, #:lower16:dword_767E0
BL              sub_2B3A4
MOVT            R7, #:upper16:dword_767E0
VLDR            D0, [R6,#0x138]
ADD             R0, R6, #0xA0
MOVW            R5, #:lower16:byte_68BD8
BL              sub_2D950
LDR             R3, [R7]
MOVT            R5, #:upper16:byte_68BD8
MOV             R0, #0  ; timer
ADD             R3, R3, #1
STR             R3, [R7]
BL              time
LDR             R3, [R5,#(dword_691A4 - 0x68BD8)]
SUB             R0, R0, R3
CMP             R0, #5
BGT             loc_363C4

loc_36374
LDR             R0, [R5,#(dword_691AC - 0x68BD8)]
MOV             R3, #0
MOV             R12, #1
MOV             R1, #0x53 ; 'S'
MOV             R2, #0x3C ; '<'
STRB            R12, [R6,#0x11C]
STR             R0, [R6,#0x150]
MOV             R0, R6
STR             R3, [R6,#0xF8]
STRB            R3, [R6,#0x118]
STRB            R1, [R6,#0x1B8]
STR             R2, [R6,#0xF4]
VLDR            D0, [R6,#0x138]
STR             R4, [R6,#0x104]
BL              sub_2B1B0
ADD             R0, R6, #0x108
BL              sub_239A4
ADD             SP, SP, #0x880
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_363C4               ; timer
MOV             R0, #0
BL              time
LDR             R3, [R7]
STR             R0, [R5,#(dword_691A4 - 0x68BD8)]
STR             R3, [R5,#(dword_691A8 - 0x68BD8)]
B               loc_36374

loc_363DC
MOV             R1, #0x70 ; 'p'
MOV             R0, R6
BL              sub_22C24
MOV             R1, #0x20 ; ' '
MOV             R9, R0
ADD             R0, SP, #0x884+var_864
BL              sub_22C24
LDRB            R3, [R5]
MOV             R8, R0
CMP             R3, #0
BEQ             loc_3653C
MOV             R7, #byte_74500
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_36430
MOV             R3, #byte_68BD4
LDRB            R2, [R3]
CMP             R2, #0
BEQ             loc_36674

loc_36430
MOVW            R2, #:lower16:aGeneratedStrat_0 ; "Generated stratum merkle %s"
MOV             R3, R8
MOVT            R2, #:upper16:aGeneratedStrat_0 ; "Generated stratum merkle %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x884+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x884+s
MOV             R0, #7
BL              sub_20F58
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_3653C
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_36498
MOV             R3, #byte_68BD4

loc_36478
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_36498
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_364E0

loc_36498
MOVW            R2, #:lower16:aGeneratedStrat_1 ; "Generated stratum header %s"
MOV             R3, R9
MOVT            R2, #:upper16:aGeneratedStrat_1 ; "Generated stratum header %s"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x884+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x884+s
MOV             R0, #7
BL              sub_20F58
LDRB            R3, [R5]
CMP             R3, #0
BEQ             loc_3653C
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_36500
MOV             R3, #byte_68BD4

loc_364E0
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36500
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3653C

loc_36500
LDR             R1, [SP,#0x884+var_870]
MOVW            R2, #:lower16:aWorkJobIdSNonc ; "Work job_id %s nonce2 %llu ntime %s"
LDR             R0, [R6,#0x134]
MOVT            R2, #:upper16:aWorkJobIdSNonc ; "Work job_id %s nonce2 %llu ntime %s"
LDR             R3, [R6,#0x120]
LDRD            R10, R11, [R1,#-8]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0x884+var_87C]
ADD             R0, SP, #0x884+s ; s
STRD            R10, R11, [SP,#0x884+var_884]
BL              snprintf
ADD             R1, SP, #0x884+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_3653C               ; ptr
MOV             R0, R9
BL              free
MOV             R0, R8  ; ptr
BL              free
B               loc_3632C

loc_36550
BL              __errno_location
LDR             LR, =aGenStratumWork ; "gen_stratum_work"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x884+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x20A8
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x884+var_87C]

loc_3657C               ; maxlen
MOV             R1, #0x800

loc_36580
BL              snprintf
ADD             R1, SP, #0x884+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_365A0
BL              __errno_location
LDR             LR, =aGenStratumWork ; "gen_stratum_work"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x20A8
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x884+s
STR             R12, [SP,#0x884+var_87C]
B               loc_3657C

loc_365D0
BL              __errno_location
MOVW            R1, #0x20B3
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R7, [SP,#0x884+var_884+4]
ADD             R0, SP, #0x884+s
STR             R9, [SP,#0x884+var_884]
STR             R1, [SP,#0x884+var_87C]
B               loc_3657C

loc_365F8
BL              __errno_location
MOVW            R1, #0x20B3
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R7, [SP,#0x884+var_884+4]
ADD             R0, SP, #0x884+s
STR             R9, [SP,#0x884+var_884]
STR             R1, [SP,#0x884+var_87C]
B               loc_3657C

loc_36620
BL              __errno_location
MOVW            R1, #0x20B3
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R7, [SP,#0x884+var_884+4]
ADD             R0, SP, #0x884+s
STR             R9, [SP,#0x884+var_884]
STR             R1, [SP,#0x884+var_87C]
B               loc_3657C

loc_36648
BL              __errno_location
MOVW            R1, #0x20D2
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x884+var_87C]
ADD             R0, SP, #0x884+s
STR             R7, [SP,#0x884+var_884+4]
MOV             R1, #0x800
STR             R9, [SP,#0x884+var_884]
B               loc_36580

loc_36674
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_36478
B               loc_36430
; End of function sub_360B0

off_3668C DCD aGenStratumWork ; "gen_stratum_work"



; int __fastcall sub_36690(int *, int *, int, int, __int64, unsigned int)
sub_36690

var_8= -8
var_s20=  0x20
arg_0=  0x24
arg_8=  0x2C

PUSH            {R4-R11,LR}
MOV             R4, R1
SUB             SP, SP, #0x14
MOV             R7, R0
ADD             R6, R2, #0xD4
MOV             R5, R2
MOV             R10, R3
BL              sub_2FD8C
STR             R0, [R4]
MOV             R0, R6  ; mutex
LDR             R3, [R7]
STR             R3, [SP,#0x14+var_8]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_367B8
ADD             R7, R5, #0xEC
MOV             R0, R7  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_367C4
LDR             R2, [SP,#0x14+arg_8]
ADD             R0, R5, #0x270
LDRD            R8, R9, [SP,#0x14+arg_0]
ADD             R1, SP, #0x14+var_s20
LDR             R11, =aGetWorkByNonce ; "get_work_by_nonce2"
MOVW            R12, #0x208D
REV             R2, R2
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
STRD            R8, R9, [R0]
ADD             R0, R5, #0x620
STR             R2, [R1,#0xC]!
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R11,R12}
ADD             R0, R0, #0xC
MOV             R2, #4
BL              sub_254E8
MOV             R0, R7  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_367D0
MOV             R0, R6  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_367DC
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R5
LDR             R1, [R4]
BL              sub_360B0
LDR             R1, [R4]
MOV             R3, #byte_68BD8
LDR             R12, [SP,#0x14+var_8]
LDR             R2, [R3,#(dword_691AC - 0x68BD8)]
MOV             R0, #1
STR             R10, [R1,#0x104]
LDR             R3, [R4]
LDR             R1, [SP,#0x14+arg_8]
STR             R12, [R3,#0x100]
LDR             R3, [R4]
STR             R2, [R3,#0x150]
LDR             R3, [R4]
LDR             R2, [R3,#0x104]
LDR             R3, [R2,#0x44]
ADD             R3, R3, R0
STR             R3, [R2,#0x44]
LDR             R3, [R4]
STRB            R0, [R3,#0x110]
LDR             R3, [R4]
STR             R1, [R3,#0x1BC]
ADD             SP, SP, #0x14
POP             {R4-R11,PC}

loc_367B8
MOVW            R1, #0x208A
LDR             R0, =aGetWorkByNonce ; "get_work_by_nonce2"
BL              sub_2EFE0

loc_367C4
MOVW            R1, #0x208A
LDR             R0, =aGetWorkByNonce ; "get_work_by_nonce2"
BL              sub_2EF84

loc_367D0
MOV             R0, R11
MOVW            R1, #0x208E
BL              sub_2FB24

loc_367DC
MOV             R0, R11
MOVW            R1, #0x208E
BL              sub_2F03C
; End of function sub_36690

off_367E8 DCD aGetWorkByNonce ; "get_work_by_nonce2"



; int __fastcall sub_367EC(int, int)
sub_367EC

var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_80C= -0x80C
s= -0x804
var_7E0= -0x7E0
var_7DC= -0x7DC

PUSH            {R4-R11,LR}
MOV             R4, #byte_68BD8
SUB             SP, SP, #0x810
SUB             SP, SP, #0xC
LDRB            R5, [R4,#(byte_6917C - 0x68BD8)]
CMP             R5, #0
BNE             loc_36830
MOV             R3, #dword_766C0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_36844

loc_36820
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_36830
MOV             R5, #0
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_36844
LDR             R2, [R0,#0x150]
MOV             R7, R1
LDR             R3, [R4,#(dword_691AC - 0x68BD8)]
MOV             R6, R0
CMP             R2, R3
BEQ             loc_368EC
MOV             R3, #byte_68BD5
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_368E4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_368AC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_368AC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_36820

loc_368AC
MOVW            R12, #:lower16:aWorkStaleDueTo ; "Work stale due to block mismatch"
ADD             LR, SP, #0x81C+s
MOVT            R12, #:upper16:aWorkStaleDueTo ; "Work stale due to block mismatch"
LDM             R12!, {R0-R3} ; "Work stale due to block mismatch"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "o block mismatch"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #7
STRB            R12, [LR]
BL              sub_20F58
B               loc_36820

loc_368E4
MOV             R5, #1
B               loc_36820

loc_368EC
MOVW            R3, #:lower16:off_67FE0 ; "--version-file"
LDR             R8, [R0,#0x114]
MOVT            R3, #:upper16:off_67FE0 ; "--version-file"
LDR             R9, [R0,#0x104]
LDR             R2, [R3,#(dword_68754 - 0x67FE0)]
CMP             R8, R2
LDRLE           R8, [R3,#(dword_68758 - 0x67FE0)]
CMP             R1, #0
BNE             loc_369E4
LDRB            R3, [R9,#0x280]
CMP             R3, #0
BEQ             loc_369E4
LDRB            R3, [R9,#0x281]
CMP             R3, #0
BEQ             loc_36934
LDRB            R3, [R9,#0x283]
CMP             R3, #0
BNE             loc_36B74

loc_36934
MOV             R3, #byte_68BD5
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_368E4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36984
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36984
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_368E4

loc_36984
MOVW            LR, #:lower16:aWorkStaleDueTo_0 ; "Work stale due to stratum inactive"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWorkStaleDueTo_0 ; "Work stale due to stratum inactive"
LDM             LR!, {R0-R3} ; "Work stale due to stratum inactive"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "o stratum inactive"
LDR             LR, [LR] ; "ve"
STM             R12!, {R0-R3}
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #7
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58
B               loc_36820

loc_369C4               ; rwlock
MOV             R0, R10
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_36C58
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98

loc_369E4
VLDR            D5, [R9,#0x1C0]
ADD             R0, SP, #0x81C+var_80C
VMOV.F64        D6, #5.0
VMOV.F64        D7, #1.0
VMLA.F64        D7, D5, D6
VCVT.S32.F64    S14, D7
VMOV            R3, S14
SUB             R8, R8, R3
BL              sub_239A4
LDR             R3, [SP,#0x81C+var_80C]
CMP             R8, #5
LDR             R2, [R6,#0x108]
MOVLT           R8, #5
SUB             R3, R3, R2
CMP             R8, R3
BGT             loc_36AA8
MOV             R3, #byte_68BD5
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_368E4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36A74
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36A74
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_368E4

loc_36A74
MOVW            LR, #:lower16:aWorkStaleDueTo_1 ; "Work stale due to expiry"
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWorkStaleDueTo_1 ; "Work stale due to expiry"
LDM             LR!, {R0-R3} ; "Work stale due to expiry"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "o expiry"
STM             R12!, {R0,R1}
ADD             R1, SP, #0x81C+s
STRB            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_20F58
B               loc_36820

loc_36AA8
MOV             R3, #byte_755D4
LDRB            R3, [R3]
EOR             R3, R3, #1
ORRS            R3, R7, R3
BNE             loc_36820
BL              sub_31FF4
CMP             R9, R0
BEQ             loc_36820
LDRB            R3, [R6,#0x11A]
CMP             R3, #0
BNE             loc_36820
LDR             R3, [R4,#(dword_68FD0 - 0x68BD8)]
SUB             R3, R3, #3
CMP             R3, #1
BLS             loc_36820
MOV             R3, #byte_68BD5
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_368E4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36B38
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36B38
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_368E4

loc_36B38
MOVW            LR, #:lower16:aWorkStaleDueTo_2 ; "Work stale due to fail only pool mismat"...
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWorkStaleDueTo_2 ; "Work stale due to fail only pool mismat"...

loc_36B44
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR, {R0-R2}
STM             R12!, {R0,R1}
ADD             R1, SP, #0x81C+s
STRH            R2, [R12]
MOV             R0, #7
MOV             R2, #0
BL              sub_20F58
B               loc_36820

loc_36B74
ADD             R11, R9, #0xD4
MOV             R0, R11 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_36C40
ADD             R10, R9, #0xEC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_36C4C
MOV             R0, R11 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_36CAC
LDR             R1, [R9,#0x2A0] ; s2
LDR             R0, [R6,#0x120] ; s1
BL              strcmp
CMP             R0, #0
BEQ             loc_369C4
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_36C58
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R3, #byte_68BD5
LDRB            R5, [R3]
CMP             R5, #0
BEQ             loc_368E4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36C30
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36C30
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_368E4

loc_36C30
MOVW            LR, #:lower16:aWorkStaleDueTo_3 ; "Work stale due to stratum job_id mismat"...
ADD             R12, SP, #0x81C+s
MOVT            LR, #:upper16:aWorkStaleDueTo_3 ; "Work stale due to stratum job_id mismat"...
B               loc_36B44

loc_36C40
MOVW            R1, #0x13E1
LDR             R0, =aStaleWork ; "stale_work"
BL              sub_2EFE0

loc_36C4C
MOVW            R1, #0x13E1
LDR             R0, =aStaleWork ; "stale_work"
BL              sub_30138

loc_36C58
BL              __errno_location
LDR             R1, =aStaleWork ; "stale_work"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x13E8
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x81C+var_81C]

loc_36C78
STR             R1, [SP,#0x81C+var_818]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x81C+var_814]
LDR             R3, [R0]
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_36CAC
BL              __errno_location
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
LDR             R1, =aStaleWork ; "stale_work"
MOVW            R12, #0x13E1
STR             R3, [SP,#0x81C+var_81C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_36C78
; End of function sub_367EC

off_36CD0 DCD aStaleWork ; "stale_work"



; void **__fastcall sub_36CD4(int, void *)
sub_36CD4

var_810= -0x810
var_80C= -0x80C
var_804= -0x804
s= -0x800

PUSH            {R4-R10,LR}
MOVW            R6, #:lower16:byte_68BD5
MOV             R3, #0
SUB             SP, SP, #0x810
MOVT            R6, #:upper16:byte_68BD5
MOV             R7, R0
STR             R3, [SP,#0x810+var_804]
MOV             R8, R1
LDR             R5, [R0,#0x24]
BL              sub_2AE8C
LDRB            R3, [R6]
CMP             R3, #0
BEQ             loc_36D64
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36D30
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_36FB0

loc_36D30
MOVW            R12, #:lower16:aPoppingWorkFro ; "Popping work from get queue to get work"
ADD             LR, SP, #0x810+s
MOVT            R12, #:upper16:aPoppingWorkFro ; "Popping work from get queue to get work"
LDM             R12!, {R0-R3} ; "Popping work from get queue to get work"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "m get queue to get work"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "et work"
STM             LR, {R0,R1}
ADD             R1, SP, #0x810+s
MOV             R0, #7
BL              sub_20F58

loc_36D64               ; timer
MOV             R0, #0
LDR             R10, =aGetWork ; "get_work"
BL              time
MOV             R9, R0
B               loc_36D90

loc_36D78
BL              sub_355FC
MOV             R1, R4
STR             R0, [SP,#0x810+var_804]
BL              sub_367EC
CMP             R0, #0
BNE             loc_36E0C

loc_36D90
LDR             R4, [SP,#0x810+var_804]
MOV             R0, #1
CMP             R4, #0
BEQ             loc_36D78
MOV             R0, #0  ; timer
BL              time
SUB             R9, R0, R9
LDRB            R3, [R6]
CMP             R9, #0
BLE             loc_36E64
CMP             R3, #0
BEQ             loc_36F2C
MOV             R3, #byte_74500
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_36E2C
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_36E2C
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BGT             loc_36E2C
LDR             R2, [R5,#0xE8]
ADD             R4, R2, R9
STR             R4, [R5,#0xE8]
B               loc_36E74

loc_36E0C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x21C4
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R2, R10
ADD             R0, SP, #0x810+var_804
BL              sub_2CEA0
BL              sub_2F9C0
B               loc_36D90

loc_36E2C
MOVW            R2, #:lower16:aGetWorkBlocked ; "Get work blocked for %ld seconds"
MOV             R3, R9
MOVT            R2, #:upper16:aGetWorkBlocked ; "Get work blocked for %ld seconds"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x810+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x810+s
MOV             R0, #7
BL              sub_20F58
LDR             R2, [R5,#0xE8]
LDRB            R3, [R6]
ADD             R4, R2, R9
STR             R4, [R5,#0xE8]

loc_36E64
CMP             R3, #0
BEQ             loc_36EBC
MOV             R3, #byte_74500

loc_36E74
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_36E94
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_36FC8

loc_36E94
MOVW            R2, #:lower16:aGotWorkFromGet ; "Got work from get queue to get work for"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aGotWorkFromGet ; "Got work from get queue to get work for"...
ADD             R0, SP, #0x810+s ; s
MOV             R3, R8
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_36EBC
MOVW            R3, #:lower16:byte_68BD8
LDR             R0, [SP,#0x810+var_804]
MOVT            R3, #:upper16:byte_68BD8
LDRB            R3, [R3,#(byte_6917C - 0x68BD8)]
STR             R8, [R0,#0x100]
CMP             R3, #0
BNE             loc_36F3C

loc_36ED8
MOV             R0, R7
BL              sub_2AEC4
LDR             R3, [SP,#0x810+var_804]
MOV             R2, #1
STRB            R2, [R3,#0x110]
MOV             R0, R3
LDR             R2, [R5,#4]
VLDR            D6, [R3,#0x178]
VLDR            D7, [R2,#0x68]
VCMP.F64        D7, D6
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D7, D6
VSTR            D7, [R3,#0xE0]
LDR             R2, [R5,#4]
VLDR            D6, [R2,#0x70]
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D7, D6
VSTR            D7, [R3,#0xE0]
ADD             SP, SP, #0x810
POP             {R4-R10,PC}

loc_36F2C
LDR             R3, [R5,#0xE8]
ADD             R4, R3, R9
STR             R4, [R5,#0xE8]
B               loc_36EBC

loc_36F3C
LDR             R3, [R5,#0x17C]
LDR             R1, [R5,#0x180]
ADD             R3, R3, R1
CMP             R3, #0
STR             R3, [R5,#0x17C]
MOVLE           R2, #1
STRLE           R2, [R5,#0x180]
BLE             loc_36FE0
CMP             R3, #0xF
BLE             loc_36FE0
LDR             R3, [R5,#0x178]
MOV             R2, #0xFFFFFFFF
LDR             R1, =unk_691B0
MOVW            R12, #0x21AD
STR             R2, [R5,#0x180]
ADD             R3, R3, #1
CMP             R3, #0xF
ADDLE           R2, R3, R3,LSL#2
MOVGT           R3, #0
STRLE           R3, [R5,#0x178]
ADDLE           R1, R1, R2,LSL#5
LDR             R2, =aSetBenchmarkWo ; "set_benchmark_work"
STRGT           R3, [R5,#0x178]
MOV             R3, #aCgminerC ; "cgminer.c"
STMEA           SP, {R2,R12}
MOV             R2, #0xA0
BL              sub_254E8
B               loc_36ED8

loc_36FB0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_36D64
B               loc_36D30

loc_36FC8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_36EBC
B               loc_36E94

loc_36FE0
LDR             R12, =unk_69BB0
ADD             R1, R3, R3,LSL#2
LDR             R2, =aSetBenchmarkWo ; "set_benchmark_work"
MOVW            R3, #0x21B1
STR             R3, [SP,#0x810+var_80C]
MOV             R3, #aCgminerC ; "cgminer.c"
STR             R2, [SP,#0x810+var_810]
ADD             R1, R12, R1,LSL#5
MOV             R2, #0xA0
BL              sub_254E8
B               loc_36ED8
; End of function sub_36CD4

off_37010 DCD aGetWork  ; "get_work"
off_37014 DCD unk_691B0
off_37018 DCD aSetBenchmarkWo ; "set_benchmark_work"
off_3701C DCD unk_69BB0



; void **__fastcall sub_37020(int, pthread_rwlock_t *, void *)
sub_37020
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R1, R2
BL              sub_36CD4
MOV             R4, R0
MOV             R1, R0
MOV             R0, R5
BL              sub_2FE98
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_37020




; void **__fastcall sub_37048(int)
sub_37048

var_C= -0xC

LDR             R3, [R0,#0x164]
MOV             R1, #0
CMP             R3, R1
BEQ             loc_3709C
PUSH            {R4,LR}
MOV             R4, R0
SUB             SP, SP, #8
MOV             R0, R3
STR             R3, [SP,#0x10+var_C]
BL              sub_367EC
CMP             R0, #0
BNE             loc_370A4
LDR             R1, [SP,#0x10+var_C]
MOV             R0, R4
BL              sub_2E034

loc_37084
LDR             R3, [SP,#0x10+var_C]
MOV             R2, #0
STR             R2, [R4,#0x164]
MOV             R0, R3
ADD             SP, SP, #8
POP             {R4,PC}

loc_3709C
MOV             R0, R3
BX              LR

loc_370A4
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x24CB
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aGetQueued ; "__get_queued"
ADD             R0, SP, #0x10+var_C
BL              sub_2CEA0
BL              sub_2F9C0
B               loc_37084
; End of function sub_37048

off_370C4 DCD aGetQueued ; "__get_queued"



; void **__fastcall sub_370C8(pthread_rwlock_t *)
sub_370C8
PUSH            {R4-R6,LR}
ADD             R4, R0, #0x140
MOV             R5, R0
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_37118
MOV             R0, R5
BL              sub_37048
MOV             R5, R0
MOV             R0, R4  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_37124
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R5
POP             {R4-R6,PC}

loc_37118
MOVW            R1, #0x24E0
LDR             R0, =aGetQueued_0 ; "get_queued"
BL              sub_2EF84

loc_37124
MOVW            R1, #0x24E2
LDR             R0, =aGetQueued_0 ; "get_queued"
BL              sub_2FB24
; End of function sub_370C8

off_37130 DCD aGetQueued_0 ; "get_queued"



; void sub_37134()
sub_37134

var_814= -0x814
var_808= -0x808
s= -0x804

PUSH            {R4-R9,LR}
MOVW            R5, #:lower16:byte_68BD8
SUB             SP, SP, #0x810
MOVT            R5, #:upper16:byte_68BD8
SUB             SP, SP, #0xC
LDR             R0, [R5,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_lock
SUBS            R6, R0, #0
BNE             loc_373F0
LDR             R0, [R5,#(dword_690EC - 0x68BD8)]
CMP             R0, #0
STR             R0, [SP,#0x81C+var_808]
BEQ             loc_3739C
MOV             R1, #0
LDR             R4, [R0,#0x160]
BL              sub_367EC
CMP             R0, #0
LDR             R7, =aDiscardStale ; "discard_stale"
BEQ             loc_3726C

loc_37180
LDR             R3, [SP,#0x81C+var_808]
LDR             R1, [R5,#(dword_690EC - 0x68BD8)]
LDR             R9, [R3,#0x15C]
LDR             R0, [R1,#0x158]
CMP             R9, #0
BEQ             loc_37294
LDR             R2, [R0,#0x14]
ADD             R12, R3, #0x158
LDR             LR, [R0,#0x10]
SUB             LR, LR, R2
CMP             R3, LR
BEQ             loc_372C4

loc_371B0
LDR             R0, [R3,#0x160]
ADD             R2, R9, R2
STR             R0, [R2,#8]
LDR             R8, [R3,#0x160]

loc_371C0
LDR             R0, [R1,#0x158]
CMP             R8, #0
LDRNE           R2, [R0,#0x14]
LDRNE           R0, [R3,#0x15C]
ADDNE           R8, R8, R2
STRNE           R0, [R8,#4]
LDRNE           R0, [R1,#0x158]
LDR             LR, [R3,#0x174]
LDR             R2, [R0,#4]
LDR             R0, [R0]
SUB             R2, R2, #1
AND             R2, R2, LR
ADD             R2, R2, R2,LSL#1
ADD             R0, R0, R2,LSL#2
LDR             LR, [R0,#4]
SUB             LR, LR, #1
STR             LR, [R0,#4]
LDR             R0, [R1,#0x158]
LDR             R0, [R0]
LDR             LR, [R0,R2,LSL#2]
CMP             LR, R12
LDREQ           R1, [R3,#0x168]
STREQ           R1, [R0,R2,LSL#2]
LDR             R0, [R3,#0x164]
LDR             R2, [R3,#0x168]
LDREQ           R1, [R5,#(dword_690EC - 0x68BD8)]
CMP             R0, #0
STRNE           R2, [R0,#0x10]
LDRNE           R2, [R3,#0x168]
CMP             R2, #0
LDRNE           R3, [R3,#0x164]
STRNE           R3, [R2,#0xC]
LDR             R2, [R1,#0x158]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_37250
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x150A
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOV             R2, R7
ADD             R0, SP, #0x81C+var_808
ADD             R6, R6, #1
BL              sub_2CEA0

loc_3726C
CMP             R4, #0
STR             R4, [SP,#0x81C+var_808]
BEQ             loc_372E4
MOV             R0, R4
MOV             R1, #0
LDR             R4, [R4,#0x160]
BL              sub_367EC
CMP             R0, #0
BEQ             loc_3726C
B               loc_37180

loc_37294
LDR             R8, [R3,#0x160]
CMP             R8, #0
BEQ             loc_373D4
LDR             R2, [R0,#0x14]
ADD             R12, R3, #0x158
LDR             LR, [R0,#0x10]
SUB             LR, LR, R2
CMP             R3, LR
BEQ             loc_372C4

loc_372B8
MOV             R1, R8
STR             R8, [R5,#(dword_690EC - 0x68BD8)]
B               loc_371C0

loc_372C4
ADD             R2, R9, R2
STR             R2, [R0,#0x10]
LDR             R9, [R3,#0x15C]
CMP             R9, #0
BEQ             loc_37440
LDR             R2, [R1,#0x158]
LDR             R2, [R2,#0x14]
B               loc_371B0

loc_372E4               ; cond
MOV             R0, #stru_744D0
BL              pthread_cond_signal
LDR             R0, [R5,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_37448
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R6, #0
BEQ             loc_37390
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_37390
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37368
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37368
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_37390

loc_37368
MOVW            R2, #:lower16:aDiscardedDStal ; "Discarded %d stales that didn't match c"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aDiscardedDStal ; "Discarded %d stales that didn't match c"...
MOV             R3, R6
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_37390
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_3739C               ; cond
MOV             R0, #stru_744D0
BL              pthread_cond_signal
LDR             R0, [R5,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_37448
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_373D4               ; ptr
LDR             R0, [R0]
BL              free
LDR             R3, [R5,#(dword_690EC - 0x68BD8)]
LDR             R0, [R3,#0x158] ; ptr
BL              free
STR             R8, [R5,#(dword_690EC - 0x68BD8)]
B               loc_37250

loc_373F0
BL              __errno_location
LDR             LR, =aDiscardStale ; "discard_stale"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x81C+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1503
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x81C+var_814]

loc_3741C               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_37440
LDR             R8, [R3,#0x160]
B               loc_372B8

loc_37448
BL              __errno_location
LDR             LR, =aDiscardStale ; "discard_stale"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1510
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x81C+s
STR             R12, [SP,#0x81C+var_814]
B               loc_3741C
; End of function sub_37134

off_37478 DCD aDiscardStale ; "discard_stale"



; int sub_3747C()
sub_3747C
PUSH            {R4-R10,LR}
BL              pthread_self
BL              pthread_detach
BL              sub_37134
MOV             R0, #stru_744A8 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_375C4
MOVW            R3, #:lower16:dword_75588
MOVW            R0, #:lower16:stru_744A8
MOVT            R3, #:upper16:dword_75588
MOVT            R0, #:upper16:stru_744A8 ; rwlock
LDR             R8, [R3]
BL              pthread_rwlock_unlock
SUBS            R5, R0, #0
BNE             loc_375D0
MOV             R6, #off_67ED8
LDR             R3, [R6] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R8, #0
BLE             loc_3755C
MOVW            R10, #:lower16:dword_744A4
MOVW            R7, #:lower16:stru_767C8
MOVT            R10, #:upper16:dword_744A4
MOVT            R7, #:upper16:stru_767C8
MOV             R9, #1

loc_374EC
LDR             R3, [R10]
LDR             R3, [R3,R5,LSL#2]
LDR             R4, [R3,#0x24]
CMP             R4, #0
BEQ             loc_37550
LDR             R2, [R4,#0x20]
CMP             R2, #0
BNE             loc_37550
STRB            R9, [R3,#0x3E]
MOV             R0, R4
BL              sub_32C30
MOV             R0, R7  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_375AC
LDR             R3, [R4,#4]
MOV             R0, R4
LDR             R3, [R3,#0x4C]
BLX             R3
MOV             R0, R7  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_375B8
LDR             R3, [R6] ; sub_21C98
BLX             R3      ; sub_21C98

loc_37550
ADD             R5, R5, #1
CMP             R8, R5
BNE             loc_374EC

loc_3755C               ; mutex
MOV             R0, #stru_767F4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_375A0
MOV             R0, #stru_76700 ; cond
BL              pthread_cond_broadcast
MOV             R0, #stru_767F4 ; mutex
BL              pthread_mutex_unlock
SUBS            R4, R0, #0
BNE             loc_375DC
LDR             R3, [R6] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4
POP             {R4-R10,PC}

loc_375A0
MOVW            R1, #0x1560
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2EFE0

loc_375AC
MOVW            R1, #0x155A
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2EFE0

loc_375B8
MOVW            R1, #0x155C
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2F03C

loc_375C4
MOVW            R1, #0x1545
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_30138

loc_375D0
MOVW            R1, #0x1547
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2FB24

loc_375DC
MOVW            R1, #0x1562
LDR             R0, =aRestartThread ; "restart_thread"
BL              sub_2F03C
; End of function sub_3747C

off_375E8 DCD aRestartThread ; "restart_thread"



; void __fastcall sub_375EC(int, unsigned __int64)
sub_375EC

var_8AC= -0x8AC
var_8A4= -0x8A4
var_89C= -0x89C
var_894= -0x894
var_888= -0x888
var_884= -0x884
var_874= -0x874
var_864= -0x864
var_854= -0x854
info= -0x844
s= -0x804

PUSH            {R4-R11,LR}
MOV             R9, R0
VPUSH           {D8-D13}
SUB             SP, SP, #0x8A0
SUB             SP, SP, #0xC
ADD             R0, SP, #0x8AC+info ; info
STRD            R2, R3, [SP,#0x8AC+var_894]
BL              sysinfo
CMP             R0, #0
BEQ             loc_37694
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3763C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_37E98

loc_3763C
BL              __errno_location
LDR             R4, [R0]
ADD             R5, SP, #0x8AC+s
MOV             R0, R4  ; errnum
BL              strerror
MOVW            R2, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
STR             R0, [SP,#0x8AC+var_8AC]
MOVT            R2, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R1, #0x800 ; maxlen
MOV             R3, R4
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3767C
MOVW            R8, #:lower16:dword_74484
MOV             R0, #0  ; timer
MOVT            R8, #:upper16:dword_74484
BL              time
STR             R0, [R8]
B               loc_376A4

loc_37694
LDR             R3, [SP,#0x8AC+info]
MOV             R8, #dword_74484
STR             R3, [R8]

loc_376A4
MOVW            R4, #:lower16:byte_68BD8
MOVW            R7, #:lower16:off_67FE0 ; "--version-file"
MOVT            R4, #:upper16:byte_68BD8
MOVT            R7, #:upper16:off_67FE0 ; "--version-file"
ADD             R0, R4, #0x440
BL              sub_239A4
ADD             R0, R4, #0x440
ADD             R1, R0, #0x64 ; 'd'
BL              sub_23C94
MOVW            R3, #:lower16:byte_6ABD0
LDR             R5, [R4,#(dword_69018 - 0x68BD8)]
MOVT            R3, #:upper16:byte_6ABD0
LDR             R1, [R7,#(dword_68730 - 0x67FE0)]
LDR             R2, [R3,#(dword_6A5B0 - 0x6ABD0)]
VMOV.F64        D9, D0
SUB             R2, R5, R2
CMP             R1, R2
BGT             loc_37980
ADD             R1, R4, #0x440
STR             R5, [R3,#(dword_6A5B0 - 0x6ABD0)]
ADD             R0, R1, #0x64 ; 'd'
BL              sub_257F8
CMP             R9, #0
BGE             loc_37C5C
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_lock
SUBS            R6, R0, #0
BNE             loc_380BC
MOV             R10, #dword_75588
LDR             R3, [R10]
CMP             R3, #0
BLE             loc_3780C
ADD             R9, R4, #0x440
VLDR            D8, =0.0
VLDR            D12, =60.0
VLDR            D11, =300.0
VLDR            D10, =900.0
B               loc_37754

loc_37744
LDR             R3, [R10]
ADD             R6, R6, #1
CMP             R3, R6
BLE             loc_3780C

loc_37754
MOV             R0, R6
BL              sub_31B04
LDR             R5, [R0,#0x24]
MOV             R0, R9
ADD             R11, R5, #0x8C
MOV             R1, R11
BL              sub_23C94
MOV             R1, R9
VMOV.F64        D13, D0
MOV             R0, R11
BL              sub_257F8
VCMPE.F64       D13, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_37744
LDR             R3, [R7,#(dword_68730 - 0x67FE0)]
ADD             R0, R5, #0x30 ; '0'
VMOV.F64        D1, D13
VMOV.F64        D0, D8
VMOV            S15, R3
VCVT.F64.S32    D2, S15
BL              sub_2C538
VMOV.F64        D1, D13
ADD             R0, R5, #0x38 ; '8'
VMOV.F64        D0, D8
VMOV.F64        D2, D12
BL              sub_2C538
VCMPE.F64       D13, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_37744
ADD             R0, R5, #0x40 ; '@'
VMOV.F64        D2, D11
VMOV.F64        D1, D13
VMOV.F64        D0, D8
BL              sub_2C538
VCMPE.F64       D13, #0.0
ADD             R0, R5, #0x48 ; 'H'
VMRS            APSR_nzcv, FPSCR
BLS             loc_37744
VMOV.F64        D1, D13
ADD             R6, R6, #1
VMOV.F64        D2, D10
VMOV.F64        D0, D8
BL              sub_2C538
LDR             R3, [R10]
CMP             R3, R6
BGT             loc_37754

loc_3780C               ; mutex
MOV             R0, #stru_76838
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_380F4
MOV             R9, #off_67ED8
LDR             R3, [R9] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_37FB4
MOVW            R10, #:lower16:dbl_756A8
LDRD            R0, R1, [SP,#0x8AC+var_894]
BLX             sub_4A10C
MOVT            R10, #:upper16:dbl_756A8
VMOV            D10, R0, R1
VLDR            D7, [R10]
LDR             R3, [R4,#(dword_690E8 - 0x68BD8)]
VADD.F64        D7, D7, D10
VSTR            D7, [R10]

loc_37868
ADD             R3, R3, #1
MOV             R6, #0
CMP             R3, #0xB
MOV             R0, #0
MOVGT           R3, #0
MOV             R1, #0
STR             R3, [R4,#(dword_690E8 - 0x68BD8)]
LDR             R3, =dbl_69088
MOV             R11, R3
ADD             R5, R3, #0x60 ; '`'
STR             R3, [SP,#0x8AC+var_888]

loc_37894
VLDM            R11!, {D8}
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
BLT             loc_378BC
BLX             sub_4A10C
VMOV            D7, R0, R1
ADD             R6, R6, #1
VADD.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             __fixunsdfdi

loc_378BC
CMP             R11, R5
BNE             loc_37894
CMP             R6, #0
BEQ             loc_378DC
MOV             R2, R6
MOV             R3, R6,ASR#31
BLX             sub_4A178
STRD            R0, R1, [SP,#0x8AC+var_894]

loc_378DC
LDR             R3, [R7,#(dword_68730 - 0x67FE0)]
VMOV            S15, R3
VCVT.F64.S32    D8, S15
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
BHI             loc_37F08
VCMPE.F64       D9, #0.0
VMRS            APSR_nzcv, FPSCR
BHI             loc_37EB0

loc_37900
MOVW            R3, #:lower16:dbl_75590
VLDR            D7, =1000000.0
MOVT            R3, #:upper16:dbl_75590
MOVW            R5, #:lower16:dword_73470
VLDR            D6, [R3]
MOVT            R5, #:upper16:dword_73470
MOV             R11, #1
VMUL.F64        D7, D6, D7
VMOV            R0, R1, D7
BLX             __fixunsdfdi
LDR             R3, [R4,#(dword_690E8 - 0x68BD8)]
VLDR            D7, =0.0
LDR             R2, [SP,#0x8AC+var_888]
STRD            R0, R1, [R5]
MOV             R3, R3,LSL#3
VMOV.F64        D5, D7
ADD             R2, R2, R3
VSTR            D7, [R2]
B               loc_37B44
ALIGN 0x10
dbl_37950 DCFD 0.0
dbl_37958 DCFD 60.0
dbl_37960 DCFD 300.0
dbl_37968 DCFD 900.0
dbl_37970 DCFD 1000000.0
off_37978 DCD dbl_69088
off_3797C DCD dword_69018

loc_37980
CMP             R9, #0
BLT             loc_37C4C
ADD             R1, R4, #0x440
MOV             R11, #0
ADD             R0, R1, #0x64 ; 'd'
BL              sub_257F8

loc_37998
MOV             R0, R9
BL              sub_31B04
LDR             R6, [R0,#0x24]
ADD             R0, R0, #0x2C ; ','
LDR             R1, =dword_69018
BL              sub_257F8
ADD             R10, R6, #0x8C
LDR             R0, =dword_69018
MOV             R1, R10
STR             R5, [R6,#0xF0]
BL              sub_23C94
MOV             R0, R10
LDR             R1, =dword_69018
VMOV.F64        D8, D0
BL              sub_257F8
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_37A74
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37A24
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37A24
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_37A74

loc_37A24
LDRD            R0, R1, [SP,#0x8AC+var_894]
ADD             R5, SP, #0x8AC+s
BLX             sub_4A10C
VMOV            D7, R0, R1
MOVW            R2, #:lower16:aThreadDLluHash ; "[thread %d: %llu hashes, %.1f mhash/sec"...
VLDR            D6, =1000000.0
MOVT            R2, #:upper16:aThreadDLluHash ; "[thread %d: %llu hashes, %.1f mhash/sec"...
VDIV.F64        D5, D7, D8
MOV             R3, R9
LDRD            R0, R1, [SP,#0x8AC+var_894]
STRD            R0, R1, [SP,#0x8AC+var_8AC]
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
VDIV.F64        D7, D5, D6
VSTR            D7, [SP,#0x8AC+var_8A4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_37A74
MOVW            R2, #0x4240
LDRD            R0, R1, [SP,#0x8AC+var_894]
MOVT            R2, #0xF
MOV             R3, #0
BLX             sub_4A178
STRD            R0, R1, [SP,#0x8AC+var_894]
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_38034
LDRD            R0, R1, [SP,#0x8AC+var_894]
BLX             sub_4A10C
VLDR            D7, [R6,#0x50]
VMOV            D10, R0, R1
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
VADD.F64        D7, D7, D10
VSTR            D7, [R6,#0x50]
BHI             loc_37E24

loc_37AC4               ; mutex
MOV             R0, #stru_76838
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_38070
MOV             R9, #off_67ED8
LDR             R3, [R9] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R3, #byte_73388
LDRB            R3, [R3]
TST             R11, R3
BNE             loc_37F50
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_37FB4
MOVW            R10, #:lower16:dbl_756A8
CMP             R11, #0
MOVT            R10, #:upper16:dbl_756A8
LDR             R3, [R4,#(dword_690E8 - 0x68BD8)]
VLDR            D7, [R10]
VADD.F64        D7, D7, D10
VSTR            D7, [R10]
BNE             loc_37868
LDR             R2, =dbl_69088
MOV             R3, R3,LSL#3
STR             R2, [SP,#0x8AC+var_888]
ADD             R2, R2, R3
VLDR            D5, [R2]

loc_37B44
MOVW            R2, #:lower16:dword_73320
VLDR            S14, [R8]
MOVT            R2, #:upper16:dword_73320
LDR             R4, =dbl_68720
LDR             R2, [R2]
VADD.F64        D10, D10, D5
VCVT.F64.S32    D6, S14
VLDR            D4, =86400.0
VMOV            S15, R2
ADD             R2, R4, #0x20 ; ' '
LDR             R1, [SP,#0x8AC+var_888]
VCVT.F64.S32    D7, S15
VLDR            D5, [R2]
ADD             R3, R1, R3
VSTR            D10, [R3]
VSUB.F64        D7, D6, D7
VSUB.F64        D6, D7, D5
VSTR            D7, [R4]
VCMPE.F64       D6, D4
VMRS            APSR_nzcv, FPSCR
BLE             loc_37C64
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_37BC0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_37F38

loc_37BC0
ADD             R5, SP, #0x8AC+s
MOV             R2, #aCgminerTimeErr ; "cgminer time error total_secs = %f last"...
MOV             R1, #0x800 ; maxlen
VSTR            D5, [SP,#0x8AC+var_8A4]
MOV             R0, R5  ; s
VSTR            D7, [SP,#0x8AC+var_8AC]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_37BF0               ; mutex
MOV             R0, #stru_76838
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_380A0
LDR             R3, [R9] ; sub_21C98
BLX             R3      ; sub_21C98
BL              sub_32DA0
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_380D8
CMP             R11, #0
BNE             loc_37C70

loc_37C2C               ; mutex
MOV             R0, #stru_76838
BL              pthread_mutex_unlock
CMP             R0, #0
ADDNE           R5, SP, #0x8AC+s
BNE             loc_3800C
LDR             R3, [R9] ; sub_21C98
BLX             R3      ; sub_21C98

loc_37C4C
ADD             SP, SP, #0x8A0
ADD             SP, SP, #0xC
VPOP            {D8-D13}
POP             {R4-R11,PC}

loc_37C5C
MOV             R11, #1
B               loc_37998

loc_37C64
CMP             R11, #0
VSTR            D7, [R2]
BEQ             loc_37C2C

loc_37C70
VLDR            D6, [R4]
ADD             R11, SP, #0x8AC+var_884
VLDR            D5, [R10]
MOV             R4, #4
VLDR            D8, =1000000.0
ADD             R8, SP, #0x8AC+var_864
LDR             R6, =byte_6A5C0
ADD             R10, SP, #0x8AC+var_854
ADD             R5, SP, #0x8AC+s
VDIV.F64        D7, D5, D6
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             __fixunsdfdi
MOV             R2, R11 ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8AC+var_8AC] ; int
BL              sub_2AEF8
MOVW            R3, #:lower16:dbl_75590
MOVW            R2, #0x6667
MOVT            R3, #:upper16:dbl_75590
MOVT            R2, #0x6666
VLDR            D7, [R3]
VLDR            D5, =100.0
VCVT.S32.F64    S13, D7
VMUL.F64        D7, D7, D8
VMOV            R12, S13
SMULL           R2, R3, R12, R2
MOV             R12, R12,ASR#31
VMOV            R0, R1, D7
RSB             R12, R12, R3,ASR#2
VMOV            S15, R12
VCVT.F64.S32    D7, S15
VDIV.F64        D6, D7, D5
VSTR            D6, [R6,#(dbl_6A5B8 - 0x6A5C0)]
BLX             __fixunsdfdi
ADD             R2, SP, #0x8AC+var_874 ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8AC+var_8AC] ; int
BL              sub_2AEF8
MOV             R3, #dbl_75690
VLDR            D7, [R3]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             __fixunsdfdi
MOV             R2, R8  ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8AC+var_8AC] ; int
BL              sub_2AEF8
MOV             R3, #dbl_75688
VLDR            D7, [R3]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             __fixunsdfdi
MOV             R2, R10 ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8AC+var_8AC] ; int
BL              sub_2AEF8
MOV             R3, #dbl_75698
VLDR            D7, [R3]
VMUL.F64        D7, D7, D8
VMOV            R0, R1, D7
BLX             __fixunsdfdi
MOV             R2, R5  ; s
MOV             R3, #0x10 ; maxlen
STR             R4, [SP,#0x8AC+var_8AC] ; int
BL              sub_2AEF8
ADD             R12, SP, #0x8AC+var_874
MOVW            R2, #:lower16:aDsS1mS5mS15mSA ; "(%ds):%s (1m):%s (5m):%s (15m):%s (avg)"...
LDR             R3, [R7,#(dword_68730 - 0x67FE0)]
MOVT            R2, #:upper16:aDsS1mS5mS15mSA ; "(%ds):%s (1m):%s (5m):%s (15m):%s (avg)"...
MOV             R1, #0x100 ; maxlen
STR             R12, [SP,#0x8AC+var_8AC]
STR             R11, [SP,#0x8AC+var_89C]
MOV             R0, R6  ; s
STR             R5, [SP,#0x8AC+var_8A4+4]
STMFA           SP, {R8,R10}
BL              snprintf
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3800C
LDR             R3, [R9] ; sub_21C98
BLX             R3      ; sub_21C98
MOVW            R0, #:lower16:aS_0 ; "%s          \r"
MOV             R1, R6
MOVT            R0, #:upper16:aS_0 ; "%s          \r"
BL              printf
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
ADD             SP, SP, #0x8A0
ADD             SP, SP, #0xC
VPOP            {D8-D13}
POP             {R4-R11,PC}
ALIGN 0x10
dbl_37E00 DCFD 1000000.0
dbl_37E08 DCFD 86400.0
dbl_37E10 DCFD 100.0
off_37E18 DCD dbl_69088
off_37E1C DCD dbl_68720
off_37E20 DCD byte_6A5C0

loc_37E24
LDR             R3, [R7,#(dword_68730 - 0x67FE0)]
ADD             R0, R6, #0x30 ; '0'
VMOV.F64        D1, D8
VMOV.F64        D0, D10
VMOV            S15, R3
VCVT.F64.S32    D2, S15
BL              sub_2C538
VMOV.F64        D1, D8
ADD             R0, R6, #0x38 ; '8'
VMOV.F64        D0, D10
VLDR            D2, =60.0
BL              sub_2C538
VCMPE.F64       D8, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_37AC4
ADD             R0, R6, #0x40 ; '@'
VLDR            D2, =300.0
VMOV.F64        D1, D8
VMOV.F64        D0, D10
BL              sub_2C538
VCMPE.F64       D8, #0.0
ADD             R0, R6, #0x48 ; 'H'
VMRS            APSR_nzcv, FPSCR
BLS             loc_37AC4
VMOV.F64        D1, D8
VLDR            D2, =900.0
VMOV.F64        D0, D10
BL              sub_2C538
B               loc_37AC4

loc_37E98
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3767C
B               loc_3763C

loc_37EB0
VLDR            D2, =60.0
MOVW            R0, #:lower16:dbl_75690
VMOV.F64        D1, D9
MOVT            R0, #:upper16:dbl_75690
VMOV.F64        D0, D10
BL              sub_2C538
MOVW            R0, #:lower16:dbl_75688
VMOV.F64        D1, D9
MOVT            R0, #:upper16:dbl_75688
VLDR            D2, =300.0
VMOV.F64        D0, D10
BL              sub_2C538
VCMPE.F64       D9, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_37900
MOVW            R0, #:lower16:dbl_75698
VMOV.F64        D1, D9
MOVT            R0, #:upper16:dbl_75698
VLDR            D2, =900.0
VMOV.F64        D0, D10
BL              sub_2C538
B               loc_37900

loc_37F08
LDRD            R0, R1, [SP,#0x8AC+var_894]
BLX             sub_4A10C
VMOV            D0, R0, R1
MOVW            R0, #:lower16:dbl_75590
VMOV.F64        D2, D8
MOVT            R0, #:upper16:dbl_75590
VMOV.F64        D1, D8
BL              sub_2C538
VCMPE.F64       D9, #0.0
VMRS            APSR_nzcv, FPSCR
BLS             loc_37900
B               loc_37EB0

loc_37F38
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_37BF0
B               loc_37BC0

loc_37F50
ADD             R5, SP, #0x8AC+s
MOV             R2, R6
MOV             R0, R5
MOV             R1, #0x100
BL              sub_2E7D0
MOVW            R0, #:lower16:aS_0 ; "%s          \r"
MOV             R1, R5
MOVT            R0, #:upper16:aS_0 ; "%s          \r"
BL              printf
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
MOV             R0, #stru_76838 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_37FB8
MOVW            R10, #:lower16:dbl_756A8
LDR             R3, [R4,#(dword_690E8 - 0x68BD8)]
MOVT            R10, #:upper16:dbl_756A8
VLDR            D7, [R10]
VADD.F64        D7, D7, D10
VSTR            D7, [R10]
B               loc_37868

loc_37FB4
ADD             R5, SP, #0x8AC+s

loc_37FB8
BL              __errno_location
LDR             R12, =aHashmeter ; "hashmeter"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #0x1BC5
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0x8AC+var_8AC]

loc_37FDC
STR             R0, [SP,#0x8AC+var_8A4]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x8AC+var_8AC+4]
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5

loc_37FF4
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3800C
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aHashmeter ; "hashmeter"
MOVW            R0, #0x1C20
STR             R1, [SP,#0x8AC+var_8AC]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_37FDC

loc_38034
BL              __errno_location
LDR             LR, =aHashmeter ; "hashmeter"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1B96

loc_3804C
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
ADD             R0, SP, #0x8AC+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x8AC+var_8A4]

loc_38060               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x8AC+s
B               loc_37FF4

loc_38070
BL              __errno_location
LDR             LR, =aHashmeter ; "hashmeter"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1B9D

loc_38088
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x8AC+s
STR             R12, [SP,#0x8AC+var_8A4]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_38060

loc_380A0
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aHashmeter ; "hashmeter"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1BF5
B               loc_38088

loc_380BC
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aHashmeter ; "hashmeter"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1BB3
B               loc_3804C

loc_380D8
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aHashmeter ; "hashmeter"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1BF7
B               loc_3804C

loc_380F4
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aHashmeter ; "hashmeter"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1BC2
B               loc_38088
; End of function sub_375EC

dbl_38110 DCFD 60.0
dbl_38118 DCFD 300.0
dbl_38120 DCFD 900.0
off_38128 DCD aHashmeter ; "hashmeter"
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x820
LDR             R4, [R0,#0x24]
SUB             SP, SP, #0xC
MOV             R3, #0
MOVW            R11, #:lower16:off_67ED8
STR             R3, [SP,#0x1C]
MOV             R8, R0
LDR             R5, [R4,#4]
MOVT            R11, #:upper16:off_67ED8
LDR             R10, [R0]
MOV             R6, #0
MOV             R7, #0
STR             R3, [SP,#0x18]

loc_38164
LDRB            R3, [R4,#0x16C]
CMP             R3, #0
BNE             loc_382C4

loc_38170
STRB            R3, [R8,#0x3F]
B               loc_3818C

loc_38178
LDR             R3, [R5,#0x48]
MOV             R0, R4
BLX             R3
CMP             R0, #0
BNE             loc_381EC

loc_3818C
LDR             R3, [R4,#0x164]
CMP             R3, #0
BNE             loc_38178
MOV             R1, R10
MOV             R0, R8
ADD             R9, R4, #0x140
BL              sub_36CD4
STR             R0, [SP,#0x14]
MOV             R0, R9
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_3830C
LDR             R3, [R4,#0x164]
CMP             R3, #0
BNE             loc_3835C
LDR             R3, [SP,#0x14]
MOV             R0, R9
STR             R3, [R4,#0x164]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_38390
LDR             R3, [R11] ; sub_21C98
BLX             R3      ; sub_21C98
B               loc_38178

loc_381EC
LDR             R3, [R5,#0x44]
MOV             R0, R8
BLX             R3
MOV             R3, R1
MOV             R1, #0xFFFFFFFF
MOV             R2, R0
CMP             R3, R1
MOV             R0, #0xFFFFFFFF
MOV             R12, #0
CMPEQ           R2, R0
STRB            R12, [R8,#0x3E]
BEQ             loc_383C0
ADDS            R6, R6, R2
ADD             R0, SP, #0x20 ; ' '
ADC             R7, R7, R3
BL              sub_239A4
ADD             R0, SP, #0x18
LDM             R0, {R0-R3}
SUBS            R3, R3, R1
SUB             R2, R2, R0
ADDMI           R3, R3, #0xF4000
SUBMI           R2, R2, #1
ADDMI           R3, R3, #0x240
ORRS            R1, R6, R7
BEQ             loc_382D8
MOV             R1, #0x30D40
CMP             R3, R1
CMPLE           R2, #0
BLE             loc_382D8

loc_38264
MOV             R3, R7
MOV             R2, R6
MOV             R0, R10
MOV             R6, #0
BL              sub_375EC
ADD             R1, SP, #0x20 ; ' '
ADD             R0, SP, #0x18
BL              sub_257F8
LDRB            R3, [R8,#0x3C]
MOV             R7, #0
CMP             R3, #0
BNE             loc_382F8

loc_38294
LDR             R3, [R4,#0x20]
CMP             R3, #0
BNE             loc_382F8

loc_382A0
LDRB            R3, [R8,#0x3F]
CMP             R3, #0
BEQ             loc_38164
LDR             R3, [R5,#0x50]
MOV             R0, R4
BLX             R3
LDRB            R3, [R4,#0x16C]
CMP             R3, #0
BEQ             loc_38170

loc_382C4
MOV             R3, #1
STR             R3, [R4,#0x20]
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_382D8
MOV             R3, #off_67FE0 ; "--version-file"
LDR             R3, [R3,#(dword_68730 - 0x67FE0)]
CMP             R3, R2
BLE             loc_38264
LDRB            R3, [R8,#0x3C]
CMP             R3, #0
BEQ             loc_38294

loc_382F8
ADD             R2, R5, #0x5C ; '\'
MOV             R1, R10
MOV             R0, R8
BL              sub_2BF50
B               loc_382A0

loc_3830C
BL              __errno_location
LDR             LR, =aFillQueue ; "fill_queue"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x28 ; '('
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x24A0
STMEA           SP, {R1,LR}
STR             R12, [SP,#8]

loc_38338
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x28 ; '('
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3835C
MOV             R0, R9
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_38390
LDR             R3, [R11] ; sub_21C98
BLX             R3      ; sub_21C98
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x24AF
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aFillQueue ; "fill_queue"
ADD             R0, SP, #0x14
BL              sub_2CEA0
B               loc_38178

loc_38390
BL              __errno_location
LDR             LR, =aFillQueue ; "fill_queue"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x24AB
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x28 ; '('
STR             R12, [SP,#8]
B               loc_38338

loc_383C0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, R12
BNE             loc_383FC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R12
BNE             loc_383FC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3842C

loc_383FC
LDR             R12, [R4,#8]
MOVW            R2, #:lower16:aSDFailureDisab ; "%s %d failure, disabling!"
LDR             R3, [R5,#8]
MOVT            R2, #:upper16:aSDFailureDisab ; "%s %d failure, disabling!"
MOV             R1, #0x800
ADD             R0, SP, #0x28 ; '('
STR             R12, [SP]
BL              snprintf
ADD             R1, SP, #0x28 ; '('
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_3842C
MOV             R1, #1
MOV             R0, R4
STR             R1, [R4,#0x20]
BL              sub_24DC4
B               loc_382C4
off_38440 DCD aFillQueue ; "fill_queue"
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x820
LDR             R5, [R0,#0x24]
SUB             SP, SP, #0xC
MOV             R3, #0
MOVW            R10, #:lower16:stru_767C8
STR             R3, [SP,#0x1C]
MOV             R4, R0
LDR             R6, [R5,#4]
MOVT            R10, #:upper16:stru_767C8
STR             R3, [SP,#0x18]
LDR             R3, [R0]
STR             R3, [SP,#0x14]

loc_38478
ADD             R7, SP, #0x20 ; ' '

loc_3847C
LDRB            R11, [R5,#0x16C]
CMP             R11, #0
BNE             loc_385E4
STRB            R11, [R4,#0x3F]
MOV             R0, R4
LDR             R3, [R6,#0x44]
BLX             R3
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R1, R3
MOV             R8, R0
CMPEQ           R0, R2
MOV             R9, R1
STRB            R11, [R4,#0x3E]
BEQ             loc_38568
MOV             R0, R7
BL              sub_239A4
ORRS            R3, R8, R9
BNE             loc_3852C
LDRB            R3, [R4,#0x3C]
CMP             R3, #0
BNE             loc_38554

loc_384D4
LDR             R3, [R5,#0x20]
CMP             R3, #0
BNE             loc_38554

loc_384E0
LDRB            R3, [R4,#0x3F]
CMP             R3, #0
BEQ             loc_3847C
MOV             R0, R10
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_385F8
LDR             R3, [R6,#0x50]
MOV             R0, R5
BLX             R3
MOV             R0, R10
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3864C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
B               loc_38478

loc_3852C
MOV             R3, R9
MOV             R2, R8
LDR             R0, [SP,#0x14]
BL              sub_375EC
MOV             R1, R7
ADD             R0, SP, #0x18
BL              sub_257F8
LDRB            R3, [R4,#0x3C]
CMP             R3, #0
BEQ             loc_384D4

loc_38554
ADD             R2, R6, #0x5C ; '\'
LDR             R1, [SP,#0x14]
MOV             R0, R4
BL              sub_2BF50
B               loc_384E0

loc_38568
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_385A4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_385A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_385D4

loc_385A4
LDR             R12, [R5,#8]
MOVW            R2, #:lower16:aSDFailureDisab ; "%s %d failure, disabling!"
LDR             R3, [R6,#8]
MOVT            R2, #:upper16:aSDFailureDisab ; "%s %d failure, disabling!"
MOV             R1, #0x800
ADD             R0, SP, #0x28 ; '('
STR             R12, [SP]
BL              snprintf
ADD             R1, SP, #0x28 ; '('
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_385D4
MOV             R1, #1
MOV             R0, R5
STR             R1, [R5,#0x20]
BL              sub_24DC4

loc_385E4
MOV             R3, #1
STR             R3, [R5,#0x20]
ADD             SP, SP, #0x820
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_385F8
BL              __errno_location
LDR             R12, =aHashDriverWork ; "hash_driver_work"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #0x262C
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP]

loc_3861C
STR             R12, [SP,#4]
MOV             R1, #0x800
STR             R0, [SP,#8]
ADD             R0, SP, #0x28 ; '('
BL              snprintf
ADD             R1, SP, #0x28 ; '('
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3864C
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aHashDriverWork ; "hash_driver_work"
MOVW            R0, #0x262E
STR             R1, [SP]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_3861C
off_38674 DCD aHashDriverWork ; "hash_driver_work"



; void __fastcall sub_38678(int)
sub_38678

var_874= -0x874
var_868= -0x868
var_864= -0x864
var_860= -0x860
var_85C= -0x85C
var_858= -0x858
var_854= -0x854
var_850= -0x850
var_84C= -0x84C
var_848= -0x848
remaining= -0x844
var_840= -0x840
var_83C= -0x83C
var_838= -0x838
var_834= -0x834
var_830= -0x830
var_828= -0x828
var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
requested_time= -0x804

PUSH            {R4-R11,LR}
MOVW            R3, #:lower16:off_67FE0 ; "--version-file"
SUB             SP, SP, #0x870
MOVT            R3, #:upper16:off_67FE0 ; "--version-file"
SUB             SP, SP, #4
MOVW            R2, #0x6667
STR             R3, [SP,#0x874+var_858]
MOVT            R2, #0x6666
LDR             R3, [R3,#(dword_68730 - 0x67FE0)]
MOV             R10, R0
LDR             R12, [R0,#4]
LDR             R8, [R0,#0x24]
SMULL           R0, R1, R3, R2
MOV             R3, R3,ASR#31
LDR             R2, [R8,#4]
MOV             R0, R10
STR             R2, [SP,#0x874+var_868]
RSBS            R3, R3, R1,ASR#1
LDR             R2, [R10]
MOVEQ           R3, #1
CMP             R12, #0
STR             R3, [SP,#0x874+var_850]
MOVEQ           R3, #1
LDRBNE          R3, [R10,#8]
STR             R2, [SP,#0x874+var_84C]
STR             R3, [SP,#0x874+remaining]
LDR             R3, [SP,#0x874+var_868]
LDR             R3, [R3,#0x30]
BLX             R3
STR             R0, [SP,#0x874+var_85C]
ADD             R0, SP, #0x874+var_824
BL              sub_239A4
ADD             R0, SP, #0x874+var_80C
BL              sub_239A4
LDRB            R3, [R8,#0x16C]
CMP             R3, #0
BNE             loc_38AA4
LDR             R1, [SP,#0x874+var_850]
MOVW            R2, #0x4240
MOV             R9, R3
MOV             R3, R2
MOVT            R3, #0xF
MOVW            R2, #0xB280
STR             R3, [SP,#0x874+var_834]
MOVT            R2, #0xEE6
MUL             R3, R3, R1
STR             R2, [SP,#0x874+var_838]
MOV             R11, R9
MOV             R6, #0
MOV             R7, #0
MOV             R2, R3
STR             R3, [SP,#0x874+var_840]
CMP             R2, #0
ADD             R3, R3, #0x3FC
ADD             R3, R3, #3
MOVGE           R3, R2
MOV             R3, R3,ASR#10
STR             R3, [SP,#0x874+var_83C]

loc_38760
LDR             R1, [SP,#0x874+var_84C]
MOV             R0, R10
BL              sub_36CD4
MOV             R4, #0
MOV             R3, #1
STR             R0, [SP,#0x874+var_828]
ADD             R0, SP, #0x874+var_814
STRB            R4, [R10,#0x3E]
STRB            R3, [R8,#0xAC]
BL              sub_239A4
LDR             R1, [SP,#0x874+var_828]
MOV             R2, #0
MOV             R3, #0
MOV             R0, R10
STR             R4, [R1,#0xF8]
STRD            R2, R3, [R8,#0xA0]
LDR             R3, [SP,#0x874+var_868]
LDR             R3, [R3,#0x38]
BLX             R3
CMP             R0, R4
BEQ             loc_38CCC
ADD             R2, R8, #0x128
LDR             R3, [SP,#0x874+var_828]
STR             R2, [SP,#0x874+var_854]
ADD             R1, R8, #0x130
LDR             R2, [SP,#0x874+var_868]
VLDR            D6, [R3,#0x178]
STR             R1, [SP,#0x874+var_860]
ADD             R1, R8, #0x138
VLDR            D7, [R2,#0x68]
STR             R1, [SP,#0x874+var_864]
VCMP.F64        D7, D6
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D7, D6
VSTR            D7, [R3,#0xE0]
VLDR            D6, [R2,#0x70]
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
VMOVGT.F64      D7, D6
VSTR            D7, [R3,#0xE0]

loc_38800
ADD             R0, SP, #0x874+var_81C
BL              sub_239A4
ADD             R1, SP, #0x874+var_824
ADD             R0, SP, #0x874+var_81C
BL              sub_235C4
LDR             R1, [SP,#0x874+var_854]
ADD             R0, SP, #0x874+var_824
BL              sub_235F8
LDR             R1, [SP,#0x874+var_860]
ADD             R0, SP, #0x874+var_824
BL              sub_2363C
CMP             R0, #0
BNE             loc_38B28

loc_38834
LDR             R1, [SP,#0x874+var_864]
ADD             R0, SP, #0x874+var_824
BL              sub_23670
CMP             R0, #0
BNE             loc_38B38

loc_38848
LDR             R3, [R8,#0x124]
ADD             R0, SP, #0x874+var_824
LDR             R2, [SP,#0x874+var_828]
ADD             R3, R3, #1
STR             R3, [R8,#0x124]
LDR             R5, [R2,#0x104]
ADD             R1, R5, #0x184
ADD             R4, R5, #0x18C
BL              sub_235F8
MOV             R1, R4
ADD             R0, SP, #0x874+var_824
BL              sub_2363C
CMP             R0, #0
BNE             loc_38B18

loc_38880
ADD             R4, R5, #0x194
ADD             R0, SP, #0x874+var_824
MOV             R1, R4
BL              sub_23670
CMP             R0, #0
BNE             loc_38B08

loc_38898
LDR             R3, [R5,#0x180]
LDR             R0, [SP,#0x874+var_828]
ADD             R3, R3, #1
STR             R3, [R5,#0x180]
ADD             R0, R0, #0x1A8
BL              sub_239A4
MOV             R1, #0  ; oldstate
MOV             R0, #1  ; state
BL              pthread_setcancelstate
MOV             R0, R10
BL              sub_2AEC4
LDR             R2, [SP,#0x874+var_868]
MOV             R3, #0
LDR             R1, [SP,#0x874+var_828]
MOV             R0, R10
LDR             R12, [SP,#0x874+var_85C]
LDR             R4, [R2,#0x40]
LDR             R2, [R1,#0xF8]
ADD             R2, R12, R2
BLX             R4
MOV             R4, R0
MOV             R0, R10
MOV             R5, R1
BL              sub_2AE8C
MOV             R1, #0  ; oldstate
MOV             R0, R1  ; state
BL              pthread_setcancelstate
BL              pthread_testcancel
ADD             R0, SP, #0x874+var_824
BL              sub_239A4
MOV             R3, #0xFFFFFFFF
MOV             R2, #0xFFFFFFFF
CMP             R5, R3
CMPEQ           R4, R2
BEQ             loc_38B68
LDRD            R2, R3, [R8,#0xA0]
ADDS            R6, R6, R4
ADC             R7, R7, R5
CMP             R2, R4
SBCS            R3, R3, R5
STRDLT          R4, R5, [R8,#0xA0]
LDR             R4, [SP,#0x874+var_820]
LDR             R2, [SP,#0x874+var_818]
LDR             R3, [SP,#0x874+var_824]
LDR             R1, [SP,#0x874+var_81C]
SUBS            R2, R4, R2
LDR             R5, [SP,#0x874+var_814]
ADDMI           R2, R2, #0xF4000
ADDMI           R2, R2, #0x240
SUB             R1, R3, R1
ADD             R9, R9, R2
MOV             R2, #0xF4240
SUBMI           R1, R1, #1
CMP             R9, R2
LDR             R2, [SP,#0x874+var_810]
ADD             R11, R11, R1
SUBGT           R9, R9, #0xF4000
ADDGT           R11, R11, #1
SUBGT           R9, R9, #0x240
SUB             R2, R4, R2
SUB             R5, R3, R5
CMP             R2, #0
LDR             R2, [SP,#0x874+var_850]
SUBLT           R5, R5, #1
CMP             R2, R11
BGT             loc_38BF4
BLT             loc_38C6C
MOV             R2, #0x186A0
CMP             R9, R2
BGT             loc_38C90

loc_389B8
LDR             R2, [SP,#0x874+var_808]
LDR             R1, [SP,#0x874+var_80C]
SUBS            R4, R4, R2
ADDMI           R4, R4, #0xF4000
SUB             R3, R3, R1
SUBMI           R3, R3, #1
ADDMI           R4, R4, #0x240
ORRS            R2, R6, R7
BEQ             loc_38AB8
MOV             R2, #0x30D40
CMP             R3, #0
CMPLE           R4, R2
BLE             loc_38AB8

loc_389F0
MOV             R3, R7
MOV             R2, R6
LDR             R0, [SP,#0x874+var_84C]
MOV             R6, #0
BL              sub_375EC
ADD             R1, SP, #0x874+var_824
ADD             R0, SP, #0x874+var_80C
BL              sub_257F8
LDRB            R3, [R10,#0x3E]
MOV             R7, #0
CMP             R3, #0
BNE             loc_38AD4

loc_38A20
LDRB            R3, [R10,#0x3C]
CMP             R3, #0
BNE             loc_38B48
LDR             R9, [R8,#0x20]
CMP             R9, #0
MOVEQ           R11, R9
BNE             loc_38B48

loc_38A3C
LDRD            R2, R3, [R8,#0xA0]
MOV             R1, #0
LDR             R12, [SP,#0x874+var_858]
MOV             R0, #0xFFFFFFFD
CMP             R3, R1
LDR             R12, [R12,#(dword_68754 - 0x67FE0)]
CMPEQ           R2, R0
MOVHI           R1, #1
MOVLS           R1, #0
LDR             R0, [SP,#0x874+var_828]
CMP             R12, R5
ORRLT           R1, R1, #1
CMP             R1, #0
BNE             loc_38A80
BL              sub_367EC
CMP             R0, #0
BEQ             loc_38800

loc_38A80
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2487
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aHashSoleWork ; "hash_sole_work"
ADD             R0, SP, #0x874+var_828
BL              sub_2CBA8
LDRB            R3, [R8,#0x16C]
CMP             R3, #0
BEQ             loc_38760

loc_38AA4
MOV             R3, #1
STR             R3, [R8,#0x20]
ADD             SP, SP, #0x870
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_38AB8
LDR             R2, [SP,#0x874+var_858]
LDR             R2, [R2,#(dword_68730 - 0x67FE0)]
CMP             R2, R3
BLE             loc_389F0
LDRB            R3, [R10,#0x3E]
CMP             R3, #0
BEQ             loc_38A20

loc_38AD4
LDR             R3, [SP,#0x874+remaining]
CMP             R3, #0
BNE             loc_38A80
LDR             R2, [SP,#0x874+remaining]
ADD             R0, SP, #0x874+requested_time ; requested_time
LDR             R3, [R10,#4]
MOV             R1, R2  ; remaining
STR             R2, [SP,#0x874+requested_time]
LDR             R2, [SP,#0x874+var_838]
MUL             R3, R2, R3
STR             R3, [SP,#0x874+requested_time.tv_nsec]
BL              nanosleep
B               loc_38A80

loc_38B08
MOV             R0, R4
ADD             R1, SP, #0x874+var_824
BL              sub_257F8
B               loc_38898

loc_38B18
MOV             R0, R4
ADD             R1, SP, #0x874+var_824
BL              sub_257F8
B               loc_38880

loc_38B28
ADD             R1, SP, #0x874+var_824
LDR             R0, [SP,#0x874+var_860]
BL              sub_257F8
B               loc_38834

loc_38B38
ADD             R1, SP, #0x874+var_824
LDR             R0, [SP,#0x874+var_864]
BL              sub_257F8
B               loc_38848

loc_38B48
LDR             R3, [SP,#0x874+var_868]
MOV             R0, R10
LDR             R1, [SP,#0x874+var_84C]
MOV             R9, #0
MOV             R11, R9
ADD             R2, R3, #0x5C ; '\'
BL              sub_2BF50
B               loc_38A3C

loc_38B68
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38BA4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38BA4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_38BD8

loc_38BA4
LDR             R3, [SP,#0x874+var_868]
MOVW            R2, #:lower16:aSDFailureDisab ; "%s %d failure, disabling!"
LDR             R12, [R8,#8]
MOVT            R2, #:upper16:aSDFailureDisab ; "%s %d failure, disabling!"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x874+requested_time ; s
LDR             R3, [R3,#8]
STR             R12, [SP,#0x874+var_874]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x874+requested_time
MOV             R0, #3
BL              sub_20F58

loc_38BD8
MOV             R4, #1
MOV             R0, R8
STR             R4, [R8,#0x20]
MOV             R1, R4
BL              sub_24DC4
STRB            R4, [R8,#0x16C]
B               loc_38A80

loc_38BF4
LDR             R2, [SP,#0x874+var_85C]
CMN             R2, #1
BEQ             loc_38A3C
ADD             R1, R9, #0x400
LDR             R0, [SP,#0x874+var_834]
ADD             R2, R1, #0x3FC
CMP             R1, #0
ADD             R2, R2, #3
STR             R3, [SP,#0x874+var_848]
MOVLT           R1, R2
MOV             R1, R1,ASR#10
BLX             sub_49B50
LDR             R3, [SP,#0x874+var_850]
ADD             R2, R0, #0x10
MOV             R0, #0xFFFFFC00
MUL             R2, R2, R3
MOV             R1, R2
STR             R2, [SP,#0x874+var_830]
BLX             __udivsi3
LDR             R1, [SP,#0x874+var_85C]
LDR             R3, [SP,#0x874+var_848]
CMP             R0, R1
MOVCC           R2, #0xFFFFFFFF
STRCC           R2, [SP,#0x874+var_85C]
LDRCS           R2, [SP,#0x874+var_830]
MULCS           R2, R1, R2
MOVCS           R2, R2,LSR#10
STRCS           R2, [SP,#0x874+var_85C]
B               loc_389B8

loc_38C6C
LDR             R2, [SP,#0x874+var_85C]
MOV             R1, R11
STR             R3, [SP,#0x874+var_848]
LDR             R3, [SP,#0x874+var_850]
MUL             R0, R3, R2
BLX             __udivsi3
LDR             R3, [SP,#0x874+var_848]
STR             R0, [SP,#0x874+var_85C]
B               loc_389B8

loc_38C90
STR             R3, [SP,#0x874+var_848]
LDR             R3, [SP,#0x874+var_85C]
LDR             R1, [SP,#0x874+var_83C]
MOV             R2, R3,LSL#10
LDR             R3, [SP,#0x874+var_840]
STR             R2, [SP,#0x874+var_85C]
ADD             R0, R3, R9
BLX             sub_49B50
LDR             R2, [SP,#0x874+var_85C]
MOV             R1, R0
MOV             R0, R2
BLX             __udivsi3
LDR             R3, [SP,#0x874+var_848]
STR             R0, [SP,#0x874+var_85C]
B               loc_389B8

loc_38CCC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, R4
BNE             loc_38CF4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R4
BEQ             loc_38D20

loc_38CF4
MOVW            R2, #:lower16:aWorkPrepareFai ; "work prepare failed, exiting mining thr"...
LDR             R3, [SP,#0x874+var_84C]
MOVT            R2, #:upper16:aWorkPrepareFai ; "work prepare failed, exiting mining thr"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x874+requested_time ; s
BL              snprintf
ADD             R1, SP, #0x874+requested_time
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
B               loc_38AA4

loc_38D20
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_38CF4
B               loc_38AA4
; End of function sub_38678

off_38D38 DCD aHashSoleWork ; "hash_sole_work"


; Attributes: noreturn

; void __noreturn sub_38D3C()
sub_38D3C

var_83C= -0x83C
var_834= -0x834
var_82C= -0x82C
var_828= -0x828
rwlock= -0x824
var_820= -0x820
var_81C= -0x81C
var_818= -0x818
var_814= -0x814
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
MOV             R1, #0  ; oldtype
VPUSH           {D8}
SUB             SP, SP, #0x830
SUB             SP, SP, #0xC
MOV             R0, #1  ; type
BL              pthread_setcanceltype
MOVW            R4, #:lower16:byte_73460
MOVW            R3, #:lower16:byte_7339C
MOVW            R0, #:lower16:aWatchdog ; "Watchdog"
MOVW            R2, #:lower16:stru_744A8
MOVW            R1, #:lower16:byte_68BD5
MOVT            R3, #:upper16:byte_7339C
MOVT            R0, #:upper16:aWatchdog ; "Watchdog"
MOVT            R2, #:upper16:stru_744A8
MOVT            R1, #:upper16:byte_68BD5
MOVT            R4, #:upper16:byte_73460
STR             R3, [SP,#0x83C+var_828]
MOVW            R10, #:lower16:byte_74500
STR             R2, [SP,#0x83C+rwlock]
MOVW            R11, #:lower16:dword_75588
STR             R1, [SP,#0x83C+var_820]
MOVT            R10, #:upper16:byte_74500
STR             R4, [SP,#0x83C+var_82C]
MOVT            R11, #:upper16:dword_75588
BL              sub_250A8
BL              sub_2C148
MOV             R3, #0
LDR             R0, =dword_69180
VLDR            D8, =0.0
STR             R3, [SP,#0x83C+var_818]
STR             R3, [SP,#0x83C+var_81C]
BL              sub_239A4

loc_38DC0               ; seconds
MOV             R0, #2
BL              sleep
BL              sub_37134
MOV             R3, #0
MOV             R2, #0
MOV             R0, #0xFFFFFFFF
BL              sub_375EC
ADD             R0, SP, #0x83C+var_814
BL              sub_239A4
LDR             R3, [SP,#0x83C+var_82C]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_39138

loc_38DF4
LDR             R3, [SP,#0x83C+var_828]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38E18
MOV             R4, #byte_732E4
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_392D8

loc_38E18
BL              sub_2BD14
CMP             R0, #0
MOVNE           R4, #byte_732E4
BNE             loc_392D8

loc_38E2C
MOV             R7, #dword_755C0
LDR             R3, [R7]
CMP             R3, #0
BLE             loc_38DC0
MOVW            R8, #:lower16:aSD_0 ; "%s %d"
MOVW            R9, #:lower16:off_67FE0 ; "--version-file"
MOVT            R8, #:upper16:aSD_0 ; "%s %d"
MOVT            R9, #:upper16:off_67FE0 ; "--version-file"
MOV             R5, #0
B               loc_38F70

loc_38E58
CMP             R3, #0x78 ; 'x'
BLE             loc_38F60
LDRB            R3, [R10]
MOV             R2, #1
VSTR            D8, [R4,#0x30]
STR             R2, [R4,#0x60]
CMP             R3, #0
BNE             loc_38EA0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38EA0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_38EC8

loc_38EA0
MOVW            R2, #:lower16:aSIdleForMoreTh ; "%s: Idle for more than 60 seconds, decl"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSIdleForMoreTh ; "%s: Idle for more than 60 seconds, decl"...
ADD             R3, SP, #0x83C+var_80C
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_20F58

loc_38EC8
ADD             R0, R6, #0x34 ; '4'
BL              sub_239A4
MOV             R1, #3
MOV             R0, R4
BL              sub_24DC4
LDRB            R3, [R9,#(byte_6875C - 0x67FE0)]
CMP             R3, #0
BEQ             loc_38F60
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_38F1C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_38F1C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_38F44

loc_38F1C
MOVW            R2, #:lower16:aSAttemptingToR ; "%s: Attempting to restart"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSAttemptingToR ; "%s: Attempting to restart"
ADD             R3, SP, #0x83C+var_80C
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_20F58

loc_38F44
LDR             R3, [R4,#0x20]
CMP             R3, #1
BEQ             loc_38F60
LDR             R3, [R4,#4]
MOV             R0, R4
LDR             R3, [R3,#0x10]
BLX             R3

loc_38F60
LDR             R3, [R7]
ADD             R5, R5, #1
CMP             R3, R5
BLE             loc_38DC0

loc_38F70
MOV             R0, R5
BL              sub_3046C
LDR             R3, [R0,#0x98]
MOV             R4, R0
LDR             R6, [R3]
CMP             R6, #0
BEQ             loc_38F60
LDR             R3, [R0,#4]
LDR             R3, [R3,#0x20]
BLX             R3
LDR             R3, [R4,#4]
ADD             R0, SP, #0x83C+var_80C ; s
LDR             R12, [R4,#8]
MOV             R2, R8  ; format
MOV             R1, #8  ; maxlen
LDR             R3, [R3,#8]
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
LDRB            R3, [R6,#0x3D]
CMP             R3, #0
BNE             loc_38F60
LDR             R3, [R4,#0x20]
CMP             R3, #1
BEQ             loc_38F60
LDR             R1, [R4,#0x60]
LDR             R2, [SP,#0x83C+var_814]
LDR             R3, [R6,#0x2C]
CMP             R1, #0
SUB             R3, R2, R3
BEQ             loc_38E58
CMP             R3, #0x77 ; 'w'
BGT             loc_39068
CMP             R1, #4
BEQ             loc_39054
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_3902C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3902C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_39054

loc_3902C
MOVW            R2, #:lower16:aSRecoveredDecl ; "%s: Recovered, declaring WELL!"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSRecoveredDecl ; "%s: Recovered, declaring WELL!"
ADD             R3, SP, #0x83C+var_80C
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_20F58

loc_39054               ; timer
MOV             R0, #0
STR             R0, [R4,#0x60]
BL              time
STR             R0, [R4,#0xF0]
B               loc_38F60

loc_39068
CMP             R1, #1
BNE             loc_390F4
CMP             R3, #0x258
BLE             loc_392C4
LDRB            R3, [R10]
MOV             R2, #2
STR             R2, [R4,#0x60]
CMP             R3, #0
BNE             loc_390B4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_390B4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, R2
BLE             loc_390DC

loc_390B4
MOVW            R2, #:lower16:aSNotRespondedF ; "%s: Not responded for more than 10 minu"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSNotRespondedF ; "%s: Not responded for more than 10 minu"...
ADD             R3, SP, #0x83C+var_80C
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #3
BL              sub_20F58

loc_390DC
ADD             R0, R6, #0x34 ; '4'
BL              sub_239A4
MOV             R0, R4
MOV             R1, #4
BL              sub_24DC4
B               loc_38F60

loc_390F4
LDR             R3, [R6,#0x34]
SUB             R2, R2, R3
CMP             R2, #0x3C ; '<'
BLE             loc_38F60
CMP             R1, #2
BNE             loc_38F60

loc_3910C
ADD             R0, R6, #0x34 ; '4'
BL              sub_239A4
LDRB            R3, [R9,#(byte_6875C - 0x67FE0)]
CMP             R3, #0
BEQ             loc_38F60
B               loc_38F44
ALIGN 8
dbl_39128 DCFD 0.0
off_39130 DCD dword_69180
off_39134 DCD aWatchdogThread_0 ; "watchdog_thread"

loc_39138
LDR             R3, [SP,#0x83C+var_828]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3915C
MOV             R4, #byte_732E4
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_38E2C

loc_3915C
BL              sub_2BD14
CMP             R0, #0
BNE             loc_3949C
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_39224
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39224
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #3
BGT             loc_39224
LDR             R2, [SP,#0x83C+var_828]
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_394BC

loc_391AC
LDR             R3, [R3]
CMP             R3, #3
BGT             loc_3928C

loc_391B8
LDR             R3, [SP,#0x83C+var_82C]
MOV             R4, #1
LDR             R0, [SP,#0x83C+rwlock] ; rwlock
STRB            R4, [R3]
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_394FC
LDR             R1, [R11]
CMP             R1, #0
BLE             loc_39200
MOV             R3, #dword_744A4
LDR             R3, [R3]
ADD             R1, R3, R1,LSL#2

loc_391F0
LDR             R2, [R3],#4
CMP             R3, R1
STRB            R4, [R2,#0x3C]
BNE             loc_391F0

loc_39200               ; rwlock
LDR             R0, [SP,#0x83C+rwlock]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3954C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
B               loc_38E2C

loc_39224
MOVW            R4, #:lower16:byte_732E4
MOVW            R2, #:lower16:aPausingExecuti ; "Pausing execution as per stop time %02d"...
MOVT            R4, #:upper16:byte_732E4
MOVT            R2, #:upper16:aPausingExecuti ; "Pausing execution as per stop time %02d"...
LDR             R12, [R4,#(dword_732EC - 0x732E4)]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R4,#(dword_732F0 - 0x732E4)]
ADD             R0, SP, #0x83C+s ; s
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #4
BL              sub_20F58
LDR             R3, [SP,#0x83C+var_828]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_394BC
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_3928C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_394B0

loc_3928C
LDR             R1, [SP,#0x83C+var_828]
MOV             R2, #aWillRestartExe ; "Will restart execution as scheduled at "...
ADD             R0, SP, #0x83C+s ; s
LDR             R12, [R1,#(dword_733A4 - 0x7339C)]
LDR             R3, [R1,#(dword_733A8 - 0x7339C)]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #4
BL              sub_20F58
B               loc_391B8

loc_392C4
LDR             R3, [R6,#0x34]
SUB             R2, R2, R3
CMP             R2, #0x3C ; '<'
BGT             loc_3910C
B               loc_38F60

loc_392D8
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_393F4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_393F4
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #3
BGT             loc_393F4
LDRB            R2, [R4]
CMP             R2, #0
BNE             loc_3945C

loc_39318
LDR             R3, [R11]
MOV             R4, #0
LDR             R2, [SP,#0x83C+var_82C]
CMP             R3, R4
STRB            R4, [R2]
BLE             loc_38E2C
LDR             R7, =aWatchdogThread_0 ; "watchdog_thread"
MOVW            R6, #:lower16:aCgminerC ; "cgminer.c"
LDR             R8, [SP,#0x83C+var_820]
MOVT            R6, #:upper16:aCgminerC ; "cgminer.c"

loc_39340
MOV             R0, R4
BL              sub_31B04
LDR             R3, [R0,#0x24]
MOV             R5, R0
LDR             R3, [R3,#0x20]
CMP             R3, #1
BEQ             loc_393E0
LDRB            R3, [R8]
MOV             R2, #0
STRB            R2, [R0,#0x3C]
CMP             R3, R2
BEQ             loc_393CC
LDRB            R3, [R10]
CMP             R3, R2
BNE             loc_393A4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R2
BNE             loc_393A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_393CC

loc_393A4
MOVW            R2, #:lower16:aPushingSemPost ; "Pushing sem post to thread %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aPushingSemPost ; "Pushing sem post to thread %d"
LDR             R3, [R5]
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #7
BL              sub_20F58

loc_393CC
ADD             R0, R5, #0x10
MOVW            R3, #0x28DB
MOV             R2, R7
MOV             R1, R6
BL              sub_251AC

loc_393E0
LDR             R3, [R11]
ADD             R4, R4, #1
CMP             R3, R4
BGT             loc_39340
B               loc_38E2C

loc_393F4
LDR             R1, [SP,#0x83C+var_828]
MOV             R2, #aRestartingExec ; "Restarting execution as per start time "...
ADD             R0, SP, #0x83C+s ; s
LDR             R12, [R1,#(dword_733A4 - 0x7339C)]
LDR             R3, [R1,#(dword_733A8 - 0x7339C)]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #4
BL              sub_20F58
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_39318
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_39468
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39468
MOV             R3, #dword_67DB4

loc_3945C
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_39318

loc_39468
LDR             R12, [R4,#(dword_732EC - 0x732E4)]
MOVW            R2, #:lower16:aWillPauseExecu ; "Will pause execution as scheduled at %0"...
LDR             R3, [R4,#(dword_732F0 - 0x732E4)]
MOVT            R2, #:upper16:aWillPauseExecu ; "Will pause execution as scheduled at %0"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x83C+s ; s
STR             R12, [SP,#0x83C+var_83C]
BL              snprintf
MOV             R2, #0
ADD             R1, SP, #0x83C+s
MOV             R0, #4
BL              sub_20F58
B               loc_39318

loc_3949C
LDR             R3, [SP,#0x83C+var_82C]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_38E2C
B               loc_38DF4

loc_394B0
MOV             R3, #dword_67DB4
B               loc_391AC

loc_394BC
MOVW            R12, #:lower16:aTerminatingExe ; "Terminating execution as planned"
ADD             LR, SP, #0x83C+s
MOVT            R12, #:upper16:aTerminatingExe ; "Terminating execution as planned"
LDM             R12!, {R0-R3} ; "Terminating execution as planned"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ution as planned"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x83C+s
MOV             R0, #3
MOV             R2, #1
STRB            R12, [LR]
BL              sub_20F58
MOV             R1, #1
MOV             R0, #0
BL              sub_2E6B0

loc_394FC
BL              __errno_location
LDR             R12, =aWatchdogThread_0 ; "watchdog_thread"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R1, #0x28B9
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R1, [SP,#0x83C+var_834]
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
MOV             R2, R4
ADD             R1, SP, #0x83C+s

loc_39538
MOV             R0, #3
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3954C
BL              __errno_location
LDR             R12, =aWatchdogThread_0 ; "watchdog_thread"
MOV             R3, #aCgminerC ; "cgminer.c"
MOV             R1, #0x28C0
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R1, [SP,#0x83C+var_834]
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x83C+s ; s
BL              snprintf
ADD             R1, SP, #0x83C+s
MOV             R2, #1
B               loc_39538
; End of function sub_38D3C




; int __fastcall sub_3958C(_DWORD *)
sub_3958C

var_C9C= -0xC9C
var_C98= -0xC98
var_C94= -0xC94
var_C90= -0xC90
var_C8C= -0xC8C
var_C88= -0xC88
var_C80= -0xC80
var_C7C= -0xC7C
var_C78= -0xC78
var_C74= -0xC74
var_C6C= -0xC6C
var_C68= -0xC68
var_C64= -0xC64
var_C60= -0xC60
var_C5C= -0xC5C
var_C58= -0xC58
var_C54= -0xC54
var_C50= -0xC50
var_C48= -0xC48
var_C44= -0xC44
var_C40= -0xC40
var_C3C= -0xC3C
var_C34= -0xC34
s= -0xC28
var_C18= -0xC18
var_C04= -0xC04
var_80C= -0x80C
var_804= -0x804

PUSH            {R4-R11,LR}
SUB             SP, SP, #0xC90
SUB             SP, SP, #0xC
MOV             R9, R0
BL              pthread_self
BL              pthread_detach
MOVW            R2, #:lower16:aDSstratum ; "%d/SStratum"
LDR             R3, [R9]
MOVT            R2, #:upper16:aDSstratum ; "%d/SStratum"
MOV             R1, #0x10 ; maxlen
ADD             R0, SP, #0xC9C+s ; s
BL              snprintf
ADD             R0, SP, #0xC9C+s
BL              sub_250A8
BL              sub_23300
CMP             R0, #0
STR             R0, [R9,#0x2D8]
BEQ             loc_39EB8
MOV             R3, #byte_74500
STR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39600
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_39CEC

loc_39600
LDR             R1, [R9,#0xA4]
ADD             R4, SP, #0xC9C+var_80C
LDR             R3, [R9]
ADD             R4, R4, #8
MOVW            R2, #:lower16:aInSPoolDPoolUr ; "in %s , pool: %d, pool_url: %s"
MOV             R0, R4  ; s
MOVT            R2, #:upper16:aInSPoolDPoolUr ; "in %s , pool: %d, pool_url: %s"
STR             R1, [SP,#0xC9C+var_C98]
STR             R3, [SP,#0xC9C+var_C9C]
MOV             R1, #0x800 ; maxlen
LDR             R3, =aStratumSthread ; "stratum_sthread"
BL              snprintf
MOV             R0, #5
MOV             R1, R4
MOV             R2, #0
BL              sub_20F58
LDR             R0, [R9,#0x2D8]

loc_39644
MOVW            R1, #0xBAC6
MOVW            R3, #0x410D
MOVT            R1, #0x9F49
MOVW            R2, #0xF76D
STR             R1, [SP,#0xC9C+var_C5C]
MOVW            R12, #0xBEF3
LDRB            R1, [R9,#0x69]
MOVW            LR, #0x1FE1
MOVT            R3, #0x112
MOVT            R2, #7
MOVT            R12, #0xFEED
MOVT            LR, #0xA011
CMP             R1, #0
STR             R3, [SP,#0xC9C+var_C64]
STR             R2, [SP,#0xC9C+var_C60]
MOV             R6, #0
STR             R12, [SP,#0xC9C+var_C58]
MOV             R4, #0
STR             LR, [SP,#0xC9C+var_C54]
MOV             R5, #0
BNE             loc_39BC8

loc_39698
BL              sub_234A8
CMP             R0, #0
STR             R0, [SP,#0xC9C+var_C44]
BEQ             loc_39F04
LDR             R1, [R0,#0x130]
CMP             R1, #8
BHI             loc_39FAC
ADD             R3, R0, #0x130
LDR             R1, [R0,#0x4C]
LDRD            R2, R3, [R3,#-8]
STR             R1, [SP,#0xC9C+var_C78]
CMP             R3, R5
STRD            R2, R3, [SP,#0xC9C+var_C74]
CMPEQ           R2, R4
STR             R1, [SP,#0xC9C+var_C48]
MOVEQ           R7, #1
MOVNE           R7, #0
CMP             R1, R6
MOVNE           R7, #0
ANDEQ           R7, R7, #1
STRD            R2, R3, [SP,#0xC9C+var_C3C]
CMP             R7, #0
BNE             loc_3A444
MOV             R2, #4
ADD             R1, SP, #0xC9C+var_C48
ADD             R0, SP, #0xC9C+var_C34
BL              sub_22BB4
LDR             R3, [SP,#0xC9C+var_C44]
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
MOV             R12, R2
ADD             R0, SP, #0xC9C+var_C18
ADD             R1, SP, #0xC9C+var_C3C
LDR             R2, [R3,#0x130]
MOV             R3, R12
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOV             R4, R3
STR             R3, [SP,#0xC9C+var_C68]
BL              sub_22BB4
MOVW            R3, #0x1DFD
MOV             R2, R4
MOV             R1, #1
STR             R3, [SP,#0xC9C+var_C9C]
MOV             R0, #0x34 ; '4'
LDR             R3, =aStratumSthread_0 ; "stratum_sthread"
BL              sub_22A44
MOV             R6, R0
MOV             R0, R7  ; timer
LDR             R4, [SP,#0xC9C+var_C44]
BL              time
LDR             R3, [SP,#0xC9C+var_C44]
MOV             R1, R7  ; c
STR             R0, [R6,#0x2C]
MOV             R2, #0x400 ; n
ADD             R0, SP, #0xC9C+var_C04 ; s
STR             R3, [R6,#0x24]
BL              memset
LDR             R0, =stru_690F0 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3A0A4
MOVW            R3, #:lower16:dword_7448C
LDR             R0, =stru_690F0 ; mutex
MOVT            R3, #:upper16:dword_7448C
LDR             R2, [R3]
STR             R2, [R6,#0x28]
ADD             R2, R2, #1
STR             R2, [R3]
BL              pthread_mutex_unlock
SUBS            R5, R0, #0
BNE             loc_3A0FC
MOV             R3, #off_67ED8
STR             R3, [SP,#0xC9C+var_C6C]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R2, #4
ADD             R1, R9, #0x6F0
ADD             R1, R1, R2
ADD             R0, SP, #0xC9C+var_C40
STR             R5, [SP,#0xC9C+var_C40]
BL              sub_22CD8
LDRB            R3, [R9,#0x284]
CMP             R3, #0
BEQ             loc_39C8C
LDR             R12, [SP,#0xC9C+var_C44]
ADD             LR, SP, #0xC9C+var_C34
LDR             R3, [SP,#0xC9C+var_C40]
MOVW            R2, #:lower16:aParamsSSSSS08x ; "{\"params\": [\"%s\", \"%s\", \"%s\", "...
LDR             R0, [R6,#0x28]
MOVT            R2, #:upper16:aParamsSSSSS08x ; "{\"params\": [\"%s\", \"%s\", \"%s\", "...
LDR             R1, [R12,#0x1BC]
STR             LR, [SP,#0xC9C+var_C90]
BIC             R1, R1, R3
LDR             R3, [R9,#0xAC]
REV             R1, R1
STR             R0, [SP,#0xC9C+var_C88]
STR             R1, [SP,#0xC9C+var_C8C]
ADD             R0, SP, #0xC9C+var_C18
LDR             LR, [R12,#0x134]
MOV             R1, #0x400 ; maxlen
STR             R0, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+var_C04 ; s
STR             LR, [SP,#0xC9C+var_C94]
LDR             R12, [R12,#0x120]
STR             R12, [SP,#0xC9C+var_C9C]
BL              snprintf

loc_39840
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39864
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_39CD4

loc_39864
LDR             R12, [R9]
ADD             R7, SP, #0xC9C+var_80C
ADD             R7, R7, #8
MOVW            R2, #:lower16:aSubmittingShar ; "Submitting share %08lx to pool %d"
LDR             R3, [R4,#0xD8]
MOVT            R2, #:upper16:aSubmittingShar ; "Submitting share %08lx to pool %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R7  ; s
STR             R12, [SP,#0xC9C+var_C9C]
BL              snprintf
MOV             R1, R7
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3989C
MOVW            R4, #:lower16:dword_74494
MOVW            R5, #:lower16:aPoolDStratumSh ; "Pool %d stratum share submission failur"...
MOVW            R7, #:lower16:byte_68BD4
MOVT            R4, #:upper16:dword_74494
MOVT            R5, #:upper16:aPoolDStratumSh ; "Pool %d stratum share submission failur"...
MOVT            R7, #:upper16:byte_68BD4

loc_398B4
LDR             R8, [R6,#0x2C]
MOV             R0, #0  ; timer
BL              time
ADD             R8, R8, #0x77 ; 'w'
CMP             R8, R0
BLT             loc_3A3B0
ADD             R0, SP, #0xC9C+var_C04 ; s
BL              strlen
ADD             R1, SP, #0xC9C+var_C04
MOV             R2, R0
MOV             R0, R9
BL              sub_244A4
CMP             R0, #0
BEQ             loc_3A11C
LDR             R0, =stru_690F0 ; mutex
MOVW            R7, #:lower16:byte_68BD8
BL              pthread_mutex_lock
CMP             R0, #0
MOVT            R7, #:upper16:byte_68BD8
BNE             loc_3A1F4
LDRB            R3, [R6,#0x28]
ADD             R2, R6, #0x28 ; '('
LDRB            R12, [R6,#0x2B]
LDR             LR, [SP,#0xC9C+var_C64]
LDRB            R1, [R6,#0x2A]
STR             R2, [R6,#0x14]
ADD             R3, R3, LR
LDRB            R2, [R6,#0x29]
ADD             R3, R3, R12,LSL#24
LDR             R5, [R7,#(dword_69108 - 0x68BD8)]
ADD             R3, R3, R1,LSL#16
LDR             R1, [SP,#0xC9C+var_C58]
CMP             R5, #0
ADD             R3, R3, R2,LSL#8
MOV             R2, #4
STR             R2, [R6,#0x18]
LDR             R2, [SP,#0xC9C+var_C60]
EOR             R3, R3, R2
LDR             R2, [SP,#0xC9C+var_C5C]
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R2, R2, R3,LSL#8
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#13
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#12
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSL#16
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#5
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#3
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R3, R2, R3,LSL#10
SUB             R1, R1, R3
EOR             R4, R1, R3,LSR#15
STR             R4, [R6,#0x1C]
BEQ             loc_39F18
LDR             R3, [R5]
STR             R0, [R6,#8]
STR             R3, [R6]
LDR             R2, [R5]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R6,#4]
LDR             R3, [R5]
LDR             R3, [R3,#0x10]
STR             R6, [R3,#8]
LDR             R3, [R5]
STR             R6, [R3,#0x10]

loc_399E8
LDR             R2, [R5]
MOV             R1, #0
LDR             R3, [R2,#0xC]
ADD             R3, R3, #1
STR             R3, [R2,#0xC]
LDR             R3, [R5]
LDR             R2, [R3,#4]
LDR             R3, [R3]
SUB             R2, R2, #1
AND             R4, R4, R2
ADD             R4, R4, R4,LSL#1
MOV             R2, R4,LSL#2
ADD             R3, R3, R2
LDR             R0, [R3,#4]
ADD             R0, R0, #1
STR             R0, [R3,#4]
LDR             R3, [R5]
LDR             R3, [R3]
LDR             R3, [R3,R4,LSL#2]
STR             R1, [R6,#0xC]
STR             R3, [R6,#0x10]
LDR             R3, [R5]
LDR             R3, [R3]
LDR             R1, [R3,R4,LSL#2]
ADD             R3, R3, R2
CMP             R1, #0
STRNE           R6, [R1,#0xC]
LDRNE           R3, [R5]
LDRNE           R3, [R3]
ADDNE           R3, R3, R2
STR             R6, [R3]
LDR             R3, [R5]
LDR             R3, [R3]
ADD             R2, R3, R2
LDRD            R2, R3, [R2,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_39A94
LDR             R3, [R6]
LDR             R2, [R3,#0x24]
CMP             R2, #1
BNE             loc_39D04

loc_39A94
LDR             R3, [R9,#0x2DC]
LDR             R0, =stru_690F0 ; mutex
ADD             R3, R3, #1
STR             R3, [R9,#0x2DC]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3A214
LDR             R3, [SP,#0xC9C+var_C6C]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
ADD             R1, R9, #0x60 ; '`'
MOV             R0, R9
BL              sub_2F180
CMP             R0, #0
BEQ             loc_39C0C
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39BDC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39BDC
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_39BDC
MOV             R4, #byte_68BD5
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_39EA8

loc_39B1C               ; timer
MOV             R0, #0
BL              time
LDR             R2, [R6,#0x2C]
LDRB            R3, [R4]
STR             R0, [R6,#0x30]
SUB             R0, R0, R2
CMP             R0, #0
ORRGT           R3, R3, #1
CMP             R3, #0
BEQ             loc_39BB0
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39B7C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39B7C
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #5
BLE             loc_39BB0

loc_39B7C
ADD             R7, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aPoolDStratumSh_0 ; "Pool %d stratum share submission lag ti"...
ADD             R7, R7, #8
LDR             R3, [R9]
MOVT            R2, #:upper16:aPoolDStratumSh_0 ; "Pool %d stratum share submission lag ti"...
STR             R0, [SP,#0xC9C+var_C9C]
MOV             R1, #0x800 ; maxlen
MOV             R0, R7  ; s
BL              snprintf
MOV             R1, R7
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_39BB0
LDR             R6, [SP,#0xC9C+var_C78]
LDRD            R4, R5, [SP,#0xC9C+var_C74]

loc_39BB8
LDRB            R1, [R9,#0x69]
LDR             R0, [R9,#0x2D8]
CMP             R1, #0
BEQ             loc_39698

loc_39BC8
BL              sub_233C4
MOV             R0, #0
ADD             SP, SP, #0xC90
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_39BDC
ADD             R7, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aPoolDCommunica ; "Pool %d communication resumed, submitti"...
ADD             R7, R7, #8
MOVT            R2, #:upper16:aPoolDCommunica ; "Pool %d communication resumed, submitti"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R7  ; s
LDR             R3, [R9]
BL              snprintf
MOV             R1, R7
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_39C0C
MOV             R4, #byte_68BD5
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_39B1C
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39C44
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_39EA0

loc_39C44
MOVW            R12, #:lower16:aSuccessfullySu ; "Successfully submitted, adding to strat"...
ADD             R7, SP, #0xC9C+var_80C
MOVT            R12, #:upper16:aSuccessfullySu ; "Successfully submitted, adding to strat"...
ADD             R7, R7, #8
LDM             R12!, {R0-R3} ; "Successfully submitted, adding to strat"...
MOV             LR, R7
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "mitted, adding to stratum_shares db"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "o stratum_shares db"
LDR             R12, [R12] ; " db"
STM             LR!, {R0-R3}
MOV             R1, R7
MOV             R2, #0
MOV             R0, #7
STR             R12, [LR]
BL              sub_20F58
B               loc_39B1C

loc_39C8C
LDR             R0, [R6,#0x28]
ADD             R1, SP, #0xC9C+var_C34
LDR             R3, [SP,#0xC9C+var_C44]
MOVW            R2, #:lower16:aParamsSSSSSIdD ; "{\"params\": [\"%s\", \"%s\", \"%s\", "...
STR             R1, [SP,#0xC9C+var_C90]
MOVT            R2, #:upper16:aParamsSSSSSIdD ; "{\"params\": [\"%s\", \"%s\", \"%s\", "...
STR             R0, [SP,#0xC9C+var_C8C]
ADD             R0, SP, #0xC9C+var_C18
LDR             R12, [R3,#0x134]
MOV             R1, #0x400 ; maxlen
STR             R0, [SP,#0xC9C+var_C98]
ADD             R0, SP, #0xC9C+var_C04 ; s
STR             R12, [SP,#0xC9C+var_C94]
LDR             R12, [R3,#0x120]
LDR             R3, [R9,#0xAC]
STR             R12, [SP,#0xC9C+var_C9C]
BL              snprintf
B               loc_39840

loc_39CD4
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #5
BLE             loc_3989C
B               loc_39864

loc_39CEC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_39644
B               loc_39600

loc_39D04
LDR             R0, [R3,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R7, R0, #0
BEQ             loc_3A5BC
LDR             R3, [R6]
MOV             LR, #0
LDR             R2, [R3,#4]
LDR             R0, [R3,#0xC]
LDR             R1, [R3,#8]
MOV             R12, R2,LSL#1
ADD             R1, R1, #1
SUB             R2, R12, #1
TST             R2, R0
MOVNE           R2, #1
MOVEQ           R2, LR
ADD             R2, R2, R0,LSR R1
STR             R2, [R3,#0x18]
LDR             R3, [R6]
STR             LR, [R3,#0x1C]
LDR             R3, [R6]
LDR             R4, [R3,#4]
CMP             R4, LR
BEQ             loc_39E38
MOV             R11, LR
MOV             R10, LR
STR             LR, [SP,#0xC9C+var_C7C]
STR             R9, [SP,#0xC9C+var_C50]

loc_39D7C
LDR             R2, [R3]
LDR             R5, [R2,R11]
CMP             R5, #0
BNE             loc_39D98
B               loc_39E1C

loc_39D90
LDR             R4, [R3,#4]
MOV             R5, R8

loc_39D98
LDR             R3, [R5,#0x1C]
MOV             R4, R4,LSL#1
LDR             R8, [R5,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R9, R7, R4,LSL#2
LDR             R3, [R9,#4]
ADD             R3, R3, #1
STR             R3, [R9,#4]
LDR             R2, [R6]
LDR             R1, [R2,#0x18]
CMP             R3, R1
BLS             loc_39DF0
LDR             R3, [R2,#0x1C]
ADD             R3, R3, #1
STR             R3, [R2,#0x1C]
LDR             R3, [R6]
LDR             R0, [R9,#4]
LDR             R1, [R3,#0x18]
BLX             __udivsi3
STR             R0, [R9,#8]

loc_39DF0
STR             R10, [R5,#0xC]
LDR             R3, [R7,R4,LSL#2]
STR             R3, [R5,#0x10]
LDR             R3, [R7,R4,LSL#2]
CMP             R3, #0
STRNE           R5, [R3,#0xC]
CMP             R8, #0
STR             R5, [R7,R4,LSL#2]
LDR             R3, [R6]
BNE             loc_39D90
LDR             R4, [R3,#4]

loc_39E1C
LDR             R2, [SP,#0xC9C+var_C7C]
ADD             R11, R11, #0xC
ADD             R2, R2, #1
CMP             R2, R4
STR             R2, [SP,#0xC9C+var_C7C]
BCC             loc_39D7C

loc_39E34
LDR             R9, [SP,#0xC9C+var_C50]

loc_39E38               ; ptr
LDR             R0, [R3]
BL              free
LDR             R2, [R6]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R6]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R6]
STR             R7, [R3]
LDR             R3, [R6]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R6]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]
B               loc_39A94

loc_39EA0
MOV             R2, #dword_67DB4

loc_39EA8
LDR             R3, [R2]
CMP             R3, #6
BGT             loc_39C44
B               loc_39B1C

loc_39EB8
MOVW            LR, #:lower16:aFailedToCreate ; "Failed to create stratum_q in stratum_s"...
ADD             R12, SP, #0xC9C+var_80C
MOVT            LR, #:upper16:aFailedToCreate ; "Failed to create stratum_q in stratum_s"...
ADD             R12, R12, #8
LDM             LR!, {R0-R3} ; "Failed to create stratum_q in stratum_s"...
STM             R12!, {R0-R3}

loc_39ED0
LDM             LR!, {R0-R3}
STM             R12!, {R0-R3}
LDM             LR, {R0-R3}
STM             R12!, {R0-R2}
ADD             R1, SP, #0xC9C+var_80C
ADD             R1, R1, #8
MOV             R0, #3
MOV             R2, #1
STRH            R3, [R12]
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_39F04
MOVW            LR, #:lower16:aStratumQReturn ; "Stratum q returned empty work"
ADD             R12, SP, #0xC9C+var_80C
MOVT            LR, #:upper16:aStratumQReturn ; "Stratum q returned empty work"
ADD             R12, R12, #8
B               loc_39ED0

loc_39F18
STR             R5, [R6,#8]
MOV             R0, #0x2C ; ',' ; size
STR             R5, [R6,#4]
STR             R6, [R7,#(dword_69108 - 0x68BD8)]
BL              malloc
CMP             R0, #0
STR             R0, [R6]
BEQ             loc_3A5BC
MOV             R2, #0x2C ; ',' ; n
MOV             R1, R5  ; c
BL              memset
LDR             R3, [R6]
MOV             R1, #0x20 ; ' '
MOV             R2, #5
MOV             R0, #0x180 ; size
STR             R6, [R3,#0x10]
LDR             R3, [R6]
STR             R1, [R3,#4]
LDR             R3, [R6]
STR             R2, [R3,#8]
LDR             R3, [R6]
STR             R5, [R3,#0x14]
LDR             R7, [R6]
BL              malloc
STR             R0, [R7]
LDR             R3, [R6]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_3A5BC
MOV             R1, R5  ; c
MOV             R2, #0x180 ; n
BL              memset
LDR             R3, [R6]
MOV             R5, R6
LDR             R2, [SP,#0xC9C+var_C54]
STR             R2, [R3,#0x28]
B               loc_399E8

loc_39FAC
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39FE4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_39FE4
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #2
BLE             loc_3A08C

loc_39FE4
ADD             R7, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aPoolDAskingFor ; "Pool %d asking for inappropriately long"...
ADD             R7, R7, #8
LDR             R3, [R9]
MOVT            R2, #:upper16:aPoolDAskingFor ; "Pool %d asking for inappropriately long"...
STR             R1, [SP,#0xC9C+var_C9C]
MOV             R0, R7  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R7
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A03C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3A084

loc_3A03C
MOVW            R12, #:lower16:aNotAttemptingT ; "Not attempting to submit shares"
MOV             LR, R7
MOVT            R12, #:upper16:aNotAttemptingT ; "Not attempting to submit shares"
LDM             R12!, {R0-R3} ; "Not attempting to submit shares"
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; "o submit shares"
STM             LR, {R0-R3}
MOV             R1, R7
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_3A068
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1DE8
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aStratumSthread_0 ; "stratum_sthread"
ADD             R0, SP, #0xC9C+var_C44
BL              sub_2CBA8
B               loc_39BB8

loc_3A084
MOV             R2, #dword_67DB4

loc_3A08C
LDR             R3, [R2]
CMP             R3, #2
ADDGT           R7, SP, #0xC9C+var_80C
ADDGT           R7, R7, #8
BGT             loc_3A03C
B               loc_3A068

loc_3A0A4
BL              __errno_location
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E06
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0xC9C+var_C98]

loc_3A0C0
LDR             R0, [SP,#0xC9C+var_C68]
STR             R1, [SP,#0xC9C+var_C94]
MOV             R1, #0x800 ; maxlen
STR             R0, [SP,#0xC9C+var_C9C]
ADD             R0, SP, #0xC9C+var_80C
ADD             R0, R0, #8 ; s
BL              snprintf
ADD             R1, SP, #0xC9C+var_80C
MOV             R0, #3
ADD             R1, R1, #8
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3A0FC
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E09
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_3A0C0

loc_3A11C
ADD             R1, R9, #0x60 ; '`'
MOV             R0, R9
BL              sub_2F098
CMP             R0, #0
BEQ             loc_3A3BC

loc_3A130
MOV             R3, #byte_75684
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A528
ADD             R8, R9, #0xD4
MOV             R0, R8  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3A4C8
ADD             R10, R9, #0xEC
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_3A4E8
MOV             R0, R8  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3A508
LDR             R1, [R9,#0x264] ; s2
CMP             R1, #0
BEQ             loc_3A1C4
LDR             R3, [SP,#0xC9C+var_C44]
LDR             R0, [R3,#0x140] ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_3A1C4
MOV             R0, R10 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3A1D4
LDR             R3, [SP,#0xC9C+var_C6C]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, #2  ; seconds
BL              sleep
B               loc_398B4

loc_3A1C4               ; rwlock
MOV             R0, R10
BL              pthread_rwlock_unlock
CMP             R0, #0
BEQ             loc_3A234

loc_3A1D4
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E50
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_3A0C0

loc_3A1F4
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E35
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_3A0C0

loc_3A214
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E38
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_3A0C0

loc_3A234
LDR             R3, [SP,#0xC9C+var_C6C]
MOV             R4, #byte_68BD5
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3A360
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A28C
MOV             R3, #byte_68BD4
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_3A28C
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_3A2F8

loc_3A28C
MOVW            R12, #:lower16:aNoMatchingSess ; "No matching session id for resubmitting"...
ADD             R7, SP, #0xC9C+var_80C
MOVT            R12, #:upper16:aNoMatchingSess ; "No matching session id for resubmitting"...
ADD             R7, R7, #8
LDM             R12!, {R0-R3} ; "No matching session id for resubmitting"...
MOV             LR, R7
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ion id for resubmitting stratum share"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "mitting stratum share"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "share"
STR             R0, [LR],#4
MOV             R0, #7
STRH            R1, [LR]
MOV             R1, R7
BL              sub_20F58

loc_3A2D4
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3A360
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A318
MOV             R3, #byte_68BD4

loc_3A2F8
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A318
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #6
BLE             loc_3A360

loc_3A318
MOVW            LR, #:lower16:aFailedToSubmit ; "Failed to submit stratum share, discard"...
ADD             R7, SP, #0xC9C+var_80C
MOVT            LR, #:upper16:aFailedToSubmit ; "Failed to submit stratum share, discard"...
ADD             R7, R7, #8
LDM             LR!, {R0-R3} ; "Failed to submit stratum share, discard"...
MOV             R12, R7
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; " stratum share, discarding"
STM             R12!, {R0-R3}
LDM             LR, {R0-R2} ; "discarding"
STM             R12!, {R0,R1}
MOV             R1, R7
MOV             R3, R2,LSR#16
STRH            R2, [R12],#2
MOV             R0, #7
MOV             R2, #0
STRB            R3, [R12]
BL              sub_20F58

loc_3A360
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1E5F
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aStratumSthread_0 ; "stratum_sthread"
ADD             R0, SP, #0xC9C+var_C44
BL              sub_2CBA8
MOV             R0, R6  ; ptr
BL              free
MOVW            R3, #:lower16:qword_73318
LDR             R0, [R9,#0x78]
MOVT            R3, #:upper16:qword_73318
LDR             R2, [R3]
LDR             R1, [R3,#(qword_73318+4 - 0x73318)]
ADD             R0, R0, #1
STR             R0, [R9,#0x78]
ADDS            R2, R2, #1
ADC             R1, R1, #0
STR             R2, [R3]
STR             R1, [R3,#(qword_73318+4 - 0x73318)]
B               loc_39BB0

loc_3A3B0
MOV             R4, #byte_68BD5
B               loc_3A2D4

loc_3A3BC
MOV             R0, R9
BL              sub_32424
CMP             R0, #0
BEQ             loc_3A130
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A3FC
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_3A3FC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3A428

loc_3A3FC
ADD             R8, SP, #0xC9C+var_80C
MOV             R2, R5  ; format
ADD             R8, R8, #8
MOV             R1, #0x800 ; maxlen
LDR             R3, [R9]
MOV             R0, R8  ; s
BL              snprintf
MOV             R1, R8
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_3A428
LDR             R2, [R4]
LDR             R3, [R9,#0x84]
ADD             R2, R2, #1
ADD             R3, R3, #1
STR             R2, [R4]
STR             R3, [R9,#0x84]
B               loc_3A130

loc_3A444
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A47C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A47C
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #5
BLE             loc_3A4AC

loc_3A47C
ADD             R7, SP, #0xC9C+var_80C
MOVW            R2, #:lower16:aFilteringDupli ; "Filtering duplicate share to pool %d"
ADD             R7, R7, #8
MOVT            R2, #:upper16:aFilteringDupli ; "Filtering duplicate share to pool %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R7  ; s
LDR             R3, [R9]
BL              snprintf
MOV             R1, R7
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3A4AC
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1DF4
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aStratumSthread_0 ; "stratum_sthread"
ADD             R0, SP, #0xC9C+var_C44
BL              sub_2CBA8
B               loc_39BB8

loc_3A4C8
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E4E
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_3A0C0

loc_3A4E8
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E4E
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_3A0C0

loc_3A508
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, =aStratumSthread_0 ; "stratum_sthread"
MOVW            R1, #0x1E4E
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0xC9C+var_C98]
B               loc_3A0C0

loc_3A528
MOV             R4, #byte_68BD5
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_3A360
LDR             R3, [SP,#0xC9C+var_C80]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3A574
MOV             R3, #byte_68BD4
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_3A574
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_3A2F8

loc_3A574
MOVW            R12, #:lower16:aLowmemOptionPr ; "Lowmem option prevents resubmitting str"...
ADD             R7, SP, #0xC9C+var_80C
MOVT            R12, #:upper16:aLowmemOptionPr ; "Lowmem option prevents resubmitting str"...
ADD             R7, R7, #8
LDM             R12!, {R0-R3} ; "Lowmem option prevents resubmitting str"...
MOV             LR, R7
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "events resubmitting stratum share"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "ing stratum share"
LDR             R12, [R12] ; "e"
STM             LR!, {R0-R3}
MOV             R1, R7
MOV             R2, #0
MOV             R0, #7
STRH            R12, [LR]
BL              sub_20F58
B               loc_3A2D4

loc_3A5BC               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_3958C

off_3A5C4 DCD aStratumSthread ; "stratum_sthread"
off_3A5C8 DCD aStratumSthread_0 ; "stratum_sthread"
off_3A5CC DCD stru_690F0



; int __fastcall sub_3A5D0(int)
sub_3A5D0

var_89C= -0x89C
var_898= -0x898
var_894= -0x894
var_88C= -0x88C
var_888= -0x888
var_884= -0x884
var_880= -0x880
var_87C= -0x87C
var_878= -0x878
var_874= -0x874
var_870= -0x870
var_86C= -0x86C
s2= -0x868
var_864= -0x864
var_860= -0x860
var_85C= -0x85C
var_858= -0x858
var_854= -0x854
var_850= -0x850
var_84C= -0x84C
s= -0x848
var_83C= -0x83C
var_804= -0x804

PUSH            {R4-R11,LR}
MOV             R3, #0
VPUSH           {D8}
SUB             SP, SP, #0x890
SUB             SP, SP, #0xC
LDR             R2, [R0,#0x104]
LDRB            R1, [R0,#0x11A]
STR             R3, [SP,#0x89C+var_86C]
LDR             R4, [R2,#0x620]
CMP             R1, R3
STR             R2, [SP,#0x89C+var_88C]
STR             R1, [SP,#0x89C+var_888]
LDRB            R5, [R4,#0x2A]
BEQ             loc_3A61C

loc_3A608
LDR             R0, [SP,#0x89C+var_888]
ADD             SP, SP, #0x890
ADD             SP, SP, #0xC
VPOP            {D8}
POP             {R4-R11,PC}

loc_3A61C
LDRD            R2, R3, [R0,#0x1C]
MOV             R6, R0
LDR             R12, [R0,#0x18]
ADD             R1, SP, #0x89C+s2
ADD             R0, SP, #0x89C+s
STR             R3, [SP,#0x89C+s2]
LDR             R3, [R6,#0x14]
STR             R12, [SP,#0x89C+var_860]
LDR             R12, [R6,#0x10]
STR             R3, [SP,#0x89C+var_85C]
LDR             R3, [R6,#0xC]
STR             R12, [SP,#0x89C+var_858]
LDR             R12, [R6,#8]
STR             R3, [SP,#0x89C+var_854]
LDR             R3, [R6,#4]
STR             R2, [SP,#0x89C+var_864]
MOV             R2, #0x20 ; ' '
STR             R12, [SP,#0x89C+var_850]
STR             R3, [SP,#0x89C+var_84C]
BL              sub_22BB4
CMP             R5, #4
BLS             loc_3AB20

loc_3A674
LDR             R3, [SP,#0x89C+var_88C]
ADD             R4, R3, #0xD4
MOV             R0, R4  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3B8F4
LDR             R3, [SP,#0x89C+var_88C]
ADD             R5, R3, #0xEC
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_3B930
LDR             R2, [SP,#0x89C+var_88C]
LDRB            R3, [R2,#0x2A8]
CMP             R3, #0
MOVNE           R3, #1
STRBNE          R0, [R2,#0x2A8]
STRBNE          R3, [R6,#0x118]
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3B960
MOV             R0, R4  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3B990
MOV             R3, #off_67ED8
STR             R3, [SP,#0x89C+var_884]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R0, =stru_6A6C0 ; rwlock
BL              pthread_rwlock_wrlock
SUBS            R3, R0, #0
STR             R3, [SP,#0x89C+var_880]
BNE             loc_3BA64
ADD             R0, SP, #0x89C+s ; s
MOVW            R7, #0x79B9
BL              strlen
CMP             R0, #0xB
MOV             R5, R0
MOVW            R3, #0xBEEF
MOVT            R7, #0x9E37
BLS             loc_3B58C
ADD             R10, SP, #0x89C+var_83C
MOV             R0, R7
MOVT            R3, #0xFEED
MOV             R11, R5

loc_3A734
LDRB            LR, [R10,#-6]
SUB             R11, R11, #0xC
LDRB            R2, [R10,#-2]
CMP             R11, #0xB
LDRB            R1, [R10,#-0xA]
LDRB            R4, [R10,#-7]
LDRB            R12, [R10,#-3]
MOV             LR, LR,LSL#16
LDRB            R8, [R10,#-0xB]
MOV             R2, R2,LSL#16
MOV             R1, R1,LSL#16
LDRB            R9, [R10,#-5]
ADD             LR, LR, R4,LSL#8
LDRB            R4, [R10,#-8]
ADD             R2, R2, R12,LSL#8
LDRB            R12, [R10,#-0xC]
ADD             R1, R1, R8,LSL#8
LDRB            R8, [R10,#-4]
ADD             LR, LR, R4
LDRB            R4, [R10,#-9]
ADD             R1, R1, R12
LDRB            R12, [R10,#-1]
ADD             LR, LR, R9,LSL#24
ADD             R2, R2, R8
ADD             R1, R1, R4,LSL#24
ADD             R7, LR, R7
ADD             R2, R2, R12,LSL#24
MOV             R4, R10
SUB             R1, R1, R7
ADD             R3, R2, R3
ADD             R10, R10, #0xC
SUB             R2, R1, R3
SUB             R7, R7, R3
ADD             R2, R2, R0
EOR             R2, R2, R3,LSR#13
SUB             R1, R7, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#8
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#13
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSR#12
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#16
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#5
SUB             R2, R2, R3
SUB             R7, R1, R3
EOR             R0, R2, R3,LSR#3
SUB             R7, R7, R0
SUB             R3, R3, R0
EOR             R7, R7, R0,LSL#10
SUB             R3, R3, R7
EOR             R3, R3, R7,LSR#15
BHI             loc_3A734

loc_3A820
SUB             R11, R11, #1
ADD             R3, R5, R3
CMP             R11, #0xA ; switch 11 cases
LDRLS           PC, [PC,R11,LSL#2] ; switch jump
B               def_3A82C ; jumptable 0003A82C default case
jpt_3A82C DCD loc_3A8B0 ; jump table for switch statement
DCD loc_3A8A8
DCD loc_3A8A0
DCD loc_3A898
DCD loc_3A890
DCD loc_3A888
DCD loc_3A880
DCD loc_3A878
DCD loc_3A870
DCD loc_3A868
DCD loc_3A860

loc_3A860               ; jumptable 0003A82C case 10
LDRB            R2, [R4,#0xA]
ADD             R3, R3, R2,LSL#24

loc_3A868               ; jumptable 0003A82C case 9
LDRB            R2, [R4,#9]
ADD             R3, R3, R2,LSL#16

loc_3A870               ; jumptable 0003A82C case 8
LDRB            R2, [R4,#8]
ADD             R3, R3, R2,LSL#8

loc_3A878               ; jumptable 0003A82C case 7
LDRB            R2, [R4,#7]
ADD             R7, R7, R2,LSL#24

loc_3A880               ; jumptable 0003A82C case 6
LDRB            R2, [R4,#6]
ADD             R7, R7, R2,LSL#16

loc_3A888               ; jumptable 0003A82C case 5
LDRB            R2, [R4,#5]
ADD             R7, R7, R2,LSL#8

loc_3A890               ; jumptable 0003A82C case 4
LDRB            R2, [R4,#4]
ADD             R7, R7, R2

loc_3A898               ; jumptable 0003A82C case 3
LDRB            R2, [R4,#3]
ADD             R0, R0, R2,LSL#24

loc_3A8A0               ; jumptable 0003A82C case 2
LDRB            R2, [R4,#2]
ADD             R0, R0, R2,LSL#16

loc_3A8A8               ; jumptable 0003A82C case 1
LDRB            R2, [R4,#1]
ADD             R0, R0, R2,LSL#8

loc_3A8B0               ; jumptable 0003A82C case 0
LDRB            R2, [R4]
ADD             R0, R0, R2

def_3A82C               ; jumptable 0003A82C default case
SUB             R2, R0, R7
SUB             R1, R7, R3
SUB             R2, R2, R3
MOVW            R0, #:lower16:byte_6ABD0
EOR             R2, R2, R3,LSR#13
MOVT            R0, #:upper16:byte_6ABD0
LDR             R12, [R0,#(dword_6A6E0 - 0x6ABD0)]
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#8
STR             R0, [SP,#0x89C+var_87C]
CMP             R12, #0
SUB             R0, R3, R1
SUB             R2, R2, R1
EOR             R0, R0, R1,LSR#13
SUB             R2, R2, R0
SUB             R3, R1, R0
EOR             R2, R2, R0,LSR#12
SUB             R3, R3, R2
SUB             R1, R0, R2
EOR             R3, R3, R2,LSL#16
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R1, R1, R3,LSR#5
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#3
SUB             R7, R3, R2
SUB             R1, R1, R2
EOR             R2, R7, R2,LSL#10
SUB             R7, R1, R2
EOR             R7, R7, R2,LSR#15
BEQ             loc_3AB58
LDR             R2, [R12,#0x44]
LDM             R2, {R1,R3}
SUB             R3, R3, #1
AND             R3, R3, R7
ADD             R3, R3, R3,LSL#1
LDR             R4, [R1,R3,LSL#2]
CMP             R4, #0
BEQ             loc_3AB58
LDR             R8, [R2,#0x14]
RSB             R8, R8, #0
ADDS            R4, R4, R8
BNE             loc_3A984
B               loc_3AB58

loc_3A970
LDR             R3, [R4,#0x54]
CMP             R3, #0
BEQ             loc_3AB58
ADDS            R4, R3, R8
BEQ             loc_3AB58

loc_3A984
LDR             R3, [R4,#0x60]
CMP             R7, R3
BNE             loc_3A970
LDR             R3, [R4,#0x5C]
CMP             R5, R3
BNE             loc_3A970
MOV             R2, R5  ; n
ADD             R1, SP, #0x89C+s ; s2
LDR             R0, [R4,#0x58] ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_3A970
LDR             R0, =stru_6A6C0 ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3BA80
LDR             R2, [SP,#0x89C+var_88C]
LDR             R3, [SP,#0x89C+var_884]
ADD             R4, R2, #0x220
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R4  ; s1
MOV             R2, #0x20 ; ' ' ; n
ADD             R1, SP, #0x89C+s2 ; s2
BL              memcmp
CMP             R0, #0
MOVEQ           R3, #1
STREQ           R3, [SP,#0x89C+var_888]
BEQ             loc_3AA68
MOV             R2, #0x20 ; ' ' ; n
LDR             R1, =unk_6A6EC ; s2
ADD             R0, SP, #0x89C+s2 ; s1
BL              memcmp
CMP             R0, #0
BEQ             loc_3B5A0
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3AA64
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BCD8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BCD8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_3BCD8
MOV             R3, #0

loc_3AA64
STR             R3, [SP,#0x89C+var_888]

loc_3AA68
LDRB            R3, [R6,#0x118]
CMP             R3, #0
BEQ             loc_3AB14
MOV             R3, #byte_68BD8
LDR             R1, [R3,#(dword_68FD0 - 0x68BD8)]
LDR             R2, [R3,#(dword_691AC - 0x68BD8)]
SUB             R1, R1, #3
CMP             R1, #1
ADD             R2, R2, #1
STR             R2, [R3,#(dword_691AC - 0x68BD8)]
STR             R2, [R6,#0x150]
BHI             loc_3B7FC

loc_3AA9C
LDRB            R2, [R6,#0x11C]
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R2, #0
BEQ             loc_3BAC4
CMP             R3, #0
BNE             loc_3AAE4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3AAE4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3AB10

loc_3AAE4
LDR             R3, [SP,#0x89C+var_88C]
MOV             R2, #aStratumFromPoo ; "Stratum from pool %d requested work res"...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x89C+var_804 ; s
LDR             R3, [R3]
BL              snprintf
ADD             R1, SP, #0x89C+var_804
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3AB10
BL              sub_2E9E8

loc_3AB14
MOV             R3, #0
STRB            R3, [R6,#0x118]
B               loc_3A608

loc_3AB20
LDR             R12, =aTestWorkCurren ; "test_work_current"
MOVW            R3, #0x1612
STR             R3, [SP,#0x89C+var_898]
MOV             R3, #aCgminerC ; "cgminer.c"
MOV             R2, R5
ADD             R1, R4, #0x2B ; '+'
ADD             R0, SP, #0x89C+var_86C
STR             R12, [SP,#0x89C+var_89C]
BL              sub_254E8
LDR             R3, [SP,#0x89C+var_86C]
SUB             R3, R3, #1
STR             R3, [SP,#0x89C+var_86C]
B               loc_3A674

loc_3AB58
MOVW            R3, #0x15CC
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
STR             R3, [SP,#0x89C+var_89C]
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, =aBlockExists ; "block_exists"
MOV             R1, #1
MOV             R0, #0x68 ; 'h'
BL              sub_22A44
SUBS            R7, R0, #0
BEQ             loc_3BDEC
MOVW            R2, #:lower16:dword_766DC
ADD             R1, SP, #0x89C+s ; src
MOV             R4, R2
BL              strcpy
LDR             R3, [SP,#0x89C+var_87C]
MOV             R2, R4
MOVT            R2, #:upper16:dword_766DC
STR             R2, [SP,#0x89C+var_874]
LDR             R5, [R3,#(dword_6A6E0 - 0x6ABD0)]
LDR             R3, [R2]
CMP             R5, #0
STR             R3, [R7,#0x64]
ADD             R3, R3, #1
STR             R3, [R2]
BEQ             loc_3AE44
LDR             R3, [R5,#0x44]
LDR             R3, [R3,#0xC]
CMP             R3, #3
BLS             loc_3AE44
ADD             R10, R5, #0x44 ; 'D'
MOV             R9, #1

loc_3ABD4
MOV             R2, R10
MOV             R10, #0
MOV             R12, R10
MOV             LR, R10

loc_3ABE4
CMP             R9, #0
ADD             LR, LR, #1
BEQ             loc_3B8E4
LDR             R3, [R2,#8]
CMP             R3, #0
BEQ             loc_3B8D8
LDR             R1, [R5,#0x44]
LDR             R0, [R1,#0x14]
ADDS            R3, R3, R0
BEQ             loc_3B8D8
MOV             R1, #1
B               loc_3AC2C

loc_3AC14
LDR             R3, [R3,#8]
ADD             R1, R1, #1
CMP             R3, #0
BEQ             loc_3B8D0
ADDS            R3, R3, R0
BEQ             loc_3B8D0

loc_3AC2C
CMP             R1, R9
BNE             loc_3AC14
MOV             R0, R1

loc_3AC38
MOV             R8, R2
MOV             R2, R3

loc_3AC40
CMP             R1, #0
BNE             loc_3ACC0

loc_3AC48
CMP             R0, #0
CMPNE           R2, #0
BEQ             loc_3AD28
LDR             R3, [R2,#8]
CMP             R3, #0
LDRNE           R4, [R5,#0x44]
MOVEQ           R3, R1
LDRNE           R4, [R4,#0x14]
ADDNE           R3, R3, R4

loc_3AC6C
CMP             R12, #0
SUB             R0, R0, #1
MOVEQ           R12, R2
MOVEQ           R2, R3
BEQ             loc_3B864
LDR             R4, [R5,#0x44]
CMP             R2, #0
LDR             R4, [R4,#0x14]
SUB             R4, R2, R4
STR             R4, [R12,#8]
MOVEQ           R12, R2
MOVEQ           R2, R3
BEQ             loc_3AC40

loc_3ACA0
LDR             R4, [R5,#0x44]
LDR             R4, [R4,#0x14]
SUB             R4, R12, R4
MOV             R12, R2
MOV             R2, R3

loc_3ACB4
CMP             R1, #0
STR             R4, [R12,#4]
BEQ             loc_3AC48

loc_3ACC0
CMP             R2, #0
CMPNE           R0, #0
BNE             loc_3B874
CMP             R8, #0
BEQ             loc_3B8AC
LDR             R4, [R8,#8]
CMP             R4, #0
LDRNE           R3, [R5,#0x44]
LDRNE           R3, [R3,#0x14]
ADDNE           R4, R4, R3

loc_3ACE8
CMP             R12, #0
SUB             R1, R1, #1
BEQ             loc_3B85C
CMP             R8, #0
STREQ           R8, [R12,#8]
MOVEQ           R12, R8
MOVEQ           R8, R4
BEQ             loc_3AC40
LDR             R11, [R5,#0x44]
MOV             R3, R2
MOV             R2, R8
LDR             R11, [R11,#0x14]
SUB             R11, R8, R11
MOV             R8, R4
STR             R11, [R12,#8]
B               loc_3ACA0

loc_3AD28
CMP             R2, #0
BNE             loc_3ABE4
CMP             R12, #0
STRNE           R2, [R12,#8]
CMP             LR, #1
BLS             loc_3AD50
CMP             R10, #0
MOV             R9, R9,LSL#1
BNE             loc_3ABD4
MOV             R12, R10

loc_3AD50
LDR             R3, [R5,#0x44]
STR             R12, [R3,#0x10]
LDR             R3, [R5,#0x44]
LDR             R3, [R3,#0x14]
SUB             R10, R10, R3
LDR             R3, [SP,#0x89C+var_87C]
LDR             R1, [R10,#0x48]
STR             R10, [R3,#(dword_6A6E0 - 0x6ABD0)]
LDR             R3, [R10,#0x64]
CMP             R1, #0
STR             R3, [SP,#0x89C+var_880]
BEQ             loc_3BD9C
LDR             R2, [R10,#0x44]
ADD             R0, R10, #0x44 ; 'D'
LDR             R3, [R2,#0x14]
LDR             R12, [R2,#0x10]
SUB             R12, R12, R3
CMP             R10, R12
BEQ             loc_3BDC4

loc_3AD9C
LDR             R2, [R10,#0x4C]
ADD             R3, R1, R3
MOV             R5, R10
STR             R2, [R3,#8]
LDR             R4, [R10,#0x4C]

loc_3ADB0
LDR             R2, [R5,#0x44]
CMP             R4, #0
LDRNE           R3, [R10,#0x48]
LDRNE           R2, [R2,#0x14]
ADDNE           R4, R4, R2
STRNE           R3, [R4,#4]
LDRNE           R2, [R5,#0x44]
LDR             R1, [R10,#0x60]
LDR             R3, [R2,#4]
LDR             R2, [R2]
SUB             R3, R3, #1
AND             R1, R1, R3
ADD             R1, R1, R1,LSL#1
MOV             R3, R1,LSL#2
ADD             R2, R2, R3
LDR             R1, [R2,#4]
SUB             R1, R1, #1
STR             R1, [R2,#4]
LDR             R2, [R5,#0x44]
LDR             R2, [R2]
LDR             R1, [R2,R3]
CMP             R1, R0
LDREQ           R1, [R10,#0x54]
STREQ           R1, [R2,R3]
LDRD            R2, R3, [R10,#0x50]
CMP             R2, #0
STRNE           R3, [R2,#0x10]
LDRNE           R3, [R10,#0x54]
CMP             R3, #0
LDRNE           R2, [R10,#0x50]
STRNE           R2, [R3,#0xC]
LDR             R2, [R5,#0x44]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_3AE3C               ; ptr
MOV             R0, R10
BL              free

loc_3AE44               ; s
MOV             R0, R7
MOVW            R8, #0x79B9
BL              strlen
CMP             R0, #0xB
STR             R0, [SP,#0x89C+var_878]
MOV             LR, R0
BLS             loc_3BC58
MOVW            R2, #0xBEEF
MOVT            R8, #0x9E37
MOVT            R2, #0xFEED
ADD             R11, R7, #0xC
STR             R7, [SP,#0x89C+var_870]
MOV             R3, R8
MOV             R7, R2

loc_3AE7C
LDRB            R2, [R11,#-6]
SUB             LR, LR, #0xC
LDRB            R4, [R11,#-0xA]
CMP             LR, #0xB
LDRB            R9, [R11,#-7]
LDRB            R0, [R11,#-0xB]
LDRB            R12, [R11,#-2]
MOV             R2, R2,LSL#16
MOV             R4, R4,LSL#16
LDRB            R1, [R11,#-3]
ADD             R2, R2, R9,LSL#8
LDRB            R9, [R11,#-8]
ADD             R4, R4, R0,LSL#8
LDRB            R0, [R11,#-0xC]
MOV             R12, R12,LSL#16
LDRB            R10, [R11,#-5]
ADD             R2, R2, R9
LDRB            R9, [R11,#-9]
ADD             R12, R12, R1,LSL#8
ADD             R0, R4, R0
LDRB            R1, [R11,#-4]
LDRB            R4, [R11,#-1]
ADD             R2, R2, R10,LSL#24
ADD             R0, R0, R9,LSL#24
MOV             R10, R11
ADD             R1, R12, R1
ADD             R2, R2, R8
ADD             R11, R11, #0xC
ADD             R1, R1, R4,LSL#24
SUB             R0, R0, R2
ADD             R7, R1, R7
SUB             R0, R0, R7
SUB             R2, R2, R7
ADD             R3, R0, R3
EOR             R3, R3, R7,LSR#13
SUB             R1, R2, R3
SUB             R7, R7, R3
EOR             R1, R1, R3,LSL#8
SUB             R2, R7, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#13
SUB             R3, R3, R2
SUB             R1, R1, R2
EOR             R3, R3, R2,LSR#12
SUB             R1, R1, R3
SUB             R2, R2, R3
EOR             R1, R1, R3,LSL#16
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#5
SUB             R3, R3, R2
SUB             R8, R1, R2
EOR             R3, R3, R2,LSR#3
SUB             R8, R8, R3
SUB             R7, R2, R3
EOR             R8, R8, R3,LSL#10
SUB             R7, R7, R8
EOR             R7, R7, R8,LSR#15
BHI             loc_3AE7C
MOV             R1, R7
LDR             R7, [SP,#0x89C+var_870]

loc_3AF70
LDR             R0, [SP,#0x89C+var_878]
SUB             R2, LR, #1
ADD             LR, R1, R0
CMP             R2, #0xA ; switch 11 cases
LDRLS           PC, [PC,R2,LSL#2] ; switch jump
B               def_3AF80 ; jumptable 0003AF80 default case
jpt_3AF80 DCD loc_3B004 ; jump table for switch statement
DCD loc_3AFFC
DCD loc_3AFF4
DCD loc_3AFEC
DCD loc_3AFE4
DCD loc_3AFDC
DCD loc_3AFD4
DCD loc_3AFCC
DCD loc_3AFC4
DCD loc_3AFBC
DCD loc_3AFB4

loc_3AFB4               ; jumptable 0003AF80 case 10
LDRB            R2, [R10,#0xA]
ADD             LR, LR, R2,LSL#24

loc_3AFBC               ; jumptable 0003AF80 case 9
LDRB            R2, [R10,#9]
ADD             LR, LR, R2,LSL#16

loc_3AFC4               ; jumptable 0003AF80 case 8
LDRB            R2, [R10,#8]
ADD             LR, LR, R2,LSL#8

loc_3AFCC               ; jumptable 0003AF80 case 7
LDRB            R2, [R10,#7]
ADD             R8, R8, R2,LSL#24

loc_3AFD4               ; jumptable 0003AF80 case 6
LDRB            R2, [R10,#6]
ADD             R8, R8, R2,LSL#16

loc_3AFDC               ; jumptable 0003AF80 case 5
LDRB            R2, [R10,#5]
ADD             R8, R8, R2,LSL#8

loc_3AFE4               ; jumptable 0003AF80 case 4
LDRB            R2, [R10,#4]
ADD             R8, R8, R2

loc_3AFEC               ; jumptable 0003AF80 case 3
LDRB            R2, [R10,#3]
ADD             R3, R3, R2,LSL#24

loc_3AFF4               ; jumptable 0003AF80 case 2
LDRB            R2, [R10,#2]
ADD             R3, R3, R2,LSL#16

loc_3AFFC               ; jumptable 0003AF80 case 1
LDRB            R2, [R10,#1]
ADD             R3, R3, R2,LSL#8

loc_3B004               ; jumptable 0003AF80 case 0
LDRB            R2, [R10]
ADD             R3, R3, R2

def_3AF80               ; jumptable 0003AF80 default case
SUB             R3, R3, R8
SUB             R8, R8, LR
SUB             R3, R3, LR
STR             R7, [R7,#0x58]
EOR             R3, R3, LR,LSR#13
MOV             R0, R7  ; s
SUB             R8, R8, R3
SUB             R12, LR, R3
EOR             R2, R8, R3,LSL#8
SUB             R12, R12, R2
SUB             R3, R3, R2
EOR             R12, R12, R2,LSR#13
SUB             R3, R3, R12
SUB             R1, R2, R12
EOR             R3, R3, R12,LSR#12
SUB             R1, R1, R3
SUB             R2, R12, R3
EOR             R1, R1, R3,LSL#16
SUB             R2, R2, R1
SUB             R3, R3, R1
EOR             R2, R2, R1,LSR#5
SUB             R3, R3, R2
SUB             R1, R1, R2
EOR             R3, R3, R2,LSR#3
SUB             R4, R1, R3
SUB             R2, R2, R3
EOR             R3, R4, R3,LSL#10
SUB             R4, R2, R3
EOR             R4, R4, R3,LSR#15
STR             R4, [R7,#0x60]
BL              strlen
CMP             R5, #0
STR             R0, [R7,#0x5C]
BEQ             loc_3BB44
LDR             R3, [R5,#0x44]
MOV             R2, #0
STR             R2, [R7,#0x4C]
ADD             R8, R7, #0x44 ; 'D'
STR             R3, [R7,#0x44]
LDR             R2, [R5,#0x44]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R7,#0x48]
LDR             R3, [R5,#0x44]
LDR             R3, [R3,#0x10]
STR             R7, [R3,#8]
LDR             R3, [R5,#0x44]
STR             R8, [R3,#0x10]

loc_3B0D0
LDR             R2, [R5,#0x44]
MOV             R1, #0
LDR             R3, [R2,#0xC]
ADD             R3, R3, #1
STR             R3, [R2,#0xC]
LDR             R2, [R5,#0x44]
LDRD            R2, R3, [R2]
SUB             R3, R3, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
MOV             R3, R4,LSL#2
ADD             R2, R2, R3
LDR             R0, [R2,#4]
ADD             R0, R0, #1
STR             R0, [R2,#4]
LDR             R2, [R5,#0x44]
LDR             R2, [R2]
LDR             R2, [R2,R3]
STR             R1, [R7,#0x50]
STR             R2, [R7,#0x54]
LDR             R2, [R5,#0x44]
LDR             R2, [R2]
LDR             R1, [R2,R3]
ADD             R2, R2, R3
CMP             R1, #0
STRNE           R8, [R1,#0xC]
LDRNE           R2, [R5,#0x44]
LDRNE           R2, [R2]
ADDNE           R2, R2, R3
STR             R8, [R2]
LDR             R2, [R5,#0x44]
LDR             R2, [R2]
ADD             R2, R2, R3
LDRD            R2, R3, [R2,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_3B178
LDR             R3, [R7,#0x44]
LDR             R2, [R3,#0x24]
CMP             R2, #1
BNE             loc_3B640

loc_3B178
LDRB            R0, [R6,#0x48]
MOVW            R3, #0xFFFF
LDR             R7, [R6,#0x48]
MOV             R5, #0
LDR             R4, =dword_68750
RSB             R0, R0, #0x1D
MOV             R0, R0,LSL#3
REV             R7, R7
BIC             R7, R7, #0xFF000000
CMP             R0, #8
MOVLT           R0, #8
SUB             R2, R0, #0x20 ; ' '
RSB             R1, R0, #0x20 ; ' '
MOV             R2, R3,LSL R2
MOV             R0, R3,LSL R0
ORR             R1, R2, R3,LSR R1
BLX             sub_4A10C
VMOV            S15, R7
VMOV            D5, R0, R1
VCVT.F64.S32    D7, S15
VLDR            D6, [R4,#(dbl_68748 - 0x68750)]
VDIV.F64        D8, D5, D7
VCMP.F64        D8, D6
VMRS            APSR_nzcv, FPSCR
BNE             loc_3BD10

loc_3B1DC
ADD             R4, SP, #0x89C+var_804

loc_3B1E0
LDR             R3, [SP,#0x89C+var_880]
CMP             R3, #0
BEQ             loc_3B264
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3B264
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B23C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B23C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3B264

loc_3B23C
MOVW            R2, #:lower16:aDeletedBlockDF ; "Deleted block %d from database"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aDeletedBlockDF ; "Deleted block %d from database"
LDR             R3, [SP,#0x89C+var_880]
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #7
BL              sub_20F58

loc_3B264               ; rwlock
LDR             R0, =stru_6A6C0
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3BA84
LDR             R3, [SP,#0x89C+var_884]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, #stru_74504 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3BE24
LDR             R0, =stru_7451C ; rwlock
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_3BE4C
MOVW            R5, #:lower16:dword_755F0
MOVW            R7, #:lower16:byte_73324
MOVT            R5, #:upper16:dword_755F0
MOVT            R7, #:upper16:byte_73324
MOV             R0, R5
LDR             R8, =unk_6A6F0
BL              sub_239A4
ADD             R1, SP, #0x89C+s ; src
MOV             R0, R7  ; dest
BL              strcpy
LDR             R2, =aSetCurblock ; "set_curblock"
MOVW            R9, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R1, #0x1594
MOVT            R9, #:upper16:aCgminerC ; "cgminer.c"
MOV             R3, R9
SUB             R0, R8, #4
STR             R2, [SP,#0x89C+var_89C]
MOV             R2, #0x20 ; ' '
STR             R1, [SP,#0x89C+var_898]
ADD             R1, SP, #0x89C+s2
BL              sub_254E8
LDR             R3, [R5,#(dword_755F4 - 0x755F0)]
MOV             R1, #0x10624DD3
LDR             R2, [R5]
MOV             R0, R4  ; timer
SMULL           R10, R11, R3, R1
MOV             R3, R3,ASR#31
STR             R2, [SP,#0x89C+var_804]
RSB             R5, R3, R11,ASR#6
BL              localtime
MOV             R12, R0
MOVW            R2, #:lower16:a02d02d02d03d ; "[%02d:%02d:%02d.%03d]"
LDR             R3, [R12,#8]
MOVT            R2, #:upper16:a02d02d02d03d ; "[%02d:%02d:%02d.%03d]"
STR             R5, [SP,#0x89C+var_894]
MOV             R1, #0x20 ; ' ' ; maxlen
LDR             LR, [R12]
ADD             R0, R8, #0x1C ; s
STR             LR, [SP,#0x89C+var_898]
LDR             R12, [R12,#4]
STR             R12, [SP,#0x89C+var_89C]
BL              snprintf
LDR             R0, =stru_7451C ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3B810
MOV             R0, #stru_74504 ; mutex
BL              pthread_mutex_unlock
SUBS            R11, R0, #0
BNE             loc_3BE74
LDR             R3, [SP,#0x89C+var_884]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R3, R7
B               loc_3B394

loc_3B388
ADD             R11, R11, #1
CMP             R11, #0x39 ; '9'
BEQ             loc_3B3A0

loc_3B394
LDRB            R2, [R3],#1
CMP             R2, #0x30 ; '0'
BEQ             loc_3B388

loc_3B3A0
MOVW            R5, #:lower16:byte_74500
ADD             R1, R7, R11 ; src
MOV             R2, #8  ; n
LDR             R0, =dest ; dest
MOVT            R5, #:upper16:byte_74500
BL              strncpy
LDRB            R3, [R5]
MOV             R2, #0
LDR             R1, [SP,#0x89C+var_87C]
CMP             R3, R2
STRB            R2, [R1,#(byte_6A734 - 0x6ABD0)]
BNE             loc_3B3F8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, R2
BNE             loc_3B3F8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3B42C

loc_3B3F8
SUB             R8, R8, #0xC
MOVW            R3, #:lower16:byte_73324
MOVW            R2, #:lower16:aNewBlockSDiffS ; "New block: %s... diff %s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aNewBlockSDiffS ; "New block: %s... diff %s"
STR             R8, [SP,#0x89C+var_89C]
MOVT            R3, #:upper16:byte_73324
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #6
BL              sub_20F58

loc_3B42C
LDR             R3, [SP,#0x89C+var_880]
CMP             R3, #0
BEQ             loc_3B4A8
MOV             R3, #byte_68BD5
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3B4A8
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3B480
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B480
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3B4A8

loc_3B480
MOVW            R2, #:lower16:aDeletedBlockDF ; "Deleted block %d from database"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aDeletedBlockDF ; "Deleted block %d from database"
LDR             R3, [SP,#0x89C+var_880]
MOV             R0, R4  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R4
MOV             R0, #7
BL              sub_20F58

loc_3B4A8
MOVW            R0, #0x1627
LDR             R2, =aTestWorkCurren ; "test_work_current"
STR             R0, [SP,#0x89C+var_898]
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
LDR             R0, [SP,#0x89C+var_88C]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             R2, [SP,#0x89C+var_89C]
ADD             R1, SP, #0x89C+s2
MOV             R2, #0x20 ; ' '
ADD             R0, R0, #0x220
BL              sub_254E8
LDR             R3, [SP,#0x89C+var_874]
LDR             R3, [R3]
CMP             R3, #1
BEQ             loc_3AB14
MOVW            R2, #:lower16:byte_68BD8
LDRB            R1, [R6,#0x118]
MOVT            R2, #:upper16:byte_68BD8
LDR             R3, [R2,#(dword_691AC - 0x68BD8)]
CMP             R1, #0
ADD             R3, R3, #1
STR             R3, [R2,#(dword_691AC - 0x68BD8)]
STR             R3, [R6,#0x150]
BEQ             loc_3B9C0
LDRB            R2, [R6,#0x11C]
LDRB            R3, [R5]
CMP             R2, #0
BEQ             loc_3BC78
CMP             R3, #0
BNE             loc_3B548
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B548
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3B57C

loc_3B548
LDR             R3, [SP,#0x89C+var_88C]
MOVW            R2, #:lower16:aStratumFromPoo_0 ; "Stratum from pool %d detected new block"...
LDR             R12, [SP,#0x89C+var_86C]
MOVT            R2, #:upper16:aStratumFromPoo_0 ; "Stratum from pool %d detected new block"...
LDR             R3, [R3]

loc_3B55C               ; maxlen
MOV             R1, #0x800
MOV             R0, R4  ; s
STR             R12, [SP,#0x89C+var_89C]
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3B57C
BL              sub_2E9E8
MOV             R3, #1
STR             R3, [SP,#0x89C+var_888]
B               loc_3AB14

loc_3B58C
MOVT            R3, #0xFEED
MOV             R0, R7
MOV             R11, R5
ADD             R4, SP, #0x89C+s
B               loc_3A820

loc_3B5A0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B5DC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3B5DC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3B610

loc_3B5DC
LDR             R3, [SP,#0x89C+var_88C]
MOVW            R2, #:lower16:aPoolDNowUpToDa ; "Pool %d now up to date at height %d"
LDR             R12, [SP,#0x89C+var_86C]
MOVT            R2, #:upper16:aPoolDNowUpToDa ; "Pool %d now up to date at height %d"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x89C+var_804 ; s
LDR             R3, [R3]
STR             R12, [SP,#0x89C+var_89C]
BL              snprintf
ADD             R1, SP, #0x89C+var_804
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3B610
LDR             R2, =aTestWorkCurren ; "test_work_current"
MOVW            R12, #0x1659
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
ADD             R1, SP, #0x89C+s2
MOV             R0, R4
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STMEA           SP, {R2,R12}
MOV             R12, #1
MOV             R2, #0x20 ; ' '
STR             R12, [SP,#0x89C+var_888]
BL              sub_254E8
B               loc_3AA68

loc_3B640
LDR             R0, [R3,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R8, R0, #0
BEQ             loc_3BEC4
LDR             R3, [R7,#0x44]
MOV             R10, #0
LDR             R2, [R3,#4]
LDR             R0, [R3,#0xC]
LDR             R1, [R3,#8]
MOV             R2, R2,LSL#1
ADD             R1, R1, #1
SUB             R2, R2, #1
TST             R2, R0
MOVNE           R2, #1
MOVEQ           R2, R10
ADD             R2, R2, R0,LSR R1
STR             R2, [R3,#0x18]
LDR             R3, [R7,#0x44]
STR             R10, [R3,#0x1C]
LDR             R3, [R7,#0x44]
LDR             R4, [R3,#4]
CMP             R4, R10
BEQ             loc_3B794
MOV             R11, R10
STR             R10, [SP,#0x89C+var_878]
STR             R6, [SP,#0x89C+var_870]

loc_3B6B4
LDR             R2, [R3]
LDR             R5, [R2,R10]
CMP             R5, #0
BNE             loc_3B6F4
B               loc_3B778
off_3B6C8 DCD stru_6A6C0
off_3B6CC DCD unk_6A6EC
off_3B6D0 DCD dword_68750
off_3B6D4 DCD stru_7451C
off_3B6D8 DCD dest
off_3B6DC DCD aTestWorkCurren ; "test_work_current"
off_3B6E0 DCD aBlockExists ; "block_exists"
off_3B6E4 DCD unk_6A6F0
off_3B6E8 DCD aSetCurblock ; "set_curblock"

loc_3B6EC
LDR             R4, [R3,#4]
MOV             R5, R6

loc_3B6F4
LDR             R3, [R5,#0x1C]
MOV             R4, R4,LSL#1
LDR             R6, [R5,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R9, R8, R4,LSL#2
LDR             R3, [R9,#4]
ADD             R3, R3, #1
STR             R3, [R9,#4]
LDR             R2, [R7,#0x44]
LDR             R1, [R2,#0x18]
CMP             R3, R1
BLS             loc_3B74C
LDR             R3, [R2,#0x1C]
ADD             R3, R3, #1
STR             R3, [R2,#0x1C]
LDR             R3, [R7,#0x44]
LDR             R0, [R9,#4]
LDR             R1, [R3,#0x18]
BLX             __udivsi3
STR             R0, [R9,#8]

loc_3B74C
STR             R11, [R5,#0xC]
LDR             R3, [R8,R4,LSL#2]
STR             R3, [R5,#0x10]
LDR             R3, [R8,R4,LSL#2]
CMP             R3, #0
STRNE           R5, [R3,#0xC]
CMP             R6, #0
STR             R5, [R8,R4,LSL#2]
LDR             R3, [R7,#0x44]
BNE             loc_3B6EC
LDR             R4, [R3,#4]

loc_3B778
LDR             R2, [SP,#0x89C+var_878]
ADD             R10, R10, #0xC
ADD             R2, R2, #1
CMP             R2, R4
STR             R2, [SP,#0x89C+var_878]
BCC             loc_3B6B4

loc_3B790
LDR             R6, [SP,#0x89C+var_870]

loc_3B794               ; ptr
LDR             R0, [R3]
BL              free
LDR             R2, [R7,#0x44]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R7,#0x44]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R7,#0x44]
STR             R8, [R3]
LDR             R3, [R7,#0x44]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R7,#0x44]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]
B               loc_3B178

loc_3B7FC
LDR             R4, [R6,#0x104]
BL              sub_31FF4
CMP             R4, R0
BNE             loc_3AB14
B               loc_3AA9C

loc_3B810
BL              __errno_location
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
LDR             R0, =aSetCurblock ; "set_curblock"
MOVW            R1, #0x1596
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STR             R9, [SP,#0x89C+var_89C]
STR             R0, [SP,#0x89C+var_898]

loc_3B830
STR             R1, [SP,#0x89C+var_894]
MOV             R0, R4  ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4

loc_3B844
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3B85C
MOV             R12, R8
MOV             R8, R4

loc_3B864
SUBS            R10, R12, #0
MOVNE           R4, #0
BNE             loc_3ACB4
B               loc_3AC40

loc_3B874
LDR             R3, [R5,#0x44]
LDR             R4, [R3,#0x14]
RSB             R11, R4, #0
ADD             R3, R8, R11
ADD             R11, R2, R11
LDR             R3, [R3,#0x64]
LDR             R11, [R11,#0x64]
SUB             R11, R3, R11
CMP             R11, #0
BLE             loc_3B8B4
LDR             R3, [R2,#8]
CMP             R3, #0
ADDNE           R3, R3, R4
B               loc_3AC6C

loc_3B8AC
MOV             R4, R8
B               loc_3ACE8

loc_3B8B4
CMP             R8, #0
BEQ             loc_3B8AC
LDR             R3, [R8,#8]
CMP             R3, #0
ADDNE           R4, R3, R4
MOVEQ           R4, R3
B               loc_3ACE8

loc_3B8D0
MOV             R0, R9
B               loc_3AC38

loc_3B8D8
MOV             R0, R9
MOV             R1, #1
B               loc_3AC38

loc_3B8E4
MOV             R3, R2
MOV             R0, R9
MOV             R1, R9
B               loc_3AC38

loc_3B8F4
BL              __errno_location
LDR             LR, =aTestWorkCurren ; "test_work_current"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x89C+var_804 ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1617
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x89C+var_894]

loc_3B920               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x89C+var_804
B               loc_3B844

loc_3B930
BL              __errno_location
LDR             LR, =aTestWorkCurren ; "test_work_current"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1617

loc_3B948
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x89C+var_804
STR             R12, [SP,#0x89C+var_894]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
B               loc_3B920

loc_3B960
BL              __errno_location
LDR             LR, =aTestWorkCurren ; "test_work_current"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x161F
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x89C+var_804
STR             R12, [SP,#0x89C+var_894]
B               loc_3B920

loc_3B990
BL              __errno_location
LDR             LR, =aTestWorkCurren ; "test_work_current"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x161F
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x89C+var_804
STR             R12, [SP,#0x89C+var_894]
B               loc_3B920

loc_3B9C0
MOVW            R3, #:lower16:byte_74502
LDR             R2, [SP,#0x89C+var_88C]
MOVT            R3, #:upper16:byte_74502
LDRB            R3, [R3]
LDRB            R2, [R2,#0x384]
CMP             R3, #0
BEQ             loc_3BBE8
CMP             R2, #0
BNE             loc_3B57C
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3BA18
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BA18
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3B57C

loc_3BA18
MOVW            LR, #:lower16:aNewBlockDetect ; "New block detected on network before po"...
MOV             R12, R4
MOVT            LR, #:upper16:aNewBlockDetect ; "New block detected on network before po"...
LDM             LR!, {R0-R3} ; "New block detected on network before po"...
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "ed on network before pool notification"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "fore pool notification"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "cation"
STR             R0, [R12],#4
MOV             R0, #5
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R4
STRB            R3, [R12]
BL              sub_20F58
B               loc_3B57C

loc_3BA64
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aBlockExists ; "block_exists"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x15C8
B               loc_3B948

loc_3BA80
ADD             R4, SP, #0x89C+var_804

loc_3BA84
BL              __errno_location
LDR             R12, =aBlockExists ; "block_exists"
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #0x15EE
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0x89C+var_89C]

loc_3BAA8
STR             R0, [SP,#0x89C+var_894]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x89C+var_898]
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4
B               loc_3B844

loc_3BAC4
CMP             R3, #0
BNE             loc_3BAF4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BAF4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3AB10

loc_3BAF4
LDR             R2, [R6,#0x104]
MOVW            R1, #:lower16:aGbt ; "GBT "
LDRB            R0, [R6,#0x144]
MOVT            R1, #:upper16:aGbt ; "GBT "
MOVW            R3, #:lower16:(asc_4D5C4+4) ; ""
LDR             R12, [R2]
MOVW            R2, #:lower16:aSlongpollFromP ; "%sLONGPOLL from pool %d requested work "...
CMP             R0, #0
MOVT            R3, #:upper16:(asc_4D5C4+4) ; ""
ADD             R0, SP, #0x89C+var_804 ; s
MOVNE           R3, R1
MOVT            R2, #:upper16:aSlongpollFromP ; "%sLONGPOLL from pool %d requested work "...
STR             R12, [SP,#0x89C+var_89C]
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x89C+var_804
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
B               loc_3AB10

loc_3BB44
LDR             R3, [SP,#0x89C+var_87C]
MOV             R0, #0x2C ; ',' ; size
STR             R5, [R7,#0x4C]
STR             R5, [R7,#0x48]
STR             R7, [R3,#(dword_6A6E0 - 0x6ABD0)]
BL              malloc
CMP             R0, #0
STR             R0, [R7,#0x44]
BEQ             loc_3BEC4
MOV             R2, #0x2C ; ',' ; n
MOV             R1, R5  ; c
MOV             R8, R7
BL              memset
LDR             R3, [R8,#0x44]!
MOV             R12, #0x20 ; ' '
MOV             R1, #5
MOV             R2, #0x44 ; 'D'
MOV             R0, #0x180 ; size
STR             R8, [R3,#0x10]
LDR             R3, [R7,#0x44]
STR             R12, [R3,#4]
LDR             R3, [R7,#0x44]
STR             R1, [R3,#8]
LDR             R3, [R7,#0x44]
STR             R2, [R3,#0x14]
LDR             R9, [R7,#0x44]
BL              malloc
STR             R0, [R9]
LDR             R3, [R7,#0x44]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_3BEC4
MOV             R1, R5  ; c
MOV             R2, #0x180 ; n
BL              memset
LDR             R2, [R7,#0x44]
MOV             R3, #0xA0111FE1
MOV             R5, R7
STR             R3, [R2,#0x28]
B               loc_3B0D0

loc_3BBE8
CMP             R2, #0
BNE             loc_3B57C
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3BC24
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BC24
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3B57C

loc_3BC24
MOVW            LR, #:lower16:aNewBlockDetect_0 ; "New block detected on network"
MOV             R12, R4
MOVT            LR, #:upper16:aNewBlockDetect_0 ; "New block detected on network"
LDM             LR!, {R0-R3} ; "New block detected on network"
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "ed on network"
STM             R12!, {R0-R2}
MOV             R1, R4
MOV             R2, #0
MOV             R0, #5
STRH            R3, [R12]
BL              sub_20F58
B               loc_3B57C

loc_3BC58
MOVW            R3, #0xBEEF
MOVT            R8, #0x9E37
MOVT            R3, #0xFEED
LDR             LR, [SP,#0x89C+var_878]
MOV             R1, R3
MOV             R10, R7
MOV             R3, R8
B               loc_3AF70

loc_3BC78
CMP             R3, #0
BNE             loc_3BCA8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BCA8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3B57C

loc_3BCA8
LDR             R2, [R6,#0x104]
MOVW            R1, #:lower16:aGbt ; "GBT "
LDRB            R0, [R6,#0x144]
MOVW            R3, #:lower16:(asc_4D5C4+4) ; ""
MOVT            R1, #:upper16:aGbt ; "GBT "
MOVT            R3, #:upper16:(asc_4D5C4+4) ; ""
LDR             R12, [R2]
MOVW            R2, #:lower16:aSlongpollFromP_0 ; "%sLONGPOLL from pool %d detected new bl"...
CMP             R0, #0
MOVT            R2, #:upper16:aSlongpollFromP_0 ; "%sLONGPOLL from pool %d detected new bl"...
MOVNE           R3, R1
B               loc_3B55C

loc_3BCD8
LDR             R3, [SP,#0x89C+var_88C]
MOVW            R2, #:lower16:aStaleDataFromP ; "Stale data from pool %d at height %d"
LDR             R12, [SP,#0x89C+var_86C]
ADD             R0, SP, #0x89C+var_804 ; s
MOVT            R2, #:upper16:aStaleDataFromP ; "Stale data from pool %d at height %d"
MOV             R1, #0x800 ; maxlen
LDR             R3, [R3]
STR             R12, [SP,#0x89C+var_89C]
BL              snprintf
ADD             R1, SP, #0x89C+var_804
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_3AA68

loc_3BD10
LDR             R8, =unk_6A6F0
VMOV            R0, R1, D8
BLX             __fixunsdfdi
MOV             R3, #8  ; maxlen
STR             R5, [SP,#0x89C+var_89C] ; int
SUB             R2, R8, #0xC ; s
BL              sub_2AEF8
MOVW            R3, #:lower16:byte_74500
VSTR            D8, [R4,#(dbl_68748 - 0x68750)]
MOVT            R3, #:upper16:byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BD6C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3BD6C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3B1DC

loc_3BD6C
ADD             R4, SP, #0x89C+var_804
MOVW            R2, #:lower16:aNetworkDiffSet ; "Network diff set to %s"
SUB             R3, R8, #0xC
MOV             R0, R4  ; s
MOVT            R2, #:upper16:aNetworkDiffSet ; "Network diff set to %s"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
B               loc_3B1E0

loc_3BD9C
LDR             R4, [R10,#0x4C]
LDR             R2, [R10,#0x44]
CMP             R4, #0
BEQ             loc_3BE98
LDR             R3, [R2,#0x14]
ADD             R0, R10, #0x44 ; 'D'
LDR             R12, [R2,#0x10]
SUB             R12, R12, R3
CMP             R10, R12
BNE             loc_3BDDC

loc_3BDC4
ADD             R3, R1, R3
STR             R3, [R2,#0x10]
LDR             R1, [R10,#0x48]
CMP             R1, #0
LDREQ           R4, [R10,#0x4C]
BNE             loc_3BEB8

loc_3BDDC
LDR             R3, [SP,#0x89C+var_87C]
MOV             R5, R4
STR             R4, [R3,#(dword_6A6E0 - 0x6ABD0)]
B               loc_3ADB0

loc_3BDEC
MOVW            R12, #:lower16:aBlockExistsOom ; "block_exists OOM"
ADD             LR, SP, #0x89C+var_804
MOVT            R12, #:upper16:aBlockExistsOom ; "block_exists OOM"
LDM             R12!, {R0-R3} ; "block_exists OOM"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
ADD             R1, SP, #0x89C+var_804
MOV             R0, #3
MOV             R2, #1
STRB            R12, [LR]
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3BE24
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aSetCurblock ; "set_curblock"
MOVW            R0, #0x1591
STR             R1, [SP,#0x89C+var_89C]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
B               loc_3BAA8

loc_3BE4C
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aSetCurblock ; "set_curblock"
MOVW            R0, #0x1591
STR             R1, [SP,#0x89C+var_89C]
MOVT            R2, #:upper16:aWtfWrlockError ; "WTF WRLOCK ERROR ON LOCK! errno=%d in %"...
B               loc_3BAA8

loc_3BE74
BL              __errno_location
LDR             R3, [R0]
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R0, =aSetCurblock ; "set_curblock"
MOVW            R1, #0x1596
STR             R9, [SP,#0x89C+var_89C]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R0, [SP,#0x89C+var_898]
B               loc_3B830

loc_3BE98               ; ptr
LDR             R0, [R2]
MOV             R5, R4
BL              free
LDR             R0, [R10,#0x44] ; ptr
BL              free
LDR             R3, [SP,#0x89C+var_87C]
STR             R4, [R3,#(dword_6A6E0 - 0x6ABD0)]
B               loc_3AE3C

loc_3BEB8
LDR             R3, [R10,#0x44]
LDR             R3, [R3,#0x14]
B               loc_3AD9C

loc_3BEC4               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_3A5D0




; int __fastcall sub_3BECC(_DWORD *)
sub_3BECC

timeout= -0xA7C
var_A78= -0xA78
var_A74= -0xA74
var_A70= -0xA70
var_A6C= -0xA6C
var_A68= -0xA68
var_A64= -0xA64
var_A5C= -0xA5C
var_A58= -0xA58
var_A54= -0xA54
var_A50= -0xA50
var_A4C= -0xA4C
timer= -0xA48
var_A44= -0xA44
ptr= -0xA3C
var_A38= -0xA38
s2= -0xA34
var_A30= -0xA30
s= -0xA28
var_A18= -0xA18
var_A04= -0xA04
var_9E4= -0x9E4
var_9C0= -0x9C0
var_984= -0x984
readfds= -0x980
var_900= -0x900
var_8A4= -0x8A4
var_804= -0x804
var_C= -0xC

PUSH            {R4-R11,LR}
MOV             R8, R0
VPUSH           {D8-D9}
SUB             SP, SP, #0xA70
SUB             SP, SP, #0xC
MOVW            R9, #0xBAC6
BL              pthread_self
BL              pthread_detach
MOVW            R12, #:lower16:byte_68BD8
MOVW            R2, #:lower16:aDRstratum ; "%d/RStratum"
MOVT            R12, #:upper16:byte_68BD8
LDR             R3, [R8]
STR             R12, [SP,#0xA7C+var_A58]
MOV             R12, #0x112410D
ADD             R0, SP, #0xA7C+s ; s
MOVT            R2, #:upper16:aDRstratum ; "%d/RStratum"
MOV             R1, #0x10 ; maxlen
STR             R12, [SP,#0xA7C+var_A54]
MOVW            R10, #0xBEF3
BL              snprintf
MOVW            R3, #0xF76D
ADD             R0, SP, #0xA7C+s
MOVT            R3, #7
VLDR            D9, =60.0
STR             R3, [SP,#0xA7C+var_A50]
MOVT            R9, #0x9F49
MOVT            R10, #0xFEED
BL              sub_250A8

loc_3BF40
LDRB            R3, [R8,#0x69]
MOV             R0, R8
CMP             R3, #0
BNE             loc_3C044

loc_3BF50
BL              sub_23F28
CMP             R0, #0
BEQ             loc_3C05C

loc_3BF5C
ADD             R3, SP, #0xA7C+var_984
ADD             R1, SP, #0xA7C+readfds.__fds_bits+0x7C
MOV             R2, #0

loc_3BF68
STR             R2, [R3,#4]!
CMP             R1, R3
BNE             loc_3BF68
LDR             R3, [R8,#0x24C]
ADD             R0, SP, #0xA7C+var_C
STR             R2, [SP,#0xA7C+var_A30.tv_usec]
MOV             R2, #0x5A ; 'Z'
STR             R2, [SP,#0xA7C+var_A30]
ADD             R0, R0, #8
CMP             R3, #0
ADD             R2, R3, #0x1F
MOVGE           R2, R3
RSBS            R1, R3, #0
MOV             R2, R2,ASR#5
AND             R1, R1, #0x1F
AND             R3, R3, #0x1F
ADD             R2, R0, R2,LSL#2
RSBPL           R3, R1, #0
MOV             R12, #1
LDR             R1, [R2,#-0x97C]
MOV             R0, R8
ORR             R3, R1, R12,LSL R3
STR             R3, [R2,#-0x97C]
BL              sub_23F28
SUBS            R3, R0, #0 ; exceptfds
BNE             loc_3BFF4
LDR             R0, [R8,#0x24C]
ADD             R2, SP, #0xA7C+var_A30
STR             R2, [SP,#0xA7C+timeout] ; timeout
ADD             R1, SP, #0xA7C+readfds ; readfds
MOV             R2, R3  ; writefds
ADD             R0, R0, #1 ; nfds
BL              select
CMP             R0, #0
BLE             loc_3C564

loc_3BFF4
MOV             R0, R8
BL              sub_24858
SUBS            R4, R0, #0
BEQ             loc_3C114
MOV             R0, R8
BL              sub_32400
MOV             R1, R4
MOV             R0, R8
BL              sub_296BC
SUBS            R1, R0, #0
BEQ             loc_3C260

loc_3C020
LDRB            R3, [R8,#0x2A8]
CMP             R3, #0
BNE             loc_3C350

loc_3C02C               ; ptr
MOV             R0, R4
BL              free
LDRB            R3, [R8,#0x69]
MOV             R0, R8
CMP             R3, #0
BEQ             loc_3BF50

loc_3C044
BL              sub_24340

loc_3C048
MOV             R0, #0
ADD             SP, SP, #0xA70
ADD             SP, SP, #0xC
VPOP            {D8-D9}
POP             {R4-R11,PC}

loc_3C05C
MOV             R0, R8
BL              sub_32424
CMP             R0, #0
BNE             loc_3BF5C
MOV             R0, R8
MOVW            R5, #:lower16:off_67ED8
BL              sub_24340
MOV             R0, R8
MOVT            R5, #:upper16:off_67ED8
BL              sub_33DDC
MOV             R0, R8
LDR             R4, =stru_6910C
BL              sub_33AB4
MOV             R0, R8
LDR             R6, [SP,#0xA7C+var_A58]
BL              sub_32424
CMP             R0, #0
BNE             loc_3C4A0

loc_3C0A4
LDR             R3, [R8,#0x64]
CMP             R3, #0
BEQ             loc_3C0CC
BL              sub_31FF4
CMP             R8, R0
BEQ             loc_3C4A0
LDR             R3, [R6,#(dword_68FD0 - 0x68BD8)]
SUB             R3, R3, #3
CMP             R3, #1
BLS             loc_3C4A0

loc_3C0CC               ; mutex
MOV             R0, R4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3C71C
MOV             R1, R4  ; mutex
LDR             R0, =cond ; cond
BL              pthread_cond_wait
MOV             R0, R4  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3C738
LDR             R3, [R5] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R8
BL              sub_32424
CMP             R0, #0
BEQ             loc_3C0A4
B               loc_3C4A0

loc_3C114
MOV             R3, #byte_74500
LDRB            R3, [R3]

loc_3C120
CMP             R3, #0
BNE             loc_3C13C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3C3A4

loc_3C13C
ADD             R11, SP, #0xA7C+var_804
MOV             R2, #aStratumConnect_0 ; "Stratum connection to pool %d interrupt"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R3, [R8]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3C168
MOVW            R3, #:lower16:dword_755D0
LDR             R1, [R8,#0x80]
MOVT            R3, #:upper16:dword_755D0
ADD             R4, R8, #0xD4
LDR             R2, [R3]
MOV             R0, R4  ; mutex
ADD             R1, R1, #1
STR             R1, [R8,#0x80]
ADD             R2, R2, #1
STR             R2, [R3]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3C63C
ADD             R5, R8, #0xEC
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_3C68C
MOV             R0, R4  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3C6BC
MOV             R0, R5  ; rwlock
LDR             R4, [R8,#0x27C]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3C6EC
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
CMP             R4, #0
BEQ             loc_3C254
MOV             R3, #byte_75684
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C254

loc_3C200
MOV             R0, R8
BL              sub_33AB4
BL              sub_31FF4
CMP             R8, R0
BEQ             loc_3C634

loc_3C214
MOV             R0, R8
BL              sub_28690
CMP             R0, #0
BNE             loc_3BF40

loc_3C224
MOV             R0, R8
BL              sub_3466C
LDRB            R3, [R8,#0x69]
CMP             R3, #0
BNE             loc_3C048
MOVW            R0, #0x1388
BL              sub_23B9C
MOV             R0, R8
BL              sub_28690
CMP             R0, #0
BEQ             loc_3C224
B               loc_3BF40

loc_3C254
MOV             R0, R8
BL              sub_33DDC
B               loc_3C200

loc_3C260
ADD             R2, SP, #0xA7C+var_900
MOV             R0, R4
BL              sub_47258
SUBS            R3, R0, #0
STR             R3, [SP,#0xA7C+var_A5C]
BEQ             loc_3C3BC
MOV             R1, #aResult ; "result"
BL              sub_480FC
LDR             R5, [SP,#0xA7C+var_A5C]
MOVW            R1, #:lower16:(aSharelogFwrite+0x10) ; "error"
STR             R0, [SP,#0xA7C+var_A4C]
MOVT            R1, #:upper16:(aSharelogFwrite+0x10) ; "error"
MOV             R0, R5
BL              sub_480FC
MOVW            R1, #:lower16:aId_0 ; "id"
STR             R0, [SP,#0xA7C+timer]
MOVT            R1, #:upper16:aId_0 ; "id"
MOV             R0, R5
BL              sub_480FC
SUBS            R5, R0, #0
BEQ             loc_3C4C8
LDR             R3, [R5]
CMP             R3, #7
BEQ             loc_3C4C8
MOVW            R1, #:lower16:aVersionRolling ; "version-rolling.mask"
LDR             R0, [SP,#0xA7C+var_A4C]
MOVT            R1, #:upper16:aVersionRolling ; "version-rolling.mask"
BL              sub_480FC
CMP             R0, #0
BEQ             loc_3C754

loc_3C2DC
LDR             R3, [SP,#0xA7C+var_A5C]
LDR             R3, [R3,#4]
CMN             R3, #1
BEQ             loc_3C418

loc_3C2EC
LDR             R3, [SP,#0xA7C+var_A5C]
DMB             ISH
ADD             R3, R3, #4

loc_3C2F8
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_3C2F8
CMP             R2, #0
BNE             loc_3C418
LDR             R0, [SP,#0xA7C+var_A5C]
BL              sub_48A34
B               loc_3C418
dbl_3C320 DCFD 60.0
off_3C328 DCD stru_6910C
off_3C32C DCD cond
off_3C330 DCD aStratumRthread ; "stratum_rthread"
off_3C334 DCD aSupportsResume ; "supports_resume"
off_3C338 DCD aWaitLpcurrent ; "wait_lpcurrent"
off_3C33C DCD aReject   ; "reject"
off_3C340 DCD aShareResult ; "share_result"
off_3C344 DCD dbl_68720
off_3C348 DCD stru_690F0
off_3C34C DCD aParseStratumRe ; "parse_stratum_response"

loc_3C350
BL              sub_2FD8C
ADD             R11, SP, #0xA7C+var_C
MOV             R3, R0
MOV             R2, #0
MOV             R1, R3
STRB            R2, [R8,#0x2A8]
MOV             R0, R8
ADD             R11, R11, #8
STR             R3, [SP,#0xA7C+var_804]
BL              sub_360B0
LDR             R0, [R11,#-0x800]!
MOV             R3, #1
STRB            R3, [R0,#0x118]
BL              sub_3A5D0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOV             R0, R11
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1DB1
LDR             R2, =aStratumRthread ; "stratum_rthread"
BL              sub_2CBA8
B               loc_3C02C

loc_3C3A4
MOV             R3, #dword_67DB4

loc_3C3AC
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_3C13C
B               loc_3C168

loc_3C3BC
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C3E4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3C5EC

loc_3C3E4
ADD             R1, SP, #0xA7C+var_8A4
ADD             R11, SP, #0xA7C+var_804
MOVW            R2, #:lower16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
STR             R1, [SP,#0xA7C+timeout]
MOVT            R2, #:upper16:aJsonDecodeFail ; "JSON decode failed(%d): %s"
MOV             R1, #0x800 ; maxlen
LDR             R3, [SP,#0xA7C+var_900]
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3C418
MOV             R1, R4
MOV             R0, R8
BL              sub_23FF8
CMP             R0, #0
BNE             loc_3C020
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C468
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C468
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3C02C

loc_3C468
ADD             R11, SP, #0xA7C+var_804
MOVW            R2, #:lower16:aUnknownStratum ; "Unknown stratum msg: %s"
MOV             R0, R11 ; s
MOVT            R2, #:upper16:aUnknownStratum ; "Unknown stratum msg: %s"
MOV             R3, R4
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58
B               loc_3C02C

loc_3C498
MOVW            R0, #0x1388
BL              sub_23B9C

loc_3C4A0
MOV             R0, R8
BL              sub_28690
CMP             R0, #0
BNE             loc_3BF5C
MOV             R0, R8
BL              sub_3466C
LDRB            R3, [R8,#0x69]
CMP             R3, #0
BEQ             loc_3C498
B               loc_3C048

loc_3C4C8
LDR             R0, [SP,#0xA7C+timer]
CMP             R0, #0
BEQ             loc_3C604
MOV             R1, #3
BL              sub_45074
MOV             R5, R0

loc_3C4E0
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C51C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C51C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3C548

loc_3C51C
ADD             R11, SP, #0xA7C+var_804
MOV             R2, #aJsonRpcNonMeth ; "JSON-RPC non method decode failed: %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
MOV             R3, R5
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3C548               ; ptr
MOV             R0, R5
BL              free
LDR             R3, [SP,#0xA7C+var_A5C]
LDR             R3, [R3,#4]
CMN             R3, #1
BNE             loc_3C2EC
B               loc_3C418

loc_3C564
MOVW            R3, #:lower16:byte_68BD5
MOVW            R4, #:lower16:byte_74500
MOVT            R3, #:upper16:byte_68BD5
MOVT            R4, #:upper16:byte_74500
LDRB            R2, [R3]
LDRB            R3, [R4]
CMP             R2, #0
BEQ             loc_3C120
CMP             R3, #0
BNE             loc_3C5B4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3C5B4
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #6
BLE             loc_3C3AC

loc_3C5B4
ADD             R11, SP, #0xA7C+var_804
MOVW            R2, #:lower16:aStratumSelectF ; "Stratum select failed on pool %d with v"...
LDR             R3, [R8]
MOVT            R2, #:upper16:aStratumSelectF ; "Stratum select failed on pool %d with v"...
STR             R0, [SP,#0xA7C+timeout]
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
LDRB            R3, [R4]
B               loc_3C120

loc_3C5EC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3C418
B               loc_3C3E4

loc_3C604               ; size
MOV             R0, #0x11
BL              malloc
SUBS            R5, R0, #0
BEQ             loc_3C4E0
MOVW            R12, #:lower16:aUnknownReason ; "(unknown reason)"
MOV             LR, R5
MOVT            R12, #:upper16:aUnknownReason ; "(unknown reason)"
LDM             R12!, {R0-R3} ; "(unknown reason)"
LDR             R12, [R12] ; ""
STM             LR!, {R0-R3}
STRB            R12, [LR]
B               loc_3C4E0

loc_3C634
BL              sub_2E9E8
B               loc_3C214

loc_3C63C
BL              __errno_location
LDR             LR, =aSupportsResume ; "supports_resume"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D3B

loc_3C654
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
ADD             R0, SP, #0xA7C+var_804 ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0xA7C+var_A74]

loc_3C668               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0xA7C+var_804

loc_3C674
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3C68C
BL              __errno_location
LDR             LR, =aSupportsResume ; "supports_resume"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D3B
MOVW            R2, #:lower16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRdlockError ; "WTF RDLOCK ERROR ON LOCK! errno=%d in %"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0xA7C+var_804
STR             R12, [SP,#0xA7C+var_A74]
B               loc_3C668

loc_3C6BC
BL              __errno_location
LDR             LR, =aSupportsResume ; "supports_resume"
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D3B

loc_3C6D4
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0xA7C+var_804
STR             R12, [SP,#0xA7C+var_A74]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_3C668

loc_3C6EC
BL              __errno_location
LDR             LR, =aSupportsResume ; "supports_resume"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1D3D
MOVW            R2, #:lower16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfRwlockError ; "WTF RWLOCK ERROR ON UNLOCK! errno=%d in"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0xA7C+var_804
STR             R12, [SP,#0xA7C+var_A74]
B               loc_3C668

loc_3C71C
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aWaitLpcurrent ; "wait_lpcurrent"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x26B9
B               loc_3C654

loc_3C738
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
LDR             LR, =aWaitLpcurrent ; "wait_lpcurrent"
LDR             R3, [R0]
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x26BB
B               loc_3C6D4

loc_3C754
MOVW            R1, #:lower16:aMiningConfigur ; "mining.configure"
MOV             R0, R4  ; haystack
MOVT            R1, #:upper16:aMiningConfigur ; "mining.configure"
BL              strstr
CMP             R0, #0
BNE             loc_3C2DC
MOVW            R1, #:lower16:aMiningSetVersi ; "mining.set_version_mask"
MOV             R0, R4  ; haystack
MOVT            R1, #:upper16:aMiningSetVersi ; "mining.set_version_mask"
BL              strstr
CMP             R0, #0
BNE             loc_3C2DC
MOV             R0, R5
BL              sub_4888C
MOV             R5, R0
LDR             R0, =stru_690F0 ; mutex
STR             R5, [SP,#0xA7C+s2]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3D0B0
LDR             R1, [SP,#0xA7C+var_A54]
BIC             R3, R5, #0xFF0000
BIC             R3, R3, #0xFF00
AND             R2, R5, #0xFF0000
AND             R5, R5, #0xFF00
ADD             R3, R3, R1
LDR             R1, [SP,#0xA7C+var_A58]
ADD             R3, R3, R2
LDR             R2, [SP,#0xA7C+var_A50]
ADD             R3, R3, R5
LDR             R11, [R1,#(dword_69108 - 0x68BD8)]
EOR             R3, R3, R2
SUB             R2, R9, R3
SUB             R1, R10, R3
EOR             R2, R2, R3,LSL#8
CMP             R11, #0
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#13
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#12
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSL#16
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#5
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#3
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R3, R2, R3,LSL#10
SUB             R2, R1, R3
EOR             R3, R2, R3,LSR#15
BEQ             loc_3D0C8
LDR             R5, [R11]
MOV             R1, #0xC
LDM             R5, {R0,R2}
SUB             R2, R2, #1
STR             R0, [SP,#0xA7C+ptr]
AND             R2, R2, R3
MUL             R2, R1, R2
LDR             R2, [R0,R2]
CMP             R2, #0
BEQ             loc_3D0C8
LDR             R1, [R5,#0x14]
RSB             R6, R1, #0
STR             R1, [SP,#0xA7C+var_A38]
ADDS            R7, R2, R6
BEQ             loc_3D0C8
STR             R10, [SP,#0xA7C+var_A44]
MOV             R10, R9
MOV             R9, R5
MOV             R5, R4
MOV             R4, R3
B               loc_3C8A0

loc_3C88C
LDR             R7, [R7,#0x10]
CMP             R7, #0
BEQ             loc_3D0BC
ADDS            R7, R7, R6
BEQ             loc_3D0BC

loc_3C8A0
LDR             R2, [R7,#0x1C]
CMP             R4, R2
BNE             loc_3C88C
LDR             R2, [R7,#0x18] ; n
CMP             R2, #4
BNE             loc_3C88C
ADD             R1, SP, #0xA7C+s2 ; s2
LDR             R0, [R7,#0x14] ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_3C88C
LDR             R3, [R7,#4]
MOV             R4, R5
MOV             R5, R9
MOV             R9, R10
LDR             R10, [SP,#0xA7C+var_A44]
CMP             R3, #0
BEQ             loc_3D394
LDR             R2, [R5,#0x10]
ADD             R6, R2, R6
CMP             R7, R6
BEQ             loc_3D3EC

loc_3C8F8
LDR             R2, [R5,#0x14]
LDR             R1, [R7,#8]
ADD             R3, R3, R2
STR             R1, [R3,#8]

loc_3C908
LDR             R2, [SP,#0xA7C+var_A58]
LDR             R3, [R7,#8]
LDR             R2, [R2,#(dword_69108 - 0x68BD8)]
CMP             R3, #0
LDR             R1, [R2]
LDRNE           R0, [R1,#0x14]
LDRNE           R1, [R7,#4]
ADDNE           R3, R3, R0
MOV             R0, #0xC
STRNE           R1, [R3,#4]
LDRNE           R1, [R2]
LDR             R12, [R7,#0x1C]
LDR             R3, [R1,#4]
LDR             R1, [R1]
SUB             R3, R3, #1
AND             R3, R3, R12
MUL             R3, R0, R3
ADD             R1, R1, R3
LDR             R0, [R1,#4]
SUB             R0, R0, #1
STR             R0, [R1,#4]
LDR             R1, [R2]
LDR             R1, [R1]
LDR             R0, [R1,R3]
CMP             R0, R7
LDREQ           R0, [R7,#0x10]
STREQ           R0, [R1,R3]
LDR             R1, [R7,#0xC]
LDR             R3, [R7,#0x10]
CMP             R1, #0
STRNE           R3, [R1,#0x10]
LDRNE           R3, [R7,#0x10]
CMP             R3, #0
LDRNE           R1, [R7,#0xC]
STRNE           R1, [R3,#0xC]
LDR             R2, [R2]
LDR             R3, [R2,#0xC]
SUB             R3, R3, #1
STR             R3, [R2,#0xC]

loc_3C9A4
LDR             R3, [R8,#0x2DC]
LDR             R0, =stru_690F0 ; mutex
SUB             R3, R3, #1
STR             R3, [R8,#0x2DC]
BL              pthread_mutex_unlock
SUBS            R6, R0, #0
BNE             loc_3D3BC
MOVW            R3, #:lower16:off_67ED8
MOVW            R11, #:lower16:byte_68BD5
MOVT            R3, #:upper16:off_67ED8
MOVT            R11, #:upper16:byte_68BD5
STR             R3, [SP,#0xA7C+ptr]
LDR             R3, [R3] ; sub_21C98
STR             R11, [SP,#0xA7C+var_A38]
BLX             R3      ; sub_21C98
MOV             R0, R6  ; timer
LDR             R5, [R7,#0x24]
BL              time
LDR             R2, [R7,#0x30]
LDRB            R3, [R11]
SUB             R0, R0, R2
CMP             R0, #0
ORRGT           R3, R3, #1
CMP             R3, #0
BEQ             loc_3D35C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CA44
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CA44
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3D35C

loc_3CA44
LDR             R3, [R5,#0x104]
ADD             R11, SP, #0xA7C+var_804
MOVW            R2, #:lower16:aPoolDStratumSh_1 ; "Pool %d stratum share result lag time %"...
STR             R0, [SP,#0xA7C+timeout]
MOVT            R2, #:upper16:aPoolDStratumSh_1 ; "Pool %d stratum share result lag time %"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R3, [R3]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3CA78
LDR             R3, [R5,#0xDC]
MOV             R2, R11
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804]
LDR             R3, [R5,#0xD8]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+4]
LDR             R3, [R5,#0xD4]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+8]
LDR             R3, [R5,#0xD0]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0xC]
LDR             R3, [R5,#0xCC]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0x10]
LDR             R3, [R5,#0xC8]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0x14]
LDR             R3, [R5,#0xC4]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0x18]
LDR             R3, [R5,#0xC0]
REV             R3, R3
STR             R3, [SP,#0xA7C+var_804+0x1C]
B               loc_3CAEC

loc_3CAE0
ADD             R6, R6, #1
CMP             R6, #0x1D
BEQ             loc_3CAF8

loc_3CAEC
LDRB            R3, [R2],#1
CMP             R3, #0
BEQ             loc_3CAE0

loc_3CAF8
ADD             R3, SP, #0xA7C+var_C
VLDR            D0, [R5,#0x178]
ADD             R3, R3, #8
ADD             R3, R3, R6
LDR             R3, [R3,#-0x800]
REV             R6, R3
BL              round
VMOV            R0, R1, D0
BLX             __fixunsdfdi
MOV             R3, #0
STRD            R0, R1, [SP,#0xA7C+var_A44]
ADD             R2, SP, #0xA7C+var_9E4 ; s
LDRD            R0, R1, [R5,#0xE8] ; int
STR             R3, [SP,#0xA7C+timeout] ; int
MOV             R3, #0x10 ; maxlen
BL              sub_2AEF8
LDRB            R0, [R5,#0x11B]
MOV             R1, #aBlock ; " BLOCK!"
MOV             R3, #(asc_4D5C4+4) ; ""
MOVW            R2, #:lower16:a08lxDiffSLluS ; "%08lx Diff %s/%llu%s"
CMP             R0, #0
MOVT            R2, #:upper16:a08lxDiffSLluS ; "%08lx Diff %s/%llu%s"
MOVNE           R12, R1
LDRD            R0, R1, [SP,#0xA7C+var_A44]
MOVEQ           R12, R3
MOV             R3, R6
STR             R12, [SP,#0xA7C+var_A6C]
STRD            R0, R1, [SP,#0xA7C+var_A74]
ADD             R1, SP, #0xA7C+var_9E4
STR             R1, [SP,#0xA7C+timeout]
ADD             R0, SP, #0xA7C+var_9C0 ; s
MOV             R1, #0x40 ; '@' ; maxlen
BL              snprintf
LDR             R0, [R5,#0x100]
LDR             R6, [R5,#0x104]
BL              sub_31B04
LDR             R3, [SP,#0xA7C+var_A4C]
LDR             R2, [R0,#0x24]
CMP             R3, #0
STR             R2, [SP,#0xA7C+var_A44]
BEQ             loc_3CBC4
LDR             R3, [R3]
CMP             R3, #5
BEQ             loc_3D4E4
LDRB            R2, [R5,#0x144]
CMP             R2, #0
BEQ             loc_3CBC4
CMP             R3, #7
BEQ             loc_3D4E4

loc_3CBC4               ; mutex
MOV             R0, #stru_766C4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3D4C0
LDR             LR, [SP,#0xA7C+var_A44]
MOV             R0, #qword_767E8
MOVW            R1, #:lower16:dbl_73390
LDR             R3, [R0]
MOVT            R1, #:upper16:dbl_73390
LDR             R2, [LR,#0x28]
LDR             R12, [R0,#(qword_767E8+4 - 0x767E8)]
VLDR            D5, [R1]
ADD             R2, R2, #1
STR             R2, [LR,#0x28]
ADDS            R2, R3, #1
LDR             R3, [R6,#0x10]
ADC             R12, R12, #0
STR             R2, [R0]
LDR             R2, [R6,#0x14]
ADDS            R3, R3, #1
STR             R12, [R0,#(qword_767E8+4 - 0x767E8)]
STR             R3, [R6,#0x10]
MOVW            R0, #:lower16:stru_766C4
ADC             R3, R2, #0
MOVT            R0, #:upper16:stru_766C4 ; mutex
STR             R3, [R6,#0x14]
VLDR            D6, [LR,#0xD0]
VLDR            D7, [R5,#0x178]
VADD.F64        D7, D6, D7
VSTR            D7, [LR,#0xD0]
VLDR            D7, [R5,#0x178]
VLDR            D6, [R6,#0x50]
LDR             R3, [R6,#0x18]
VADD.F64        D5, D5, D7
VADD.F64        D7, D6, D7
ADD             R3, R3, #1
STR             R3, [R6,#0x18]
VSTR            D5, [R1]
VSTR            D7, [R6,#0x50]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3D464
LDR             R3, [SP,#0xA7C+ptr]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [SP,#0xA7C+var_A38]
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3CD04
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CCCC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CCCC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3CD04

loc_3CCCC
MOVW            R12, #:lower16:aProofOfWorkRes ; "PROOF OF WORK RESULT: false (booooo)"
MOV             LR, R11
MOVT            R12, #:upper16:aProofOfWorkRes ; "PROOF OF WORK RESULT: false (booooo)"
LDM             R12!, {R0-R3} ; "PROOF OF WORK RESULT: false (booooo)"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "SULT: false (booooo)"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "ooo)"
STR             R0, [LR],#4
MOV             R0, #7
STRB            R1, [LR]
MOV             R1, R11
BL              sub_20F58

loc_3CD04
MOV             R3, #byte_73378
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CF24
MOV             R3, #byte_7559C
LDRB            R12, [R3]
CMP             R12, #0
BNE             loc_3CF24
LDR             R3, =aReject ; "reject"
MOV             R2, #0x1D ; n
STR             R12, [SP,#0xA7C+ptr]
LDM             R3, {R0,R1} ; "reject"
STR             R0, [SP,#0xA7C+var_9E4]
ADD             R0, SP, #0xA7C+var_9E4+7 ; s
MOV             R3, R1,LSR#16
STRH            R1, [SP,#0xA7C+var_9E4+4]
MOV             R1, R12 ; c
STRB            R3, [SP,#0xA7C+var_9E4+6]
BL              memset
MOVW            R3, #:lower16:dword_733CC
LDRB            R2, [SP,#0xA7C+ptr]
MOVT            R3, #:upper16:dword_733CC
LDR             R3, [R3]
STRB            R2, [SP,#0xA7C+var_A04]
CMP             R3, #1
LDRBLE          R3, [SP,#0xA7C+ptr]
STRBLE          R3, [SP,#0xA7C+var_A18]
BLE             loc_3CD98
LDR             R3, [R5,#0x104]
MOV             R2, #(aLostDSharesDue+0x2C) ; format
MOV             R1, #0x14 ; maxlen
ADD             R0, SP, #0xA7C+var_A18 ; s
LDR             R3, [R3]
BL              snprintf

loc_3CD98
LDRB            R3, [R5,#0x144]
CMP             R3, #0
BNE             loc_3CDB8
MOVW            R1, #:lower16:aRejectReason ; "reject-reason"
LDR             R0, [SP,#0xA7C+var_A5C]
MOVT            R1, #:upper16:aRejectReason ; "reject-reason"
BL              sub_480FC
STR             R0, [SP,#0xA7C+var_A4C]

loc_3CDB8
LDR             R0, [SP,#0xA7C+var_A4C]
CMP             R0, #0
BEQ             loc_3D410
BL              sub_48630
STR             R0, [SP,#0xA7C+timer]
BL              strlen
LDR             R12, =aShareResult ; "share_result"
CMP             R0, #0x1C
MOVCC           LR, R0
MOVW            R1, #0x2820
ADD             R0, SP, #0xA7C+var_A04
MOVCS           LR, #0x1C
STRH            R1, [R0],#2
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
STR             R12, [SP,#0xA7C+timeout]
MOVW            R12, #0xE37
STR             R12, [SP,#0xA7C+var_A78]
ADD             R12, SP, #0xA7C+var_C
ADD             R12, R12, #8
MOV             R2, LR
ADD             R12, R12, LR
LDR             R1, [SP,#0xA7C+timer]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
STR             LR, [SP,#0xA7C+ptr]
STR             R12, [SP,#0xA7C+var_A4C]
BL              sub_254E8
LDR             LR, [SP,#0xA7C+var_A4C]
MOVW            R0, #0xE3C
LDR             R2, =aShareResult ; "share_result"
MOV             R12, #0x29 ; ')'
STR             R0, [SP,#0xA7C+var_A78]
MOV             R3, #aCgminerC ; "cgminer.c"
LDR             R1, [SP,#0xA7C+timer]
STR             R2, [SP,#0xA7C+timeout]
ADD             R0, SP, #0xA7C+var_9E4+7
STRB            R12, [LR,#-0x9FE]
MOV             R12, LR
MOV             LR, #0
LDR             R2, [SP,#0xA7C+ptr]
STRB            LR, [R12,#-0x9FD]
BL              sub_254E8
MOV             R3, #0x3A ; ':'
MOV             LR, #0
STRB            R3, [SP,#0xA7C+var_9E4+6]
LDR             R3, [SP,#0xA7C+var_A4C]
STRB            LR, [R3,#-0x9D9]

loc_3CE74
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CEB0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CEB0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3CF18

loc_3CEB0
LDR             R12, [R5,#0x1BC]
MOVW            R2, #:lower16:(asc_4D5C4+4) ; ""
LDR             LR, [SP,#0xA7C+var_A44]
MOVT            R2, #:upper16:(asc_4D5C4+4) ; ""
ADD             R0, SP, #0xA7C+var_A04
ADD             R1, SP, #0xA7C+var_A18
STR             R2, [SP,#0xA7C+var_A68]
ADD             R3, SP, #0xA7C+var_9C0
STR             R2, [SP,#0xA7C+var_A6C]
MOVW            R2, #:lower16:aRejectedSSDSSS ; "Rejected %s %s %d %s%s %s%s version 0x%"...
STR             R0, [SP,#0xA7C+var_A70]
MOVT            R2, #:upper16:aRejectedSSDSSS ; "Rejected %s %s %d %s%s %s%s version 0x%"...
STR             R1, [SP,#0xA7C+var_A74]
MOV             R0, R11 ; s
STR             R12, [SP,#0xA7C+var_A64]
MOV             R1, #0x800 ; maxlen
LDR             R12, [LR,#8]
STR             R12, [SP,#0xA7C+var_A78]
LDR             R12, [LR,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0xA7C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R11
MOV             R0, #5
BL              sub_20F58

loc_3CF18
ADD             R0, SP, #0xA7C+var_9E4
MOV             R1, R5
BL              sub_35A94

loc_3CF24
LDR             R3, [R6,#0x18]
CMP             R3, #0xA
STR             R3, [SP,#0xA7C+var_A4C]
BLE             loc_3D04C
LDRB            R3, [R5,#0x119]
CMP             R3, #0
BNE             loc_3D04C
MOV             R3, #byte_766E0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3D04C
MOV             R5, #dword_74578
LDR             R3, [R5]
CMP             R3, #1
BLE             loc_3D04C
MOV             R3, #qword_755D8
LDRD            R0, R1, [R3]
BLX             sub_4A11C
LDR             R3, =dbl_68720
VMOV            D6, R0, R1
VMOV.F64        D7, #3.0
VLDR            D5, [R3]
VDIV.F64        D6, D6, D5
VMUL.F64        D6, D6, D9
VMUL.F64        D7, D6, D7
VLDR            S13, [SP,#0xA7C+var_A4C]
VCVT.F64.S32    D6, S13
VCMPE.F64       D6, D7
VMRS            APSR_nzcv, FPSCR
BLE             loc_3D04C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CFE4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3CFE4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3D014

loc_3CFE4
LDR             R3, [SP,#0xA7C+var_A4C]
MOV             R2, #aPoolDRejectedD ; "Pool %d rejected %d sequential shares, "...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
STR             R3, [SP,#0xA7C+timeout]
LDR             R3, [R6]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_3D014
LDR             R3, [R6,#0x64]
CMP             R3, #1
LDREQ           R3, [R5]
SUBEQ           R3, R3, #1
STREQ           R3, [R5]
MOV             R3, #2
STR             R3, [R6,#0x64]
BL              sub_31FF4
CMP             R6, R0
BNE             loc_3D044
MOV             R0, #0
BL              sub_34178

loc_3D044
MOV             R3, #0
STR             R3, [R6,#0x18]

loc_3D04C
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x1CB1
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aParseStratumRe ; "parse_stratum_response"
ADD             R0, R7, #0x24 ; '$'
BL              sub_2CBA8
MOV             R0, R7  ; ptr
BL              free
LDR             R3, [SP,#0xA7C+var_A5C]
LDR             R3, [R3,#4]
CMN             R3, #1
BEQ             loc_3C020
LDR             R3, [SP,#0xA7C+var_A5C]
DMB             ISH
ADD             R3, R3, #4

loc_3D088
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_3D088
CMP             R2, #0
BNE             loc_3C020
LDR             R0, [SP,#0xA7C+var_A5C]
BL              sub_48A34
B               loc_3C020

loc_3D0B0
MOVW            R1, #0x1C7C
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2EFE0

loc_3D0BC
MOV             R9, R10
LDR             R10, [SP,#0xA7C+var_A44]
MOV             R4, R5

loc_3D0C8               ; mutex
LDR             R0, =stru_690F0
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3D3BC
MOV             R3, #off_67ED8
STR             R3, [SP,#0xA7C+ptr]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [SP,#0xA7C+var_A4C]
CMP             R3, #0
BEQ             loc_3C2DC
ADD             R7, R8, #0xD4
MOV             R0, R7  ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3D350
ADD             R5, R8, #0xEC
MOV             R0, R5  ; rwlock
BL              pthread_rwlock_rdlock
CMP             R0, #0
BNE             loc_3D370
MOV             R0, R7  ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3D364
ADD             R3, R8, #0x720
MOV             R0, R5
MOVW            R2, #0x1C92
LDR             R1, =aParseStratumRe ; "parse_stratum_response"
VLDR            D8, [R3]
BL              sub_2FB80
LDR             R3, [SP,#0xA7C+var_A4C]
LDR             R3, [R3]
CMP             R3, #5
MOV             R3, #byte_74500
LDRB            R3, [R3]
BEQ             loc_3D25C
CMP             R3, #0
BNE             loc_3D194
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D194
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3D1C0

loc_3D194
ADD             R11, SP, #0xA7C+var_804
MOV             R2, #aRejectedUntrac ; "Rejected untracked stratum share from p"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R3, [R8]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3D1C0               ; mutex
MOV             R0, #stru_766C4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3D37C
MOVW            R1, #:lower16:qword_767E8
MOVW            R12, #:lower16:dbl_73390
MOVT            R1, #:upper16:qword_767E8
MOVT            R12, #:upper16:dbl_73390
LDM             R1, {R3,LR}
VLDR            D6, [R8,#0x50]
VLDR            D7, [R12]
ADDS            R2, R3, #1
LDR             R3, [R8,#0x10]
LDR             R0, [R8,#0x14]
ADC             LR, LR, #0
VADD.F64        D6, D6, D8
VADD.F64        D7, D7, D8
ADDS            R3, R3, #1
STR             R2, [R1]
ADC             R2, R0, #0
MOVW            R0, #:lower16:stru_766C4
STR             R3, [R8,#0x10]
VSTR            D6, [R8,#0x50]
MOVT            R0, #:upper16:stru_766C4 ; mutex
STR             R2, [R8,#0x14]
STR             LR, [R1,#(qword_767E8+4 - 0x767E8)]
VSTR            D7, [R12]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3D344

loc_3D23C
LDR             R3, [SP,#0xA7C+ptr]
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R3, [SP,#0xA7C+var_A5C]
LDR             R3, [R3,#4]
CMN             R3, #1
BNE             loc_3C2EC
B               loc_3C418

loc_3D25C
CMP             R3, #0
BNE             loc_3D28C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D28C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3D2B8

loc_3D28C
ADD             R11, SP, #0xA7C+var_804
MOV             R2, #aAcceptedUntrac ; "Accepted untracked stratum share from p"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R3, [R8]
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3D2B8               ; mutex
MOV             R0, #stru_766C4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3D388
MOVW            R3, #:lower16:qword_755D8
MOVW            R1, #:lower16:dbl_73370
MOVT            R3, #:upper16:qword_755D8
VLDR            D6, [R8,#0x48]
LDR             R2, [R3]
MOVT            R1, #:upper16:dbl_73370
LDR             R0, [R3,#(qword_755D8+4 - 0x755D8)]
VLDR            D7, [R1]
ADDS            R2, R2, #1
VADD.F64        D6, D6, D8
ADC             R0, R0, #0
STR             R2, [R3]
STR             R0, [R3,#(qword_755D8+4 - 0x755D8)]
MOVW            R0, #:lower16:stru_766C4
LDR             R3, [R8,#8]
MOVT            R0, #:upper16:stru_766C4 ; mutex
LDR             R2, [R8,#0xC]
VADD.F64        D7, D7, D8
ADDS            R3, R3, #1
VSTR            D6, [R8,#0x48]
STR             R3, [R8,#8]
ADC             R3, R2, #0
STR             R3, [R8,#0xC]
VSTR            D7, [R1]
BL              pthread_mutex_unlock
CMP             R0, #0
BEQ             loc_3D23C
MOVW            R1, #0x1C9F
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2F03C

loc_3D344
MOVW            R1, #0x1CAA
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2F03C

loc_3D350
MOVW            R1, #0x1C90
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2EFE0

loc_3D35C
ADD             R11, SP, #0xA7C+var_804
B               loc_3CA78

loc_3D364
MOVW            R1, #0x1C90
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2F03C

loc_3D370
MOVW            R1, #0x1C90
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_30138

loc_3D37C
MOVW            R1, #0x1CA5
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2EFE0

loc_3D388
MOVW            R1, #0x1C9A
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2EFE0

loc_3D394
LDR             R2, [R7,#8]
CMP             R2, #0
BEQ             loc_3D3C8
LDR             R1, [R5,#0x10]
ADD             R6, R1, R6
CMP             R7, R6
BEQ             loc_3D3EC

loc_3D3B0
LDR             R3, [SP,#0xA7C+var_A58]
STR             R2, [R3,#(dword_69108 - 0x68BD8)]
B               loc_3C908

loc_3D3BC
MOVW            R1, #0x1C84
LDR             R0, =aParseStratumRe ; "parse_stratum_response"
BL              sub_2F03C

loc_3D3C8               ; ptr
LDR             R0, [SP,#0xA7C+ptr]
STR             R2, [SP,#0xA7C+var_A44]
BL              free
LDR             R0, [R11] ; ptr
BL              free
LDR             R3, [SP,#0xA7C+var_A58]
LDR             R2, [SP,#0xA7C+var_A44]
STR             R2, [R3,#(dword_69108 - 0x68BD8)]
B               loc_3C9A4

loc_3D3EC
LDR             R2, [SP,#0xA7C+var_A38]
ADD             R3, R3, R2
STR             R3, [R5,#0x10]
LDR             R3, [R7,#4]
CMP             R3, #0
LDREQ           R2, [R7,#8]
BEQ             loc_3D3B0
LDR             R5, [R11]
B               loc_3C8F8

loc_3D410
LDRB            R3, [R5,#0x11C]
LDR             R2, [SP,#0xA7C+timer]
CMP             R2, #0
MOVEQ           R3, #0
ANDNE           R3, R3, #1
CMP             R3, #0
BEQ             loc_3CE74
LDR             R1, [R2]
CMP             R1, #1
BEQ             loc_3D4A0
CMP             R1, #2
BNE             loc_3CE74
LDR             R0, [SP,#0xA7C+timer]

loc_3D444
BL              sub_48630
MOVW            R2, #:lower16:(aApiMcastReques_0+0x28) ; " (%s)"
MOV             R3, R0
MOV             R1, #0x1F ; maxlen
ADD             R0, SP, #0xA7C+var_A04 ; s
MOVT            R2, #:upper16:(aApiMcastReques_0+0x28) ; " (%s)"
BL              snprintf
B               loc_3CE74

loc_3D464
BL              __errno_location
LDR             R12, =aShareResult ; "share_result"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R1, #0xE0F

loc_3D478
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R3,R12}
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...

loc_3D484
STR             R1, [SP,#0xA7C+var_A74]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
B               loc_3C674

loc_3D4A0
MOV             R0, R2
BL              sub_48484
SUBS            R3, R0, #0
BEQ             loc_3CE74
LDR             R3, [R3]
CMP             R3, #2
BNE             loc_3CE74
B               loc_3D444

loc_3D4C0
BL              __errno_location
LDR             R12, =aShareResult ; "share_result"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R1, #0xE07
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R3,R12}
B               loc_3D484

loc_3D4E4               ; mutex
MOV             R0, #stru_766C4
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3D910
LDR             R12, [SP,#0xA7C+var_A44]
MOV             R2, #qword_755D8
LDR             R3, [R2]
LDR             R0, [R12,#0x24]
LDR             R1, [R2,#(qword_755D8+4 - 0x755D8)]
ADDS            R3, R3, #1
ADD             R0, R0, #1
STR             R3, [R2]
ADC             R1, R1, #0
STR             R0, [R12,#0x24]
STR             R1, [R2,#(qword_755D8+4 - 0x755D8)]
MOVW            R1, #:lower16:dbl_73370
LDR             R3, [R6,#8]
MOVT            R1, #:upper16:dbl_73370
LDR             R2, [R6,#0xC]
MOVW            R0, #:lower16:stru_766C4
VLDR            D5, [R1]
MOVT            R0, #:upper16:stru_766C4 ; mutex
ADDS            R3, R3, #1
STR             R1, [SP,#0xA7C+var_A4C]
ADC             R2, R2, #0
STR             R3, [R6,#8]
STR             R2, [R6,#0xC]
VLDR            D6, [R12,#0xC8]
VLDR            D7, [R5,#0x178]
VADD.F64        D7, D6, D7
VSTR            D7, [R12,#0xC8]
VLDR            D7, [R5,#0x178]
VLDR            D6, [R6,#0x48]
VADD.F64        D5, D5, D7
VADD.F64        D7, D6, D7
VSTR            D5, [R1]
VSTR            D7, [R6,#0x48]
BL              pthread_mutex_unlock
SUBS            R3, R0, #0
BNE             loc_3D8F8
STR             R3, [SP,#0xA7C+timer]
LDR             R3, [SP,#0xA7C+ptr]
LDR             R2, [R3] ; sub_21C98
BLX             R2      ; sub_21C98
LDR             R3, [SP,#0xA7C+timer]
LDR             R2, [R6]
STR             R3, [R6,#0x18]
MOV             R0, R3  ; timer
LDR             R3, [SP,#0xA7C+var_A44]
STR             R2, [R3,#0xD8]
BL              time
LDR             R3, [SP,#0xA7C+var_A38]
LDR             R2, [SP,#0xA7C+var_A44]
LDRB            R3, [R3]
STR             R0, [R2,#0xDC]
VLDR            D7, [R5,#0x178]
CMP             R3, #0
VSTR            D7, [R2,#0xE0]
STR             R0, [R6,#0x160]
ADD             R3, R5, #0x178
LDRD            R2, R3, [R3]
STR             R2, [R6,#0x168]
STR             R3, [R6,#0x16C]
BEQ             loc_3D65C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D628
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D628
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3D65C

loc_3D628
MOVW            R12, #:lower16:aProofOfWorkRes_0 ; "PROOF OF WORK RESULT: true (yay!!!)"
MOV             LR, R11
MOVT            R12, #:upper16:aProofOfWorkRes_0 ; "PROOF OF WORK RESULT: true (yay!!!)"
LDM             R12!, {R0-R3} ; "PROOF OF WORK RESULT: true (yay!!!)"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "SULT: true (yay!!!)"
LDR             R12, [R12] ; "!!)"
STM             LR!, {R0-R3}
MOV             R2, #0
MOV             R1, R11
MOV             R0, #7
STR             R12, [LR]
BL              sub_20F58

loc_3D65C
MOV             R3, #byte_73378
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D730
MOV             R3, #byte_7559C
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D730
MOVW            R2, #:lower16:dword_733CC
MOVW            R3, #:lower16:byte_74500
MOVT            R2, #:upper16:dword_733CC
MOVT            R3, #:upper16:byte_74500
LDR             R2, [R2]
LDRB            R3, [R3]
CMP             R2, #1
BLE             loc_3D7F0
CMP             R3, #0
BNE             loc_3D6D4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D6D4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3D730

loc_3D6D4
MOVW            R1, #:lower16:(asc_4D5C4+4) ; ""
LDR             LR, [SP,#0xA7C+var_A44]
MOVT            R1, #:upper16:(asc_4D5C4+4) ; ""
MOVW            R2, #:lower16:aAcceptedSSDPoo ; "Accepted %s %s %d pool %d %s%s"
STR             R1, [SP,#0xA7C+var_A6C]
MOVT            R2, #:upper16:aAcceptedSSDPoo ; "Accepted %s %s %d pool %d %s%s"
STR             R1, [SP,#0xA7C+var_A70]
ADD             R3, SP, #0xA7C+var_9C0
LDR             R12, [R5,#0x104]
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
LDR             R12, [R12]
STR             R12, [SP,#0xA7C+var_A74]
LDR             R12, [LR,#8]
STR             R12, [SP,#0xA7C+var_A78]
LDR             R12, [LR,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0xA7C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R11
MOV             R0, #5
BL              sub_20F58

loc_3D730
MOVW            R0, #:lower16:aAccept_0 ; "accept"
MOV             R1, R5
MOVT            R0, #:upper16:aAccept_0 ; "accept"
BL              sub_35A94
LDR             R3, [SP,#0xA7C+var_A58]
LDR             R3, [R3,#(dword_69050 - 0x68BD8)]
CMP             R3, #0
BEQ             loc_3D7D0
LDR             R2, [SP,#0xA7C+var_A4C]
VMOV            S15, R3
VLDR            D6, [R2]
VCVT.F64.S32    D7, S15
VCMPE.F64       D7, D6
VMRS            APSR_nzcv, FPSCR
BHI             loc_3D7D0
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3D7A8
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3D7A8
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #3
BLE             loc_3D7CC

loc_3D7A8
MOVW            R2, #:lower16:aSuccessfullyMi ; "Successfully mined %d accepted shares a"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSuccessfullyMi ; "Successfully mined %d accepted shares a"...
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_3D7CC
BL              sub_2E730

loc_3D7D0
LDR             R3, [R6,#0x64]
CMP             R3, #2
BEQ             loc_3D874

loc_3D7DC
LDRB            R3, [R5,#0x11B]
CMP             R3, #0
BEQ             loc_3D04C
BL              sub_2E9E8
B               loc_3D04C

loc_3D7F0
CMP             R3, #0
BNE             loc_3D820
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D820
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3D730

loc_3D820
LDR             LR, [SP,#0xA7C+var_A44]
MOV             R1, #(asc_4D5C4+4) ; ""
MOVW            R2, #:lower16:aAcceptedSSDSS ; "Accepted %s %s %d %s%s"
STR             R1, [SP,#0xA7C+var_A70]
ADD             R3, SP, #0xA7C+var_9C0
STR             R1, [SP,#0xA7C+var_A74]
MOVT            R2, #:upper16:aAcceptedSSDSS ; "Accepted %s %s %d %s%s"
LDR             R12, [LR,#8]
MOV             R1, #0x800 ; maxlen
MOV             R0, R11 ; s
STR             R12, [SP,#0xA7C+var_A78]
LDR             R12, [LR,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0xA7C+timeout]
BL              snprintf
MOV             R2, #0
MOV             R1, R11
MOV             R0, #5
BL              sub_20F58
B               loc_3D730

loc_3D874
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D8B0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D8B0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #3
BLE             loc_3D8D8

loc_3D8B0
MOVW            R2, #:lower16:aRejectingPoolD ; "Rejecting pool %d now accepting shares,"...
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aRejectingPoolD ; "Rejecting pool %d now accepting shares,"...
LDR             R3, [R6]
MOV             R0, R11 ; s
BL              snprintf
MOV             R1, R11
MOV             R2, #0
MOV             R0, #4
BL              sub_20F58

loc_3D8D8
LDR             R3, [R6,#0x64]
ADD             R0, R6, #0x64 ; 'd'
CMP             R3, #1
BEQ             loc_3D8EC
BL              sub_2B664

loc_3D8EC
MOV             R0, #0
BL              sub_34178
B               loc_3D7DC

loc_3D8F8
BL              __errno_location
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
LDR             R12, =aShareResult ; "share_result"
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R1, #0xDD2
B               loc_3D478

loc_3D910
BL              __errno_location
LDR             R12, =aShareResult ; "share_result"
MOV             R3, #aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVW            R1, #0xDC8
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R3,R12}
B               loc_3D484
; End of function sub_3BECC

off_3D934 DCD aParseStratumRe ; "parse_stratum_response"
off_3D938 DCD aShareResult ; "share_result"



; int __fastcall sub_3D93C(int)
sub_3D93C

var_81C= -0x81C
var_810= -0x810
var_80C= -0x80C
var_808= -0x808
s= -0x804

MOVW            R3, #:lower16:byte_68BD5
PUSH            {R4-R11,LR}
MOVT            R3, #:upper16:byte_68BD5
SUB             SP, SP, #0x820
SUB             SP, SP, #4
MOV             R6, R0
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3D9C8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D99C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3D99C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BLE             loc_3D9C8

loc_3D99C
LDR             R3, [R6,#0x104]
MOV             R2, #aPushingWorkFro ; "Pushing work from pool %d to hash queue"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x824+s ; s
LDR             R3, [R3]
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_3D9C8
MOVW            R9, #:lower16:byte_68BD8
MOV             R0, R6
MOVT            R9, #:upper16:byte_68BD8
LDR             R3, [R9,#(dword_691AC - 0x68BD8)]
STR             R3, [R6,#0x150]
BL              sub_3A5D0
LDR             R2, [R6,#0x104]
LDR             R0, [R9,#(dword_69010 - 0x68BD8)] ; mutex
LDR             R3, [R2,#0x44]
ADD             R3, R3, #1
STR             R3, [R2,#0x44]
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3E0CC
LDRB            R3, [R6,#0x111]
CMP             R3, #0
BEQ             loc_3DFE4

loc_3DA0C
MOV             R3, #dword_755E0
LDR             R0, [R3]
STR             R3, [SP,#0x824+var_80C]
LDRB            R2, [R0,#8]
CMP             R2, #0
BNE             loc_3DF8C
LDRB            R1, [R6,#0x154]
MOVW            R3, #0x410D
LDRB            R12, [R6,#0x157]
MOVT            R3, #0x112
LDRB            LR, [R6,#0x156]
MOVW            R0, #0xF76D
ADD             R3, R1, R3
LDRB            R1, [R6,#0x155]
MOVT            R0, #7
LDR             R4, [R9,#(dword_690EC - 0x68BD8)]
ADD             R12, R3, R12,LSL#24
MOV             R3, #0x9F49BAC6
ADD             R12, R12, LR,LSL#16
CMP             R4, #0
ADD             R12, R12, R1,LSL#8
MOV             R1, #0xFEEDBEF3
EOR             R0, R0, R12
ADD             R12, R6, #0x154
SUB             R3, R3, R0
SUB             R1, R1, R0
EOR             R3, R3, R0,LSL#8
STR             R12, [R6,#0x16C]
MOV             R12, #4
SUB             R1, R1, R3
SUB             R0, R0, R3
EOR             R1, R1, R3,LSR#13
STR             R12, [R6,#0x170]
SUB             R0, R0, R1
SUB             R3, R3, R1
EOR             R0, R0, R1,LSR#12
SUB             R3, R3, R0
SUB             R1, R1, R0
EOR             R3, R3, R0,LSL#16
SUB             R1, R1, R3
SUB             R0, R0, R3
EOR             R1, R1, R3,LSR#5
SUB             R0, R0, R1
SUB             R3, R3, R1
EOR             R0, R0, R1,LSR#3
SUB             R3, R3, R0
SUB             R5, R1, R0
EOR             R3, R3, R0,LSL#10
SUB             R5, R5, R3
EOR             R5, R5, R3,LSR#15
STR             R5, [R6,#0x174]
BEQ             loc_3DFFC
LDR             R3, [R4,#0x158]
ADD             R7, R6, #0x158
STR             R2, [R6,#0x160]
STR             R3, [R6,#0x158]
LDR             R2, [R4,#0x158]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R6,#0x15C]
LDR             R3, [R4,#0x158]
LDR             R3, [R3,#0x10]
STR             R6, [R3,#8]
LDR             R3, [R4,#0x158]
STR             R7, [R3,#0x10]
LDR             R8, [R4,#0x158]

loc_3DB24
LDR             R3, [R8,#0xC]
MOV             R1, #0
ADD             R3, R3, #1
STR             R3, [R8,#0xC]
LDR             R2, [R4,#0x158]
LDRD            R2, R3, [R2]
SUB             R3, R3, #1
AND             R3, R3, R5
ADD             R3, R3, R3,LSL#1
MOV             R3, R3,LSL#2
ADD             R2, R2, R3
LDR             R0, [R2,#4]
ADD             R0, R0, #1
STR             R0, [R2,#4]
LDR             R2, [R4,#0x158]
LDR             R2, [R2]
LDR             R2, [R2,R3]
STR             R1, [R6,#0x164]
STR             R2, [R6,#0x168]
LDR             R2, [R4,#0x158]
LDR             R2, [R2]
LDR             R1, [R2,R3]
ADD             R2, R2, R3
CMP             R1, #0
STRNE           R7, [R1,#0xC]
LDRNE           R2, [R4,#0x158]
LDRNE           R2, [R2]
ADDNE           R2, R2, R3
STR             R7, [R2]
LDR             R4, [R9,#(dword_690EC - 0x68BD8)]
LDR             R2, [R4,#0x158]
LDR             R2, [R2]
ADD             R2, R2, R3
LDRD            R2, R3, [R2,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_3DD74
LDR             R5, [R6,#0x158]
LDR             R3, [R5,#0x24]
CMP             R3, #1
BEQ             loc_3DD74
LDR             R0, [R5,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R7, R0, #0
BEQ             loc_3E0FC
LDR             R3, [R5,#4]
MOV             R10, #0
LDR             R1, [R5,#0xC]
LDR             R2, [R5,#8]
MOV             R3, R3,LSL#1
ADD             R2, R2, #1
SUB             R3, R3, #1
TST             R3, R1
MOVNE           R3, #1
MOVEQ           R3, R10
ADD             R3, R3, R1,LSR R2
STR             R3, [R5,#0x18]
LDR             R3, [R6,#0x158]
STR             R10, [R3,#0x1C]
LDR             R0, [R6,#0x158]
LDR             R3, [R0,#4]
CMP             R3, R10
BEQ             loc_3DCF8
MOV             R11, R10
STR             R10, [SP,#0x824+var_810]
STR             R9, [SP,#0x824+var_808]

loc_3DC3C
LDR             R2, [R0]
LDR             R5, [R2,R10]
CMP             R5, #0
BEQ             loc_3DCDC
MOV             R4, R3
B               loc_3DC5C

loc_3DC54
LDR             R4, [R0,#4]
MOV             R5, R8

loc_3DC5C
LDR             R3, [R5,#0x1C]
MOV             R4, R4,LSL#1
LDR             R8, [R5,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R9, R7, R4,LSL#2
LDR             R3, [R9,#4]
ADD             R3, R3, #1
STR             R3, [R9,#4]
LDR             R2, [R0,#0x18]
CMP             R3, R2
BLS             loc_3DCB0
LDR             R3, [R0,#0x1C]
ADD             R3, R3, #1
STR             R3, [R0,#0x1C]
LDR             R3, [R6,#0x158]
LDR             R0, [R9,#4]
LDR             R1, [R3,#0x18]
BLX             __udivsi3
STR             R0, [R9,#8]

loc_3DCB0
STR             R11, [R5,#0xC]
LDR             R3, [R7,R4,LSL#2]
STR             R3, [R5,#0x10]
LDR             R3, [R7,R4,LSL#2]
CMP             R3, #0
STRNE           R5, [R3,#0xC]
CMP             R8, #0
STR             R5, [R7,R4,LSL#2]
LDR             R0, [R6,#0x158]
BNE             loc_3DC54
LDR             R3, [R0,#4]

loc_3DCDC
LDR             R2, [SP,#0x824+var_810]
ADD             R10, R10, #0xC
ADD             R2, R2, #1
CMP             R2, R3
STR             R2, [SP,#0x824+var_810]
BCC             loc_3DC3C

loc_3DCF4
LDR             R9, [SP,#0x824+var_808]

loc_3DCF8               ; ptr
LDR             R0, [R0]
BL              free
LDR             R2, [R6,#0x158]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R6,#0x158]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R6,#0x158]
STR             R7, [R3]
LDR             R3, [R6,#0x158]
LDR             R4, [R9,#(dword_690EC - 0x68BD8)]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R6,#0x158]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]
CMP             R4, #0
LDR             R3, [SP,#0x824+var_80C]
LDR             R0, [R3]
BEQ             loc_3DF8C
B               loc_3DD7C

loc_3DD74
LDR             R3, [SP,#0x824+var_80C]
LDR             R0, [R3]

loc_3DD7C
ADD             R6, R4, #0x158
MOV             R5, #1

loc_3DD84
MOV             R3, R6
MOV             R6, #0
MOV             R1, R6
MOV             R7, R6

loc_3DD94
CMP             R5, #0
ADD             R7, R7, #1
BEQ             loc_3DFD4
LDR             R12, [R3,#8]
CMP             R12, #0
BEQ             loc_3DFC8
LDR             R2, [R4,#0x158]
LDR             LR, [R2,#0x14]
ADDS            R12, R12, LR
BEQ             loc_3DFC8
MOV             R2, #1
B               loc_3DDDC

loc_3DDC4
LDR             R12, [R12,#8]
ADD             R2, R2, #1
CMP             R12, #0
BEQ             loc_3DFC0
ADDS            R12, R12, LR
BEQ             loc_3DFC0

loc_3DDDC
CMP             R2, R5
BNE             loc_3DDC4
MOV             LR, R2

loc_3DDE8
MOV             R10, R3
MOV             R3, R12

loc_3DDF0
CMP             R2, #0
BNE             loc_3DE70

loc_3DDF8
CMP             LR, #0
CMPNE           R3, #0
BEQ             loc_3DF4C
LDR             R12, [R3,#8]
CMP             R12, #0
LDRNE           R8, [R4,#0x158]
MOVEQ           R12, R2
LDRNE           R8, [R8,#0x14]
ADDNE           R12, R12, R8

loc_3DE1C
CMP             R1, #0
SUB             LR, LR, #1
MOVEQ           R1, R3
MOVEQ           R3, R12
BEQ             loc_3DEE0
LDR             R8, [R4,#0x158]
CMP             R3, #0
LDR             R8, [R8,#0x14]
SUB             R8, R3, R8
STR             R8, [R1,#8]
MOVEQ           R1, R3
MOVEQ           R3, R12
BEQ             loc_3DDF0

loc_3DE50
LDR             R8, [R4,#0x158]
LDR             R8, [R8,#0x14]
SUB             R8, R1, R8
MOV             R1, R3
MOV             R3, R12

loc_3DE64
CMP             R2, #0
STR             R8, [R1,#4]
BEQ             loc_3DDF8

loc_3DE70
CMP             R3, #0
CMPNE           LR, #0
BNE             loc_3DEF0
CMP             R10, #0
BEQ             loc_3DF28
LDR             R8, [R10,#8]
CMP             R8, #0
LDRNE           R12, [R4,#0x158]
LDRNE           R12, [R12,#0x14]
ADDNE           R8, R8, R12

loc_3DE98
CMP             R1, #0
SUB             R2, R2, #1
BEQ             loc_3DED8
CMP             R10, #0
STREQ           R10, [R1,#8]
MOVEQ           R1, R10
MOVEQ           R10, R8
BEQ             loc_3DDF0
LDR             R11, [R4,#0x158]
MOV             R12, R3
MOV             R3, R10
LDR             R11, [R11,#0x14]
SUB             R11, R10, R11
MOV             R10, R8
STR             R11, [R1,#8]
B               loc_3DE50

loc_3DED8
MOV             R1, R10
MOV             R10, R8

loc_3DEE0
SUBS            R6, R1, #0
MOVNE           R8, #0
BNE             loc_3DE64
B               loc_3DDF0

loc_3DEF0
LDR             R12, [R4,#0x158]
LDR             R8, [R12,#0x14]
RSB             R11, R8, #0
ADD             R12, R10, R11
ADD             R11, R3, R11
LDR             R12, [R12,#0x108]
LDR             R11, [R11,#0x108]
SUB             R11, R12, R11
CMP             R11, #0
BLE             loc_3DF30
LDR             R12, [R3,#8]
CMP             R12, #0
ADDNE           R12, R12, R8
B               loc_3DE1C

loc_3DF28
MOV             R8, R10
B               loc_3DE98

loc_3DF30
CMP             R10, #0
BEQ             loc_3DF28
LDR             R12, [R10,#8]
CMP             R12, #0
ADDNE           R8, R12, R8
MOVEQ           R8, R12
B               loc_3DE98

loc_3DF4C
CMP             R3, #0
BNE             loc_3DD94
CMP             R1, #0
STRNE           R3, [R1,#8]
CMP             R7, #1
BLS             loc_3DF74
CMP             R6, #0
MOV             R5, R5,LSL#1
BNE             loc_3DD84
MOV             R1, R6

loc_3DF74
LDR             R3, [R4,#0x158]
STR             R1, [R3,#0x10]
LDR             R3, [R4,#0x158]
LDR             R3, [R3,#0x14]
SUB             R6, R6, R3
STR             R6, [R9,#(dword_690EC - 0x68BD8)]

loc_3DF8C               ; cond
ADD             R0, R0, #0x28 ; '('
BL              pthread_cond_broadcast
LDR             R0, [R9,#(dword_69010 - 0x68BD8)] ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3E07C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_3DFC0
MOV             LR, R5
B               loc_3DDE8

loc_3DFC8
MOV             LR, R5
MOV             R2, #1
B               loc_3DDE8

loc_3DFD4
MOV             R12, R3
MOV             LR, R5
MOV             R2, R5
B               loc_3DDE8

loc_3DFE4
LDR             R3, [R6,#0x114]
CMP             R3, #0
LDRNE           R3, [R9,#(dword_69188 - 0x68BD8)]
ADDNE           R3, R3, #1
STRNE           R3, [R9,#(dword_69188 - 0x68BD8)]
B               loc_3DA0C

loc_3DFFC
STR             R4, [R6,#0x160]
MOV             R0, #0x2C ; ',' ; size
STR             R4, [R6,#0x15C]
STR             R6, [R9,#(dword_690EC - 0x68BD8)]
BL              malloc
CMP             R0, #0
MOV             R8, R0
STR             R0, [R6,#0x158]
BEQ             loc_3E0FC
MOV             R10, #0x20 ; ' '
MOV             R1, R4  ; c
MOV             R2, R10 ; n
ADD             R0, R0, #0xC ; s
BL              memset
ADD             R7, R6, #0x158
MOV             R2, #5
MOV             R3, #0x158
STR             R10, [R8,#4]
STR             R7, [R8,#0x10]
MOV             R1, #1  ; size
STR             R2, [R8,#8]
MOV             R0, #0x180 ; nmemb
STR             R3, [R8,#0x14]
BL              calloc
CMP             R0, #0
STR             R0, [R8]
BEQ             loc_3E0FC
MOVW            R3, #0x1FE1
MOV             R4, R6
MOVT            R3, #0xA011
STR             R3, [R8,#0x28]
B               loc_3DB24

loc_3E07C
BL              __errno_location
LDR             LR, =aHashPush ; "hash_push"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x824+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x16A3
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x824+var_81C]

loc_3E0A8               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3E0CC
BL              __errno_location
LDR             LR, =aHashPush ; "hash_push"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x1691
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x824+s
STR             R12, [SP,#0x824+var_81C]
B               loc_3E0A8

loc_3E0FC               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_3D93C

off_3E104 DCD aHashPush ; "hash_push"



; void __fastcall sub_3E108(struct timeval *)
sub_3E108

var_820= -0x820
var_81C= -0x81C
var_818= -0x818
arg= -0x80C
var_804= -0x804
s= -0x800

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x820
MOV             R3, R0
STR             R0, [SP,#0x820+arg]
ADD             R0, R0, #0x1B0
LDR             R4, [R3,#0x104]
BL              sub_239A4
MOV             R3, #byte_68BD8
LDRB            R3, [R3,#(byte_6917C - 0x68BD8)]
CMP             R3, #0
BEQ             loc_3E26C
LDR             R3, [SP,#0x820+arg]
LDR             R0, [R3,#0x100]
BL              sub_31B04
LDR             R5, [R0,#0x24]
MOV             R0, #stru_766C4 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3E5F0
MOVW            R3, #:lower16:qword_755D8
LDR             R0, [R5,#0x24]
MOVT            R3, #:upper16:qword_755D8
LDR             R12, [SP,#0x820+arg]
LDR             R2, [R3]
LDR             R1, [R3,#(qword_755D8+4 - 0x755D8)]
ADD             R0, R0, #1
STR             R0, [R5,#0x24]
MOVW            R0, #:lower16:stru_766C4
ADDS            R2, R2, #1
MOVT            R0, #:upper16:stru_766C4 ; mutex
ADC             R1, R1, #0
STR             R2, [R3]
STR             R1, [R3,#(qword_755D8+4 - 0x755D8)]
MOVW            R2, #:lower16:dbl_73370
LDR             R3, [R4,#8]
MOVT            R2, #:upper16:dbl_73370
LDR             R1, [R4,#0xC]
VLDR            D6, [R2]
ADDS            R3, R3, #1
ADC             R1, R1, #0
STR             R3, [R4,#8]
STR             R1, [R4,#0xC]
VLDR            D5, [R12,#0x178]
VLDR            D7, [R5,#0xC8]
VADD.F64        D7, D7, D5
VSTR            D7, [R5,#0xC8]
VLDR            D5, [R12,#0x178]
VLDR            D7, [R4,#0x48]
VADD.F64        D6, D6, D5
VADD.F64        D7, D7, D5
VSTR            D6, [R2]
VSTR            D7, [R4,#0x48]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3E76C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E224
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3E588

loc_3E224
LDR             R1, [SP,#0x820+arg]
MOVW            R2, #:lower16:aAcceptedSDBenc ; "Accepted %s %d benchmark share nonce %0"...
LDR             R3, [R5,#4]
MOVT            R2, #:upper16:aAcceptedSDBenc ; "Accepted %s %d benchmark share nonce %0"...
ADD             R0, SP, #0x820+s ; s
LDR             R12, [R1,#0x4C]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R3,#8]
STR             R12, [SP,#0x820+var_81C]
LDR             R12, [R5,#8]
STR             R12, [SP,#0x820+var_820]
BL              snprintf
ADD             R1, SP, #0x820+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3E264
ADD             SP, SP, #0x820
POP             {R4-R6,PC}

loc_3E26C
MOV             R1, #1
LDR             R0, [SP,#0x820+arg]
BL              sub_367EC
CMP             R0, #0
BNE             loc_3E324
LDR             R3, [SP,#0x820+arg]
LDRB            R2, [R3,#0x11C]
CMP             R2, #0
BEQ             loc_3E3A4

loc_3E290
MOV             R2, #byte_68BD5
LDRB            R2, [R2]
CMP             R2, #0
BEQ             loc_3E4B0
MOV             R6, #byte_74500
LDRB            R2, [R6]
CMP             R2, #0
BNE             loc_3E484
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3E484
MOV             R2, #dword_67DB4
LDR             R1, [R2]
CMP             R1, #6
BGT             loc_3E484
LDR             R0, [R4,#0x2D8]
CMP             R0, #0
BNE             loc_3E4C0

loc_3E2EC
LDR             R3, [R2]
CMP             R3, #3
BGT             loc_3E4F8
LDR             R3, [R4,#0x2D8]
ADD             R5, SP, #0x820+s
CMP             R3, #0
BEQ             loc_3E818

loc_3E308
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
SUB             R0, R5, #0xC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2223
LDR             R2, =aSubmitWorkAsyn ; "submit_work_async"
BL              sub_2CBA8
B               loc_3E264

loc_3E324
MOVW            R2, #:lower16:off_67FE0 ; "--version-file"
MOVW            R3, #:lower16:byte_74500
MOVT            R2, #:upper16:off_67FE0 ; "--version-file"
MOVT            R3, #:upper16:byte_74500
LDRB            R2, [R2,#(byte_6875D - 0x67FE0)]
LDRB            R3, [R3]
CMP             R2, #0
BEQ             loc_3E5A0
CMP             R3, #0
BNE             loc_3E360
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3E754

loc_3E360
ADD             R5, SP, #0x820+s
MOVW            R2, #:lower16:aPoolDStaleShar ; "Pool %d stale share detected, submittin"...
MOV             R0, R5  ; s
MOVT            R2, #:upper16:aPoolDStaleShar ; "Pool %d stale share detected, submittin"...

loc_3E370               ; maxlen
MOV             R1, #0x800
LDR             R3, [R4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3E38C
LDR             R3, [SP,#0x820+arg]
MOV             R2, #1
STRB            R2, [R3,#0x119]
LDRB            R2, [R3,#0x11C]
CMP             R2, #0
BNE             loc_3E290

loc_3E3A4
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3E3E4
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_3E3E4
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #4
ADDLE           R5, SP, #0x820+s
BLE             loc_3E428

loc_3E3E4
MOVW            LR, #:lower16:aPushingSubmitW ; "Pushing submit work to work thread"
ADD             R5, SP, #0x820+s
MOVT            LR, #:upper16:aPushingSubmitW ; "Pushing submit work to work thread"
MOV             R12, R5
LDM             LR!, {R0-R3} ; "Pushing submit work to work thread"
STM             R12!, {R0-R3}
LDM             LR!, {R0-R3} ; "ork to work thread"
LDR             LR, [LR] ; "ad"
STM             R12!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #5
MOV             R3, LR,LSR#16
STRH            LR, [R12],#2
STRB            R3, [R12]
BL              sub_20F58
LDR             R3, [SP,#0x820+arg] ; arg

loc_3E428
MOVW            R2, #:lower16:sub_2B4EC
MOV             R1, #0  ; attr
MOVT            R2, #:upper16:sub_2B4EC ; start_routine
SUB             R0, R5, #4 ; newthread
BL              pthread_create
CMP             R0, #0
BEQ             loc_3E264
MOVW            R12, #:lower16:aFailedToCreate_0 ; "Failed to create submit_work_thread"
MOV             LR, R5
MOVT            R12, #:upper16:aFailedToCreate_0 ; "Failed to create submit_work_thread"
LDM             R12!, {R0-R3} ; "Failed to create submit_work_thread"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " submit_work_thread"
LDR             R12, [R12] ; "ead"
STM             LR!, {R0-R3}
MOV             R1, R5
MOV             R0, #3
MOV             R2, #1
STR             R12, [LR]
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3E484
ADD             R5, SP, #0x820+s
MOV             R2, #aPushingPoolDWo ; "Pushing pool %d work to stratum queue"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, [R4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_3E4B0
LDR             R0, [R4,#0x2D8]
CMP             R0, #0
LDRNE           R3, [SP,#0x820+arg]
BEQ             loc_3E4D0

loc_3E4C0
MOV             R1, R3
BL              sub_233D4
CMP             R0, #0
BNE             loc_3E264

loc_3E4D0
MOV             R6, #byte_74500
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_3E4F8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3E79C

loc_3E4F8
MOVW            R12, #:lower16:aDiscardingWork ; "Discarding work from removed pool"
ADD             R5, SP, #0x820+s
MOVT            R12, #:upper16:aDiscardingWork ; "Discarding work from removed pool"
MOV             LR, R5
LDM             R12!, {R0-R3} ; "Discarding work from removed pool"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "from removed pool"
LDR             R12, [R12] ; "l"
STM             LR!, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #4
STRH            R12, [LR]
BL              sub_20F58
LDR             R3, [R4,#0x2D8]
CMP             R3, #0
BNE             loc_3E308
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_3E55C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3E810

loc_3E55C
MOVW            R2, #:lower16:aPushingPoolDWo ; "Pushing pool %d work to stratum queue"
LDR             R3, [R4]
MOVT            R2, #:upper16:aPushingPoolDWo ; "Pushing pool %d work to stratum queue"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R2, #0
MOV             R1, R5
MOV             R0, #5
BL              sub_20F58
B               loc_3E308

loc_3E588
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_3E264
B               loc_3E224

loc_3E5A0
LDRB            R2, [R4,#0x68]
CMP             R2, #0
BEQ             loc_3E640
CMP             R3, #0
BNE             loc_3E5DC
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E5DC
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #4
BLE             loc_3E38C

loc_3E5DC
ADD             R5, SP, #0x820+s
MOVW            R2, #:lower16:aPoolDStaleShar_0 ; "Pool %d stale share detected, submittin"...
MOV             R0, R5
MOVT            R2, #:upper16:aPoolDStaleShar_0 ; "Pool %d stale share detected, submittin"...
B               loc_3E370

loc_3E5F0
BL              __errno_location
LDR             LR, =aSubmitWorkAsyn ; "submit_work_async"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R0, SP, #0x820+s ; s
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R12, #0x21F0
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x820+var_818]

loc_3E61C               ; maxlen
MOV             R1, #0x800
BL              snprintf
ADD             R1, SP, #0x820+s

loc_3E628
MOV             R0, #3
MOV             R2, #1
BL              sub_20F58
MOV             R1, #1
MOV             R0, R1
BL              sub_2E6B0

loc_3E640
CMP             R3, #0
BNE             loc_3E674
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E674
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
ADDLE           R5, SP, #0x820+s
BLE             loc_3E6A0

loc_3E674
ADD             R5, SP, #0x820+s
MOV             R2, #aPoolDStaleShar_1 ; "Pool %d stale share detected, discardin"...
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
LDR             R3, [R4]
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3E6A0
MOVW            R0, #:lower16:aDiscard ; "discard"
LDR             R1, [SP,#0x820+arg]
MOVT            R0, #:upper16:aDiscard ; "discard"
BL              sub_35A94
MOV             R0, #stru_766C4 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3E7A8
LDR             R2, [R4,#0x78]
MOVW            R1, #:lower16:dbl_766B8
LDR             R0, [SP,#0x820+arg]
MOVT            R1, #:upper16:dbl_766B8
VLDR            D6, [R4,#0x58]
MOVW            R3, #:lower16:qword_73318
ADD             R2, R2, #1
VLDR            D7, [R1]
STR             R2, [R4,#0x78]
MOVT            R3, #:upper16:qword_73318
VLDR            D5, [R0,#0x178]
MOVW            R0, #:lower16:stru_766C4
LDR             R2, [R3]
MOVT            R0, #:upper16:stru_766C4 ; mutex
LDR             R12, [R3,#(qword_73318+4 - 0x73318)]
VADD.F64        D6, D6, D5
ADDS            R2, R2, #1
VADD.F64        D7, D7, D5
ADC             R12, R12, #0
STM             R3, {R2,R12}
VSTR            D6, [R4,#0x58]
VSTR            D7, [R1]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3E7E8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
SUB             R0, R5, #0xC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2215
LDR             R2, =aSubmitWorkAsyn ; "submit_work_async"
BL              sub_2CBA8
B               loc_3E264

loc_3E754
MOV             R2, #dword_67DB4
LDR             R3, [R2]
CMP             R3, #4
BLE             loc_3E38C
B               loc_3E360

loc_3E76C
BL              __errno_location
LDR             LR, =aSubmitWorkAsyn ; "submit_work_async"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R12, #0x21F7
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
ADD             R0, SP, #0x820+s
STR             R12, [SP,#0x820+var_818]
B               loc_3E61C

loc_3E79C
MOV             R2, #dword_67DB4
B               loc_3E2EC

loc_3E7A8
BL              __errno_location
LDR             R12, =aSubmitWorkAsyn ; "submit_work_async"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R0, #0x220C
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
STR             R1, [SP,#0x820+var_820]

loc_3E7CC
STR             R0, [SP,#0x820+var_818]
MOV             R1, #0x800 ; maxlen
STR             R12, [SP,#0x820+var_81C]
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
B               loc_3E628

loc_3E7E8
BL              __errno_location
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R3, [R0]
LDR             R12, =aSubmitWorkAsyn ; "submit_work_async"
MOVW            R0, #0x2213
STR             R1, [SP,#0x820+var_820]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
B               loc_3E7CC

loc_3E810
MOV             R2, #dword_67DB4

loc_3E818
LDR             R3, [R2]
CMP             R3, #4
BGT             loc_3E55C
B               loc_3E308
; End of function sub_3E108

off_3E828 DCD aSubmitWorkAsyn ; "submit_work_async"



; int __fastcall sub_3E82C(int, int)
sub_3E82C

var_808= -0x808
var_804= -0x804
s= -0x800

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x800
MOV             R4, R1
SUB             SP, SP, #8
MOV             R5, R0
ADD             R0, R0, #0x24 ; '$'
BL              sub_33790
ADD             R1, R4, #0xA0
ADD             R0, R4, #0xC0
BL              sub_23110
SUBS            R6, R0, #0
BNE             loc_3E8E8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E898
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3E898
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_3E8D8

loc_3E898
LDR             R12, [R5,#0x24]
MOV             R2, #aSSDShareAboveT ; "%s %s %d: Share above target"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x808+s ; s
LDR             R3, =aSubmitTestedWo ; "submit_tested_work"
LDR             LR, [R12,#8]
STR             LR, [SP,#0x808+var_804]
LDR             R12, [R12,#4]
LDR             R12, [R12,#8]
STR             R12, [SP,#0x808+var_808]
BL              snprintf
ADD             R1, SP, #0x808+s
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3E8D8
MOV             R0, R6
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_3E8E8
BL              sub_2FD8C
MOV             R1, R4
MOV             R5, R0
MOV             R2, #0
BL              sub_2CA90
MOV             R0, R5
BL              sub_3E108
MOV             R0, R6
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_3E82C

off_3E914 DCD aSubmitTestedWo ; "submit_tested_work"



; int __fastcall sub_3E918(int, int, unsigned int)
sub_3E918
PUSH            {R4-R8,LR}
MOV             R4, R1
MOV             R1, R2
MOV             R6, R2
MOV             R7, R0
BL              sub_2DC68
SUBS            R5, R0, #0
BEQ             loc_3E950
STR             R6, [R4,#0x4C]
MOV             R0, R4
BL              sub_2B350
LDR             R3, [R4,#0xDC]
CMP             R3, #0
BEQ             loc_3E964

loc_3E950
MOV             R0, R7
MOV             R5, #0
BL              sub_331A4

loc_3E95C
MOV             R0, R5
POP             {R4-R8,PC}

loc_3E964
MOV             R0, R7
MOV             R1, R4
BL              sub_3E82C
MOV             R3, #dword_766C0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_3E95C
MOV             R3, #byte_7449D
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3E95C
MOV             R1, R6
MOV             R0, R4
MOV             R5, R3
BL              sub_2CCF0
B               loc_3E95C
; End of function sub_3E918




; void __fastcall sub_3E9AC(int)
sub_3E9AC
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              sub_2FD8C
MOV             R1, R5
MOV             R4, R0
MOV             R2, #0
BL              sub_2CA90
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_3E108
; End of function sub_3E9AC




; int __fastcall sub_3E9D4(int, int, int)
sub_3E9D4
PUSH            {R4-R6,LR}
MOV             R4, R1
STR             R2, [R1,#0x4C]
BL              sub_2FD8C
MOV             R1, R4
MOV             R5, R0
MOV             R2, #0
BL              sub_2CA90
MOV             R0, R5
BL              sub_3E108
MOV             R0, #1
POP             {R4-R6,PC}
; End of function sub_3E9D4

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R7, R3
MOV             R4, R1
MOV             R6, R2
MOV             R5, R0
BL              sub_2FD8C
MOV             R1, R4
MOV             R2, R7
STR             R0, [SP,#0xC]
BL              sub_2CA90
LDR             R4, [SP,#0xC]
STR             R6, [R4,#0x4C]
MOV             R0, R4
BL              sub_2B350
LDR             R3, [R4,#0xDC]
CMP             R3, #0
BNE             loc_3EB50
LDR             R1, [SP,#0xC]
ADD             R0, R5, #0x24 ; '$'
BL              sub_33790
MOV             R3, #dword_766C0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_3EB48
MOVW            R3, #:lower16:byte_7449D
LDR             R0, [SP,#0xC]
MOVT            R3, #:upper16:byte_7449D
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3EB40

loc_3EA88
ADD             R1, R0, #0xA0
ADD             R0, R0, #0xC0
BL              sub_23110
SUBS            R4, R0, #0
BNE             loc_3EB84
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x23A7
ADD             R0, SP, #0xC
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aSubmitNoffsetN ; "submit_noffset_nonce"
BL              sub_2CBA8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3EAF4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3EAF4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
MOVLE           R4, #1
BLE             loc_3EB30

loc_3EAF4
LDR             R3, [R5,#0x24]
MOV             R2, #aSDShareAboveTa ; "%s %d: Share above target"
MOV             R1, #0x800
ADD             R0, SP, #0x10
MOV             R4, #1
LDR             LR, [R3,#4]
LDR             R12, [R3,#8]
LDR             R3, [LR,#8]
STR             R12, [SP]
BL              snprintf
ADD             R1, SP, #0x10
MOV             R2, #0
MOV             R0, #6
BL              sub_20F58

loc_3EB30
MOV             R0, R4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_3EB40
MOV             R1, R6
BL              sub_2CCF0

loc_3EB48
LDR             R0, [SP,#0xC]
B               loc_3EA88

loc_3EB50
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2397
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, =aSubmitNoffsetN ; "submit_noffset_nonce"
ADD             R0, SP, #0xC
MOV             R4, #0
BL              sub_2CBA8
MOV             R0, R5
BL              sub_331A4
MOV             R0, R4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}

loc_3EB84
LDR             R0, [SP,#0xC]
BL              sub_3E108
MOV             R0, R4
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4-R7,PC}
off_3EB9C DCD aSubmitNoffsetN ; "submit_noffset_nonce"


; Attributes: noreturn

; void __fastcall __noreturn sub_3EBA0(int)
sub_3EBA0
PUSH            {R4,LR}
MOV             R1, #1
BL              sub_2E6B0
; End of function sub_3EBA0




; int __fastcall sub_3EBAC(int, int, char *s1, const char *, const char *)
sub_3EBAC

var_C= -0xC
arg_0=  0x14

PUSH            {R4-R7,LR}
SUB             SP, SP, #0xC
LDR             R7, [SP,#0xC+arg_0]
MOV             R4, R0
MOV             R5, R3
MOV             R0, R2  ; s1
MOV             R6, R1
MOV             R1, R4
BL              sub_23E4C
STR             R5, [R4,#0xAC]
STR             R0, [R4,#0xA4]
MOV             R0, R5  ; s
STR             R7, [R4,#0xB0]
BL              strlen
MOV             R5, R0
MOV             R0, R7  ; s
BL              strlen
ADD             R5, R5, R0
MOVW            R1, #:lower16:aCgminerC ; "cgminer.c"
ADD             R5, R5, #2
MOVT            R1, #:upper16:aCgminerC ; "cgminer.c"
MOVW            R3, #0x2A4A
LDR             R2, =aAddPoolDetails ; "add_pool_details"
MOV             R0, R5
BL              sub_229BC
LDR             R12, [R4,#0xB0]
MOVW            R2, #:lower16:(aFailedToConnec+0x20) ; "%s:%s"
LDR             R3, [R4,#0xAC]
MOV             R1, R5  ; maxlen
STR             R0, [R4,#0xA8]
MOVT            R2, #:upper16:(aFailedToConnec+0x20) ; format
STR             R12, [SP,#0xC+var_C]
BL              snprintf
LDR             R2, [R4,#0x64]
MOV             R3, #1
EOR             R1, R6, #1
STRB            R3, [R4,#0x11C]
STRB            R1, [R4,#0x6B]
CMP             R2, R3
STRB            R3, [R4,#0x61]
BEQ             loc_3EC58
ADD             R0, R4, #0x64 ; 'd'
BL              sub_2B664

loc_3EC58
MOVW            R2, #:lower16:sub_35D3C
MOV             R3, R4  ; arg
MOVT            R2, #:upper16:sub_35D3C ; start_routine
MOV             R1, #0  ; attr
ADD             R0, R4, #0x118 ; newthread
BL              pthread_create
CMP             R6, #0
BNE             loc_3EC90
MOV             R1, R6  ; thread_return
LDR             R0, [R4,#0x118] ; th
BL              pthread_join
MOV             R3, #byte_68BD8
LDRB            R6, [R3,#(byte_69170 - 0x68BD8)]

loc_3EC90
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_3EBAC

off_3EC9C DCD aAddPoolDetails ; "add_pool_details"



; int __fastcall sub_3ECA0(int result)
sub_3ECA0
LDR             R3, [R0,#0xC]
CMP             R3, #0
MOVEQ           R3, #0x2AA68
STREQ           R3, [R0,#0xC]
LDR             R3, [R0,#0x10]
CMP             R3, #0
MOVEQ           R3, #0x2AA44
STREQ           R3, [R0,#0x10]
LDR             R3, [R0,#0x14]
CMP             R3, #0
MOVEQ           R3, #0x2AA48
STREQ           R3, [R0,#0x14]
LDR             R3, [R0,#0x18]
CMP             R3, #0
MOVEQ           R3, #0x2C580
STREQ           R3, [R0,#0x18]
LDR             R3, [R0,#0x20]
CMP             R3, #0
MOVEQ           R3, #0x2AA4C
STREQ           R3, [R0,#0x20]
LDR             R3, [R0,#0x2C]
CMP             R3, #0
MOVEQ           R3, #0x2C588
STREQ           R3, [R0,#0x2C]
LDR             R3, [R0,#0x34]
CMP             R3, #0
MOVEQ           R3, #0x2C590
STREQ           R3, [R0,#0x34]
LDR             R3, [R0,#0x38]
CMP             R3, #0
MOVEQ           R3, #0x2AA60
STREQ           R3, [R0,#0x38]
LDR             R3, [R0,#0x54]
CMP             R3, #0
MOVEQ           R3, #0x2C598
STREQ           R3, [R0,#0x54]
LDR             R3, [R0,#0x58]
CMP             R3, #0
MOVEQ           R3, #0x2C59C
STREQ           R3, [R0,#0x58]
LDR             R3, [R0,#0x5C]
CMP             R3, #0
MOVEQ           R3, #0x2C5A0
STREQ           R3, [R0,#0x5C]
LDR             R3, [R0,#0x3C]
CMP             R3, #0
MOVEQ           R3, #sub_38678
STREQ           R3, [R0,#0x3C]
LDR             R3, [R0,#0x4C]
CMP             R3, #0
MOVEQ           R3, #0x2AA44
STREQ           R3, [R0,#0x4C]
LDR             R3, [R0,#0x50]
CMP             R3, #0
MOVEQ           R3, #0x2AA44
STREQ           R3, [R0,#0x50]
LDR             R3, [R0,#0x48]
CMP             R3, #0
MOVEQ           R3, #0x2AA4C
STREQ           R3, [R0,#0x48]
LDR             R3, [R0,#0x60]
CMP             R3, #0
MOVEQ           R3, #0x2AA74
STREQ           R3, [R0,#0x60]
VLDR            D7, [R0,#0x68]
VCMP.F64        D7, #0.0
VMRS            APSR_nzcv, FPSCR
MOVEQ           R3, #0
MOVEQ           R2, #0
MOVTEQ          R3, #0x3FF0
STRDEQ          R2, R3, [R0,#0x68]
BX              LR
; End of function sub_3ECA0




; int __fastcall sub_3EE00(int result)
sub_3EE00
MOVW            R3, #:lower16:sub_2AA6C
PUSH            {R4,R5,LR}
MOVT            R3, #:upper16:sub_2AA6C
MOVW            LR, #:lower16:nullsub_4
MOVW            R12, #:lower16:nullsub_1
MOVW            R1, #:lower16:nullsub_2
MOVW            R2, #:lower16:sub_2C588
MOVT            LR, #:upper16:nullsub_4
MOVT            R12, #:upper16:nullsub_1
MOVT            R1, #:upper16:nullsub_2
MOVT            R2, #:upper16:sub_2C588
STR             R3, [R0,#0x1C]
MOV             R3, #0
STR             LR, [R0,#0xC]
STR             R12, [R0,#0x14]
MOVW            LR, #:lower16:sub_2AA54
MOVW            R12, #:lower16:sub_2C590
STR             R1, [R0,#0x18]
STR             R3, [R0,#0x28]
MOVW            R1, #:lower16:sub_2AA60
MOVW            R3, #:lower16:nullsub_5
STR             R2, [R0,#0x2C]
MOVW            R2, #:lower16:nullsub_6
MOVT            LR, #:upper16:sub_2AA54
MOVT            R12, #:upper16:sub_2C590
MOVT            R1, #:upper16:sub_2AA60
MOVT            R3, #:upper16:nullsub_5
MOVT            R2, #:upper16:nullsub_6
STR             LR, [R0,#0x30]
MOV             R5, #0
MOVW            LR, #:lower16:nullsub_7
STR             R12, [R0,#0x34]
STR             R1, [R0,#0x38]
MOVW            R12, #:lower16:nullsub_8
MOVW            R1, #:lower16:sub_2AA74
STR             R3, [R0,#0x3C]
STR             R2, [R0,#0x54]
MOVW            R3, #:lower16:nullsub_3
MOVW            R2, #:lower16:sub_2AA4C
MOVT            R3, #:upper16:nullsub_3
MOVT            R2, #:upper16:sub_2AA4C
MOV             R4, #0
MOVT            R5, #0x3FF0
MOVT            LR, #:upper16:nullsub_7
MOVT            R12, #:upper16:nullsub_8
MOVT            R1, #:upper16:sub_2AA74
STR             LR, [R0,#0x58]
STR             R12, [R0,#0x5C]
STR             R1, [R0,#0x60]
STR             R3, [R0,#0x10]
STR             R3, [R0,#0x24]
STR             R3, [R0,#0x4C]
STR             R3, [R0,#0x50]
STR             R2, [R0,#0x20]
STR             R2, [R0,#0x48]
STRD            R4, R5, [R0,#0x68]
STRD            R4, R5, [R0,#0x70]
POP             {R4,R5,PC}
; End of function sub_3EE00




; int __fastcall sub_3EEE8(pthread_rwlock_t *)
sub_3EEE8
PUSH            {R4-R6,LR}
MOV             R3, #0
MOV             R4, R0
MOV             R0, #stru_7680C ; rwlock
STR             R3, [R4,#0x20]
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_3EFAC
MOVW            R3, #:lower16:dword_7346C
MOVW            R5, #:lower16:byte_6ABD0
MOVT            R3, #:upper16:dword_7346C
MOVT            R5, #:upper16:byte_6ABD0
LDR             R1, [R3]
MOVW            R0, #:lower16:stru_7680C
LDR             R3, [R5,#(dword_6A738 - 0x6ABD0)]
MOVT            R0, #:upper16:stru_7680C ; rwlock
STR             R3, [R4]
ADD             R2, R3, #1
STR             R4, [R1,R3,LSL#2]
STR             R2, [R5,#(dword_6A738 - 0x6ABD0)]
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3EFB8
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOVW            R3, #:lower16:byte_7347C
ADD             R0, R4, #0x140 ; rwlock
MOVT            R3, #:upper16:byte_7347C
LDRB            R3, [R3]
CMP             R3, #0
MOVWEQ          R3, #0x5588
LDRNE           R3, [R4,#0x94]
MOVTEQ          R3, #7
LDRNE           R2, [R5,#(dword_6A73C - 0x6ABD0)]
LDREQ           R1, [R3]
LDREQ           R2, [R4,#0x94]
ADDNE           R3, R3, R2
STRNE           R3, [R5,#(dword_6A73C - 0x6ABD0)]
ADDEQ           R2, R2, R1
MOV             R1, #0  ; attr
STREQ           R2, [R3]
BL              pthread_rwlock_init
CMP             R0, #0
BNE             loc_3EFC4
STR             R0, [R4,#0x160]
POP             {R4-R6,PC}

loc_3EFAC
MOVW            R1, #0x2BE4
LDR             R0, =aEnableDevice ; "enable_device"
BL              sub_2EF84

loc_3EFB8
MOVW            R1, #0x2BE6
LDR             R0, =aEnableDevice ; "enable_device"
BL              sub_2FB24

loc_3EFC4
MOVW            R1, #0x2BF1
LDR             R0, =aEnableDevice ; "enable_device"
BL              sub_2EEB8
; End of function sub_3EEE8

off_3EFD0 DCD aEnableDevice ; "enable_device"



; int __fastcall sub_3EFD4(_DWORD *)
sub_3EFD4

var_1C= -0x1C
var_18= -0x18
var_10= -0x10
s2= -0xC
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1C
LDR             R3, [R0,#4]
MOV             R5, #0x9E3779B9
STR             R0, [SP,#0x1C+var_10]
LDR             R4, [R3,#8]
MOV             R0, R4  ; s
STR             R4, [SP,#0x1C+s2]
BL              strlen
CMP             R0, #0xB
MOVW            R3, #0xBEEF
MOV             R6, R0
MOVT            R3, #0xFEED
MOV             R0, R5
BLS             loc_3F8EC
ADD             R9, R4, #0xC
MOV             R10, R6

loc_3F01C
LDRB            LR, [R9,#-6]
SUB             R10, R10, #0xC
LDRB            R2, [R9,#-2]
CMP             R10, #0xB
LDRB            R1, [R9,#-0xA]
MOV             R11, R9
LDRB            R4, [R9,#-7]
ADD             R9, R9, #0xC
LDRB            R12, [R9,#-0xF]
MOV             LR, LR,LSL#16
LDRB            R7, [R9,#-0x17]
MOV             R2, R2,LSL#16
MOV             R1, R1,LSL#16
LDRB            R8, [R9,#-0x11]
ADD             LR, LR, R4,LSL#8
LDRB            R4, [R9,#-0x14]
ADD             R2, R2, R12,LSL#8
LDRB            R12, [R9,#-0x18]
ADD             R1, R1, R7,LSL#8
LDRB            R7, [R9,#-0x10]
ADD             LR, LR, R4
LDRB            R4, [R9,#-0x15]
ADD             R1, R1, R12
LDRB            R12, [R9,#-0xD]
ADD             LR, LR, R8,LSL#24
ADD             R2, R2, R7
ADD             R1, R1, R4,LSL#24
ADD             R5, LR, R5
ADD             R2, R2, R12,LSL#24
SUB             R1, R1, R5
ADD             R3, R2, R3
SUB             R2, R1, R3
SUB             R1, R5, R3
ADD             R2, R2, R0
EOR             R2, R2, R3,LSR#13
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#8
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#13
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSR#12
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSL#16
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#5
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R0, R2, R3,LSR#3
SUB             R1, R1, R0
SUB             R3, R3, R0
EOR             R5, R1, R0,LSL#10
SUB             R3, R3, R5
EOR             R3, R3, R5,LSR#15
BHI             loc_3F01C

loc_3F108
SUB             R10, R10, #1
ADD             R3, R6, R3
CMP             R10, #0xA ; switch 11 cases
LDRLS           PC, [PC,R10,LSL#2] ; switch jump
B               def_3F114 ; jumptable 0003F114 default case
jpt_3F114 DCD loc_3F198 ; jump table for switch statement
DCD loc_3F190
DCD loc_3F188
DCD loc_3F180
DCD loc_3F178
DCD loc_3F170
DCD loc_3F168
DCD loc_3F160
DCD loc_3F158
DCD loc_3F150
DCD loc_3F148

loc_3F148               ; jumptable 0003F114 case 10
LDRB            R2, [R11,#0xA]
ADD             R3, R3, R2,LSL#24

loc_3F150               ; jumptable 0003F114 case 9
LDRB            R2, [R11,#9]
ADD             R3, R3, R2,LSL#16

loc_3F158               ; jumptable 0003F114 case 8
LDRB            R2, [R11,#8]
ADD             R3, R3, R2,LSL#8

loc_3F160               ; jumptable 0003F114 case 7
LDRB            R2, [R11,#7]
ADD             R5, R5, R2,LSL#24

loc_3F168               ; jumptable 0003F114 case 6
LDRB            R2, [R11,#6]
ADD             R5, R5, R2,LSL#16

loc_3F170               ; jumptable 0003F114 case 5
LDRB            R2, [R11,#5]
ADD             R5, R5, R2,LSL#8

loc_3F178               ; jumptable 0003F114 case 4
LDRB            R2, [R11,#4]
ADD             R5, R5, R2

loc_3F180               ; jumptable 0003F114 case 3
LDRB            R2, [R11,#3]
ADD             R0, R0, R2,LSL#24

loc_3F188               ; jumptable 0003F114 case 2
LDRB            R2, [R11,#2]
ADD             R0, R0, R2,LSL#16

loc_3F190               ; jumptable 0003F114 case 1
LDRB            R2, [R11,#1]
ADD             R0, R0, R2,LSL#8

loc_3F198               ; jumptable 0003F114 case 0
LDRB            R2, [R11]
ADD             R0, R0, R2

def_3F114               ; jumptable 0003F114 default case
SUB             R0, R0, R5
SUB             R2, R5, R3
SUB             R0, R0, R3
MOVW            R4, #:lower16:byte_6ABD0
EOR             R0, R0, R3,LSR#13
MOVT            R4, #:upper16:byte_6ABD0
LDR             R1, [R4,#(dword_6A740 - 0x6ABD0)]
SUB             R2, R2, R0
SUB             R3, R3, R0
EOR             R2, R2, R0,LSL#8
CMP             R1, #0
SUB             R7, R3, R2
SUB             R3, R0, R2
EOR             R7, R7, R2,LSR#13
SUB             R3, R3, R7
SUB             R2, R2, R7
EOR             R3, R3, R7,LSR#12
SUB             R2, R2, R3
SUB             R7, R7, R3
EOR             R2, R2, R3,LSL#16
SUB             R7, R7, R2
SUB             R3, R3, R2
EOR             R7, R7, R2,LSR#5
SUB             R3, R3, R7
SUB             R2, R2, R7
EOR             R3, R3, R7,LSR#3
SUB             R2, R2, R3
SUB             R7, R7, R3
EOR             R3, R2, R3,LSL#10
SUB             R7, R7, R3
EOR             R7, R7, R3,LSR#15
BEQ             loc_3F3D4
LDR             R1, [R1,#8]
LDRD            R2, R3, [R1]
SUB             R3, R3, #1
AND             R3, R3, R7
ADD             R3, R3, R3,LSL#1
LDR             R2, [R2,R3,LSL#2]
CMP             R2, #0
BEQ             loc_3F3D4
LDR             R8, [R1,#0x14]
RSB             R8, R8, #0
ADDS            R5, R2, R8
BEQ             loc_3F3D4
LDR             R9, [SP,#0x1C+s2]
B               loc_3F26C

loc_3F258
LDR             R5, [R5,#0x18]
CMP             R5, #0
BEQ             loc_3F3D4
ADDS            R5, R5, R8
BEQ             loc_3F3D4

loc_3F26C
LDR             R3, [R5,#0x24]
CMP             R3, R7
BNE             loc_3F258
LDR             R3, [R5,#0x20]
CMP             R3, R6
BNE             loc_3F258
MOV             R2, R6  ; n
MOV             R1, R9  ; s2
LDR             R0, [R5,#0x1C] ; s1
BL              memcmp
CMP             R0, #0
BNE             loc_3F258
LDR             R3, [R5,#4]
LDR             R2, [SP,#0x1C+var_10]
ADD             R3, R3, #1
STR             R3, [R5,#4]
STR             R3, [R2,#8]

loc_3F2B0               ; rwlock
MOV             R0, #stru_7680C
BL              pthread_rwlock_wrlock
CMP             R0, #0
BNE             loc_3F8F8
MOVW            R6, #:lower16:dword_755C0
LDR             R3, [R4,#(dword_6A744 - 0x6ABD0)]
MOVT            R6, #:upper16:dword_755C0
MOVW            R7, #:lower16:dword_7346C
LDR             R1, [R6]
MOVT            R7, #:upper16:dword_7346C
MOVW            R2, #0x2C1A
LDR             R0, [R7]
STR             R2, [SP,#0x1C+var_1C]
MOVW            R2, #:lower16:aCgminerC ; "cgminer.c"
ADD             R1, R1, R3
MOVT            R2, #:upper16:aCgminerC ; "cgminer.c"
ADD             R1, R1, #2
LDR             R3, =aAddCgpu ; "add_cgpu"
MOV             R1, R1,LSL#2
BL              sub_22AD4
STR             R0, [R7]
MOV             R0, #stru_7680C ; rwlock
BL              pthread_rwlock_unlock
CMP             R0, #0
BNE             loc_3F904
MOV             R5, #off_67ED8
LDR             R3, [R5] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, #stru_766C4 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_3F910
BL              time
LDR             R3, [SP,#0x1C+var_10]
STR             R0, [R3,#0xE8]
MOV             R0, #stru_766C4 ; mutex
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_3F9BC
LDR             R3, [R5] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R3, #byte_7347C
LDRB            R3, [R3]
CMP             R3, #0
LDRNE           R3, [R4,#(dword_6A744 - 0x6ABD0)]
LDREQ           R3, [R6]
LDRNE           R0, [R6]
ADDNE           R1, R3, #1
LDRNE           R2, [R7]
ADDEQ           R1, R3, #1
STRNE           R1, [R4,#(dword_6A744 - 0x6ABD0)]
STREQ           R1, [R6]
ADDNE           R3, R3, R0
LDREQ           R2, [R7]
MOV             R0, #1
LDR             R1, [SP,#0x1C+var_10]
STR             R1, [R2,R3,LSL#2]
MOV             R2, #dword_74498
LDR             R3, [R6]
LDR             R2, [R2]
LDR             R1, [R4,#(dword_6A748 - 0x6ABD0)]
SUB             R3, R3, R2
CMP             R3, R1
STRGT           R3, [R4,#(dword_6A748 - 0x6ABD0)]
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_3F3D4
LDR             R6, =aAddCgpu ; "add_cgpu"
MOV             R1, #aCgminerC ; "cgminer.c"
MOVW            R3, #0x2C13
MOV             R0, #0x28 ; '('
MOV             R2, R6
BL              sub_229BC
LDR             R7, [SP,#0x1C+var_10]
MOVW            R12, #0x2C14
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
MOV             R5, R0
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
LDR             R2, [R7,#4]
LDR             R1, [R2,#8]
MOV             R2, #4
STR             R12, [SP,#0x1C+var_18]
STR             R6, [SP,#0x1C+var_1C]
BL              sub_254E8
MOV             R3, #0
MOV             R0, R5  ; s
STR             R3, [R5,#4]
STR             R3, [R7,#8]
MOVW            R7, #0x79B9
BL              strlen
CMP             R0, #0xB
MOVW            R12, #0xBEEF
MOVT            R7, #0x9E37
STR             R0, [SP,#0x1C+s2]
MOV             R11, R0
MOVT            R12, #0xFEED
MOV             R3, R7
BLS             loc_3F9C8
ADD             R10, R5, #0xC

loc_3F458
LDRB            R2, [R10,#-6]
SUB             R11, R11, #0xC
LDRB            R1, [R10,#-2]
CMP             R11, #0xB
LDRB            R0, [R10,#-0xA]
LDRB            R6, [R10,#-7]
LDRB            LR, [R10,#-3]
MOV             R2, R2,LSL#16
LDRB            R8, [R10,#-0xB]
MOV             R1, R1,LSL#16
MOV             R0, R0,LSL#16
LDRB            R9, [R10,#-5]
ADD             R2, R2, R6,LSL#8
LDRB            R6, [R10,#-8]
ADD             R1, R1, LR,LSL#8
LDRB            LR, [R10,#-0xC]
ADD             R0, R0, R8,LSL#8
LDRB            R8, [R10,#-4]
ADD             R2, R2, R6
LDRB            R6, [R10,#-9]
ADD             R0, R0, LR
LDRB            LR, [R10,#-1]
ADD             R2, R2, R9,LSL#24
ADD             R1, R1, R8
ADD             R0, R0, R6,LSL#24
ADD             R7, R2, R7
ADD             R1, R1, LR,LSL#24
MOV             R2, R10
SUB             R0, R0, R7
ADD             R1, R1, R12
ADD             R10, R10, #0xC
SUB             R0, R0, R1
SUB             R7, R7, R1
ADD             R3, R0, R3
EOR             R3, R3, R1,LSR#13
SUB             R0, R7, R3
SUB             R1, R1, R3
EOR             R0, R0, R3,LSL#8
SUB             R1, R1, R0
SUB             R3, R3, R0
EOR             R1, R1, R0,LSR#13
SUB             R3, R3, R1
SUB             R0, R0, R1
EOR             R3, R3, R1,LSR#12
SUB             R0, R0, R3
SUB             R1, R1, R3
EOR             R0, R0, R3,LSL#16
SUB             R1, R1, R0
SUB             R3, R3, R0
EOR             R1, R1, R0,LSR#5
SUB             R3, R3, R1
SUB             R7, R0, R1
EOR             R3, R3, R1,LSR#3
SUB             R7, R7, R3
SUB             R1, R1, R3
EOR             R7, R7, R3,LSL#10
SUB             R1, R1, R7
EOR             R12, R1, R7,LSR#15
BHI             loc_3F458

loc_3F544
LDR             R1, [SP,#0x1C+s2]
SUB             R11, R11, #1
ADD             R12, R1, R12
CMP             R11, #0xA ; switch 11 cases
LDRLS           PC, [PC,R11,LSL#2] ; switch jump
B               def_3F554 ; jumptable 0003F554 default case
jpt_3F554 DCD loc_3F5D8 ; jump table for switch statement
DCD loc_3F5D0
DCD loc_3F5C8
DCD loc_3F5C0
DCD loc_3F5B8
DCD loc_3F5B0
DCD loc_3F5A8
DCD loc_3F5A0
DCD loc_3F598
DCD loc_3F590
DCD loc_3F588

loc_3F588               ; jumptable 0003F554 case 10
LDRB            R1, [R2,#0xA]
ADD             R12, R12, R1,LSL#24

loc_3F590               ; jumptable 0003F554 case 9
LDRB            R1, [R2,#9]
ADD             R12, R12, R1,LSL#16

loc_3F598               ; jumptable 0003F554 case 8
LDRB            R1, [R2,#8]
ADD             R12, R12, R1,LSL#8

loc_3F5A0               ; jumptable 0003F554 case 7
LDRB            R1, [R2,#7]
ADD             R7, R7, R1,LSL#24

loc_3F5A8               ; jumptable 0003F554 case 6
LDRB            R1, [R2,#6]
ADD             R7, R7, R1,LSL#16

loc_3F5B0               ; jumptable 0003F554 case 5
LDRB            R1, [R2,#5]
ADD             R7, R7, R1,LSL#8

loc_3F5B8               ; jumptable 0003F554 case 4
LDRB            R1, [R2,#4]
ADD             R7, R7, R1

loc_3F5C0               ; jumptable 0003F554 case 3
LDRB            R1, [R2,#3]
ADD             R3, R3, R1,LSL#24

loc_3F5C8               ; jumptable 0003F554 case 2
LDRB            R1, [R2,#2]
ADD             R3, R3, R1,LSL#16

loc_3F5D0               ; jumptable 0003F554 case 1
LDRB            R1, [R2,#1]
ADD             R3, R3, R1,LSL#8

loc_3F5D8               ; jumptable 0003F554 case 0
LDRB            R2, [R2]
ADD             R3, R3, R2

def_3F554               ; jumptable 0003F554 default case
SUB             R3, R3, R7
SUB             R2, R7, R12
SUB             R3, R3, R12
STR             R5, [R5,#0x1C]
EOR             R3, R3, R12,LSR#13
MOV             R0, R5  ; s
SUB             R2, R2, R3
SUB             R12, R12, R3
EOR             R2, R2, R3,LSL#8
SUB             R1, R12, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#13
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#12
SUB             R2, R2, R3
SUB             R1, R1, R3
EOR             R2, R2, R3,LSL#16
SUB             R1, R1, R2
SUB             R3, R3, R2
EOR             R1, R1, R2,LSR#5
SUB             R3, R3, R1
SUB             R2, R2, R1
EOR             R3, R3, R1,LSR#3
SUB             R2, R2, R3
SUB             R6, R1, R3
EOR             R3, R2, R3,LSL#10
SUB             R6, R6, R3
EOR             R6, R6, R3,LSR#15
STR             R6, [R5,#0x24]
BL              strlen
LDR             R7, [R4,#(dword_6A740 - 0x6ABD0)]
STR             R0, [R5,#0x20]
CMP             R7, #0
BEQ             loc_3F91C
LDR             R3, [R7,#8]
MOV             R2, #0
STR             R2, [R5,#0x10]
ADD             R8, R5, #8
STR             R3, [R5,#8]
LDR             R2, [R7,#8]
LDR             R3, [R2,#0x10]
LDR             R2, [R2,#0x14]
SUB             R3, R3, R2
STR             R3, [R5,#0xC]
LDR             R3, [R7,#8]
LDR             R3, [R3,#0x10]
STR             R5, [R3,#8]
LDR             R3, [R7,#8]
STR             R8, [R3,#0x10]

loc_3F6A8
LDR             R2, [R7,#8]
MOV             R1, #0
LDR             R3, [R2,#0xC]
ADD             R3, R3, #1
STR             R3, [R2,#0xC]
LDR             R2, [R7,#8]
LDRD            R2, R3, [R2]
SUB             R3, R3, #1
AND             R3, R3, R6
ADD             R3, R3, R3,LSL#1
MOV             R3, R3,LSL#2
ADD             R2, R2, R3
LDR             R0, [R2,#4]
ADD             R0, R0, #1
STR             R0, [R2,#4]
LDR             R2, [R7,#8]
LDR             R2, [R2]
LDR             R2, [R2,R3]
STR             R1, [R5,#0x14]
STR             R2, [R5,#0x18]
LDR             R2, [R7,#8]
LDR             R2, [R2]
LDR             R1, [R2,R3]
ADD             R2, R2, R3
CMP             R1, #0
STRNE           R8, [R1,#0xC]
LDRNE           R2, [R7,#8]
LDRNE           R2, [R2]
ADDNE           R2, R2, R3
STR             R8, [R2]
LDR             R2, [R7,#8]
LDR             R2, [R2]
ADD             R2, R2, R3
LDRD            R2, R3, [R2,#4]
ADD             R3, R3, #1
ADD             R3, R3, R3,LSL#2
CMP             R2, R3,LSL#1
BCC             loc_3F2B0
LDR             R3, [R5,#8]
LDR             R2, [R3,#0x24]
CMP             R2, #1
BEQ             loc_3F2B0
LDR             R0, [R3,#4]
MOV             R1, #1  ; size
ADD             R0, R0, R0,LSL R1
MOV             R0, R0,LSL#3 ; nmemb
BL              calloc
SUBS            R8, R0, #0
BEQ             loc_3F9D4
LDR             R2, [R5,#8]
MOV             R10, #0
LDR             R3, [R2,#4]
LDR             R0, [R2,#0xC]
LDR             R1, [R2,#8]
MOV             R3, R3,LSL#1
ADD             R1, R1, #1
SUB             R3, R3, #1
TST             R3, R0
MOVNE           R3, #1
MOVEQ           R3, R10
ADD             R3, R3, R0,LSR R1
STR             R3, [R2,#0x18]
LDR             R3, [R5,#8]
STR             R10, [R3,#0x1C]
LDR             R3, [R5,#8]
LDR             R6, [R3,#4]
CMP             R6, R10
BEQ             loc_3F884
MOV             R11, R10
STR             R10, [SP,#0x1C+s2]
STR             R4, [SP,#0x1C+var_8]

loc_3F7C4
LDR             R2, [R3]
LDR             R7, [R2,R10]
CMP             R7, #0
BEQ             loc_3F868
MOV             R4, R6
B               loc_3F7E4

loc_3F7DC
LDR             R4, [R3,#4]
MOV             R7, R6

loc_3F7E4
LDR             R3, [R7,#0x1C]
MOV             R4, R4,LSL#1
LDR             R6, [R7,#0x10]
SUB             R4, R4, #1
AND             R4, R4, R3
ADD             R4, R4, R4,LSL#1
ADD             R9, R8, R4,LSL#2
LDR             R3, [R9,#4]
ADD             R3, R3, #1
STR             R3, [R9,#4]
LDR             R2, [R5,#8]
LDR             R1, [R2,#0x18]
CMP             R3, R1
BLS             loc_3F83C
LDR             R3, [R2,#0x1C]
ADD             R3, R3, #1
STR             R3, [R2,#0x1C]
LDR             R3, [R5,#8]
LDR             R0, [R9,#4]
LDR             R1, [R3,#0x18]
BLX             __udivsi3
STR             R0, [R9,#8]

loc_3F83C
STR             R11, [R7,#0xC]
LDR             R3, [R8,R4,LSL#2]
STR             R3, [R7,#0x10]
LDR             R3, [R8,R4,LSL#2]
CMP             R3, #0
STRNE           R7, [R3,#0xC]
CMP             R6, #0
STR             R7, [R8,R4,LSL#2]
LDR             R3, [R5,#8]
BNE             loc_3F7DC
LDR             R6, [R3,#4]

loc_3F868
LDR             R2, [SP,#0x1C+s2]
ADD             R10, R10, #0xC
ADD             R2, R2, #1
CMP             R2, R6
STR             R2, [SP,#0x1C+s2]
BCC             loc_3F7C4

loc_3F880
LDR             R4, [SP,#0x1C+var_8]

loc_3F884               ; ptr
LDR             R0, [R3]
BL              free
LDR             R2, [R5,#8]
LDR             R3, [R2,#4]
MOV             R3, R3,LSL#1
STR             R3, [R2,#4]
LDR             R2, [R5,#8]
LDR             R3, [R2,#8]
ADD             R3, R3, #1
STR             R3, [R2,#8]
LDR             R3, [R5,#8]
STR             R8, [R3]
LDR             R3, [R5,#8]
LDR             R2, [R3,#0x1C]
LDR             R1, [R3,#0xC]
CMP             R2, R1,LSR#1
LDRHI           R2, [R3,#0x20]
MOVLS           R2, #0
ADDHI           R2, R2, #1
STR             R2, [R3,#0x20]
LDR             R3, [R5,#8]
LDR             R2, [R3,#0x20]
CMP             R2, #1
MOVHI           R2, #1
STRHI           R2, [R3,#0x24]
B               loc_3F2B0

loc_3F8EC
LDR             R11, [SP,#0x1C+s2]
MOV             R10, R6
B               loc_3F108

loc_3F8F8
MOVW            R1, #0x2C19
LDR             R0, =aAddCgpu ; "add_cgpu"
BL              sub_2EF84

loc_3F904
MOVW            R1, #0x2C1B
LDR             R0, =aAddCgpu ; "add_cgpu"
BL              sub_2FB24

loc_3F910
MOVW            R1, #0x2C1D
LDR             R0, =aAddCgpu ; "add_cgpu"
BL              sub_2EFE0

loc_3F91C
STR             R7, [R5,#0x10]
MOV             R0, #0x2C ; ',' ; size
STR             R7, [R5,#0xC]
STR             R5, [R4,#(dword_6A740 - 0x6ABD0)]
BL              malloc
CMP             R0, #0
STR             R0, [R5,#8]
BEQ             loc_3F9D4
MOV             R2, #0x2C ; ',' ; n
MOV             R1, R7  ; c
MOV             R8, R5
BL              memset
LDR             R3, [R8,#8]!
MOV             R12, #0x20 ; ' '
MOV             R1, #5
MOV             R2, #8
MOV             R0, #0x180 ; size
STR             R8, [R3,#0x10]
LDR             R3, [R5,#8]
STR             R12, [R3,#4]
LDR             R3, [R5,#8]
STR             R1, [R3,#8]
LDR             R3, [R5,#8]
STR             R2, [R3,#0x14]
LDR             R9, [R5,#8]
BL              malloc
STR             R0, [R9]
LDR             R3, [R5,#8]
LDR             R0, [R3] ; s
CMP             R0, #0
BEQ             loc_3F9D4
MOV             R1, R7  ; c
MOV             R2, #0x180 ; n
BL              memset
LDR             R2, [R5,#8]
MOV             R3, #0xA0111FE1
MOV             R7, R5
STR             R3, [R2,#0x28]
B               loc_3F6A8

loc_3F9BC
MOVW            R1, #0x2C1F
LDR             R0, =aAddCgpu ; "add_cgpu"
BL              sub_2F03C

loc_3F9C8
MOV             R2, R5
LDR             R11, [SP,#0x1C+s2]
B               loc_3F544

loc_3F9D4               ; status
MOV             R0, #0xFFFFFFFF
BL              exit
; End of function sub_3EFD4

off_3F9DC DCD aAddCgpu  ; "add_cgpu"



; _BYTE *__fastcall sub_3F9E0(const void *)
sub_3F9E0

var_C= -0xC
var_8= -8

PUSH            {R4-R7,LR}
MOVW            R4, #:lower16:aCgminerC ; "cgminer.c"
LDR             R6, =aCopyDrv ; "copy_drv"
MOVT            R4, #:upper16:aCgminerC ; "cgminer.c"
SUB             SP, SP, #0xC
MOV             R7, R0
MOV             R1, R4
MOVW            R3, #0x2C37
MOV             R2, R6
MOV             R0, #0x78 ; 'x'
BL              sub_229BC
MOVW            R2, #0x2C38
MOV             R3, R4
STR             R2, [SP,#0xC+var_8]
MOV             R1, R7
STR             R6, [SP,#0xC+var_C]
MOV             R2, #0x78 ; 'x'
MOV             R5, R0
BL              sub_254E8
MOV             R3, #1
MOV             R0, R5
STRB            R3, [R5,#0x64]
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_3F9E0

off_3FA40 DCD aCopyDrv  ; "copy_drv"



; void sub_3FA44()
sub_3FA44

var_940= -0x940
s= -0x900
var_800= -0x800

PUSH            {R4,LR}
SUB             SP, SP, #0x940
MOV             R0, SP  ; info
BL              sysinfo
CMP             R0, #0
BNE             loc_3FAE8
LDR             R2, [SP,#0x940+var_940]
MOVW            R3, #:lower16:dword_73320
MOVW            R0, #:lower16:dword_74484
MOVT            R3, #:upper16:dword_73320
MOVT            R0, #:upper16:dword_74484
MOVW            R1, #:lower16:aSetStartTimePo ; "set_start_time_point total_tv_start_sys"...
ADD             R12, R2, #1
STR             R2, [R3]
STR             R12, [R0]
MOV             R3, R12
MOVT            R1, #:upper16:aSetStartTimePo ; "set_start_time_point total_tv_start_sys"...
ADD             R0, SP, #0x940+s ; s
BL              sprintf
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3FAB8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3FB3C

loc_3FAB8
MOVW            R2, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:(aApiMcastFromSS+0x14) ; format
ADD             R3, SP, #0x940+s
ADD             R0, SP, #0x940+var_800 ; s
BL              snprintf
ADD             R1, SP, #0x940+var_800
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_3FAE0
ADD             SP, SP, #0x940
POP             {R4,PC}

loc_3FAE8
BL              __errno_location
LDR             R4, [R0]
MOV             R0, R4  ; errnum
BL              strerror
MOVW            R1, #:lower16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
MOV             R3, R0
MOV             R2, R4
MOVT            R1, #:upper16:aFailedToGetSys ; "Failed to get sysinfo, errno:%u, reason"...
ADD             R0, SP, #0x940+s ; s
BL              sprintf
MOV             R0, #0  ; timer
BL              time
MOVW            R2, #:lower16:dword_73320
MOVW            R3, #:lower16:dword_74484
MOVT            R2, #:upper16:dword_73320
ADD             R1, R0, #1
MOVT            R3, #:upper16:dword_74484
STR             R0, [R2]
STR             R1, [R3]
ADD             SP, SP, #0x940
POP             {R4,PC}

loc_3FB3C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_3FAB8
B               loc_3FAE0
; End of function sub_3FA44




; void sub_3FB54()
sub_3FB54

var_908= -0x908
var_904= -0x904
var_900= -0x900
s= -0x800

PUSH            {R4-R8,LR}
MOVW            R4, #:lower16:byte_68BD8
SUB             SP, SP, #0x900
MOVW            R1, #:lower16:aRb ; "rb"
SUB             SP, SP, #8
MOVT            R4, #:upper16:byte_68BD8
MOVT            R1, #:upper16:aRb ; "rb"
LDR             R0, [R4,#(dword_68DE8 - 0x68BD8)]
ADD             R5, SP, #0x908+var_900
BL              fopen64
MOV             R2, #0x100 ; n
MOV             R6, R0
MOV             R1, #0  ; c
MOV             R0, R5  ; s
BL              memset
CMP             R6, #0
BEQ             loc_3FCE8
MOV             R3, R6  ; stream
MOV             R2, #0x100 ; n
MOV             R1, #1  ; size
MOV             R0, R5  ; ptr
BL              fread
CMP             R0, #0
BLE             loc_3FDB4
MOV             R1, #0xA ; c
MOV             R0, R5  ; s
BL              strchr
SUBS            R7, R0, #0
BEQ             loc_3FE50
MOVW            R4, #:lower16:byte_6ABD0
LDR             R8, =aReadVersionFil ; "read_version_file"
MOVT            R4, #:upper16:byte_6ABD0
MOVW            R2, #0x2D1D
SUB             R6, R4, #0x480
MOV             R3, #aCgminerC ; "cgminer.c"
SUB             R0, R6, #4
STR             R2, [SP,#0x908+var_904]
MOV             R1, R5
SUB             R2, R7, R5
STR             R8, [SP,#0x908+var_908]
BL              sub_254E8
ADD             R1, R7, #1
MOV             R0, R5
BL              stpcpy
MOV             R1, #0xA ; c
MOV             R7, R0
MOV             R0, R5  ; s
BL              strchr
CMP             R0, #0
BEQ             loc_3FE38
MOVW            R12, #0x2D26
MOVW            R3, #:lower16:aCgminerC ; "cgminer.c"
SUB             R2, R0, R5
STR             R8, [SP,#0x908+var_908]
MOV             R1, R5
STR             R12, [SP,#0x908+var_904]
MOVT            R3, #:upper16:aCgminerC ; "cgminer.c"
SUB             R0, R4, #0x384
BL              sub_254E8

loc_3FC44
SUB             R6, R6, #4
MOV             R0, R6  ; s
BL              strlen
SUB             R0, R0, #1
ADD             R2, R4, R0
LDRB            R3, [R2,#-0x484]
CMP             R3, #0xA
BNE             loc_3FC80
MOV             R3, #0
MOV             R0, R6  ; s
STRB            R3, [R2,#-0x484]
BL              strlen
SUB             R0, R0, #1
ADD             R3, R4, R0
LDRB            R3, [R3,#-0x484]

loc_3FC80
CMP             R3, #0xD
ADDEQ           R0, R4, R0
MOVEQ           R3, #0
STRBEQ          R3, [R0,#-0x484]
LDR             R0, =byte_6A84C ; s
BL              strlen
SUB             R0, R0, #1
ADD             R2, R4, R0
LDRB            R3, [R2,#-0x384]
CMP             R3, #0xA
BNE             loc_3FCC8
MOV             R3, #0
LDR             R0, =byte_6A84C ; s
STRB            R3, [R2,#-0x384]
BL              strlen
SUB             R0, R0, #1
ADD             R3, R4, R0
LDRB            R3, [R3,#-0x384]

loc_3FCC8
CMP             R3, #0xD
MOVW            R5, #0x4500
ADDEQ           R4, R4, R0
MOVEQ           R3, #0
MOVTNE          R5, #7
MOVTEQ          R5, #7
STRBEQ          R3, [R4,#-0x384]
B               loc_3FD38

loc_3FCE8
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3FD10
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3FE20

loc_3FD10
MOVW            R2, #:lower16:aOpenMinerVersi ; "Open miner version file %s error"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aOpenMinerVersi ; "Open miner version file %s error"
LDR             R3, [R4,#(dword_68DE8 - 0x68BD8)]
ADD             R0, SP, #0x908+s ; s
BL              snprintf
ADD             R1, SP, #0x908+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_3FD38
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3FD58
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3FD94

loc_3FD58
LDR             R3, =byte_6A84C
MOVW            R2, #:lower16:aMinerCompileTi ; "Miner compile time: %s type: %s"
ADD             R0, SP, #0x908+s ; s
MOVT            R2, #:upper16:aMinerCompileTi ; "Miner compile time: %s type: %s"
MOV             R1, #0x800 ; maxlen
STR             R3, [SP,#0x908+var_908]
SUB             R3, R3, #0x100
BL              snprintf
ADD             R1, SP, #0x908+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
ADD             SP, SP, #0x900
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_3FD94
MOV             R3, #dword_67DB4

loc_3FD9C
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_3FD58
ADD             SP, SP, #0x900
ADD             SP, SP, #8
POP             {R4-R8,PC}

loc_3FDB4
MOV             R5, #byte_74500
LDRB            R3, [R5]
CMP             R3, #0
BNE             loc_3FDF0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3FDF0
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #2
BLE             loc_3FD9C

loc_3FDF0
MOVW            R2, #:lower16:aReadMinerVersi ; "Read miner version file %s error %d"
LDR             R3, [R4,#(dword_68DE8 - 0x68BD8)]
MOVT            R2, #:upper16:aReadMinerVersi ; "Read miner version file %s error %d"
STR             R0, [SP,#0x908+var_908]
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x908+s ; s
BL              snprintf
ADD             R1, SP, #0x908+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
B               loc_3FD38

loc_3FE20
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #2
BLE             loc_3FD9C
B               loc_3FD10

loc_3FE38
SUB             R2, R7, R5
MOV             R1, R5  ; src
ADD             R2, R2, #1 ; n
SUB             R0, R4, #0x384 ; dest
BL              memcpy
B               loc_3FC44

loc_3FE50
LDR             R6, =unk_6A750
MOV             R1, R5  ; src
SUB             R0, R6, #4 ; dest
ADD             R4, R6, #0x480
BL              strcpy
B               loc_3FC44
; End of function sub_3FB54

off_3FE68 DCD aReadVersionFil ; "read_version_file"
off_3FE6C DCD byte_6A84C
off_3FE70 DCD unk_6A750



; void sub_3FE74()
sub_3FE74

var_804= -0x804

PUSH            {R4,R5,LR}
MOV             R4, #byte_74500
SUB             SP, SP, #0x800
SUB             SP, SP, #4
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_3FEA8
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_3FF48

loc_3FEA8
MOV             R5, SP
MOVW            R2, #:lower16:aStartS ; "START %s"
LDR             R3, =aLoadDefaultCon_0 ; "load_default_config_new"
MOVT            R2, #:upper16:aStartS ; "START %s"
MOV             R1, #0x800 ; maxlen
MOV             R0, R5  ; s
BL              snprintf
MOV             R1, R5
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58
MOV             R3, #byte_68BD8
LDR             R3, [R3,#(newthread - 0x68BD8)]
CMP             R3, #0
BEQ             loc_3FF8C
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_3FF08
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_40018

loc_3FF08
MOVW            R12, #:lower16:aConfigTooFastP ; "config too fast, pool is changing, plea"...
MOV             LR, R5
MOVT            R12, #:upper16:aConfigTooFastP ; "config too fast, pool is changing, plea"...
LDM             R12!, {R0-R3} ; "config too fast, pool is changing, plea"...
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " pool is changing, please wait\n"
STM             LR!, {R0-R3}
LDM             R12, {R0-R3} ; "g, please wait\n"
STM             LR, {R0-R3}
MOV             R1, R5
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_3FF3C
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_3FF48
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #4
BGT             loc_3FEA8
MOV             R2, #byte_68BD8
LDR             R2, [R2,#(newthread - 0x68BD8)]
CMP             R2, #0
BEQ             loc_3FF8C

loc_3FF70
LDR             R3, [R3]
CMP             R3, #2
MOVGT           R5, SP
BGT             loc_3FF08
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_3FF8C               ; arg
MOV             R3, #0
MOVW            R2, #:lower16:sub_3479C
MOV             R1, R3  ; attr
MOVT            R2, #:upper16:sub_3479C ; start_routine
LDR             R0, =newthread ; newthread
BL              pthread_create
CMP             R0, #0
BEQ             loc_3FF3C
LDRB            R3, [R4]
CMP             R3, #0
BNE             loc_3FFE0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_3FFE0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_3FF3C

loc_3FFE0
MOVW            R12, #:lower16:aFailedToCreate_3 ; "Failed to create pool_change_thread"
MOV             LR, SP
MOVT            R12, #:upper16:aFailedToCreate_3 ; "Failed to create pool_change_thread"
LDM             R12!, {R0-R3} ; "Failed to create pool_change_thread"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; " pool_change_thread"
LDR             R12, [R12] ; "ead"
STM             LR!, {R0-R3}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
STR             R12, [LR]
BL              sub_20F58
B               loc_3FF3C

loc_40018
MOV             R3, #dword_67DB4
B               loc_3FF70
; End of function sub_3FE74

off_40024 DCD aLoadDefaultCon_0 ; "load_default_config_new"
off_40028 DCD newthread



; char *__fastcall sub_4002C(const char *, const char *)
sub_4002C
PUSH            {R4-R6,LR}
MOV             R4, R1
MOV             R6, R0
BL              strlen
MOV             R5, R0
MOV             R0, R4  ; s
BL              strlen
ADD             R0, R5, R0 ; size
BL              malloc
MOV             R2, R4
MOV             R5, R0
MOV             R1, R6  ; format
BL              sprintf
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_4002C




; int __fastcall sub_40068(_BYTE *)
sub_40068
MOV             R3, #1
STRB            R3, [R0]
MOV             R0, #0
BX              LR
; End of function sub_40068




; int __fastcall sub_40078(_BYTE *)
sub_40078
MOV             R3, #0
STRB            R3, [R0]
MOV             R0, R3
BX              LR
; End of function sub_40078




; int __fastcall sub_40088(_BYTE *)
sub_40088
MOV             R3, #0
STRB            R3, [R0]
MOV             R0, R3
BX              LR
; End of function sub_40088




; char *__fastcall sub_40098(const char *, _BYTE *)
sub_40098
PUSH            {R4-R6,LR}
MOV             R5, R1
MOVW            R1, #:lower16:aYes ; "yes"
MOV             R4, R0
MOVT            R1, #:upper16:aYes ; "yes"
BL              strcasecmp
CMP             R0, #0
BEQ             loc_4011C
MOVW            R1, #:lower16:aTrue ; "true"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aTrue ; "true"
BL              strcasecmp
CMP             R0, #0
BEQ             loc_4011C
MOVW            R1, #:lower16:dword_4B184
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:dword_4B184 ; s2
BL              strcasecmp
CMP             R0, #0
BEQ             loc_4010C
MOVW            R1, #:lower16:(aInvalidParamet_0+0x24) ; "false"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:(aInvalidParamet_0+0x24) ; "false"
BL              strcasecmp
CMP             R0, #0
BEQ             loc_4010C
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_40BD0

loc_4010C
MOV             R3, #0
MOV             R0, #0
STRB            R3, [R5]
POP             {R4-R6,PC}

loc_4011C
MOV             R3, #1
MOV             R0, #0
STRB            R3, [R5]
POP             {R4-R6,PC}
; End of function sub_40098




; char *__fastcall sub_4012C(const char *, _BYTE *)
sub_4012C
PUSH            {R4,LR}
MOV             R4, R1
BL              sub_40098
CMP             R0, #0
LDRBEQ          R3, [R4]
EOREQ           R3, R3, #1
STRBEQ          R3, [R4]
POP             {R4,PC}
; End of function sub_4012C




; int __fastcall sub_4014C(int, _DWORD *)
sub_4014C
STR             R0, [R1]
MOV             R0, #0
BX              LR
; End of function sub_4014C




; char *__fastcall sub_40158(const char *, _DWORD *)
sub_40158

var_4= -4

PUSH            {R4-R6,LR}
SUB             SP, SP, #8
MOV             R6, R1
MOV             R4, R0
BL              __errno_location
MOV             R3, #0
MOV             R5, R0
STR             R3, [R5]
MOV             R0, R4
ADD             R1, SP, #8+var_4
BL              strtof
LDR             R3, [SP,#8+var_4]
VSTR            S0, [R6]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_401C8
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_401C8
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_401D8
MOVW            R0, #:lower16:aSIsOutOfRange ; "'%s' is out of range"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsOutOfRange ; "'%s' is out of range"
BL              sub_4002C
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_401C8
MOVW            R0, #:lower16:aSIsNotANumber ; "'%s' is not a number"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsNotANumber ; "'%s' is not a number"
BL              sub_4002C

loc_401D8
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_40158




; char *__fastcall sub_401E0(const char *, int *)
sub_401E0

endptr= -4

PUSH            {R4-R6,LR}
SUB             SP, SP, #8
MOV             R6, R1
MOV             R4, R0
BL              __errno_location
MOV             R2, #0  ; base
MOV             R5, R0
ADD             R1, SP, #8+endptr ; endptr
MOV             R0, R4  ; nptr
STR             R2, [R5]
BL              strtol
LDR             R3, [SP,#8+endptr]
STR             R0, [R6]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_40250
LDRB            R3, [R4]
CMP             R3, #0
BEQ             loc_40250
LDR             R0, [R5]
CMP             R0, #0
BEQ             loc_40260
MOVW            R0, #:lower16:aSIsOutOfRange ; "'%s' is out of range"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsOutOfRange ; "'%s' is out of range"
BL              sub_4002C
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_40250
MOVW            R0, #:lower16:aSIsNotANumber ; "'%s' is not a number"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsNotANumber ; "'%s' is not a number"
BL              sub_4002C

loc_40260
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_401E0




; char *__fastcall sub_40268(const char *, _DWORD *)
sub_40268

var_4= -4

PUSH            {R4,LR}
SUB             SP, SP, #8
MOV             R4, R1
ADD             R1, SP, #8+var_4
BL              sub_401E0
CMP             R0, #0
LDREQ           R3, [SP,#8+var_4]
STREQ           R3, [R4]
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_40268

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R5, R1
ADD             R1, SP, #4
MOV             R4, R0
BL              sub_401E0
CMP             R0, #0
BEQ             loc_402B8

loc_402B0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_402B8
LDR             R3, [SP,#4]
CMP             R3, #0
STRGE           R3, [R5]
BGE             loc_402B0
MOVW            R0, #:lower16:aSIsNegative ; "'%s' is negative"
MOV             R1, R4
MOVT            R0, #:upper16:aSIsNegative ; "'%s' is negative"
BL              sub_4002C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R4, R1
ADD             R1, SP, #4
MOV             R5, R0
BL              sub_401E0
CMP             R0, #0
BEQ             loc_40308

loc_40300
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_40308
LDR             R3, [SP,#4]
CMP             R3, #0
STR             R3, [R4]
BGE             loc_40300
MOVW            R0, #:lower16:aSIsNegative ; "'%s' is negative"
MOV             R1, R5
MOVT            R0, #:upper16:aSIsNegative ; "'%s' is negative"
BL              sub_4002C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}



; int __fastcall sub_40330(_DWORD *)
sub_40330
MOV             R2, R0
MOV             R0, #0
LDR             R3, [R2]
ADD             R3, R3, #1
STR             R3, [R2]
BX              LR
; End of function sub_40330



; Attributes: noreturn

; void __fastcall __noreturn sub_40348(const char *)
sub_40348
PUSH            {R4,LR}
BL              puts
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
MOV             R0, #0  ; status
BL              exit
; End of function sub_40348



; Attributes: noreturn

; void __fastcall __noreturn sub_40368(int)
sub_40368
MOVW            R3, #:lower16:dword_76868
PUSH            {R4,LR}
MOVT            R3, #:upper16:dword_76868
MOV             R1, R0
LDR             R0, [R3]
BL              sub_410E8
MOV             R1, R0
MOV             R0, #(aApiMcastFromSS+0x14) ; format
BL              printf
MOV             R3, #stdout
LDR             R0, [R3] ; stream
BL              fflush
MOV             R0, #0  ; status
BL              exit
; End of function sub_40368




; char *__fastcall sub_403A8(char *, unsigned __int8 *)
sub_403A8
LDRB            R12, [R1]
MOVW            R3, #:lower16:(aInvalidParamet_0+0x24) ; "false"
MOVW            R1, #:lower16:aTrue ; "true"
MOVT            R3, #:upper16:(aInvalidParamet_0+0x24) ; "false"
MOVT            R1, #:upper16:aTrue ; "true"
MOV             R2, #0x50 ; 'P'
CMP             R12, #0
MOVEQ           R1, R3
B               strncpy
; End of function sub_403A8




; char *__fastcall sub_403CC(char *, unsigned __int8 *)
sub_403CC
LDRB            R12, [R1]
MOVW            R3, #:lower16:aTrue ; "true"
MOVW            R1, #:lower16:(aInvalidParamet_0+0x24) ; "false"
MOVT            R3, #:upper16:aTrue ; "true"
MOVT            R1, #:upper16:(aInvalidParamet_0+0x24) ; "false"
MOV             R2, #0x50 ; 'P'
CMP             R12, #0
MOVEQ           R1, R3
B               strncpy
; End of function sub_403CC




; char *__fastcall sub_403F0(_BYTE *, const char **)
sub_403F0
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R0, [R1] ; s
MOV             R7, R1
MOV             R6, #0x22 ; '"'
BL              strlen
CMP             R0, #0x4E ; 'N'
MOV             R5, R0
MOV             R0, R4
STRB            R6, [R0],#1 ; dest
LDR             R1, [R7] ; src
BHI             loc_40440
MOV             R2, R5  ; n
ADD             R4, R4, R5
BL              strncpy
CMP             R5, #0x4E ; 'N'
STRB            R6, [R4,#1]
MOVNE           R3, #0
STRBNE          R3, [R4,#2]
POP             {R4-R8,PC}

loc_40440               ; n
MOV             R2, #0x4E ; 'N'
BL              strncpy
STRB            R6, [R4,#0x4F]
POP             {R4-R8,PC}
; End of function sub_403F0




; int __fastcall sub_40450(char *, _DWORD *)
sub_40450
MOVW            R2, #:lower16:aI ; "%i"
LDR             R3, [R1]
MOVT            R2, #:upper16:aI ; "%i"
MOV             R1, #0x50 ; 'P'
B               snprintf
; End of function sub_40450




; int __fastcall sub_40464(char *, float *)
sub_40464

var_C= -0xC

PUSH            {LR}
MOVW            R2, #:lower16:a1f ; "%.1f"
VLDR            S14, [R1]
SUB             SP, SP, #0xC
MOVT            R2, #:upper16:a1f ; "%.1f"
MOV             R1, #0x50 ; 'P' ; maxlen
VCVT.F64.F32    D7, S14
VSTR            D7, [SP,#0xC+var_C]
BL              snprintf
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_40464




; int __fastcall sub_40490(char *, _DWORD *)
sub_40490
MOVW            R2, #:lower16:(aApiRequestToAs+0x30) ; "%u"
LDR             R3, [R1]
MOVT            R2, #:upper16:(aApiRequestToAs+0x30) ; "%u"
MOV             R1, #0x50 ; 'P'
B               snprintf
; End of function sub_40490




; int __fastcall sub_404A4(char *, _DWORD *)
sub_404A4
MOVW            R2, #:lower16:aLi ; "%li"
LDR             R3, [R1]
MOVT            R2, #:upper16:aLi ; "%li"
MOV             R1, #0x50 ; 'P'
B               snprintf
; End of function sub_404A4




; int __fastcall sub_404B8(char *, _DWORD *)
sub_404B8
MOVW            R2, #:lower16:(aGlobalQuotaGre+0x30) ; "%lu"
LDR             R3, [R1]
MOVT            R2, #:upper16:(aGlobalQuotaGre+0x30) ; "%lu"
MOV             R1, #0x50 ; 'P'
B               snprintf
; End of function sub_404B8




; const char *__fastcall sub_404CC(unsigned int *, size_t *)
sub_404CC
MOVW            R3, #:lower16:dword_7686C
MOV             R2, #0
MOVT            R3, #:upper16:dword_7686C
PUSH            {R4-R6,LR}
STR             R2, [R0]
LDR             R2, [R3]
CMP             R2, #0
BEQ             loc_40564
MOV             R2, #dword_76864
LDR             R12, [R2]
LDR             LR, [R12,#4]
CMP             LR, #8
BEQ             loc_4052C

loc_40504
LDR             R4, [R12]
MOV             R5, R1
MOV             R1, #asc_55B70 ; reject
ADD             R4, R4, #1
MOV             R0, R4  ; s
BL              strcspn
STR             R0, [R5]

loc_40524
MOV             R0, R4
POP             {R4-R6,PC}

loc_4052C
MOV             R4, #0x1C
MOV             LR, #1

loc_40534
STR             LR, [R0]
LDR             R12, [R3]
CMP             R12, LR
ADD             LR, LR, #1
BLS             loc_40564
LDR             R12, [R2]
ADD             R12, R12, R4
ADD             R4, R4, #0x1C
LDR             R5, [R12,#4]
CMP             R5, #8
BNE             loc_40504
B               loc_40534

loc_40564
MOV             R4, #0
B               loc_40524
; End of function sub_404CC




; int __fastcall sub_4056C(int, size_t *)
sub_4056C
PUSH            {R4-R6,LR}
LDR             R4, [R1]
LDRB            R3, [R0,R4]
ADD             R0, R0, R4
AND             R2, R3, #0xDF
CMP             R2, #0
CMPNE           R3, #0x3D ; '='
MOVEQ           R4, #0
BEQ             loc_405AC
MOV             R5, R1
ADD             R4, R0, #2
MOVW            R1, #:lower16:asc_55B70 ; "|= "
MOV             R0, R4  ; s
MOVT            R1, #:upper16:asc_55B70 ; reject
BL              strcspn
STR             R0, [R5]

loc_405AC
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_4056C




; int __fastcall sub_405B4(int, unsigned int *, size_t *)
sub_405B4
PUSH            {R4-R8,LR}
MOV             R6, #dword_7686C
LDR             R3, [R1]
MOV             R4, R1
LDR             R1, [R6]
CMP             R3, R1
BCS             loc_40630
MOVW            R7, #:lower16:dword_76864
MOV             LR, R0
MOV             R5, R2
MOVT            R7, #:upper16:dword_76864

loc_405E4
LDR             R12, [R7]
RSB             R2, R3, R3,LSL#3
MOV             R0, LR
MOV             R1, R5
ADD             R2, R12, R2,LSL#2
LDR             R12, [R2,#4]
CMP             R12, #8
BEQ             loc_4061C
CMP             LR, #0
BEQ             loc_4063C
BL              sub_4056C
SUBS            LR, R0, #0
BNE             loc_40660
LDR             R3, [R4]

loc_4061C
ADD             R3, R3, #1
STR             R3, [R4]
LDR             R2, [R6]
CMP             R3, R2
BCC             loc_405E4

loc_40630
MOV             R4, #0
MOV             R0, R4
POP             {R4-R8,PC}

loc_4063C
LDR             LR, [R2]
MOV             R1, #asc_55B70 ; reject
ADD             R4, LR, #1
MOV             R0, R4  ; s
BL              strcspn
STR             R0, [R5]
MOV             R0, R4
POP             {R4-R8,PC}

loc_40660
MOV             R4, LR
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_405B4




; int __fastcall sub_4066C(const char **)
sub_4066C

var_10= -0x10
status= -4

PUSH            {R4-R8,LR}
SUB             SP, SP, #0x10
LDRD            R2, R3, [R0]
SUB             R1, R3, #1
CMP             R3, #4
CMPNE           R1, #1
BHI             loc_407D0
LDR             R3, [R0,#0x18]
MOV             R5, R0
CMP             R3, #0
BEQ             loc_407C0
LDRB            R3, [R2]
CMP             R3, #0x2D ; '-'
BNE             loc_407B0
ADD             R4, R2, #1
MOVW            R1, #:lower16:asc_55B70 ; "|= "
MOVW            R8, #:lower16:dword_76860
MOVW            R7, #:lower16:dword_76858
MOVW            R6, #:lower16:dword_7685C
MOV             R0, R4  ; s
MOVT            R1, #:upper16:asc_55B70 ; reject
MOVT            R8, #:upper16:dword_76860
BL              strcspn
MOVT            R7, #:upper16:dword_76858
MOVT            R6, #:upper16:dword_7685C
STR             R0, [SP,#0x10+status]
B               loc_40734

loc_406D8
CMP             R0, #1
BNE             loc_40764
LDR             R12, [R5,#4]
LDR             R2, [R8]
SUB             R3, R12, #2
BICS            R3, R3, #2
ADD             R2, R2, #1
LDREQ           R3, [R7]
STR             R2, [R8]
ADDEQ           R3, R3, #1
STREQ           R3, [R7]

loc_40704
CMP             R12, #1
BNE             loc_4071C
LDRB            R3, [R4,R0]
CMP             R3, #0x3D ; '='
CMPNE           R3, #0x20 ; ' '
BEQ             loc_40784

loc_4071C
MOV             R0, R4
ADD             R1, SP, #0x10+status
BL              sub_4056C
SUBS            R4, R0, #0
BEQ             loc_4075C
LDR             R0, [SP,#0x10+status] ; status

loc_40734
LDRB            R3, [R4]
CMP             R3, #0x2D ; '-'
BNE             loc_406D8
CMP             R0, #1
BEQ             loc_407A0
LDR             R3, [R6]
LDR             R12, [R5,#4]
ADD             R3, R3, #1
STR             R3, [R6]
B               loc_40704

loc_4075C
ADD             SP, SP, #0x10
POP             {R4-R8,PC}

loc_40764
SUB             R4, R4, #1
MOVW            R1, #:lower16:aOptionSInvalid ; "Option %s: invalid short option '%.*s'"
LDR             R2, [R5]
ADD             R3, R0, #1
STR             R4, [SP,#0x10+var_10]
MOVT            R1, #:upper16:aOptionSInvalid ; "Option %s: invalid short option '%.*s'"
MOV             R0, #1  ; status
BL              errx

loc_40784
ADD             R3, R0, #1
MOVW            R1, #:lower16:aOptionSDoesNot ; "Option %s: does not take arguments '%s'"
ADD             R3, R4, R3
LDR             R2, [R5]
MOV             R0, R12 ; status
MOVT            R1, #:upper16:aOptionSDoesNot ; "Option %s: does not take arguments '%s'"
BL              errx

loc_407A0
MOVW            R1, #:lower16:aOptionSInvalid_0 ; "Option %s: invalid long option '--'"
LDR             R2, [R5]
MOVT            R1, #:upper16:aOptionSInvalid_0 ; "Option %s: invalid long option '--'"
BL              errx

loc_407B0
MOVW            R1, #:lower16:aOptionSDoesNot_0 ; "Option %s: does not begin with '-'"
MOV             R0, #1  ; status
MOVT            R1, #:upper16:aOptionSDoesNot_0 ; "Option %s: does not begin with '-'"
BL              errx

loc_407C0
MOVW            R1, #:lower16:aOptionSDescrip ; "Option %s: description cannot be NULL"
MOV             R0, #1  ; status
MOVT            R1, #:upper16:aOptionSDescrip ; "Option %s: description cannot be NULL"
BL              errx

loc_407D0
MOVW            R1, #:lower16:aOptionSUnknown ; "Option %s: unknown entry type %u"
MOV             R0, #1  ; status
MOVT            R1, #:upper16:aOptionSUnknown ; "Option %s: unknown entry type %u"
BL              errx
; End of function sub_4066C




; int __fastcall sub_407E0(int *)
sub_407E0
PUSH            {R4-R6,LR}
MOV             R5, #dword_7686C
MOV             R6, #dword_76864
MOV             R4, R0
LDR             R1, [R5]
LDR             R0, [R6] ; ptr
ADD             R1, R1, #1
RSB             R1, R1, R1,LSL#3
MOV             R1, R1,LSL#2 ; size
BL              realloc
LDR             R3, [R5]
MOV             LR, R4
MOV             R12, R0
STR             R0, [R6]
ADD             R2, R3, #1
STR             R2, [R5]
RSB             R4, R3, R3,LSL#3
LDM             LR!, {R0-R3}
ADD             R12, R12, R4,LSL#2
STM             R12!, {R0-R3}
LDM             LR, {R0-R2}
STM             R12, {R0-R2}
POP             {R4-R6,PC}
; End of function sub_407E0




; const char *__fastcall sub_40844(unsigned int *, size_t *)
sub_40844
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
BL              sub_404CC
CMP             R0, #0
BNE             loc_40874
B               loc_40894

loc_40860
MOV             R2, R4
MOV             R1, R5
BL              sub_405B4
CMP             R0, #0
BEQ             loc_40894

loc_40874
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BNE             loc_40860
LDR             R3, [R4]
ADD             R0, R0, #1
SUB             R3, R3, #1
STR             R3, [R4]
POP             {R4-R6,PC}

loc_40894
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_40844




; _BYTE *__fastcall sub_4089C(int, unsigned int *, size_t *)
sub_4089C
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R2
BL              sub_405B4
CMP             R0, #0
BNE             loc_408CC
B               loc_408EC

loc_408B8
MOV             R2, R4
MOV             R1, R5
BL              sub_405B4
CMP             R0, #0
BEQ             loc_408EC

loc_408CC
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BNE             loc_408B8
LDR             R3, [R4]
ADD             R0, R0, #1
SUB             R3, R3, #1
STR             R3, [R4]
POP             {R4-R6,PC}

loc_408EC
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_4089C




; const char *__fastcall sub_408F4(unsigned int *)
sub_408F4

var_8= -8
var_4= -4

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R3, #0
ADD             R4, SP, #0xC+var_4
MOV             R5, R0
STR             R3, [R4,#-4]!
MOV             R1, R4
BL              sub_404CC
CMP             R0, #0
BNE             loc_40934
B               loc_40948

loc_40920
MOV             R2, R4
MOV             R1, R5
BL              sub_405B4
CMP             R0, #0
BEQ             loc_40948

loc_40934
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BEQ             loc_40920
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_40948
MOV             R0, #0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_408F4




; _BYTE *__fastcall sub_40954(int, unsigned int *)
sub_40954

var_8= -8
var_4= -4

PUSH            {R4,R5,LR}
SUB             SP, SP, #0xC
MOV             R3, #1
ADD             R4, SP, #0xC+var_4
MOV             R5, R1
STR             R3, [R4,#-4]!
MOV             R2, R4
BL              sub_405B4
CMP             R0, #0
BNE             loc_40994
B               loc_409A8

loc_40980
MOV             R2, R4
MOV             R1, R5
BL              sub_405B4
CMP             R0, #0
BEQ             loc_409A8

loc_40994
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BEQ             loc_40980
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_409A8
MOV             R0, #0
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_40954




; int __fastcall sub_409B4(const char *, const char *, const char *, const char *, const char *, const char *, const char *)
sub_409B4

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_10= -0x10
var_C= -0xC
var_8= -8
arg_0=  4
arg_4=  8
arg_8=  0xC

PUSH            {LR}
SUB             SP, SP, #0x24
LDR             LR, [SP,#0x24+arg_0]
LDR             R12, [SP,#0x24+arg_4]
STR             R1, [SP,#0x24+var_1C]
LDR             R1, [SP,#0x24+arg_8]
STR             R0, [SP,#0x24+var_20]
ADD             R0, SP, #0x24+var_20
STRD            R2, R3, [SP,#0x24+var_18]
STR             LR, [SP,#0x24+var_10]
STR             R12, [SP,#0x24+var_C]
STR             R1, [SP,#0x24+var_8]
BL              sub_4066C
ADD             R0, SP, #0x24+var_20
BL              sub_407E0
ADD             SP, SP, #0x24 ; '$'
POP             {PC}
; End of function sub_409B4




; int __fastcall sub_409F8(int result, int)
sub_409F8

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8

PUSH            {R4-R7,LR}
MOVW            R5, #:lower16:dword_7686C
SUBS            R7, R1, #0
MOVT            R5, #:upper16:dword_7686C
SUB             SP, SP, #0x24
MOV             R4, R0
LDR             R6, [R5]
BEQ             loc_40AA8
MOV             R3, #0
MOV             R2, #8
ADD             R0, SP, #0x24+var_20
STR             R3, [SP,#0x24+var_20]
STR             R3, [SP,#0x24+var_18]
STR             R3, [SP,#0x24+var_14]
STR             R3, [SP,#0x24+var_10]
STR             R3, [SP,#0x24+var_C]
STR             R7, [SP,#0x24+var_8]
STR             R2, [SP,#0x24+var_1C]
BL              sub_407E0
LDR             R3, [R4,#4]
CMP             R3, #0x10
BEQ             loc_40A80

loc_40A50
CMP             R3, #8
MOV             R0, R4
BEQ             loc_40ABC
BL              sub_4066C
MOV             R0, R4
BL              sub_407E0

loc_40A68
ADD             R4, R4, #0x1C
LDR             R3, [R4,#4]
CMP             R3, #0x10
BNE             loc_40A50
CMP             R7, #0
BEQ             loc_40AA0

loc_40A80
MOVW            R1, #:lower16:dword_76864
RSB             R0, R6, R6,LSL#3
MOVT            R1, #:upper16:dword_76864
LDR             R2, [R5]
LDR             R3, [R1]
SUB             R6, R2, R6
ADD             R3, R3, R0,LSL#2
STR             R6, [R3,#0x14]

loc_40AA0
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}

loc_40AA8
LDR             R3, [R0,#4]
CMP             R3, #0x10
BNE             loc_40A50
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R7,PC}

loc_40ABC
LDR             R1, [R4,#0x18]
LDR             R0, [R4]
BL              sub_409F8
B               loc_40A68
; End of function sub_409F8




; bool __fastcall sub_40ACC(_DWORD *, const char **, void (*)(const char *, ...))
sub_40ACC

var_8= -8
var_4= -4

PUSH            {R4-R7,LR}
MOV             R5, R1
LDR             R1, [R1]
SUB             SP, SP, #0xC
MOVW            R3, #:lower16:dword_76868
MOV             R7, R0
MOV             R6, R2
MOVT            R3, #:upper16:dword_76868
MOV             R2, #0
ADD             R4, SP, #0xC+var_4
STR             R1, [R3]
STR             R2, [R4,#-4]!

loc_40AFC
MOV             R3, R6
MOV             R2, R4
MOV             R1, R5
MOV             R0, R7
BL              sub_40C38
CMP             R0, #1
BEQ             loc_40AFC
CLZ             R0, R0
MOV             R0, R0,LSR#5
ADD             SP, SP, #0xC
POP             {R4-R7,PC}
; End of function sub_40ACC




; void sub_40B28()
sub_40B28
PUSH            {R4,LR}
MOV             R4, #dword_76864
LDR             R0, [R4] ; ptr
BL              free
MOV             R3, #0
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_40B28




; int sub_40B48(const char *, ...)
sub_40B48

var_4= -4
varg_r0=  8
varg_r1=  0xC
varg_r2=  0x10
varg_r3=  0x14

PUSH            {R0-R3}
PUSH            {R4,LR}
MOVW            R4, #:lower16:stderr
SUB             SP, SP, #8
MOVT            R4, #:upper16:stderr
ADD             R3, SP, #8+varg_r1
MOV             R2, R3  ; arg
LDR             R1, [SP,#8+varg_r0] ; format
LDR             R0, [R4] ; s
STR             R3, [SP,#8+var_4]
BL              vfprintf
LDR             R1, [R4] ; stream
MOV             R0, #0xA ; c
BL              fputc
ADD             SP, SP, #8
POP             {R4,LR}
ADD             SP, SP, #0x10
BX              LR
; End of function sub_40B48



; Attributes: noreturn

; void __noreturn sub_40B90(const char *, ...)
sub_40B90

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
MOVW            R4, #:lower16:stderr
PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R3, SP, #0xC+varg_r1
MOVT            R4, #:upper16:stderr
MOV             R2, R3  ; arg
LDR             R1, [SP,#0xC+varg_r0] ; format
LDR             R0, [R4] ; s
STR             R3, [SP,#0xC+var_8]
BL              vfprintf
LDR             R1, [R4] ; stream
MOV             R0, #0xA ; c
BL              fputc
MOV             R0, #1  ; status
BL              exit
; End of function sub_40B90




; char *__fastcall sub_40BD0(const char *)
sub_40BD0
PUSH            {R4-R6,LR}
MOV             R5, R0
BL              strlen
ADD             R0, R0, #0x16 ; size
BL              malloc
MOVW            R1, #:lower16:aInvalidArgumen ; "Invalid argument '%s'"
MOV             R4, R0
MOV             R2, R5
MOVT            R1, #:upper16:aInvalidArgumen ; "Invalid argument '%s'"
BL              sprintf
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_40BD0




; void *__fastcall sub_40C00(_DWORD *, int, int)
sub_40C00
PUSH            {R4,LR}
MOV             R4, R0
LDR             R3, [R0]
MOV             R0, R2,LSL#2
ADD             R12, R0, #4
ADD             R0, R1, R0 ; dest
SUB             R2, R3, R2
ADD             R1, R1, R12 ; src
MOV             R2, R2,LSL#2 ; n
BL              memmove
LDR             R3, [R4]
SUB             R3, R3, #1
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_40C00




; int __fastcall sub_40C38(_DWORD *, const char **, int *, void (*)(const char *, ...))
sub_40C38

var_1C= -0x1C
var_14= -0x14
var_10= -0x10
var_C= -0xC
n= -8

PUSH            {R4-R11,LR}
MOV             R8, R0
MOVW            R0, #:lower16:aPosixlyCorrect ; "POSIXLY_CORRECT"
SUB             SP, SP, #0x1C
MOVT            R0, #:upper16:aPosixlyCorrect ; "POSIXLY_CORRECT"
MOV             R5, R1
MOV             R7, R2
MOV             R9, R3
BL              getenv
CMP             R0, #0
LDR             R0, [R5,#4]
BEQ             loc_40C8C
CMP             R0, #0
ADD             R6, R5, #4
BEQ             loc_40C84
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
MOVNE           R0, #0
BEQ             loc_40DC8

loc_40C84
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_40C8C
CMP             R0, #0
BEQ             loc_40C84
LDRB            R3, [R0]
CMP             R3, #0x2D ; '-'
BEQ             loc_40CD0
ADD             R3, R5, #8
MOV             R4, #1
B               loc_40CB8

loc_40CAC
LDRB            R2, [R0]
CMP             R2, #0x2D ; '-'
BEQ             loc_40CD8

loc_40CB8
MOV             R6, R3
LDR             R0, [R3],#4
ADD             R4, R4, #1
CMP             R0, #0
BNE             loc_40CAC
B               loc_40C84

loc_40CD0
ADD             R6, R5, #4
MOV             R4, #1

loc_40CD8
LDRB            R3, [R0,#1]
CMP             R3, #0x2D ; '-'
BEQ             loc_40DA4

loc_40CE4
ADD             R3, SP, #0x1C+var_C
MOV             R0, R3
STR             R3, [SP,#0x1C+var_14]
BL              sub_408F4
CMP             R0, #0
BEQ             loc_40EB0
LDR             LR, [R7]
LDR             R3, [R6]
LDRB            R2, [R0]
ADD             LR, LR, #1
LDRB            R3, [R3,LR]
CMP             R2, R3
LDRNE           R10, [SP,#0x1C+var_14]
BNE             loc_40F78

loc_40D1C
LDR             R12, [SP,#0x1C+var_C]
SUB             R1, R0, #1
MOVW            R2, #:lower16:dword_76864
STR             R1, [SP,#0x1C+var_14]
MOVT            R2, #:upper16:dword_76864
MOV             R0, #2
STR             LR, [R7]
RSB             R1, R12, R12,LSL#3
LDR             R3, [R2]
STR             R0, [SP,#0x1C+n]
MOV             R1, R1,LSL R0
ADD             R3, R3, R1
LDR             R0, [R3,#4]
CMP             R0, #1
BEQ             loc_40EE8

loc_40D58
CMP             LR, #0
BNE             loc_40F54

loc_40D60
ADD             R3, R4, #1
LDR             R10, [R5,R3,LSL#2]
CMP             R10, #0
BEQ             loc_41068

loc_40D70
LDR             R3, [R2]
ADD             R1, R3, R1
LDR             R0, [R1,#4]
CMP             R0, #4
BEQ             loc_40FE8

loc_40D84
RSB             R12, R12, R12,LSL#3
MOV             R0, R10
ADD             R3, R3, R12,LSL#2
LDR             R2, [R3,#0xC]
LDR             R1, [R3,#0x14]
BLX             R2
MOV             R11, R0
B               loc_40EFC

loc_40DA4
LDRB            R10, [R0,#2]
CMP             R10, #0
BNE             loc_40DDC
MOV             R0, R8
MOV             R2, R4
MOV             R1, R5
BL              sub_40C00
MOV             R0, R10
B               loc_40C84

loc_40DC8
LDRB            R3, [R0,#1]
MOV             R4, #1
CMP             R3, #0x2D ; '-'
BNE             loc_40CE4
B               loc_40DA4

loc_40DDC
LDR             R3, [R7]
CMP             R3, #0
BNE             loc_410C8
ADD             R3, SP, #0x1C+var_C
ADD             R1, SP, #0x1C+n
MOV             R0, R3
STR             R3, [SP,#0x1C+var_14]
BL              sub_40844
SUBS            R11, R0, #0
BEQ             loc_40EB0
MOV             R3, R7
MOV             R7, R11
MOV             R11, R3
STR             R4, [SP,#0x1C+var_10]

loc_40E14
LDR             R10, [R6]
MOV             R1, R7  ; s2
LDR             R4, [SP,#0x1C+n]
ADD             R0, R10, #2 ; s1
MOV             R2, R4  ; n
BL              strncmp
CMP             R0, #0
BNE             loc_40E98
ADD             LR, R4, #2
LDRB            R2, [R10,LR]
CMP             R2, #0x3D ; '='
BEQ             loc_41008
CMP             R2, #0
BNE             loc_40E98
LDR             R12, [SP,#0x1C+var_C]
MOV             R3, R11
MOVW            R2, #:lower16:dword_76864
MOV             R11, R7
MOVT            R2, #:upper16:dword_76864
MOV             R7, R3
SUB             R3, R11, #2
LDR             R4, [SP,#0x1C+var_10]
RSB             R1, R12, R12,LSL#3
STR             R3, [SP,#0x1C+var_14]
LDR             R3, [R2]
MOV             R1, R1,LSL#2
STR             LR, [SP,#0x1C+n]
ADD             R3, R3, R1
LDR             R0, [R3,#4]
CMP             R0, #1
BEQ             loc_40EE8

loc_40E90
LDR             LR, [R7]
B               loc_40D58

loc_40E98
MOV             R0, R7
ADD             R2, SP, #0x1C+n
LDR             R1, [SP,#0x1C+var_14]
BL              sub_4089C
SUBS            R7, R0, #0
BNE             loc_40E14

loc_40EB0
LDR             R4, [R6]
MOV             R0, R4  ; s
BL              strlen
MOVW            R12, #:lower16:aUnrecognizedOp ; "unrecognized option"
MOV             R2, R0
MOVT            R12, #:upper16:aUnrecognizedOp ; "unrecognized option"
MOVW            R0, #:lower16:aSSS_0 ; "%s: %.*s: %s"
LDR             R1, [R5]
MOVT            R0, #:upper16:aSSS_0 ; "%s: %.*s: %s"
MOV             R3, R4
STR             R12, [SP,#0x1C+var_1C]
BLX             R9
MOV             R0, #0xFFFFFFFF
B               loc_40C84

loc_40EE8
LDR             R2, [R3,#8]
MOV             R10, #0
LDR             R0, [R3,#0x14]
BLX             R2
MOV             R11, R0

loc_40EFC
CMP             R11, #0
BNE             loc_40FBC
LDR             R3, [R7]
CMP             R3, #0
BEQ             loc_40F28
LDR             R2, [R6]
ADD             R3, R2, R3
LDRB            R3, [R3,#1]
CMP             R3, #0
BNE             loc_40F4C
STR             R11, [R7]

loc_40F28
MOV             R2, R4
MOV             R1, R5
MOV             R0, R8
BL              sub_40C00
CMP             R10, #0
BEQ             loc_40F4C
LDR             R3, [R6]
CMP             R3, R10
BEQ             loc_40FA8

loc_40F4C
MOV             R0, #1
B               loc_40C84

loc_40F54
LDR             R3, [R6]
ADD             LR, LR, #1
LDRB            R0, [R3,LR]
ADD             R10, R3, LR
CMP             R0, #0
MOVNE           R3, #0
STRNE           R3, [R7]
BNE             loc_40D70
B               loc_40D60

loc_40F78
MOV             R1, R10
BL              sub_40954
CMP             R0, #0
BEQ             loc_40EB0
LDR             LR, [R7]
LDR             R2, [R6]
LDRB            R3, [R0]
ADD             LR, LR, #1
LDRB            R2, [R2,LR]
CMP             R2, R3
BEQ             loc_40D1C
B               loc_40F78

loc_40FA8
MOV             R2, R4
MOV             R1, R5
MOV             R0, R8
BL              sub_40C00
B               loc_40F4C

loc_40FBC
MOVW            R0, #:lower16:aSSS_0 ; "%s: %.*s: %s"
LDR             R1, [R5]
LDR             R2, [SP,#0x1C+n]
MOVT            R0, #:upper16:aSSS_0 ; "%s: %.*s: %s"
LDR             R3, [SP,#0x1C+var_14]
STR             R11, [SP,#0x1C+var_1C]
BLX             R9
MOV             R0, R11 ; ptr
BL              free
MOV             R0, #0xFFFFFFFF
B               loc_40C84

loc_40FE8
LDR             R1, [R1,#0x14]
MOV             R0, R10
STR             R2, [SP,#0x1C+var_10]
BL              sub_4014C
LDR             R2, [SP,#0x1C+var_10]
LDR             R12, [SP,#0x1C+var_C]
LDR             R3, [R2]
B               loc_40D84

loc_41008
LDR             R12, [SP,#0x1C+var_C]
MOV             R2, R11
MOV             R11, R7
MOV             R7, R2
MOVW            R2, #:lower16:dword_76864
MOV             R3, R10
MOVT            R2, #:upper16:dword_76864
MOV             R10, R4
RSB             R1, R12, R12,LSL#3
LDR             R0, [R2]
ADD             R10, R10, #3
LDR             R4, [SP,#0x1C+var_10]
MOV             R1, R1,LSL#2
ADD             R10, R3, R10
SUB             R3, R11, #2
STR             LR, [SP,#0x1C+n]
STR             R3, [SP,#0x1C+var_14]
ADD             R3, R0, R1
LDR             R0, [R3,#4]
CMP             R0, #1
BEQ             loc_41094
CMP             R10, #0
BNE             loc_40D70
B               loc_40E90

loc_41068
MOVW            R12, #:lower16:aRequiresAnArgu ; "requires an argument"
MOVW            R0, #:lower16:aSSS_0 ; "%s: %.*s: %s"
MOVT            R12, #:upper16:aRequiresAnArgu ; "requires an argument"
LDR             R1, [R5]
MOVT            R0, #:upper16:aSSS_0 ; "%s: %.*s: %s"
LDR             R2, [SP,#0x1C+n]
LDR             R3, [SP,#0x1C+var_14]
STR             R12, [SP,#0x1C+var_1C]
BLX             R9
MOV             R0, #0xFFFFFFFF
B               loc_40C84

loc_41094
CMP             R10, #0
BEQ             loc_40EE8
MOVW            R12, #:lower16:aDoesnTAllowAnA ; "doesn't allow an argument"
MOVW            R0, #:lower16:aSSS_0 ; "%s: %.*s: %s"
MOVT            R12, #:upper16:aDoesnTAllowAnA ; "doesn't allow an argument"
LDR             R1, [R5]
MOVT            R0, #:upper16:aSSS_0 ; "%s: %.*s: %s"
LDR             R3, [SP,#0x1C+var_14]
MOV             R2, LR
STR             R12, [SP,#0x1C+var_1C]
BLX             R9
MOV             R0, #0xFFFFFFFF
B               loc_40C84

loc_410C8
MOVW            R3, #:lower16:aParseOne ; "parse_one"
MOVW            R1, #:lower16:aCcanOptParseC ; "ccan/opt/parse.c"
MOVW            R0, #:lower16:aOffset0 ; "*offset == 0"
MOVT            R3, #:upper16:aParseOne ; "parse_one"
MOVT            R1, #:upper16:aCcanOptParseC ; "ccan/opt/parse.c"
MOVT            R0, #:upper16:aOffset0 ; "*offset == 0"
MOV             R2, #0x3B ; ';' ; line
BL              __assert_fail
; End of function sub_40C38




; char *__fastcall sub_410E8(const char *, const char *)
sub_410E8

var_74= -0x74
var_70= -0x70
s= -0x6C
var_68= -0x68
var_64= -0x64
var_60= -0x60
var_58= -0x58
var_8= -8

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x74
MOV             R5, R1
STR             R0, [SP,#0x74+var_74]
MOVW            R10, #:lower16:dword_7686C
BL              strlen
MOVW            R3, #:lower16:dword_76860
CMP             R5, #0
MOVT            R3, #:upper16:dword_76860
MOVT            R10, #:upper16:dword_7686C
LDR             R7, [R3]
LDR             R9, [R10]
ADD             R7, R7, #0x14
ADD             R7, R7, R0
BEQ             loc_414B4
MOV             R0, R5  ; s
BL              strlen
CMP             R9, #0
ADD             R7, R7, R0
BEQ             loc_411D8
MOV             R6, #dword_76864
LDR             R4, [R6]

loc_41144
MOVW            R6, #:lower16:unk_76870
MOV             R8, #0
MOVT            R6, #:upper16:unk_76870
STR             R5, [SP,#0x74+var_70]
B               loc_411A0

loc_41158
CMP             R11, R6
BEQ             loc_41190
LDR             R0, [R4] ; s
BL              strlen
MOV             R7, R0
MOV             R0, R11 ; s
BL              strlen
LDR             R3, [R4,#0x10]
ADD             R7, R7, R5
ADD             R0, R7, R0
ADD             R7, R0, #0x76 ; 'v'
CMP             R3, #0
ADDEQ           R7, R0, #0x15
ADD             R7, R7, #1

loc_41190
ADD             R8, R8, #1
ADD             R4, R4, #0x1C
CMP             R8, R9
BCS             loc_411D4

loc_411A0
LDR             R3, [R4,#4]
ADD             R5, R7, #6
LDR             R11, [R4,#0x18]
CMP             R3, #8
BNE             loc_41158
MOV             R0, R11 ; s
ADD             R8, R8, #1
BL              strlen
CMP             R8, R9
ADD             R7, R7, #3
ADD             R7, R0, R7
ADD             R4, R4, #0x1C
BCC             loc_411A0

loc_411D4
LDR             R5, [SP,#0x74+var_70]

loc_411D8               ; size
MOV             R0, R7
BL              malloc
SUBS            R4, R0, #0
STR             R4, [SP,#0x74+var_60]
BEQ             loc_41474
MOVW            R1, #:lower16:aUsageS ; "Usage: %s"
LDR             R2, [SP,#0x74+var_74]
MOVT            R1, #:upper16:aUsageS ; "Usage: %s"
BL              sprintf
MOVW            R3, #:lower16:asc_55D14 ; " [-"
MOV             R2, R0
MOVT            R3, #:upper16:asc_55D14 ; " [-"
MOV             R1, R4
ADD             R4, R4, R0
LDR             R0, [R3] ; " [-"
ADD             R7, R4, #3
STR             R0, [R1,R2]
ADD             R0, SP, #0x74+var_58
BL              sub_408F4
SUBS            R12, R0, #0
BEQ             loc_41280
MOVW            R6, #:lower16:dword_76864
MOVW            R9, #:lower16:unk_76870
MOVT            R6, #:upper16:dword_76864
MOVT            R9, #:upper16:unk_76870
MOV             R8, #0

loc_41240
LDR             R3, [SP,#0x74+var_58]
MOV             R0, R12
LDR             R2, [R6]
ADD             R1, SP, #0x74+var_58
RSB             R3, R3, R3,LSL#3
ADD             R3, R2, R3,LSL#2
LDR             R3, [R3,#0x18]
CMP             R3, R9
LDRBNE          R3, [R12]
STRBNE          R3, [R7,R8]
ADDNE           R8, R8, #1
BL              sub_40954
SUBS            R12, R0, #0
BNE             loc_41240
CMP             R8, #0
BNE             loc_41498

loc_41280
MOVW            R1, #:lower16:(aJsonDecodeOfFi+0x20) ; " %s"
MOV             R2, R5
MOVT            R1, #:upper16:(aJsonDecodeOfFi+0x20) ; format
MOV             R0, R4  ; s
BL              sprintf
MOVW            R3, #:lower16:word_4C858
LDR             R2, [R10]
MOVT            R3, #:upper16:word_4C858
ADD             R5, R4, R0
STR             R3, [SP,#0x74+var_74]
ADD             R5, R5, #1
LDRH            R3, [R3]
CMP             R2, #0
STRH            R3, [R4,R0]
BEQ             loc_4146C
MOVW            R3, #:lower16:asc_55D28 ; "                    "
MOVW            R2, #0x2E2E
MOV             R7, #0
MOVW            R6, #:lower16:dword_76864
MOVW            R9, #:lower16:unk_76870
MOVW            R11, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
MOVT            R3, #:upper16:asc_55D28 ; "                    "
MOVT            R2, #0x2E ; '.'
MOV             R8, R7
MOVT            R6, #:upper16:dword_76864
MOVT            R9, #:upper16:unk_76870
MOVT            R11, #:upper16:(aApiMcastFromSS+0x14) ; "%s"
STR             R3, [SP,#0x74+var_70]
STR             R2, [SP,#0x74+var_68]
B               loc_413B0

loc_412F8
CMP             R4, #0x13
MOVW            R1, #:lower16:aS ; "%.*s"
RSBLS           R2, R4, #0x14
MOVHI           R2, #1
MOV             R0, R3  ; s
MOVT            R1, #:upper16:aS ; "%.*s"
LDR             R3, [SP,#0x74+var_70]
BL              sprintf
LDR             R3, [R6]
ADD             R4, R0, R4
ADD             R0, R5, R4 ; s
MOV             R1, R11 ; format
ADD             R3, R3, R7
LDR             R2, [R3,#0x18]
BL              sprintf
LDR             R1, [R6]
ADD             R4, R0, R4
ADD             R3, R5, R4
ADD             R1, R1, R7
LDR             R2, [R1,#0x10]
CMP             R2, #0
BEQ             loc_4138C
STR             R3, [SP,#0x74+s]
ADD             R0, SP, #0x74+var_58
LDR             R3, [SP,#0x74+var_68]
STR             R3, [SP,#0x74+var_8]
LDR             R2, [R1,#0x10]
LDR             R1, [R1,#0x14]
BLX             R2
LDR             R3, [SP,#0x74+s]
MOVW            R1, #:lower16:aDefaultS ; " (default: %s)"
ADD             R2, SP, #0x74+var_58
MOVT            R1, #:upper16:aDefaultS ; " (default: %s)"
MOV             R0, R3  ; s
BL              sprintf
ADD             R4, R0, R4
ADD             R3, R5, R4

loc_4138C
LDR             R2, [SP,#0x74+var_74]
MOV             R5, R3
LDRH            R2, [R2]
STRH            R2, [R5],#1

loc_4139C
LDR             R3, [R10]
ADD             R8, R8, #1
ADD             R7, R7, #0x1C
CMP             R3, R8
BLS             loc_4146C

loc_413B0
LDR             R3, [R6]
ADD             R3, R3, R7
LDR             R2, [R3,#0x18]
CMP             R2, R9
BEQ             loc_4139C
LDR             R1, [R3,#4]
CMP             R1, #8
BEQ             loc_41480
LDR             R2, [R3]
MOV             R1, R11 ; format
MOV             R0, R5  ; s
BL              sprintf
LDR             R2, [R6]
MOV             R4, R0
ADD             R3, R5, R0
ADD             R1, R2, R7
LDR             R1, [R1,#4]
CMP             R1, #2
BNE             loc_412F8
LDR             R2, [R2,R7]
MOV             R1, #0x20 ; ' ' ; c
STR             R3, [SP,#0x74+var_64]
MOV             R0, R2  ; s
STR             R2, [SP,#0x74+s]
BL              strchr
CMP             R0, #0
LDR             R2, [SP,#0x74+s]
LDR             R3, [SP,#0x74+var_64]
BNE             loc_412F8
MOV             R0, R2  ; s
MOV             R1, #0x3D ; '=' ; c
STR             R3, [SP,#0x74+s]
BL              strchr
CMP             R0, #0
LDR             R3, [SP,#0x74+s]
BNE             loc_412F8
MOVW            R2, #:lower16:aArg ; " <arg>"
ADD             R4, R4, #6
MOVT            R2, #:upper16:aArg ; " <arg>"
LDR             R0, [R2] ; " <arg>"
LDRH            R1, [R2,#(aArg+4 - 0x55D20)] ; "g>"
LDRB            R2, [R2,#(aArg+6 - 0x55D20)] ; ""
STR             R0, [R3]
STRH            R1, [R3,#4]
STRB            R2, [R3,#6]
ADD             R3, R5, R4
B               loc_412F8

loc_4146C
MOV             R3, #0
STRB            R3, [R5]

loc_41474
LDR             R0, [SP,#0x74+var_60]
ADD             SP, SP, #0x74 ; 't'
POP             {R4-R11,PC}

loc_41480
MOVW            R1, #:lower16:aS_2 ; "%s:\n"
MOV             R0, R5  ; s
MOVT            R1, #:upper16:aS_2 ; "%s:\n"
BL              sprintf
ADD             R5, R5, R0
B               loc_4139C

loc_41498
MOVW            R3, #:lower16:word_5616C
ADD             R4, R7, R8
MOVT            R3, #:upper16:word_5616C
ADD             R4, R4, #1
LDRH            R3, [R3]
STRH            R3, [R7,R8]
B               loc_41280

loc_414B4
CMP             R9, #0
BEQ             loc_41520
MOVW            R6, #:lower16:dword_76864
MOVW            R0, #:lower16:sub_40368
MOVT            R6, #:upper16:dword_76864
MOV             R2, R5
LDR             R4, [R6]
MOVT            R0, #:upper16:sub_40368
MOV             R3, R4
B               loc_414E8

loc_414DC
CMP             R2, R9
ADD             R3, R3, #0x1C
BEQ             loc_41514

loc_414E8
LDR             R1, [R3,#8]
ADD             R2, R2, #1
CMP             R1, R0
BNE             loc_414DC
LDR             R5, [R3,#0x14]
CMP             R5, #0
BEQ             loc_414DC
MOV             R0, R5  ; s
BL              strlen
ADD             R7, R7, R0
B               loc_41144

loc_41514
MOV             R5, #(asc_4D5C4+4) ; ""
B               loc_41144

loc_41520
MOV             R5, #(asc_4D5C4+4) ; ""
B               loc_411D8
; End of function sub_410E8




; char *__fastcall sub_4152C(char *result, __int16, unsigned int)
sub_4152C
CMP             R2, #0
BEQ             loc_41638
TST             R0, #3
PUSH            {R4-R6,LR}
UXTB            LR, R1
BEQ             loc_41584
LDRB            R3, [R0]
CMP             R3, LR
POPEQ           {R4-R6,PC}
ADD             R3, R0, #1
B               loc_41570

loc_41558
TST             R3, #3
ADD             R3, R3, #1
BEQ             loc_41584
LDRB            R12, [R0]
CMP             R12, LR
POPEQ           {R4-R6,PC}

loc_41570
SUBS            R2, R2, #1
MOV             R0, R3
BNE             loc_41558

loc_4157C
MOV             R0, #0
POP             {R4-R6,PC}

loc_41584
MOV             R4, R1,LSL#8
CMP             R2, #3
UXTH            R4, R4
ORR             R4, R4, LR
ORR             R4, R4, R4,LSL#16
BLS             loc_41600
LDR             R3, [R0]
MOV             R6, #0xFEFEFEFF
MOV             R5, #0x80808080
EOR             R3, R3, R4
ADD             R1, R3, R6
BIC             R3, R1, R3
TST             R3, R5
ADDEQ           R12, R0, #4
BEQ             loc_415E4
B               loc_41600

loc_415CC
LDR             R3, [R0]
EOR             R3, R3, R4
ADD             R1, R3, R6
BIC             R3, R1, R3
TST             R3, R5
BNE             loc_41600

loc_415E4
SUB             R2, R2, #4
MOV             R0, R12
CMP             R2, #3
ADD             R12, R12, #4
BHI             loc_415CC
CMP             R2, #0
BEQ             loc_4157C

loc_41600
LDRB            R3, [R0]
CMP             R3, LR
POPEQ           {R4-R6,PC}
ADD             R2, R0, R2
ADD             R3, R0, #1
B               loc_41624

loc_41618
LDRB            R1, [R0]
CMP             R1, LR
POPEQ           {R4-R6,PC}

loc_41624
MOV             R0, R3
ADD             R3, R3, #1
CMP             R0, R2
BNE             loc_41618
B               loc_4157C

loc_41638
MOV             R0, R2
BX              LR
; End of function sub_4152C




; unsigned int __fastcall sub_41640(int, unsigned int, int *)
sub_41640
PUSH            {R4-R8,LR}
MOV             R6, #1
MOV             R12, R6
MOV             R4, #0
MOV             LR, #0xFFFFFFFF

loc_41654
ADD             R3, R12, R4
ADD             R5, R0, LR
CMP             R3, R1
BCS             loc_41690

loc_41664
LDRB            R5, [R5,R12]
LDRB            R7, [R0,R3]
CMP             R7, R5
BCS             loc_416F8
MOV             R4, R3
MOV             R12, #1
SUB             R6, R3, LR
ADD             R3, R12, R4
CMP             R3, R1
ADD             R5, R0, LR
BCC             loc_41664

loc_41690
MOV             R8, #1
MOV             R4, #0
MOV             R12, R8
MOV             R5, #0xFFFFFFFF
STR             R6, [R2]

loc_416A4
ADD             R3, R12, R4
ADD             R6, R0, R5
CMP             R1, R3
BLS             loc_416E0

loc_416B4
LDRB            R6, [R6,R12]
LDRB            R7, [R0,R3]
CMP             R7, R6
BLS             loc_41710
MOV             R4, R3
MOV             R12, #1
SUB             R8, R3, R5
ADD             R3, R12, R4
CMP             R1, R3
ADD             R6, R0, R5
BHI             loc_416B4

loc_416E0
ADD             R0, LR, #1
ADD             R5, R5, #1
CMP             R5, R0
STRCS           R8, [R2]
MOVCS           R0, R5
POP             {R4-R8,PC}

loc_416F8
BEQ             loc_41728
MOV             R6, #1
MOV             LR, R4
MOV             R12, R6
ADD             R4, R4, R6
B               loc_41654

loc_41710
BEQ             loc_4173C
MOV             R8, #1
MOV             R5, R4
MOV             R12, R8
ADD             R4, R4, R8
B               loc_416A4

loc_41728
CMP             R12, R6
ADD             R12, R12, #1
MOVEQ           R4, R3
MOVEQ           R12, #1
B               loc_41654

loc_4173C
CMP             R12, R8
ADD             R12, R12, #1
MOVEQ           R4, R3
MOVEQ           R12, #1
B               loc_416A4
; End of function sub_41640




; int __fastcall sub_41750(int, int, char *s1, unsigned int)
sub_41750

var_424= -0x424
var_420= -0x420
var_41C= -0x41C
var_418= -0x418
var_414= -0x414
var_410= -0x410
var_408= -0x408
var_404= -0x404
var_14= -0x14
var_4= -4

CMP             R3, #2
PUSH            {R4-R11,LR}
SUB             SP, SP, #0x420
MOV             R8, R3
SUB             SP, SP, #4
MOV             R5, R0
MOV             R9, R1
MOV             R7, R2
SUB             R4, R3, #1
BHI             loc_41A48
MOV             R6, R4
ADD             R10, SP, #0x424+var_404
MOV             R3, #1
STR             R3, [SP,#0x424+var_420]
STR             R3, [SP,#0x424+var_408]

loc_4178C
ADD             R2, SP, #0x424+var_14
SUB             R3, R10, #4
ADD             R2, R2, #0xC

loc_41798
STR             R8, [R3,#4]!
CMP             R3, R2
BNE             loc_41798
CMP             R8, #0
BEQ             loc_417CC
SUB             R1, R7, #1
MOV             R3, R4

loc_417B4
LDRB            R2, [R1,#1]!
ADD             R0, SP, #0x424+var_4
ADD             R2, R0, R2,LSL#2
STR             R3, [R2,#-0x400]
SUBS            R3, R3, #1
BCS             loc_417B4

loc_417CC
LDR             R10, [SP,#0x424+var_420]
MOV             R2, R6  ; n
MOV             R0, R7  ; s1
ADD             R1, R7, R10 ; s2
BL              memcmp
CMP             R0, #0
BNE             loc_41948
SUB             R2, R6, #1
SUB             R3, R9, R8
STR             R2, [SP,#0x424+var_414]
ADD             R2, R7, R2
STR             R3, [SP,#0x424+var_424]
SUB             R3, R8, R10
STR             R2, [SP,#0x424+var_410]
RSB             R2, R6, #1
STR             R3, [SP,#0x424+var_418]
MOV             R3, R0
STR             R2, [SP,#0x424+var_41C]
B               loc_4183C

loc_41818
LDR             R2, [SP,#0x424+var_420]
CMP             R0, #0
CMPNE           R1, R2
MOV             R0, #0
LDRCC           R1, [SP,#0x424+var_418]
ADD             R3, R3, R1

loc_41830
LDR             R2, [SP,#0x424+var_424]
CMP             R2, R3
BCC             loc_41924

loc_4183C
ADD             R2, R5, R3
ADD             R12, SP, #0x424+var_4
LDRB            R1, [R2,R4]
ADD             R1, R12, R1,LSL#2
LDR             R1, [R1,#-0x400]
CMP             R1, #0
BNE             loc_41818
CMP             R6, R0
MOVCS           R1, R6
MOVCC           R1, R0
CMP             R1, R4
BCS             loc_418A8
ADD             R12, R1, R3
LDRB            R8, [R7,R1]
LDRB            R9, [R5,R12]
ADD             LR, R7, R1
ADD             R12, R5, R12
CMP             R9, R8
BEQ             loc_4189C
B               loc_41934

loc_4188C
LDRB            R9, [LR,#1]!
LDRB            R8, [R12,#1]!
CMP             R9, R8
BNE             loc_41934

loc_4189C
ADD             R1, R1, #1
CMP             R1, R4
BCC             loc_4188C

loc_418A8
LDR             R1, [SP,#0x424+var_414]
CMP             R6, R0
MOV             LR, R1
BLS             loc_41A6C
LDR             R9, [SP,#0x424+var_410]
ADD             R1, R1, R3
LDRB            R12, [R5,R1]
ADD             R1, R5, R1
LDRB            R8, [R9]
CMP             R8, R12
BNE             loc_41A6C
MOV             R8, R9
SUB             R11, R0, #1
B               loc_418F4

loc_418E0
LDRB            R10, [R8,#-1]!
LDRB            R9, [R1,#-1]!
CMP             R10, R9
BNE             loc_41900
MOV             LR, R12

loc_418F4
SUB             R12, LR, #1
CMP             R12, R11
BNE             loc_418E0

loc_41900
ADD             R0, R0, #1
CMP             R0, LR
BHI             loc_41A74
LDR             R2, [SP,#0x424+var_420]
LDR             R0, [SP,#0x424+var_418]
ADD             R3, R3, R2
LDR             R2, [SP,#0x424+var_424]
CMP             R2, R3
BCS             loc_4183C

loc_41924
MOV             R0, #0

loc_41928
ADD             SP, SP, #0x420
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_41934
LDR             R2, [SP,#0x424+var_41C]
MOV             R0, #0
ADD             R3, R2, R3
ADD             R3, R1, R3
B               loc_41830

loc_41948
SUB             R3, R8, R6
SUB             R2, R6, #1
CMP             R3, R6
SUB             R10, R9, R8
MOVCC           R3, R6
MOV             R9, #0
ADD             R3, R3, #1
ADD             R11, R7, R6
ADD             R1, R7, R2
STR             R3, [SP,#0x424+var_420]
RSB             R3, R6, #1
STR             R1, [SP,#0x424+var_41C]
STR             R3, [SP,#0x424+var_424]

loc_4197C
ADD             R0, R5, R9
ADD             R1, SP, #0x424+var_4
LDRB            R3, [R0,R4]
ADD             R3, R1, R3,LSL#2
LDR             R3, [R3,#-0x400]
CMP             R3, #0
BNE             loc_41A28
CMP             R6, R4
BCS             loc_419E4
ADD             R1, R6, R9
LDRB            R3, [R11]
LDRB            R12, [R5,R1]
ADD             R1, R5, R1
CMP             R12, R3
MOVNE           R3, R6
BNE             loc_41A38
MOV             R12, R11
MOV             R3, R6
B               loc_419D8

loc_419C8
LDRB            R8, [R12,#1]!
LDRB            LR, [R1,#1]!
CMP             R8, LR
BNE             loc_41A38

loc_419D8
ADD             R3, R3, #1
CMP             R3, R4
BCC             loc_419C8

loc_419E4
CMN             R2, #1
BEQ             loc_41928
LDR             LR, [SP,#0x424+var_41C]
ADD             R3, R2, R9
LDRB            R12, [R5,R3]
ADD             R3, R5, R3
LDRB            R1, [LR]
CMP             R12, R1
BNE             loc_41A24
MOV             R1, LR

loc_41A0C
CMP             R1, R7
BEQ             loc_41928
LDRB            LR, [R1,#-1]!
LDRB            R12, [R3,#-1]!
CMP             LR, R12
BEQ             loc_41A0C

loc_41A24
LDR             R3, [SP,#0x424+var_420]

loc_41A28
ADD             R9, R9, R3

loc_41A2C
CMP             R9, R10
BLS             loc_4197C
B               loc_41924

loc_41A38
LDR             R1, [SP,#0x424+var_424]
ADD             R9, R1, R9
ADD             R9, R3, R9
B               loc_41A2C

loc_41A48
ADD             R10, SP, #0x424+var_404
MOV             R1, R3
SUB             R2, R10, #4
MOV             R0, R7
BL              sub_41640
LDR             R3, [SP,#0x424+var_408]
MOV             R6, R0
STR             R3, [SP,#0x424+var_420]
B               loc_4178C

loc_41A6C
MOV             LR, R6
B               loc_41900

loc_41A74
MOV             R0, R2
B               loc_41928
; End of function sub_41750




; int __fastcall memmem(char *, unsigned int, char *, unsigned int)
EXPORT memmem
memmem

var_20= -0x20
var_1C= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
var_8= -8

PUSH            {R4-R11,LR}
SUBS            R4, R3, #0
SUB             SP, SP, #0x24
MOV             R6, R0
MOVEQ           R5, R0
BEQ             loc_41C10
CMP             R4, R1
MOV             R7, R1
BHI             loc_41C0C
CMP             R4, #0x1F
BHI             loc_41C30
MOV             R11, R2
MOV             R2, R1
LDRB            R1, [R11]
BL              sub_4152C
SUB             R3, R4, #1
CMP             R0, #0
CLZ             R3, R3
MOV             R5, R0
MOV             R3, R3,LSR#5
MOVEQ           R3, #1
CMP             R3, #0
BNE             loc_41C10
SUB             R2, R0, R6
SUB             R7, R7, R2
CMP             R4, R7
BHI             loc_41C0C
CMP             R4, #2
BHI             loc_41D34
SUB             R6, R4, #1
MOV             R3, #1
STR             R3, [SP,#0x24+var_1C]
STR             R3, [SP,#0x24+var_8]

loc_41B00
LDR             R8, [SP,#0x24+var_1C]
MOV             R2, R6  ; n
MOV             R0, R11 ; s1
ADD             R1, R11, R8 ; s2
BL              memcmp
CMP             R0, #0
BNE             loc_41C44
SUB             R3, R6, #1
SUB             R2, R7, R4 ; s1
STR             R3, [SP,#0x24+var_18]
ADD             R3, R11, R3
STR             R3, [SP,#0x24+var_10]
MOV             R12, R0
SUB             R3, R4, R8
STR             R3, [SP,#0x24+var_14]
RSB             R3, R6, #1
STR             R3, [SP,#0x24+var_20]

loc_41B44
CMP             R6, R12
MOVCS           R3, R6
MOVCC           R3, R12
CMP             R4, R3
BLS             loc_41B94
ADD             R1, R3, R0
LDRB            R8, [R11,R3]
LDRB            R7, [R5,R1]
ADD             LR, R11, R3
ADD             R1, R5, R1
CMP             R8, R7
BEQ             loc_41B88
B               loc_41C1C

loc_41B78
LDRB            R8, [LR,#1]!
LDRB            R7, [R1,#1]!
CMP             R8, R7
BNE             loc_41C1C

loc_41B88
ADD             R3, R3, #1
CMP             R4, R3
BNE             loc_41B78

loc_41B94
LDR             R3, [SP,#0x24+var_18]
CMP             R6, R12
MOV             LR, R3
BLS             loc_41D54
LDR             R8, [SP,#0x24+var_10]
ADD             R3, R3, R0
LDRB            R1, [R5,R3]
ADD             R3, R5, R3
LDRB            R7, [R8]
CMP             R7, R1
BNE             loc_41D54
MOV             R7, R8
SUB             R10, R12, #1
B               loc_41BE0

loc_41BCC
LDRB            R9, [R7,#-1]!
LDRB            R8, [R3,#-1]!
CMP             R9, R8
BNE             loc_41BEC
MOV             LR, R1

loc_41BE0
SUB             R1, LR, #1
CMP             R1, R10
BNE             loc_41BCC

loc_41BEC
ADD             R12, R12, #1
CMP             R12, LR
BHI             loc_41D5C
LDR             R3, [SP,#0x24+var_1C]
LDR             R12, [SP,#0x24+var_14]
ADD             R0, R0, R3

loc_41C04
CMP             R2, R0
BCS             loc_41B44

loc_41C0C
MOV             R5, #0

loc_41C10
MOV             R0, R5
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_41C1C               ; int
LDR             R1, [SP,#0x24+var_20]
MOV             R12, #0
ADD             R0, R1, R0
ADD             R0, R0, R3 ; int
B               loc_41C04

loc_41C30
BL              sub_41750
MOV             R5, R0
MOV             R0, R5
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_41C44
SUB             R3, R4, R6
SUB             R9, R6, #1
CMP             R3, R6
SUB             R0, R7, R4
MOVCC           R3, R6
MOV             R7, #0
ADD             R8, R11, R6
RSB             R10, R6, #1
ADD             R2, R11, R9
ADD             R3, R3, #1
STR             R2, [SP,#0x24+var_1C]
STR             R3, [SP,#0x24+var_20]

loc_41C74
CMP             R4, R6
BLS             loc_41CC0
ADD             R2, R6, R7
LDRB            R3, [R8]
LDRB            R1, [R5,R2]
ADD             R2, R5, R2
CMP             R1, R3
MOVNE           R3, R6
BNE             loc_41D14
MOV             R1, R8
MOV             R3, R6
B               loc_41CB4

loc_41CA4
LDRB            LR, [R1,#1]!
LDRB            R12, [R2,#1]!
CMP             LR, R12
BNE             loc_41D14

loc_41CB4
ADD             R3, R3, #1
CMP             R4, R3
BNE             loc_41CA4

loc_41CC0
CMN             R9, #1
BEQ             loc_41D04
LDR             R12, [SP,#0x24+var_1C]
ADD             R3, R9, R7
LDRB            R1, [R5,R3]
ADD             R3, R5, R3
LDRB            R2, [R12]
CMP             R1, R2
BNE             loc_41D28
MOV             R2, R12
B               loc_41CFC

loc_41CEC
LDRB            R12, [R2,#-1]!
LDRB            R1, [R3,#-1]!
CMP             R12, R1
BNE             loc_41D28

loc_41CFC
CMP             R2, R11
BNE             loc_41CEC

loc_41D04
ADD             R5, R5, R7
MOV             R0, R5
ADD             SP, SP, #0x24 ; '$'
POP             {R4-R11,PC}

loc_41D14
ADD             R7, R10, R7
ADD             R7, R7, R3

loc_41D1C
CMP             R0, R7
BCS             loc_41C74
B               loc_41C0C

loc_41D28
LDR             R3, [SP,#0x24+var_20]
ADD             R7, R7, R3
B               loc_41D1C

loc_41D34
ADD             R2, SP, #0x24+var_8
MOV             R1, R4
MOV             R0, R11
BL              sub_41640
LDR             R3, [SP,#0x24+var_8]
MOV             R6, R0
STR             R3, [SP,#0x24+var_1C]
B               loc_41B00

loc_41D54
MOV             LR, R6
B               loc_41BEC

loc_41D5C
ADD             R5, R5, R0
B               loc_41C10
; End of function memmem




; int __fastcall sub_41D64(unsigned __int8 *, int)
sub_41D64

var_8C4= -0x8C4
var_8C0= -0x8C0
var_8BC= -0x8BC
var_8A0= -0x8A0
var_88C= -0x88C
var_880= -0x880
var_878= -0x878
s= -0x800

PUSH            {R4-R10,LR}
MOV             R6, #byte_74500
SUB             SP, SP, #0x9C0
MOV             R5, R0
LDRB            R2, [R6]
CMP             R2, #0
BNE             loc_41D98
MOV             R2, #byte_68BD4
LDRB            R3, [R2]
CMP             R3, #0
BEQ             loc_41F50

loc_41D98
MOVW            R2, #:lower16:aGotNonceSzD ; "got nonce sz %d"
MOV             R3, R1
MOVT            R2, #:upper16:aGotNonceSzD ; "got nonce sz %d"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x9C0+s ; s
BL              snprintf
ADD             R1, SP, #0x9C0+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_41DC0               ; n
MOV             R2, #0x1C0
ADD             R1, R5, #5 ; src
MOV             R0, SP  ; dest
LDRB            R8, [R5]
LDR             R7, [R5,#1]
ADD             R4, R5, #0x1C4
BL              memcpy
LDRB            R10, [R5,#0x1C5]
ADD             R4, R4, #2
MOV             R0, #1  ; nmemb
MOV             R5, #dword_744A4
MOV             R1, R10 ; size
BL              calloc
MOV             R2, R10 ; n
MOV             R1, R4  ; src
BL              memcpy
LDRB            R9, [R4,R10]
ADD             R4, R4, R10
MOV             R3, R0
ADD             R4, R4, #1
MOV             R0, #1  ; nmemb
STR             R3, [SP,#0x9C0+var_8A0]
MOV             R1, R9  ; size
BL              calloc
MOV             R2, R9  ; n
MOV             R1, R4  ; src
BL              memcpy
LDRB            R10, [R4,R9]
MOV             R3, R0
ADD             R4, R4, R9
MOV             R0, #1  ; nmemb
STR             R3, [SP,#0x9C0+var_88C]
MOV             R1, R10 ; size
BL              calloc
MOV             R2, R10 ; n
ADD             R1, R4, #1 ; src
BL              memcpy
MOV             R1, #1  ; size
STR             R0, [SP,#0x9C0+var_880]
MOV             R0, R1  ; nmemb
BL              calloc
MOVW            R2, #:lower16:dword_744C8
STR             R0, [SP,#0x9C0+var_878]
MOVT            R2, #:upper16:dword_744C8
LDR             R3, [R5]
LDR             R2, [R2]
MOV             R1, R7
LDR             R2, [R2,R8,LSL#2]
STR             R2, [SP,#0x9C0+var_8BC]
LDR             R2, [R3]
STR             R2, [SP,#0x9C0+var_8C4]
LDR             R2, [R3]
LDR             R2, [R2]
STR             R2, [SP,#0x9C0+var_8C0]
LDR             R0, [R3]
BL              sub_2DC68
CMP             R0, #0
BEQ             loc_41F94
MOV             R1, R7
MOV             R0, SP
BL              sub_2DBFC
CMP             R0, #0
BEQ             loc_41F94
LDR             R3, [R5]
MOV             R1, SP
LDR             R0, [R3]
BL              sub_3E82C
MOV             R3, #dword_766C0
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_41EF8
MOV             R3, #byte_7449D
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_41F84

loc_41EF8
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_41F18
MOV             R3, #byte_68BD4
LDRB            R0, [R3]
CMP             R0, #0
BEQ             loc_41F68

loc_41F18
MOVW            R3, #:lower16:aCbBitmainSubmi ; "cb_bitmain_submit_nonce"
MOVW            R2, #:lower16:aSNonceSubmited ; "%s nonce submited"
MOVT            R3, #:upper16:aCbBitmainSubmi ; "cb_bitmain_submit_nonce"
MOVT            R2, #:upper16:aSNonceSubmited ; "%s nonce submited"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x9C0+s ; s
BL              snprintf
MOV             R0, #5
ADD             R1, SP, #0x9C0+s
MOV             R2, #0
BL              sub_20F58
MOV             R0, #0

loc_41F48
ADD             SP, SP, #0x9C0
POP             {R4-R10,PC}

loc_41F50
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_41DC0
B               loc_41D98

loc_41F68
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BGT             loc_41F18
ADD             SP, SP, #0x9C0
POP             {R4-R10,PC}

loc_41F84
MOV             R1, R7
MOV             R0, SP
BL              sub_2CCF0
B               loc_41EF8

loc_41F94
LDR             R3, [R5]
LDR             R0, [R3]
BL              sub_331A4
MOV             R0, #0xFFFFFFFF
B               loc_41F48
; End of function sub_41D64




; int __fastcall sub_41FA8(const void *, size_t)
sub_41FA8

var_810= -0x810
var_808= -0x808
s= -0x800

PUSH            {R4-R10,LR}
MOV             R8, #byte_68BD5
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R0, #0
LDRB            R2, [R8]
MOVEQ           R4, #1
MOVNE           R4, R3
SUB             SP, SP, #0x810
MOV             R5, R1
MOV             R6, R0
CMP             R2, #0
BEQ             loc_4223C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42214
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42214
MOV             R3, #dword_67DB4
LDR             R2, [R3]
CMP             R2, #6
BGT             loc_42214
CMP             R4, #0
BNE             loc_42274

loc_42024               ; mutex
MOV             R0, #stru_76874
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_42328

loc_42038
MOV             R4, #dword_6ACD0
LDR             R0, [R4,#(dword_6ACD4 - 0x6ACD0)] ; ptr
STR             R5, [R4]
CMP             R0, #0
BEQ             loc_42054
BL              free

loc_42054               ; size
MOV             R0, R5
BL              malloc
CMP             R0, #0
STR             R0, [R4,#(dword_6ACD4 - 0x6ACD0)]
BEQ             loc_42468
MOV             R1, R6  ; src
LDR             R2, [R4] ; n
BL              memcpy
MOVW            R0, #:lower16:stru_7688C
SUB             R6, R5, #0x128
MOVT            R0, #:upper16:stru_7688C ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_42378

loc_4208C
LDR             R2, [R4,#(dword_6ACD4 - 0x6ACD0)]
MOVW            R12, #:lower16:qword_6ACD8
LDRB            R1, [R8]
MOVT            R12, #:upper16:qword_6ACD8
MOV             R3, R12
SUB             R9, R5, #0x120
ADD             R2, R2, R6
LDR             R0, [R2]
CMP             R1, #0
LDR             R1, [R2,#4]
STM             R3!, {R0,R1}
BEQ             loc_420F8
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_422C0
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_422C0
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_422C0

loc_420F8               ; mutex
MOV             R0, #stru_7688C
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_42418

loc_4210C
MOVW            R7, #:lower16:off_67ED8
SUB             R10, R5, #0x11C
MOVT            R7, #:upper16:off_67ED8
LDR             R3, [R7] ; sub_21C98
BLX             R3      ; sub_21C98
LDR             R6, [R4,#(dword_6ACD4 - 0x6ACD0)]
MOVW            R3, #:lower16:dword_73368
LDRB            R2, [R8]
MOVT            R3, #:upper16:dword_73368
LDR             R1, [R6,R9]
CMP             R2, #0
STR             R1, [R3]
BEQ             loc_4217C
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_422F4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_422F4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_422F4

loc_4217C
ADD             R2, R6, R10
MOVW            R3, #:lower16:dword_6ABA4
LDR             R1, [R2,#4]
MOVT            R3, #:upper16:dword_6ABA4
LDR             LR, [R2,#8]
ADD             R4, R6, R5
LDR             R12, [R2,#0xC]
MOVW            R0, #:lower16:byte_6ABC0
LDR             R8, [R2]
SUB             R5, R5, #0xC
STR             R1, [R3,#(dword_6ABA8 - 0x6ABA4)]
MOV             R2, #0x100 ; n
STR             LR, [R3,#(dword_6ABAC - 0x6ABA4)]
SUB             R1, R4, #0x10C ; src
STR             R12, [R3,#(dword_6ABB0 - 0x6ABA4)]
ADD             R6, R6, R5
STR             R8, [R3]
MOVT            R0, #:upper16:byte_6ABC0 ; dest
BL              memcpy
LDR             R0, [R6]
MOVW            R3, #:lower16:dbl_6ABB8
LDR             R1, [R6,#4]
MOVT            R3, #:upper16:dbl_6ABB8
MOV             R2, #dword_687F4
STM             R3!, {R0,R1}
MOVW            R0, #:lower16:stru_76874
LDR             R3, [R4,#-4]
MOVT            R0, #:upper16:stru_76874 ; mutex
STR             R3, [R2]
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_423C8

loc_42200
LDR             R3, [R7] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, #0

loc_4220C
ADD             SP, SP, #0x810
POP             {R4-R10,PC}

loc_42214
MOVW            R2, #:lower16:aGotApiLenD ; "got api len %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aGotApiLenD ; "got api len %d"
ADD             R0, SP, #0x810+s ; s
MOV             R3, R5
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_4223C
CMP             R4, #0
BEQ             loc_42024
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42284
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42284
MOV             R3, #dword_67DB4

loc_42274
LDR             R3, [R3]
CMP             R3, #2
MOVLE           R0, #0xFFFFFFFF
BLE             loc_4220C

loc_42284
MOVW            R2, #:lower16:aSInputErrDataP ; "%s input err: data @ %p; len is %d"
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
STR             R5, [SP,#0x810+var_810+4]
ADD             R0, SP, #0x810+s ; s
STR             R6, [SP,#0x810+var_810]
MOVT            R2, #:upper16:aSInputErrDataP ; "%s input err: data @ %p; len is %d"
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
MOV             R0, #0xFFFFFFFF
ADD             SP, SP, #0x810
POP             {R4-R10,PC}

loc_422C0
LDRD            R6, R7, [R12]
MOVW            R2, #:lower16:aSHash0xLlx ; "[%s], hash 0x%llx"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aSHash0xLlx ; "[%s], hash 0x%llx"
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOV             R1, #0x800 ; maxlen
STRD            R6, R7, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
B               loc_420F8

loc_422F4
MOVW            R2, #:lower16:aSHwerrD ; "[%s], hwerr %d"
STR             R1, [SP,#0x810+var_810]
MOVT            R2, #:upper16:aSHwerrD ; "[%s], hwerr %d"
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x810+s ; s
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58
LDR             R6, [R4,#(dword_6ACD4 - 0x6ACD0)]
B               loc_4217C

loc_42328
BL              __errno_location
LDR             LR, =aCbBitmainApiSt_0 ; "cb_bitmain_api_stats"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0x74 ; 't'
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_42038

loc_42378
BL              __errno_location
LDR             LR, =aCbBitmainApiSt_0 ; "cb_bitmain_api_stats"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0x86
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_4208C

loc_423C8
BL              __errno_location
LDR             LR, =aCbBitmainApiSt_0 ; "cb_bitmain_api_stats"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0x9D
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_42200

loc_42418
BL              __errno_location
LDR             LR, =aCbBitmainApiSt_0 ; "cb_bitmain_api_stats"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0x8A
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_4210C

loc_42468
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_424A4
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_424A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_424CC

loc_424A4
MOVW            R2, #:lower16:aSAllocFailed ; "%s, alloc failed"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSAllocFailed ; "%s, alloc failed"
ADD             R0, SP, #0x810+s ; s
LDR             R3, =aCbBitmainApiSt ; "cb_bitmain_api_stats"
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_424CC               ; mutex
MOV             R0, #stru_76874
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_424F8

loc_424E0
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, #0xFFFFFFFE
B               loc_4220C

loc_424F8
BL              __errno_location
LDR             R1, =aCbBitmainApiSt_0 ; "cb_bitmain_api_stats"
MOVW            R3, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0x7E ; '~'
MOVT            R3, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R12, [SP,#0x810+var_808]
STR             R1, [SP,#0x810+var_810+4]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R3, [SP,#0x810+var_810]
MOV             R1, #0x800 ; maxlen
LDR             R3, [R0]
ADD             R0, SP, #0x810+s ; s
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_41FA8

B               loc_424E0
off_4254C DCD aCbBitmainApiSt ; "cb_bitmain_api_stats"
off_42550 DCD aCbBitmainApiSt_0 ; "cb_bitmain_api_stats"



; int __fastcall sub_42554(const void *, size_t)
sub_42554

var_808= -0x808
var_804= -0x804
var_800= -0x800

MOVW            R3, #:lower16:byte_74500
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_74500
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOV             R5, R0
LDRB            R3, [R3]
MOV             R6, R1
CMP             R3, #0
BNE             loc_42590
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_425F4

loc_42590
MOVW            R12, #:lower16:aAboutToSendDet ; "about to send detect"
ADD             R4, SP, #0x808+var_800
MOVT            R12, #:upper16:aAboutToSendDet ; "about to send detect"
MOV             LR, R4
LDM             R12!, {R0-R3} ; "about to send detect"
STM             LR!, {R0-R3}
MOV             R2, #0
LDM             R12, {R0,R1} ; "tect"
STR             R0, [LR],#4
MOV             R0, #5
STRB            R1, [LR]
MOV             R1, R4
BL              sub_20F58

loc_425C4
MOV             R12, #0
MOVW            R0, #:lower16:aBitmainApiDete ; "bitmain_api_detect"
MOV             R3, R4
MOV             R2, R6
MOV             R1, R5
STR             R12, [SP,#0x808+var_804]
STR             R12, [SP,#0x808+var_808]
MOVT            R0, #:upper16:aBitmainApiDete ; "bitmain_api_detect"
BL              sub_44264
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_425F4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
ADDLE           R4, SP, #0x808+var_800
BGT             loc_42590
B               loc_425C4
; End of function sub_42554




; int __fastcall sub_42610(const void *, size_t)
sub_42610

var_808= -0x808
var_804= -0x804
s= -0x800

MOVW            R3, #:lower16:byte_74500
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_74500
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOV             R6, R0
LDRB            R3, [R3]
MOV             R5, R1
CMP             R3, #0
BNE             loc_4264C
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_426A4

loc_4264C
ADD             R4, SP, #0x808+s
MOV             R2, #aAboutToSendJob ; "about to send job, size is %d"
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
MOV             R3, R5
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_42678
MOV             R0, #0
MOV             R3, R4
STR             R0, [SP,#0x808+var_804]
MOV             R2, R5
STR             R0, [SP,#0x808+var_808]
MOV             R1, R6
LDR             R0, =aBitmainUpdateJ ; "bitmain_update_job"
BL              sub_44264
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_426A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
ADDLE           R4, SP, #0x808+s
BGT             loc_4264C
B               loc_42678
; End of function sub_42610

off_426C0 DCD aBitmainUpdateJ ; "bitmain_update_job"



; int __fastcall sub_426C4(const void *, size_t)
sub_426C4

var_808= -0x808
var_804= -0x804
var_800= -0x800

MOVW            R3, #:lower16:byte_68BD5
PUSH            {R4-R6,LR}
MOVT            R3, #:upper16:byte_68BD5
SUB             SP, SP, #0x800
SUB             SP, SP, #8
MOV             R5, R0
LDRB            R3, [R3]
MOV             R6, R1
CMP             R3, #0
BEQ             loc_42768
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42714
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_42754

loc_42714
MOVW            LR, #:lower16:aAboutToSendShu ; "about to send shutdown"
ADD             R4, SP, #0x808+var_800
MOVT            LR, #:upper16:aAboutToSendShu ; "about to send shutdown"
MOV             R12, R4
LDM             LR!, {R0-R3} ; "about to send shutdown"
STM             R12!, {R0-R3}
MOV             R2, #0
LDM             LR, {R0,R1} ; "utdown"
STR             R0, [R12],#4
MOV             R0, #7
MOV             R3, R1,LSR#16
STRH            R1, [R12],#2
MOV             R1, R4
STRB            R3, [R12]
BL              sub_20F58
B               loc_4276C

loc_42754
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #6
BGT             loc_42714

loc_42768
ADD             R4, SP, #0x808+var_800

loc_4276C
MOV             R0, #0
MOV             R3, R4
STR             R0, [SP,#0x808+var_804]
MOV             R2, R6
STR             R0, [SP,#0x808+var_808]
MOV             R1, R5
LDR             R0, =aBitmainShutdow ; "bitmain_shutdown"
BL              sub_44264
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_426C4

off_42798 DCD aBitmainShutdow ; "bitmain_shutdown"



; int sub_4279C()
sub_4279C

var_810= -0x810
var_808= -0x808
s= -0x800

MOVW            R0, #:lower16:stru_76874
PUSH            {R4-R10,LR}
MOV             R1, #0  ; mutexattr
SUB             SP, SP, #0x810
MOVT            R0, #:upper16:stru_76874 ; mutex
BL              pthread_mutex_init
CMP             R0, #0
BNE             loc_42968

loc_427BC
MOVW            R0, #:lower16:stru_7688C
MOV             R1, #0  ; mutexattr
MOVT            R0, #:upper16:stru_7688C ; mutex
BL              pthread_mutex_init
CMP             R0, #0
BNE             loc_429B8

loc_427D4
MOV             R1, #2
LDR             R0, =off_55DAC
BL              sub_43D64
MOV             R5, R0
MOV             R0, #6  ; seconds
BL              sleep
CMP             R5, #0
BNE             loc_428F4
LDR             R9, =unk_689C8
MOVW            R7, #:lower16:byte_74500
LDR             R8, =aCgminerSocketI_1 ; "cgminer_socket_init"
MOVW            R10, #:lower16:byte_68BD4
MOVT            R7, #:upper16:byte_74500
MOVT            R10, #:upper16:byte_68BD4

loc_4280C
MOVW            R4, #:lower16:aBitmainApiDete ; "bitmain_api_detect"
MOVW            R6, #:lower16:aSRegSReturnD ; "%s reg %s return: %d"
MOVT            R4, #:upper16:aBitmainApiDete ; "bitmain_api_detect"
MOVT            R6, #:upper16:aSRegSReturnD ; "%s reg %s return: %d"
MOV             R5, #0

loc_42820
MOV             R0, R4
BL              sub_43FA4
LDRB            R12, [R7]
ORR             R5, R5, R0
MOV             R2, R6  ; format
MOV             R1, #0x800 ; maxlen
MOV             R3, R8
ADD             R0, SP, #0x810+s ; s
CMP             R12, #0
BNE             loc_42868
LDRB            LR, [R10]
MOV             R12, #dword_67DB4
CMP             LR, #0
BNE             loc_42868
LDR             R12, [R12]
CMP             R12, #4
BLE             loc_42880

loc_42868
STRD            R4, R5, [SP,#0x810+var_810]
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_42880
ADD             R4, R4, #0x84
CMP             R4, R9
BNE             loc_42820
CMP             R5, #0
BEQ             loc_4295C
MOV             R0, #5  ; seconds
BL              sleep
LDRB            R3, [R7]
CMP             R3, #0
BNE             loc_428C8
LDRB            R3, [R10]
CMP             R3, #0
BNE             loc_428C8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_4280C

loc_428C8
MOVW            R2, #:lower16:aSRegFailedWait ; "%s reg failed wait 5s"
ADD             R0, SP, #0x810+s ; s
MOVT            R2, #:upper16:aSRegFailedWait ; "%s reg failed wait 5s"
MOV             R3, R8
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
B               loc_4280C

loc_428F4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42930
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42930
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_4295C

loc_42930
MOVW            R2, #:lower16:aSTransInitFail ; "%s trans init failed: %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aSTransInitFail ; "%s trans init failed: %d"
STR             R5, [SP,#0x810+var_810]
ADD             R0, SP, #0x810+s ; s
LDR             R3, =aCgminerSocketI_1 ; "cgminer_socket_init"
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_4295C
MOV             R0, R5
ADD             SP, SP, #0x810
POP             {R4-R10,PC}

loc_42968
BL              __errno_location
LDR             LR, =aCgminerSocketI_2 ; "cgminer_socket_init"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOV             R12, #0x100
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_427BC

loc_429B8
BL              __errno_location
LDR             LR, =aCgminerSocketI_2 ; "cgminer_socket_init"
MOVW            R1, #:lower16:aSocketaApiC ; "socketa_api.c"
MOVW            R12, #0x101
MOVT            R1, #:upper16:aSocketaApiC ; "socketa_api.c"
MOVW            R2, #:lower16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aFailedToPthrea_4 ; "Failed to pthread_mutex_init errno=%d i"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x810+var_808]
ADD             R0, SP, #0x810+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x810+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_4279C

B               loc_427D4
off_42A08 DCD off_55DAC
off_42A0C DCD unk_689C8
off_42A10 DCD aCgminerSocketI_1 ; "cgminer_socket_init"
off_42A14 DCD aCgminerSocketI_2 ; "cgminer_socket_init"



; int sub_42A18()
sub_42A18

var_800= -0x800

PUSH            {R4,LR}
MOV             R1, #0x188 ; size
SUB             SP, SP, #0x800
MOV             R0, #1  ; nmemb
BL              calloc
SUBS            R4, R0, #0
BEQ             loc_42B60
MOVW            R3, #:lower16:unk_689C8
MOV             R1, #0
MOVT            R3, #:upper16:unk_689C8
MOV             R2, #1
STR             R3, [R4,#4]
STR             R1, [R4,#0x20]
STR             R2, [R4,#0x94]
BL              sub_4279C
MOVW            R3, #:lower16:byte_74500
CMP             R0, #0
MOVT            R3, #:upper16:byte_74500
LDRB            R3, [R3]
BNE             loc_42AE4
CMP             R3, #0
BNE             loc_42A84
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_42B30

loc_42A84
MOVW            LR, #:lower16:aCgminerSocketI ; "cgminer socket init succeeds."
MOV             R12, SP
MOVT            LR, #:upper16:aCgminerSocketI ; "cgminer socket init succeeds."
LDM             LR!, {R0-R3} ; "cgminer socket init succeeds."
STM             R12!, {R0-R3}
LDM             LR, {R0-R3} ; "nit succeeds."
STM             R12!, {R0-R2}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #6
STRH            R3, [R12]
BL              sub_20F58

loc_42AB4
MOV             R3, #dword_68DE8
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_42ACC
BL              sub_3FB54

loc_42ACC
MOV             R0, R4
BL              sub_3EFD4
CMP             R0, #0
BEQ             loc_42B80
ADD             SP, SP, #0x800
POP             {R4,PC}

loc_42AE4
CMP             R3, #0
BNE             loc_42B00
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_42B48

loc_42B00
MOVW            R12, #:lower16:aCgminerSocketI_0 ; "cgminer socket init failes."
MOV             LR, SP
MOVT            R12, #:upper16:aCgminerSocketI_0 ; "cgminer socket init failes."
LDM             R12!, {R0-R3} ; "cgminer socket init failes."
STM             LR!, {R0-R3}
LDM             R12, {R0-R2} ; "nit failes."
STM             LR, {R0-R2}
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
B               loc_42AB4

loc_42B30
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #5
BLE             loc_42AB4
B               loc_42A84

loc_42B48
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42AB4
B               loc_42B00

loc_42B60
MOVW            R3, #:lower16:aBitmainC5Detec ; "bitmain_c5_detect"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R0, #:lower16:aCgpu ; "cgpu"
MOVT            R3, #:upper16:aBitmainC5Detec ; "bitmain_c5_detect"
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVT            R0, #:upper16:aCgpu ; "cgpu"
MOV             R2, #0x28 ; '(' ; line
BL              __assert_fail

loc_42B80
MOVW            R3, #:lower16:aBitmainC5Detec ; "bitmain_c5_detect"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R0, #:lower16:aAddCgpuCgpu ; "add_cgpu(cgpu)"
MOVT            R3, #:upper16:aBitmainC5Detec ; "bitmain_c5_detect"
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVT            R0, #:upper16:aAddCgpuCgpu ; "add_cgpu(cgpu)"
MOV             R2, #0x3C ; '<' ; line
BL              __assert_fail
; End of function sub_42A18




; void sub_42BA0()
sub_42BA0
PUSH            {LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #4
MOVW            R2, #:lower16:aSBitmainShutdo ; "%s: bitmain_shutdown failed."
MOV             R0, SP  ; s
MOVT            R2, #:upper16:aSBitmainShutdo ; "%s: bitmain_shutdown failed."
LDR             R3, =aBitmainC5Shutd ; "bitmain_c5_shutdown"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {PC}
; End of function sub_42BA0

off_42BE0 DCD aBitmainC5Shutd ; "bitmain_c5_shutdown"



; void sub_42BE4()
sub_42BE4
MOV             R1, #0
PUSH            {R4,LR}
MOV             R0, R1
BL              sub_426C4
CMP             R0, #0
POPEQ           {R4,PC}
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42C24
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_42C2C

loc_42C24
POP             {R4,LR}
B               sub_42BA0

loc_42C2C
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BGT             loc_42C24
POP             {R4,PC}
; End of function sub_42BE4




; int sub_42C44()
sub_42C44
PUSH            {LR}
SUB             SP, SP, #0x800
SUB             SP, SP, #4
MOVW            R2, #:lower16:aSApiDetectFail ; "%s: api detect failed."
MOV             R0, SP  ; s
MOVT            R2, #:upper16:aSApiDetectFail ; "%s: api detect failed."
LDR             R3, =aBitmainC5Prepa ; "bitmain_c5_prepare"
MOV             R1, #0x800 ; maxlen
BL              snprintf
MOV             R1, SP
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
MOV             R0, #0
ADD             SP, SP, #0x800
ADD             SP, SP, #4
POP             {PC}
; End of function sub_42C44

off_42C88 DCD aBitmainC5Prepa ; "bitmain_c5_prepare"
PUSH            {R4,LR}
SUB             SP, SP, #0xC8
ADD             R4, SP, #0x64 ; 'd'
MOV             R2, #0x28 ; '('
MOV             R1, #0
MOV             R0, R4
BL              memset
MOV             R2, #0x3B ; ';'
MOV             R1, #0
ADD             R0, SP, #0x8C
BL              memset
MOV             R2, #0x20 ; ' '
MOV             R1, #0
ADD             R0, SP, #0x44 ; 'D'
BL              memset
ADD             R0, SP, #0x1C
BL              sub_239A4
ADD             R0, SP, #0x1C
BL              localtime
MOV             R12, R0
MOVW            R2, #:lower16:unk_56150
LDR             R1, [R12]
MOVT            R2, #:upper16:unk_56150
LDR             R3, [R12,#0x14]
MOV             R0, R4
STR             R1, [SP,#0x10]
LDR             R1, [R12,#4]
ADD             R3, R3, #0x760
ADD             R3, R3, #0xC
STR             R1, [SP,#0xC]
MOV             R1, #0x28 ; '('
LDR             LR, [R12,#8]
STR             LR, [SP,#8]
LDR             LR, [R12,#0xC]
STR             LR, [SP,#4]
LDR             R12, [R12,#0x10]
ADD             R12, R12, #1
STR             R12, [SP]
BL              snprintf
MOVW            R3, #:lower16:aBitmainOpensou ; "BITMAIN_OPENSOURCE"
MOVW            R2, #:lower16:(aXDSS_0+4) ; "%s%s"
MOVT            R3, #:upper16:aBitmainOpensou ; "BITMAIN_OPENSOURCE"
MOVT            R2, #:upper16:(aXDSS_0+4) ; "%s%s"
MOV             R1, #0x3B ; ';'
STR             R4, [SP]
ADD             R0, SP, #0x8C
BL              snprintf
ADD             R2, SP, #0x44 ; 'D'
ADD             R0, SP, #0x8C
MOV             R1, #0x3B ; ';'
BL              sub_21C34
ADD             R0, SP, #0x44 ; 'D'
ADD             R2, SP, #0x24 ; '$'
MOV             R1, #0x20 ; ' '
BL              sub_21C34
ADD             R0, SP, #0x24 ; '$'
MOV             R1, #0x20 ; ' '
BL              sub_42554
CMP             R0, #0
BEQ             loc_42DC4
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_42DB8
MOV             R3, #byte_68BD4
LDRB            R0, [R3]
CMP             R0, #0
BNE             loc_42DB8
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_42DBC

loc_42DB8
BL              sub_42C44

loc_42DBC
ADD             SP, SP, #0xC8
POP             {R4,PC}

loc_42DC4
BL              sub_3FA44
MOV             R0, #1
ADD             SP, SP, #0xC8
POP             {R4,PC}



; int __fastcall sub_42DD4(pthread_mutex_t *, const char *, int)
sub_42DD4

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R4, R1
MOV             R5, R2
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_42E00
ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}

loc_42E00
BL              __errno_location
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STR             R1, [SP,#0x814+var_814]
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_42DD4

ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}


; Attributes: noreturn

; void __fastcall __noreturn sub_42E50(const char *, int)
sub_42E50

var_814= -0x814
var_810= -0x810
s= -0x804

PUSH            {R4,R5,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #4
MOV             R5, R1
MOV             R4, R0
BL              __errno_location
LDR             R3, [R0]
MOV             R0, #aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STR             R0, [SP,#0x814+var_814]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STRD            R4, R5, [SP,#0x814+var_810]
ADD             R0, SP, #0x814+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x814+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_42E50

ADD             SP, SP, #0x810
ADD             SP, SP, #4
POP             {R4,R5,PC}



; __int64 sub_42EB4()
sub_42EB4
PUSH            {R4,R6-R9,LR}
MOV             R4, #qword_6ACD8
LDRD            R6, R7, [R4]
ORRS            R3, R6, R7
BNE             loc_42EE0

loc_42ECC
MOV             R0, #2
BL              sub_23B9C
MOV             R0, R6
MOV             R1, R7
POP             {R4,R6-R9,PC}

loc_42EE0               ; mutex
MOV             R0, #stru_7688C
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_42F28

loc_42EF4
MOVW            R0, #:lower16:stru_7688C
MOV             R8, #0
MOV             R9, #0
MOV             R2, #0xA1
LDR             R1, =aBitmainC5Scanh ; "bitmain_c5_scanhash"
MOVT            R0, #:upper16:stru_7688C
STRD            R8, R9, [R4]
BL              sub_42DD4
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
B               loc_42ECC

loc_42F28
MOV             R1, #0x9F
LDR             R0, =aBitmainC5Scanh ; "bitmain_c5_scanhash"
BL              sub_42E50
; End of function sub_42EB4

B               loc_42EF4
off_42F38 DCD aBitmainC5Scanh ; "bitmain_c5_scanhash"



; const char *sub_42F3C()
sub_42F3C

var_824= -0x824
var_820= -0x820
var_81C= -0x81C
var_810= -0x810
var_80C= -0x80C
format= -0x808
s= -0x804

PUSH            {R4-R11,LR}
MOV             R9, #dword_6ACD4
SUB             SP, SP, #0x820
SUB             SP, SP, #4
LDR             R7, [R9]
CMP             R7, #0
BEQ             loc_4313C
MOV             R0, #stru_76874 ; mutex
BL              pthread_mutex_lock
CMP             R0, #0
BNE             loc_43278

loc_42F70
MOV             R10, #dword_6ACD0
LDR             R3, [R10]
CMP             R3, #0x128
BEQ             loc_43270
MOV             R4, #0
MOVW            R3, #:lower16:byte_68BD5
MOVW            R2, #:lower16:byte_74500
MOVW            R1, #:lower16:aSUpdateSTypeDV ; "[%s], update %s type %d value 0x%x"
MOV             R7, R4
MOVT            R3, #:upper16:byte_68BD5
MOVT            R2, #:upper16:byte_74500
MOVT            R1, #:upper16:aSUpdateSTypeDV ; "[%s], update %s type %d value 0x%x"
STR             R3, [SP,#0x824+var_810]
STR             R2, [SP,#0x824+var_80C]
STR             R1, [SP,#0x824+format]

loc_42FB0
LDR             R11, [R9]
ADD             R5, R4, #4
ADD             R5, R11, R5
LDR             R6, [R11,R4]
MOV             R0, R5  ; s
BL              strlen
LDR             R3, [SP,#0x824+var_810]
ADD             R0, R0, R4
ADD             R0, R0, #5
ADD             R8, R11, R0
LDRB            R2, [R3]
CMP             R2, #0
BEQ             loc_43050
LDR             R3, [SP,#0x824+var_80C]
LDRB            R2, [R3]
CMP             R2, #0
BNE             loc_4301C
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_4301C
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #6
BLE             loc_43050

loc_4301C
LDRB            R2, [R11,R0]
MOV             R1, #0x800 ; maxlen
STR             R6, [SP,#0x824+var_820]
ADD             R0, SP, #0x824+s ; s
STR             R5, [SP,#0x824+var_824]
STR             R2, [SP,#0x824+var_81C]
LDR             R3, =aBitmainApiStat ; "bitmain_api_stats"
LDR             R2, [SP,#0x824+format] ; format
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #0
MOV             R0, #7
BL              sub_20F58

loc_43050
MOV             R3, #1
MOV             R1, R5
MOV             R0, R7
STR             R3, [SP,#0x824+var_824]
MOV             R2, R6
MOV             R3, R8
BL              sub_18850
MOV             R7, R0
MOV             R0, R5  ; s
BL              strlen
MOV             R5, R0
CMP             R6, #0x1A ; switch 27 cases
LDRLS           PC, [PC,R6,LSL#2] ; switch jump
B               def_43080 ; jumptable 00043080 default case
jpt_43080 DCD loc_4315C ; jump table for switch statement
DCD loc_4315C
DCD loc_4315C
DCD loc_4314C
DCD loc_4314C
DCD loc_4314C
DCD loc_4314C
DCD loc_4314C
DCD loc_4314C
DCD loc_4314C
DCD loc_430F4
DCD loc_430F4
DCD loc_430F4
DCD loc_430F4
DCD loc_43154
DCD loc_430F4
DCD loc_4314C
DCD loc_430F4
DCD loc_430F4
DCD loc_4314C
DCD loc_430F4
DCD loc_430F4
DCD loc_4314C
DCD loc_430F4
DCD loc_430F4
DCD loc_430F4
DCD loc_4314C

loc_430F4               ; jumptable 00043080 cases 10-13,15,17,18,20,21,23-25
MOV             R0, #8

loc_430F8
LDR             R3, [R10]
ADD             R5, R5, #5
ADD             R4, R5, R4
ADD             R4, R0, R4
SUB             R3, R3, #0x128
CMP             R3, R4
BHI             loc_42FB0
BNE             loc_431D4

loc_43118               ; mutex
MOV             R0, #stru_76874
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_432C8

loc_4312C
MOV             R3, #off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98

loc_4313C
MOV             R0, R7
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_4314C               ; jumptable 00043080 cases 3-9,16,19,22,26
MOV             R0, #4
B               loc_430F8

loc_43154               ; jumptable 00043080 case 14
MOV             R0, #1
B               loc_430F8

loc_4315C               ; jumptable 00043080 cases 0-2
MOV             R0, R8
BL              strlen
ADD             R0, R0, #1
B               loc_430F8

def_43080               ; jumptable 00043080 default case
LDR             R3, [SP,#0x824+var_80C]
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_431A4
MOV             R3, #byte_68BD4
LDRB            R0, [R3]
CMP             R0, #0
BNE             loc_431A4
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_430F8

loc_431A4
MOVW            R2, #:lower16:aShouldNotHappy ; "Should not happy for unknown data type "...
MOV             R3, R6
MOVT            R2, #:upper16:aShouldNotHappy ; "Should not happy for unknown data type "...
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x824+s ; s
BL              snprintf
MOV             R0, #3
ADD             R1, SP, #0x824+s
MOV             R2, #0
BL              sub_20F58
MOV             R0, #0
B               loc_430F8

loc_431D4
MOV             R2, #byte_74500
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_43210
MOV             R2, #byte_68BD4
LDRB            R2, [R2]
CMP             R2, #0
BNE             loc_43210
MOV             R2, #dword_67DB4
LDR             R2, [R2]
CMP             R2, #2
BLE             loc_43238

loc_43210
MOVW            R2, #:lower16:aLengthMismatch ; "length mismatch; sckt %d; actual %d"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aLengthMismatch ; "length mismatch; sckt %d; actual %d"
STR             R4, [SP,#0x824+var_824]
ADD             R0, SP, #0x824+s ; s
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58

loc_43238               ; mutex
MOV             R0, #stru_76874
BL              pthread_mutex_unlock
CMP             R0, #0
BNE             loc_43318

loc_4324C
MOVW            R3, #:lower16:off_67ED8
MOV             R7, #0
MOVT            R3, #:upper16:off_67ED8
LDR             R3, [R3] ; sub_21C98
BLX             R3      ; sub_21C98
MOV             R0, R7
ADD             SP, SP, #0x820
ADD             SP, SP, #4
POP             {R4-R11,PC}

loc_43270
MOV             R7, #0
B               loc_43118

loc_43278
BL              __errno_location
LDR             LR, =aBitmainApiStat_0 ; "bitmain_api_stats"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R12, #0x183
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R2, #:lower16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO_0 ; "WTF MUTEX ERROR ON LOCK! errno=%d in %s"...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x824+var_81C]
ADD             R0, SP, #0x824+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_42F70

loc_432C8
BL              __errno_location
LDR             LR, =aBitmainApiStat_0 ; "bitmain_api_stats"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R12, #0x19D
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x824+var_81C]
ADD             R0, SP, #0x824+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
B               loc_4312C

loc_43318
BL              __errno_location
LDR             LR, =aBitmainApiStat_0 ; "bitmain_api_stats"
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R12, #0x197
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R2, #:lower16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
LDR             R3, [R0]
MOVT            R2, #:upper16:aWtfMutexErrorO ; "WTF MUTEX ERROR ON UNLOCK! errno=%d in "...
STMEA           SP, {R1,LR}
STR             R12, [SP,#0x824+var_81C]
ADD             R0, SP, #0x824+s ; s
MOV             R1, #0x800 ; maxlen
BL              snprintf
ADD             R1, SP, #0x824+s
MOV             R2, #1
MOV             R0, #3
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_42F3C

B               loc_4324C
off_43368 DCD aBitmainApiStat ; "bitmain_api_stats"
off_4336C DCD aBitmainApiStat_0 ; "bitmain_api_stats"



; char *__fastcall sub_43370(int, size_t *)
sub_43370

var_81C= -0x81C
var_810= -0x810
var_80C= -0x80C
s= -0x804

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x810
SUB             SP, SP, #0xC
MOV             R9, R0
STR             R1, [SP,#0x81C+var_810]
BL              sub_1D4E4
LDR             R7, [R9,#0x2A0]
VSTR            D0, [SP,#0x81C+var_80C]
LDR             R10, [R9,#0x6AC]
MOV             R0, R7  ; s
LDR             R11, [R9,#0x624]
BL              strlen
LDR             R6, [R9,#0x264]
MOV             R5, R0
MOV             R8, R10,LSL#5
MOV             R0, R6  ; s
BL              strlen
ADD             R3, R11, #0x740
ADD             R3, R3, #0xA
ADD             R4, R3, R8
ADD             R4, R4, R5
ADD             R4, R4, R0
MOV             R0, #1  ; nmemb
MOV             R1, R4  ; size
BL              calloc
SUBS            R5, R0, #0
BEQ             loc_43558
MOVW            R3, #0x738
MOV             R1, R9  ; src
MOV             R2, R3  ; n
BL              memcpy
MOVW            R3, #0x738
MOV             R2, R11 ; n
ADD             R0, R5, R3 ; dest
LDR             R1, [R9,#0x620] ; src
BL              memcpy
MOVW            R3, #0x738
CMP             R10, #0
ADD             R2, R11, R3
MOV             R11, R2
BLE             loc_43474
LDR             R11, [R9,#0x2A4]
ADD             R3, R5, R2
ADD             R10, R11, R10,LSL#2

loc_43420
LDR             R1, [R11],#4
ADD             R3, R3, #0x20 ; ' '
LDR             R9, [R1]
CMP             R11, R10
LDR             LR, [R1,#4]
LDR             R12, [R1,#8]
LDR             R0, [R1,#0xC]
STR             R9, [R3,#-0x20]
STR             LR, [R3,#-0x1C]
STR             R12, [R3,#-0x18]
STR             R0, [R3,#-0x14]
LDR             R9, [R1,#0x10]
LDR             LR, [R1,#0x14]
LDR             R12, [R1,#0x18]
LDR             R0, [R1,#0x1C]
STR             R9, [R3,#-0x10]
STR             LR, [R3,#-0xC]
STR             R12, [R3,#-8]
STR             R0, [R3,#-4]
BNE             loc_43420
ADD             R11, R8, R2

loc_43474               ; s
MOV             R0, R7
BL              strlen
ADD             R8, R0, #1
MOV             R1, R7  ; src
MOV             R2, R8  ; n
ADD             R0, R5, R11 ; dest
BL              memcpy
MOV             R0, R6  ; s
ADD             R11, R8, R11
BL              strlen
MOV             R7, R0
MOV             R1, R6  ; src
ADD             R0, R5, R11 ; dest
ADD             R2, R7, #1 ; n
BL              memcpy
ADD             R3, SP, #0x81C+var_80C
MOVW            R12, #:lower16:byte_74500
LDM             R3!, {R0,R1}
ADD             R11, R11, R7
MOVT            R12, #:upper16:byte_74500
ADD             R2, R11, #1
LDRB            LR, [R12]
MOVW            R3, #:lower16:dbl_68748
STR             R0, [R5,R2]
MOVT            R3, #:upper16:dbl_68748
ADD             R2, R5, R2
ADD             R12, R11, #9
STR             R1, [R2,#4]
CMP             LR, #0
LDM             R3!, {R0,R1}
ADD             R3, R5, R12
ADD             R11, R11, #0x11
STR             R0, [R5,R12]
STR             R1, [R3,#4]
BNE             loc_43514
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_435CC

loc_43514
MOVW            R2, #:lower16:aJobBufTotalLen ; "job buf total len:%d, offset:%d\n"
MOV             R1, #0x800 ; maxlen
MOVT            R2, #:upper16:aJobBufTotalLen ; "job buf total len:%d, offset:%d\n"
STR             R11, [SP,#0x81C+var_81C]
MOV             R3, R4
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #5
BL              sub_20F58

loc_43540
LDR             R3, [SP,#0x81C+var_810]
STR             R4, [R3]

loc_43548
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_43558
MOV             R3, #byte_74500
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_43594
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_43594
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_43548

loc_43594
MOVW            R2, #:lower16:aMallocTempJobD ; "malloc temp job data buf failed: %d\n"
MOV             R3, R4
MOVT            R2, #:upper16:aMallocTempJobD ; "malloc temp job data buf failed: %d\n"
MOV             R1, #0x800 ; maxlen
ADD             R0, SP, #0x81C+s ; s
BL              snprintf
ADD             R1, SP, #0x81C+s
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
MOV             R0, R5
ADD             SP, SP, #0x810
ADD             SP, SP, #0xC
POP             {R4-R11,PC}

loc_435CC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
BLE             loc_43540
B               loc_43514
; End of function sub_43370




; void __fastcall sub_435E4(int)
sub_435E4

var_808= -0x808
var_804= -0x804
var_800= -0x800

PUSH            {R4-R6,LR}
MOV             R6, #byte_74500
LDR             R2, [R0,#0x98]
SUB             SP, SP, #0x800
LDRB            R3, [R6]
SUB             SP, SP, #8
LDR             R5, [R2]
CMP             R3, #0
BNE             loc_43620
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_436EC

loc_43620
MOVW            R2, #:lower16:aUpdateJob ; "update job"
ADD             R4, SP, #0x808+var_800
MOVT            R2, #:upper16:aUpdateJob ; "update job"
MOV             R3, R4
LDM             R2, {R0-R2} ; "update job"
STM             R3!, {R0,R1}
MOV             R1, R4
MOV             R12, R2,LSR#16
STRH            R2, [R3],#2
MOV             R0, #5
MOV             R2, #0
STRB            R12, [R3]
BL              sub_20F58

loc_43654
MOV             R3, #0
LDR             R1, [R5]
STRB            R3, [R5,#0x3F]
MOV             R0, R5
STRB            R3, [R5,#0x3E]
BL              sub_36CD4
MOVW            R1, #:lower16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
MOVW            R3, #0x105
STR             R0, [SP,#0x808+var_808]
MOVT            R1, #:upper16:aDriverBtmC5Soc ; "driver-btm-c5_socketa.c"
LDR             R2, =aBitmainC5Updat ; "bitmain_c5_update"
SUB             R0, R4, #8
BL              sub_2CEA0
BL              sub_31FF4
LDRB            R3, [R0,#0x280]
MOV             R5, R0
CMP             R3, #0
BEQ             loc_43774

loc_4369C
MOVW            R3, #:lower16:dword_69178
MOV             R0, R5
MOVT            R3, #:upper16:dword_69178
LDR             R2, [R3]
CMP             R2, #0
MOVNE           R1, #1
MOVNE           R2, #0
STRBNE          R1, [R5,#0x2A8]
SUB             R1, R4, #4
STRNE           R2, [R3]
BL              sub_43370
LDR             R1, [SP,#0x808+var_804]
MOV             R5, R0
CMP             R1, #0
BNE             loc_43708

loc_436D8               ; ptr
MOV             R0, R5
BL              free
ADD             SP, SP, #0x800
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_436EC
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #4
ADDLE           R4, SP, #0x808+var_800
BLE             loc_43654
B               loc_43620

loc_43708
BL              sub_42610
CMP             R0, #0
BEQ             loc_436D8
LDRB            R3, [R6]
CMP             R3, #0
BNE             loc_43748
MOV             R3, #byte_68BD4
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_43748
MOV             R3, #dword_67DB4
LDR             R3, [R3]
CMP             R3, #2
BLE             loc_436D8

loc_43748
MOVW            R2, #:lower16:aSUpdateJobFail ; "%s: update job failed."
LDR             R3, =aBitmainC5Updat_0 ; "bitmain_c5_update"
MOVT            R2, #:upper16:aSUpdateJobFail ; "%s: update job failed."
MOV             R1, #0x800 ; maxlen
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4
MOV             R2, #0
MOV             R0, #3
BL              sub_20F58
B               loc_436D8

loc_43774
MOVW            R12, #:lower16:aBitmainS9HasTo ; "Bitmain S9 has to use stratum pools"
MOV             LR, R4
MOVT            R12, #:upper16:aBitmainS9HasTo ; "Bitmain S9 has to use stratum pools"
LDM             R12!, {R0-R3} ; "Bitmain S9 has to use stratum pools"
STM             LR!, {R0-R3}
LDM             R12!, {R0-R3} ; "o use stratum pools"
LDR             R12, [R12] ; "ols"
STM             LR!, {R0-R3}
MOV             R2, #1
MOV             R1, R4
MOV             R0, #3
STR             R12, [LR]
BL              sub_20F58
MOV             R0, #1
BL              sub_3EBA0
; End of function sub_435E4

B               loc_4369C
off_437B4 DCD aBitmainC5Updat ; "bitmain_c5_update"
off_437B8 DCD aBitmainC5Updat_0 ; "bitmain_c5_update"



; int __fastcall sub_437BC(int)
sub_437BC

var_1EC= -0x1EC
var_1E8= -0x1E8
var_1E4= -0x1E4
var_1DC= -0x1DC
newthread= -0x1D8
var_1D4= -0x1D4
var_1CC= -0x1CC
var_1C8= -0x1C8
src= -0x1C4
var_1C0= -0x1C0
var_1BC= -0x1BC
var_1B8= -0x1B8
var_1B4= -0x1B4
var_1B0= -0x1B0
var_1AC= -0x1AC
var_1A8= -0x1A8
s1= -0x1A4
var_1A0= -0x1A0
var_19C= -0x19C
var_198= -0x198
var_194= -0x194
var_190= -0x190
var_18C= -0x18C
var_188= -0x188
buf= -0x184
s= -0x180
var_104= -0x104
var_100= -0x100

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x1EC
MOV             R4, R0
MOVW            R9, #:lower16:aXSS ; "%x%s%s"
MOVW            R8, #:lower16:aRegist ; "regist"
MOVW            R6, #:lower16:dword_6ACE0
BL              pthread_self
BL              pthread_detach
MOVW            R2, #:lower16:aCtAMain ; "ct_a/main"
MOV             R12, #0
MOVT            R2, #:upper16:aCtAMain ; "ct_a/main"
ADD             R3, SP, #0x1EC+var_1D4
LDM             R2, {R0-R2} ; "ct_a/main"
MOVT            R9, #:upper16:aXSS ; "%x%s%s"
MOVT            R8, #:upper16:aRegist ; "regist"
MOVT            R6, #:upper16:dword_6ACE0
STR             R12, [SP,#0x1EC+var_1CC]
STR             R12, [SP,#0x1EC+var_1C8]
STM             R3!, {R0,R1}
ADD             R1, SP, #0x1EC+var_1D4
MOV             R0, #0xF ; option
STRH            R2, [R3]
BL              prctl
LDR             R7, [R4,#8]

loc_4381C
MOV             R4, #0
MOV             R2, #0x7C ; '|' ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x1EC+s ; s
STR             R4, [SP,#0x1EC+buf]
BL              memset
MOV             R3, R4  ; flags
MOV             R2, #0x80 ; n
ADD             R1, SP, #0x1EC+buf ; buf
MOV             R0, R7  ; fd
BL              recv
CMP             R0, R4
BLE             loc_43A54
ADD             R2, SP, #0x1EC+src
ADD             R3, SP, #0x1EC+s1
STR             R2, [SP,#0x1EC+var_1EC]
MOV             R1, R9
ADD             R2, SP, #0x1EC+var_1DC
ADD             R0, SP, #0x1EC+buf
STR             R4, [SP,#0x1EC+src]
STR             R4, [SP,#0x1EC+var_1C0]
STR             R4, [SP,#0x1EC+s1]
STR             R4, [SP,#0x1EC+var_1A0]
STR             R4, [SP,#0x1EC+var_1DC]
STR             R4, [SP,#0x1EC+var_1BC]
STR             R4, [SP,#0x1EC+var_1B8]
STR             R4, [SP,#0x1EC+var_1B4]
STR             R4, [SP,#0x1EC+var_1B0]
STR             R4, [SP,#0x1EC+var_1AC]
STR             R4, [SP,#0x1EC+var_1A8]
STR             R4, [SP,#0x1EC+var_19C]
STR             R4, [SP,#0x1EC+var_198]
STR             R4, [SP,#0x1EC+var_194]
STR             R4, [SP,#0x1EC+var_190]
STR             R4, [SP,#0x1EC+var_18C]
STR             R4, [SP,#0x1EC+var_188]
BL              __isoc99_sscanf
MOV             R1, R8  ; s2
ADD             R0, SP, #0x1EC+s1 ; s1
BL              strcmp
SUBS            R4, R0, #0
BEQ             loc_438EC
LDR             R4, [R6]
MOV             R0, #unk_6AD08
MOV             R2, #0x80 ; n
ADD             R1, SP, #0x1EC+buf ; src
ADD             R0, R0, R4,LSL#7 ; dest
ADD             R4, R4, #1
BL              memcpy
STR             R4, [R6]
B               loc_4381C

loc_438EC               ; size
MOV             R1, #1
MOV             R0, #0x98 ; nmemb
BL              calloc
LDR             R11, [R6,#(dword_6ACE4 - 0x6ACE0)]
MOV             R10, R0
CMP             R11, #0
LDRNE           R5, =s2
BNE             loc_4391C
B               loc_43A60

loc_43910
ADD             R4, R4, #1
CMP             R4, R11
BEQ             loc_43954

loc_4391C               ; s2
MOV             R1, R5
ADD             R0, SP, #0x1EC+src ; s1
BL              strcmp
CMP             R0, #0
ADD             R5, R5, #0x88
BNE             loc_43910
ADD             R2, R4, R4,LSL#4
MOV             R3, #unk_6ED08
ADD             R1, R3, R2,LSL#3
LDR             R2, [R3,R2,LSL#3]
LDR             R3, [R1,#0x84]
STR             R2, [R10,#0xC]
STR             R3, [R10,#0x94]

loc_43954
CMP             R11, R4
BEQ             loc_43A60
MOVW            R4, #:lower16:dword_68A40
MOV             R5, R10
MOVT            R4, #:upper16:dword_68A40
ADD             R0, SP, #0x1EC+src ; s
LDR             R3, [R4]
STR             R3, [R5],#0x10
BL              strlen
ADD             R1, SP, #0x1EC+src ; src
ADD             R2, R0, #1 ; n
MOV             R0, R5  ; dest
BL              memcpy
MOV             R12, #0
MOVW            R2, #:lower16:sub_43ADC
MOV             R3, R10 ; arg
MOV             R1, R12 ; attr
MOVT            R2, #:upper16:sub_43ADC ; start_routine
ADD             R0, SP, #0x1EC+newthread ; newthread
STR             R12, [R10,#0x90]
BL              pthread_create
LDR             R3, [R10,#0x90]
CMP             R3, #0
BNE             loc_439C8

loc_439B4               ; useconds
MOVW            R0, #0x2710
BL              usleep
LDR             R3, [R10,#0x90]
CMP             R3, #0
BEQ             loc_439B4

loc_439C8
LDR             R10, [R10]
MOV             R5, #0
LDR             R3, [R4]
MOV             R2, #0xFC ; n
MOV             R1, R5  ; c
ADD             R0, SP, #0x1EC+var_100 ; s
STR             R5, [SP,#0x1EC+var_104]
CMP             R10, R3
STRNE           R10, [R4]
BL              memset
MOVW            R0, #:lower16:aOk ; "OK"
MOVW            R2, #:lower16:aRegResp ; "reg_resp"
MOVT            R0, #:upper16:aOk ; "OK"
MOVT            R2, #:upper16:aRegResp ; "reg_resp"
ADD             R3, SP, #0x1EC+src
MOV             R1, #aXDSSS ; "%x %d %s %s %s"
STR             R3, [SP,#0x1EC+var_1E4]
STR             R0, [SP,#0x1EC+var_1E8]
MOV             R3, R10
STR             R2, [SP,#0x1EC+var_1EC]
ADD             R0, SP, #0x1EC+var_104 ; s
MOV             R2, #0x3F ; '?'
BL              sprintf
ADD             R0, SP, #0x1EC+var_104 ; s
BL              strlen
MOV             R3, R5  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x1EC+var_104 ; buf
MOV             R0, R7  ; fd
BL              send
LDR             R3, [R4]
ADD             R3, R3, #1
STR             R3, [R4]
B               loc_4381C

loc_43A54
MOV             R0, R4
ADD             SP, SP, #0x1EC
POP             {R4-R11,PC}

loc_43A60
MOV             R4, #0
MOV             R2, #0xFC ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x1EC+var_100 ; s
STR             R4, [SP,#0x1EC+var_104]
BL              memset
MOVW            R3, #:lower16:aNoName ; "no_name"
MOVW            R2, #:lower16:aRegResp ; "reg_resp"
ADD             R0, SP, #0x1EC+src
MOVT            R3, #:upper16:aNoName ; "no_name"
MOVT            R2, #:upper16:aRegResp ; "reg_resp"
MOVW            R1, #:lower16:aXDSSS ; "%x %d %s %s %s"
STR             R0, [SP,#0x1EC+var_1E4]
MOVT            R1, #:upper16:aXDSSS ; "%x %d %s %s %s"
STR             R3, [SP,#0x1EC+var_1E8]
ADD             R0, SP, #0x1EC+var_104 ; s
MOV             R3, R4
STR             R2, [SP,#0x1EC+var_1EC]
MOV             R2, #0x3F ; '?'
BL              sprintf
ADD             R0, SP, #0x1EC+var_104 ; s
BL              strlen
MOV             R3, R4  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x1EC+var_104 ; buf
MOV             R0, R7  ; fd
BL              send
MOV             R0, R10 ; ptr
BL              free
B               loc_4381C
; End of function sub_437BC

off_43AD8 DCD s2



; int __fastcall sub_43ADC(int)
sub_43ADC

optlen= -0x24C
var_248= -0x248
n= -0x240
var_23C= -0x23C
var_238= -0x238
s= -0x234
var_230= -0x230
var_22C= -0x22C
var_228= -0x228
addr= -0x224
var_214= -0x214
buf= -0x204
var_200= -0x200
var_104= -0x104
var_100= -0x100
var_4= -4

PUSH            {R4-R11,LR}
SUB             SP, SP, #0x24C
MOV             R7, R0
MOV             R4, #0
MOV             R5, #2
BL              pthread_self
BL              pthread_detach
MOVW            R1, #:lower16:aCtAFcbD ; "ct_a/fcb/%d"
LDR             R2, [R7]
MOVT            R1, #:upper16:aCtAFcbD ; "ct_a/fcb/%d"
ADD             R0, SP, #0x24C+s ; s
STR             R4, [SP,#0x24C+s]
STR             R4, [SP,#0x24C+var_230]
STR             R4, [SP,#0x24C+var_22C]
STR             R4, [SP,#0x24C+var_228]
BL              sprintf
ADD             R1, SP, #0x24C+s
MOV             R0, #0xF ; option
BL              prctl
MOVW            R0, #:lower16:a127001 ; "127.0.0.1"
STRH            R5, [SP,#0x24C+addr]
MOVT            R0, #:upper16:a127001 ; "127.0.0.1"
BL              inet_addr
MOV             R2, R4  ; protocol
STR             R0, [SP,#0x24C+addr.sa_data+2]
MOV             R1, #1  ; type
MOV             R0, R5  ; domain
BL              socket
SUBS            R4, R0, #0
BLT             loc_43D3C
MOV             R1, #1  ; level
ADD             R3, SP, #0x24C+var_4
MOV             R12, #4
STR             R1, [R3,#-0x238]! ; optval
MOV             R2, R5  ; optname
STR             R12, [SP,#0x24C+optlen] ; optlen
BL              setsockopt
CMP             R0, #0
BLT             loc_43D24
LDR             R3, [R7]
MOV             R5, #aBindError ; "bind error"

loc_43B84
REV16           R3, R3
MOV             R2, #0x10 ; len
ADD             R1, SP, #0x24C+addr ; addr
MOV             R0, R4  ; fd
STRH            R3, [SP,#0x24C+addr.sa_data]
BL              bind
CMP             R0, #0
MOV             R0, R5  ; s
BGE             loc_43BBC
BL              perror
LDR             R3, [R7]
ADD             R3, R3, #1
STR             R3, [R7]
B               loc_43B84

loc_43BBC               ; n
MOV             R1, #5
MOV             R0, R4  ; fd
BL              listen
CMP             R0, #0
BLT             loc_43D0C
MOV             R1, #0x10
ADD             R2, SP, #0x24C+var_4
MOV             R3, #1
STR             R1, [R2,#-0x234]! ; addr_len
MOV             R0, R4  ; fd
ADD             R1, SP, #0x24C+var_214 ; addr
STR             R3, [R7,#0x90]
BL              accept
SUBS            R5, R0, #0
BLT             loc_43D54
MOV             R4, #0
MOV             R2, #0xFC ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x24C+var_200 ; s
STR             R4, [SP,#0x24C+buf]
ADD             R10, R7, #0x10
BL              memset
MOVW            R1, #:lower16:aXS ; "%x %s\n"
MOV             R3, R10
MOVT            R1, #:upper16:aXS ; "%x %s\n"
MOV             R2, #0x3F ; '?'
ADD             R0, SP, #0x24C+buf ; s
MOVW            R9, #:lower16:aOk ; "OK"
BL              sprintf
ADD             R0, SP, #0x24C+buf ; s
MOVW            R8, #:lower16:aXDSS ; "%x %d %s %s"
BL              strlen
MOV             R3, R4  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x24C+buf ; buf
MOV             R0, R5  ; fd
BL              send
LDR             R2, [R7,#0x94]
MOV             R11, R4
MOVT            R9, #:upper16:aOk ; "OK"
MOVT            R8, #:upper16:aXDSS ; "%x %d %s %s"
MOV             R0, R2  ; size
STR             R2, [SP,#0x24C+n]
BL              malloc
MOV             R3, R4  ; flags
MOV             R6, R0
MOV             R1, R0  ; buf
LDR             R2, [SP,#0x24C+n] ; n
MOV             R0, R5  ; fd
BL              recv

loc_43C84               ; buf
MOV             R1, R6
MOV             R3, #0  ; flags
LDR             R2, [R7,#0x94] ; n
MOV             R0, R5  ; fd
BL              recv
SUBS            R1, R0, #0
MOV             R0, R6
MOVLE           R4, #0
BLE             loc_43CBC
LDR             R4, [R7,#0xC]
CMP             R4, #0
BEQ             loc_43CBC
BLX             R4
MOV             R4, R0

loc_43CBC               ; n
MOV             R2, #0xFC
MOV             R1, #0  ; c
ADD             R0, SP, #0x24C+var_100 ; s
STR             R11, [SP,#0x24C+var_104]
BL              memset
MOV             R3, R4
MOV             R1, R8  ; format
MOV             R2, #0x3F ; '?'
STR             R9, [SP,#0x24C+var_248]
STR             R10, [SP,#0x24C+optlen]
ADD             R0, SP, #0x24C+var_104 ; s
BL              sprintf
ADD             R0, SP, #0x24C+var_104 ; s
BL              strlen
MOV             R3, #0  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x24C+var_104 ; buf
MOV             R0, R5  ; fd
BL              send
B               loc_43C84

loc_43D0C
MOV             R0, #aListenError ; "listen error"
BL              perror

loc_43D18
MOV             R0, #0
ADD             SP, SP, #0x24C
POP             {R4-R11,PC}

loc_43D24
MOV             R0, #aSetSockoptErr ; "set sockopt err"
BL              perror
MOV             R0, #0
ADD             SP, SP, #0x24C
POP             {R4-R11,PC}

loc_43D3C
MOV             R0, #aSocketError ; "socket error"
BL              perror
MOV             R0, #0
ADD             SP, SP, #0x24C
POP             {R4-R11,PC}

loc_43D54
MOV             R0, #aAcceptError ; "accept error"
BL              perror
B               loc_43D18
; End of function sub_43ADC




; int __fastcall sub_43D64(int, int)
sub_43D64

newthread= -0x314
addr= -0x310
var_300= -0x300
var_2FC= -0x2FC
var_2F8= -0x2F8
var_2F4= -0x2F4
var_2F0= -0x2F0
var_2EC= -0x2EC
var_2E8= -0x2E8
buf= -0x200
s= -0x1FC
var_s0=  0

PUSH            {R4-R8,LR}
MOV             R5, #dword_6ACE0
SUB             SP, SP, #0x318
LDR             R6, [R5,#(dword_6ACE8 - 0x6ACE0)]
CMP             R6, #0
BNE             loc_43F84
MOV             R8, R1
MOV             R4, R0
MOV             R1, R6  ; mutexattr
ADD             R0, R5, #0xC ; mutex
BL              pthread_mutex_init
CMP             R8, #0
BEQ             loc_43DE0
ADD             R7, R8, R8,LSL#4
ADD             R4, R4, #4
LDR             R3, =s2
ADD             R7, R4, R7,LSL#3

loc_43DAC               ; n
MOV             R2, #0x80
MOV             R1, R4  ; src
MOV             R0, R3  ; dest
BL              memcpy
ADD             R4, R4, #0x88
MOV             R3, R0
LDR             R2, [R4,#-8]
ADD             R3, R3, #0x88
LDR             R0, [R4,#-0x8C]
CMP             R4, R7
STR             R2, [R3,#-8]
STR             R0, [R3,#-0x8C]
BNE             loc_43DAC

loc_43DE0
MOVW            R0, #:lower16:a127001 ; "127.0.0.1"
MOV             R4, #0
MOV             R7, #2
MOVT            R0, #:upper16:a127001 ; "127.0.0.1"
STR             R4, [SP,#0x318+addr.sa_data+4]
STR             R4, [SP,#0x318+addr.sa_data+8]
STRH            R4, [SP,#0x318+addr.sa_data+0xC]
STR             R4, [SP,#0x318+addr.sa_data]
STR             R8, [R5,#(dword_6ACE4 - 0x6ACE0)]
STRH            R7, [SP,#0x318+addr]
BL              inet_addr
MOV             R2, R4  ; protocol
STR             R0, [SP,#0x318+addr.sa_data+2]
MOVW            R3, #0xA56
MOV             R0, R7  ; domain
MOV             R1, #1  ; type
STRH            R3, [SP,#0x318+addr.sa_data]
BL              socket
SUBS            R4, R0, #0
BLT             loc_43F8C
MOV             R7, #aConnectErr ; "connect err:"
B               loc_43E48

loc_43E3C
BL              perror
MOV             R0, #1  ; seconds
BL              sleep

loc_43E48               ; len
MOV             R2, #0x10
ADD             R1, SP, #0x318+addr ; addr
MOV             R0, R4  ; fd
BL              connect
CMP             R0, #0
MOV             R0, R7  ; s
BLT             loc_43E3C
MOV             R7, #0
MOV             R2, #0x1FC ; n
MOV             R1, R7  ; c
ADD             R0, SP, #0x318+s ; s
STR             R7, [SP,#0x318+buf]
BL              memset
MOV             R3, R7  ; flags
ADD             R1, SP, #0x318+buf ; buf
MOV             R2, #0x100 ; n
MOV             R0, R4  ; fd
BL              recv
CMP             R0, #0
MOVW            R12, #:lower16:aFunc1Func2Func ; "func1 func2 func3 func4"
ADDGT           R3, SP, #0x318+var_s0
MOVT            R12, #:upper16:aFunc1Func2Func ; "func1 func2 func3 func4"
ADDGT           R0, R3, R0
ADD             LR, SP, #0x318+var_300
STRBGT          R7, [R0,#-0x200]
LDM             R12!, {R0-R3} ; "func1 func2 func3 func4"
STM             LR!, {R0-R3}
MOV             R2, #0xE8 ; n
LDM             R12, {R0,R1} ; "3 func4"
STM             LR, {R0,R1}
MOV             R1, #0  ; c
ADD             R0, SP, #0x318+var_2E8 ; s
BL              memset
ADD             R1, SP, #0x318+var_300 ; buf
MOV             R3, #0  ; flags
MOV             R2, #0x18 ; n
MOV             R0, R4  ; fd
BL              send
MOV             R3, #0  ; flags
ADD             R1, SP, #0x318+buf ; buf
MOV             R2, #0x100 ; n
MOV             R0, R4  ; fd
BL              recv
CMP             R0, #0
MOVW            R12, #:lower16:a3fHeartBeats22 ; "3f heart-beats 22027"
ADDGT           R3, SP, #0x318+var_s0
MOVT            R12, #:upper16:a3fHeartBeats22 ; "3f heart-beats 22027"
ADDGT           R0, R3, R0
MOVGT           R3, #0
STRBGT          R3, [R0,#-0x200]
ADD             LR, SP, #0x318+var_300
LDM             R12!, {R0-R3} ; "3f heart-beats 22027"
STM             LR!, {R0-R3}
MOV             R3, #0  ; flags
LDM             R12, {R0,R1} ; "2027"
MOV             R2, #0x15 ; n
STR             R0, [LR],#4
MOV             R0, R4  ; fd
STRB            R1, [LR]
ADD             R1, SP, #0x318+var_300 ; buf
BL              send
MOV             R0, #0xC ; size
STR             R4, [R5,#(dword_6AD04 - 0x6ACE0)]
BL              malloc
MOVW            LR, #0x560A
MOV             R12, R0
MOVW            R2, #:lower16:sub_437BC
MOV             R3, R12 ; arg
ADD             R0, SP, #0x318+newthread ; newthread
MOVT            R2, #:upper16:sub_437BC ; start_routine
MOV             R1, #0  ; attr
STR             R4, [R12,#8]
STR             LR, [R12]
BL              pthread_create
MOV             R3, #1
STR             R3, [R5,#(dword_6ACE8 - 0x6ACE0)]

loc_43F78
MOV             R0, R6
ADD             SP, SP, #0x318
POP             {R4-R8,PC}

loc_43F84
MOV             R6, #0xFFFFFFFF
B               loc_43F78

loc_43F8C
MOVW            R0, #:lower16:aSocketErr ; "socket err:"
MOV             R6, #0xFFFFFFFC
MOVT            R0, #:upper16:aSocketErr ; "socket err:"
BL              perror
B               loc_43F78
; End of function sub_43D64

off_43FA0 DCD s2



; int __fastcall sub_43FA4(int)
sub_43FA4

var_48C= -0x48C
var_488= -0x488
var_484= -0x484
var_47C= -0x47C
var_478= -0x478
addr= -0x474
var_464= -0x464
var_460= -0x460
var_45C= -0x45C
var_458= -0x458
var_454= -0x454
var_450= -0x450
var_44C= -0x44C
var_448= -0x448
var_444= -0x444
var_440= -0x440
var_43C= -0x43C
var_438= -0x438
var_434= -0x434
var_430= -0x430
var_42C= -0x42C
var_428= -0x428
var_424= -0x424
var_420= -0x420
var_41C= -0x41C
var_418= -0x418
var_414= -0x414
var_410= -0x410
var_40C= -0x40C
var_408= -0x408
dest= -0x404
var_400= -0x400
var_384= -0x384
var_380= -0x380
buf= -0x304
s= -0x300
var_204= -0x204
var_200= -0x200
var_C= -0xC

PUSH            {R4-R9,LR}
MOV             R4, #dword_6ACE0
SUB             SP, SP, #0x480
SUB             SP, SP, #0xC
LDR             R3, [R4,#(dword_6ACE8 - 0x6ACE0)]
CMP             R3, #0
BEQ             loc_44214
MOV             R6, #0
MOV             R7, R0
MOV             R0, #0x24 ; '$' ; size
BL              malloc
MOV             R1, R6  ; mutexattr
MOV             R8, R0
BL              pthread_mutex_init
MOV             R1, R6  ; c
MOV             R2, #0xFC ; n
ADD             R0, SP, #0x48C+s ; s
LDR             R9, [R4,#(dword_6AD04 - 0x6ACE0)]
STR             R6, [SP,#0x48C+buf]
BL              memset
MOVW            R1, #:lower16:aXRegistS ; "%x regist %s"
MOV             R3, R7
MOVT            R1, #:upper16:aXRegistS ; "%x regist %s"
MOV             R2, #0x3F ; '?'
ADD             R0, SP, #0x48C+buf ; s
BL              sprintf
ADD             R0, SP, #0x48C+buf ; s
LDR             R5, [R4]
BL              strlen
MOV             R3, R6  ; flags
ADD             R2, R0, #1 ; n
ADD             R1, SP, #0x48C+buf ; buf
MOV             R0, R9  ; fd
BL              send
MOV             R1, R6  ; c
MOV             R2, #0x7C ; '|' ; n
ADD             R0, SP, #0x48C+var_400 ; s
STR             R6, [SP,#0x48C+dest]
BL              memset
LDR             R3, [R4]
CMP             R5, R3
BNE             loc_44064

loc_44050               ; useconds
MOV             R0, #0x3E8
BL              usleep
LDR             R3, [R4]
CMP             R3, R5
BEQ             loc_44050

loc_44064
MOVW            R1, #:lower16:unk_6AD08
MOV             R2, #0x80 ; n
MOVT            R1, #:upper16:unk_6AD08
ADD             R0, SP, #0x48C+dest ; dest
ADD             R1, R1, R5,LSL#7 ; src
ADD             R4, SP, #0x48C+var_424
BL              memcpy
ADD             LR, SP, #0x48C+var_444
ADD             R12, SP, #0x48C+var_464
MOVW            R1, #:lower16:aXDSSS_0 ; "%x%d%s%s%s"
ADD             R3, SP, #0x48C+var_47C
STR             R4, [SP,#0x48C+var_484]
ADD             R0, SP, #0x48C+dest
MOV             R4, #0
ADD             R2, SP, #0x48C+var_478
STR             LR, [SP,#0x48C+var_488]
MOVT            R1, #:upper16:aXDSSS_0 ; "%x%d%s%s%s"
STR             R12, [SP,#0x48C+var_48C]
STR             R4, [SP,#0x48C+var_47C]
STR             R4, [SP,#0x48C+var_478]
STR             R4, [SP,#0x48C+var_464]
STR             R4, [SP,#0x48C+var_460]
STR             R4, [SP,#0x48C+var_444]
STR             R4, [SP,#0x48C+var_440]
STR             R4, [SP,#0x48C+var_424]
STR             R4, [SP,#0x48C+var_420]
STR             R4, [SP,#0x48C+var_45C]
STR             R4, [SP,#0x48C+var_458]
STR             R4, [SP,#0x48C+var_454]
STR             R4, [SP,#0x48C+var_450]
STR             R4, [SP,#0x48C+var_44C]
STR             R4, [SP,#0x48C+var_448]
STR             R4, [SP,#0x48C+var_43C]
STR             R4, [SP,#0x48C+var_438]
STR             R4, [SP,#0x48C+var_434]
STR             R4, [SP,#0x48C+var_430]
STR             R4, [SP,#0x48C+var_42C]
STR             R4, [SP,#0x48C+var_428]
STR             R4, [SP,#0x48C+var_41C]
STR             R4, [SP,#0x48C+var_418]
STR             R4, [SP,#0x48C+var_414]
STR             R4, [SP,#0x48C+var_410]
STR             R4, [SP,#0x48C+var_40C]
STR             R4, [SP,#0x48C+var_408]
BL              __isoc99_sscanf
LDR             R3, [SP,#0x48C+var_47C]
CMP             R3, R4
BEQ             loc_4421C
MOVW            R0, #:lower16:a127001 ; "127.0.0.1"
MOV             R5, #2
MOVT            R0, #:upper16:a127001 ; "127.0.0.1"
STRH            R5, [SP,#0x48C+addr]
STR             R4, [SP,#0x48C+addr.sa_data]
STR             R4, [SP,#0x48C+addr.sa_data+4]
STR             R4, [SP,#0x48C+addr.sa_data+8]
STRH            R4, [SP,#0x48C+addr.sa_data+0xC]
BL              inet_addr
LDR             R3, [SP,#0x48C+var_47C]
MOV             R2, R4  ; protocol
STR             R0, [SP,#0x48C+addr.sa_data+2]
MOV             R1, #1  ; type
MOV             R0, R5  ; domain
REV16           R3, R3
STRH            R3, [SP,#0x48C+addr.sa_data]
BL              socket
SUBS            R5, R0, #0
BLT             loc_44238
ADD             R1, SP, #0x48C+addr ; addr
MOV             R2, #0x10 ; len
BL              connect
CMP             R0, #0
BLT             loc_44224
MOV             R1, R4  ; c
MOV             R2, #0x1FC ; n
ADD             R0, SP, #0x48C+var_200 ; s
STR             R4, [SP,#0x48C+var_204]
BL              memset
MOV             R3, R4  ; flags
MOV             R2, #0x200 ; n
ADD             R1, SP, #0x48C+var_204 ; buf
MOV             R0, R5  ; fd
BL              recv
CMP             R0, #0
MOV             R2, #0x7C ; '|' ; n
ADDGT           R3, SP, #0x48C+var_C
ADDGT           R3, R3, #8
ADDGT           R0, R3, R0
STRBGT          R4, [R0,#-0x200]
MOV             R4, #0
MOV             R1, R4  ; c
ADD             R0, SP, #0x48C+var_380 ; s
BL              memset
MOVW            R12, #0x4B4F
MOV             R3, R4  ; flags
MOVT            R12, #0x21 ; '!'
MOV             R2, #4  ; n
ADD             R1, SP, #0x48C+var_384 ; buf
MOV             R0, R5  ; fd
STR             R12, [SP,#0x48C+var_384]
BL              send
LDR             R3, [SP,#0x48C+var_47C]
MOV             R0, R4
STR             R5, [R8,#0x20]
STR             R8, [R7,#0x80]
STR             R3, [R8,#0x18]

loc_44208
ADD             SP, SP, #0x480
ADD             SP, SP, #0xC
POP             {R4-R9,PC}

loc_44214
MOV             R0, #0xFFFFFFFF
B               loc_44208

loc_4421C
MOV             R0, #0xFFFFFFFC
B               loc_44208

loc_44224
MOV             R0, #aConnectErr ; "connect err:"
BL              perror
MOV             R0, #0xFFFFFFFD
B               loc_44208

loc_44238
MOV             R0, #aSocketErr ; "socket err:"
BL              perror
MOV             R0, #0xFFFFFFFC
B               loc_44208
; End of function sub_43FA4




; int __fastcall sub_4424C(int, int, int, int)
sub_4424C
SUB             SP, SP, #0x10
SUB             R12, SP, #4
ADD             SP, SP, #0x10
STMIB           R12, {R0-R3}
MOV             R0, R3
BX              LR
; End of function sub_4424C




; int __fastcall sub_44264(int, const void *, size_t, _DWORD *)
sub_44264

var_150= -0x150
var_14C= -0x14C
var_148= -0x148
var_144= -0x144
var_140= -0x140
var_13C= -0x13C
var_138= -0x138
var_134= -0x134
var_130= -0x130
var_12C= -0x12C
var_128= -0x128
var_124= -0x124
var_120= -0x120
var_11C= -0x11C
var_118= -0x118
var_114= -0x114
var_110= -0x110
var_10C= -0x10C
var_108= -0x108
var_104= -0x104
buf= -0x100
s= -0xFC

MOVW            R12, #:lower16:dword_6ACE0
PUSH            {R4-R8,LR}
MOVT            R12, #:upper16:dword_6ACE0
SUB             SP, SP, #0x150
LDR             R12, [R12,#(dword_6ACE8 - 0x6ACE0)]
CMP             R12, #0
BEQ             loc_44390
LDR             R5, [R0,#0x80]
CMP             R5, #0
BEQ             loc_44398
MOV             R0, R5  ; mutex
MOV             R6, R3
MOV             R8, R2
MOV             R7, R1
BL              pthread_mutex_trylock
SUBS            R4, R0, #0
BNE             loc_44388
MOV             R2, R8  ; n
MOV             R1, R7  ; buf
MOV             R3, R4  ; flags
LDR             R0, [R5,#0x20] ; fd
BL              send
CMP             R0, #0
BLE             loc_443A0
MOV             R2, #0xFC ; n
MOV             R1, R4  ; c
ADD             R0, SP, #0x150+s ; s
STR             R4, [SP,#0x150+buf]
BL              memset
ADD             R1, SP, #0x150+buf ; buf
MOV             R3, R4  ; flags
MOV             R2, #0x100 ; n
LDR             R0, [R5,#0x20] ; fd
BL              recv
CMP             R0, #0
STR             R4, [SP,#0x150+var_148]
STR             R4, [SP,#0x150+var_144]
STR             R4, [SP,#0x150+var_140]
STR             R4, [SP,#0x150+var_13C]
STR             R4, [SP,#0x150+var_120]
STR             R4, [SP,#0x150+var_11C]
STR             R4, [SP,#0x150+var_138]
STR             R4, [SP,#0x150+var_134]
STR             R4, [SP,#0x150+var_130]
STR             R4, [SP,#0x150+var_12C]
STR             R4, [SP,#0x150+var_128]
STR             R4, [SP,#0x150+var_124]
STR             R4, [SP,#0x150+var_118]
STR             R4, [SP,#0x150+var_114]
STR             R4, [SP,#0x150+var_110]
STR             R4, [SP,#0x150+var_10C]
STR             R4, [SP,#0x150+var_108]
STR             R4, [SP,#0x150+var_104]
BGT             loc_4435C

loc_4433C
CMP             R6, #0
MOV             R0, R5  ; mutex
LDRNE           R3, [SP,#0x150+var_144]
STRNE           R3, [R6]
BL              pthread_mutex_unlock

loc_44350
MOV             R0, R4
ADD             SP, SP, #0x150
POP             {R4-R8,PC}

loc_4435C
ADD             R2, SP, #0x150+var_120
ADD             R3, SP, #0x150+var_140
MOVW            R1, #:lower16:aXDSS_0 ; "%x%d%s%s"
STR             R2, [SP,#0x150+var_14C]
STR             R3, [SP,#0x150+var_150]
ADD             R0, SP, #0x150+buf
MOVT            R1, #:upper16:aXDSS_0 ; "%x%d%s%s"
ADD             R3, SP, #0x150+var_144
ADD             R2, SP, #0x150+var_148
BL              __isoc99_sscanf
B               loc_4433C

loc_44388
MOV             R4, #0xFFFFFFFD
B               loc_44350

loc_44390
MOV             R4, #0xFFFFFFFF
B               loc_44350

loc_44398
MOV             R4, #0xFFFFFFFE
B               loc_44350

loc_443A0               ; mutex
MOV             R0, R5
MOV             R4, #0xFFFFFFFC
BL              pthread_mutex_unlock
B               loc_44350
; End of function sub_44264

; [00000004 BYTES: COLLAPSED FUNCTION nullsub_9]



; int __fastcall sub_443B4(void *src, size_t n, const void **)
sub_443B4
MOV             R3, R2
MOV             R2, R1  ; n
MOV             R1, R0  ; src
MOV             R0, R3  ; int
B               sub_478B0
; End of function sub_443B4




; int __fastcall sub_443C8(void *src, size_t n, _DWORD *)
sub_443C8
PUSH            {R4-R6,LR}
MOV             R4, R2
LDM             R2, {R2,R12}
ADD             R3, R12, R1
CMP             R3, R2
BHI             loc_44400
LDR             R3, [R4,#8]
MOV             R5, R1
MOV             R2, R5  ; n
MOV             R1, R0  ; src
ADD             R0, R3, R12 ; dest
BL              memcpy
LDR             R3, [R4,#4]
ADD             R3, R5, R3

loc_44400
STR             R3, [R4,#4]
MOV             R0, #0
POP             {R4-R6,PC}
; End of function sub_443C8




; size_t __fastcall sub_4440C(const void *, size_t, FILE *s)
sub_4440C
MOV             R3, R2  ; s
PUSH            {R4,LR}
MOV             R2, #1  ; n
BL              fwrite
SUBS            R0, R0, #1
MOVNE           R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_4440C




; int __fastcall sub_44428(void *buf, size_t n, int *)
sub_44428
LDR             R3, [R2]
MOV             R2, R1  ; n
PUSH            {R4,LR}
MOV             R4, R1
MOV             R1, R0  ; buf
MOV             R0, R3  ; fd
BL              write
SUBS            R0, R4, R0
MOVNE           R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_44428




; int __fastcall sub_44450(const char **, const char **)
sub_44450
LDR             R1, [R1] ; s2
LDR             R0, [R0] ; s1
B               strcmp
; End of function sub_44450




; int __fastcall sub_4445C(char *, int, int (__fastcall *)(char *, int, int), int, unsigned int)
sub_4445C

var_2C= -0x2C
format= -0x20
var_18= -0x18
s= -0x14
arg_0=  0x24

PUSH            {R4-R11,LR}
MOV             R6, R2
SUB             SP, SP, #0x2C
MOV             R2, R3
MOV             R4, R0
MOV             R7, R3
MOVW            R0, #:lower16:(aRotateD+0x10) ; "\""
MOV             R3, #0
MOV             R8, R1
MOVT            R0, #:upper16:(aRotateD+0x10) ; "\""
MOV             R1, #1
STR             R3, [SP,#0x2C+var_18]
BLX             R6
CMP             R0, #0
BNE             loc_444E4
MOVW            R9, #:lower16:aF_1 ; "\\f"
MOVW            R11, #:lower16:aU04xU04x ; "\\u%04X\\u%04X"
MOVW            R3, #:lower16:aU04x ; "\\u%04X"
ADD             R8, R4, R8
MOVT            R9, #:upper16:aF_1 ; "\\f"
MOVT            R11, #:upper16:aU04xU04x ; "\\u%04X\\u%04X"
MOV             R10, R4
MOVT            R3, #:upper16:aU04x ; "\\u%04X"
STR             R3, [SP,#0x2C+format]

loc_444BC
CMP             R10, R8
BCC             loc_444F0
CMP             R4, R10
BEQ             loc_446C8
SUB             R1, R10, R4
MOV             R0, R4
MOV             R2, R7
BLX             R6
CMP             R0, #0
BEQ             loc_446C8

loc_444E4
MOV             R0, #0xFFFFFFFF
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}

loc_444F0
ADD             R2, SP, #0x2C+var_18
SUB             R1, R8, R10
MOV             R0, R10
BL              sub_47E38
SUBS            R5, R0, #0
BEQ             loc_444E4
LDR             R2, [SP,#0x2C+var_18]
CMP             R2, #0x22 ; '"'
CMPNE           R2, #0x5C ; '\'
MOVEQ           R1, #1
MOVNE           R1, #0
CMP             R2, #0x1F
ORRLE           R1, R1, #1
CMP             R1, #0
BEQ             loc_44694

loc_4452C
CMP             R4, R10
BEQ             loc_4454C
MOV             R2, R7
SUB             R1, R10, R4
MOV             R0, R4
BLX             R6
CMP             R0, #0
BNE             loc_444E4

loc_4454C
CMP             R10, R5
BEQ             loc_446C8
LDR             R3, [SP,#0x2C+var_18]
CMP             R3, #0xC
BEQ             loc_44648
BLE             loc_445A8
CMP             R3, #0x22 ; '"'
BEQ             loc_44638
BLE             loc_445E4
CMP             R3, #0x2F ; '/'
BEQ             loc_44684
CMP             R3, #0x5C ; '\'
BNE             loc_445C0
MOVW            R0, #:lower16:asc_564D8 ; "\\\\"
MOV             R1, #2
MOVT            R0, #:upper16:asc_564D8 ; "\\\\"

loc_4458C
MOV             R2, R7
BLX             R6
CMP             R0, #0
BNE             loc_444E4
MOV             R4, R5

loc_445A0
MOV             R10, R5
B               loc_444BC

loc_445A8
CMP             R3, #9
BEQ             loc_44674
CMP             R3, #0xA
BEQ             loc_44664
CMP             R3, #8
BEQ             loc_44654

loc_445C0
CMP             R3, #0x10000
BGE             loc_44600

loc_445C8               ; maxlen
MOV             R1, #0xD
ADD             R0, SP, #0x2C+s ; s
LDR             R2, [SP,#0x2C+format] ; format
BL              snprintf
ADD             R0, SP, #0x2C+s
MOV             R1, #6
B               loc_4458C

loc_445E4
CMP             R3, #0xD
MOVWEQ          R0, #:lower16:aR ; "\\r"
MOVEQ           R1, #2
MOVTEQ          R0, #:upper16:aR ; "\\r"
BEQ             loc_4458C
CMP             R3, #0x10000
BLT             loc_445C8

loc_44600
SUB             R12, R3, #0x10000
MOV             R1, #0xD ; maxlen
UBFX            R2, R12, #0, #0xA
UBFX            R3, R12, #0xA, #0xA
ORR             R2, R2, #0xDC00
ORR             R3, R3, #0xD800
STR             R2, [SP,#0x2C+var_2C]
ADD             R0, SP, #0x2C+s ; s
MOV             R2, R11 ; format
STR             R12, [SP,#0x2C+var_18]
BL              snprintf
ADD             R0, SP, #0x2C+s
MOV             R1, #0xC
B               loc_4458C

loc_44638
MOVW            R0, #:lower16:asc_564DC ; "\\\""
MOV             R1, #2
MOVT            R0, #:upper16:asc_564DC ; "\\\""
B               loc_4458C

loc_44648
MOV             R1, #2
MOV             R0, R9
B               loc_4458C

loc_44654
MOVW            R0, #:lower16:aB ; "\\b"
MOV             R1, #2
MOVT            R0, #:upper16:aB ; "\\b"
B               loc_4458C

loc_44664
MOVW            R0, #:lower16:aN_0 ; "\\n"
MOV             R1, #2
MOVT            R0, #:upper16:aN_0 ; "\\n"
B               loc_4458C

loc_44674
MOVW            R0, #:lower16:aT ; "\\t"
MOV             R1, #2
MOVT            R0, #:upper16:aT ; "\\t"
B               loc_4458C

loc_44684
MOVW            R0, #:lower16:asc_564F4 ; "\\/"
MOV             R1, #2
MOVT            R0, #:upper16:asc_564F4 ; "\\/"
B               loc_4458C

loc_44694
SUB             R1, R2, #0x2F ; '/'
LDR             R3, [SP,#0x2C+arg_0]
CLZ             R1, R1
MOV             R1, R1,LSR#5
ANDS            R3, R1, R3,LSR#10
BNE             loc_4452C
LDR             R3, [SP,#0x2C+arg_0]
CMP             R2, #0x7F
MOVLE           R2, #0
MOVGT           R2, #1
ANDS            R3, R2, R3,LSR#6
BEQ             loc_445A0
B               loc_4452C

loc_446C8
MOVW            R0, #:lower16:(aRotateD+0x10) ; "\""
MOV             R2, R7
MOV             R1, #1
MOVT            R0, #:upper16:(aRotateD+0x10) ; "\""
BLX             R6
ADD             SP, SP, #0x2C ; ','
POP             {R4-R11,PC}
; End of function sub_4445C




; int __fastcall sub_446E4(char, int, int, int (__fastcall *)(__int16 *, int, int), int)
sub_446E4

arg_0=  0x18

ANDS            R12, R0, #0x1F
PUSH            {R4-R8,LR}
LDR             R8, [SP,#arg_0]
BEQ             loc_4476C
MOVW            R0, #:lower16:word_4C858
MOV             R4, R1
MOV             R2, R8
MOVT            R0, #:upper16:word_4C858
MOV             R1, #1
MOV             R6, R3
MUL             R4, R12, R4
BLX             R3
CMP             R0, #0
BNE             loc_4475C
CMP             R4, #0
BEQ             loc_44764
MOV             R7, #asc_564AC ; "                                "
B               loc_44738

loc_44730
SUBS            R4, R4, R5
BEQ             loc_44764

loc_44738
CMP             R4, #0x20 ; ' '
MOV             R2, R8
MOVCC           R5, R4
MOVCS           R5, #0x20 ; ' '
MOV             R0, R7
MOV             R1, R5
BLX             R6
CMP             R0, #0
BEQ             loc_44730

loc_4475C
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}

loc_44764
MOV             R0, #0
POP             {R4-R8,PC}

loc_4476C
CMP             R2, #0
BEQ             loc_44764
TST             R0, #0x20
BNE             loc_44764
MOVW            R0, #:lower16:(aSD+4) ; " "
MOV             R2, R8
MOVT            R0, #:upper16:(aSD+4) ; " "
MOV             R1, #1
POP             {R4-R8,LR}
BX              R3
; End of function sub_446E4




; int __fastcall sub_44794(int, const void *, char *s)
sub_44794
PUSH            {R4-R6,LR}
MOV             R4, R2
MOVW            R2, #:lower16:aP ; "%p"
MOV             R3, R1
MOV             R5, R0
MOVT            R2, #:upper16:aP ; "%p"
MOV             R1, #0xB ; maxlen
MOV             R0, R4  ; s
BL              snprintf
MOV             R1, R4  ; s
MOV             R0, R5  ; int
BL              sub_45B10
CMP             R0, #0
BNE             loc_447E4
BL              sub_48A28
MOV             R1, R4
MOV             R2, R0
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_4587C

loc_447E4
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_44794




; int __fastcall sub_447EC(_DWORD *, int, int, int, int (__fastcall *)(__int16 *, int, int), int)
sub_447EC

var_A4= -0xA4
var_A0= -0xA0
var_98= -0x98
var_94= -0x94
var_90= -0x90
nmemb= -0x8C
var_88= -0x88
var_84= -0x84
base= -0x80
var_7C= -0x7C
var_78= -0x78
var_74= -0x74
var_70= -0x70
s= -0x68
arg_0=  0x24
arg_4=  0x28

PUSH            {R4-R11,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0xA4
BEQ             def_44818 ; jumptable 00044818 default case
MOV             R5, R3
LDR             R3, [R4]
AND             R8, R1, #0x10000
BIC             R7, R1, #0x10000
MOV             R10, R2
MOV             R9, R1
CMP             R3, #7  ; switch 8 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_44818 ; jumptable 00044818 default case
jpt_44818 DCD loc_44840 ; jump table for switch statement
DCD loc_448C0
DCD loc_44948
DCD loc_44984
DCD loc_449C8
DCD loc_44A08
DCD loc_44A30
DCD loc_44898

loc_44840               ; jumptable 00044818 case 0
AND             R2, R1, #0x20 ; ' '
MOVW            R12, #:lower16:asc_56514 ; ": "
CMP             R2, #0
MOVT            R12, #:upper16:asc_56514 ; ": "
MOVW            R3, #:lower16:(aHttp+4) ; ":"
ADD             R11, SP, #0xA4+s
MOVT            R3, #:upper16:(aHttp+4) ; ":"
MOVEQ           R3, R12
STR             R3, [SP,#0xA4+var_98]
MOV             R2, R11 ; s
MOVEQ           R3, #2
MOVNE           R3, #1
MOV             R1, R4  ; int
MOV             R0, R5  ; int
STR             R3, [SP,#0xA4+var_94]
BL              sub_44794
SUBS            R6, R0, #0
BEQ             loc_44A58

def_44818               ; jumptable 00044818 default case
MOV             R6, #0xFFFFFFFF

loc_4488C
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_44898               ; jumptable 00044818 case 7
MOVW            R0, #:lower16:aNull_0 ; "null"
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #4
LDR             R3, [SP,#0xA4+arg_0]
MOVT            R0, #:upper16:aNull_0 ; "null"
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_448C0               ; jumptable 00044818 case 1
ADD             R11, SP, #0xA4+s
MOV             R1, R4  ; int
MOV             R2, R11 ; s
MOV             R0, R5  ; int
BL              sub_44794
SUBS            R6, R0, #0
BNE             def_44818 ; jumptable 00044818 default case
MOV             R0, R4
BL              sub_48468
CMP             R8, #0
STR             R0, [SP,#0xA4+var_98]
BNE             loc_44CE0
MOVW            R0, #:lower16:(aPools_0+0xC) ; "["
LDR             R2, [SP,#0xA4+arg_4]
MOVT            R0, #:upper16:(aPools_0+0xC) ; "["
MOV             R1, #1
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_44818 ; jumptable 00044818 default case
LDR             R3, [SP,#0xA4+var_98]
CMP             R3, #0
BNE             loc_44BC8
MOV             R1, R11 ; s
MOV             R0, R5  ; int
BL              sub_45B70
MOVW            R0, #:lower16:word_5616C
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
MOVT            R0, #:upper16:word_5616C
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
B               loc_4488C

loc_44948               ; jumptable 00044818 case 2
MOV             R0, R4
BL              sub_48630
MOV             R5, R0
MOV             R0, R4
BL              sub_4864C
STR             R7, [SP,#0xA4+var_A4]
MOV             R1, R0
LDR             R3, [SP,#0xA4+arg_4]
MOV             R0, R5
LDR             R2, [SP,#0xA4+arg_0]
BL              sub_4445C
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_44984               ; jumptable 00044818 case 3
MOV             R0, R4
BL              sub_4888C
MOVW            R2, #:lower16:(aShareSubmissio_0+0x14) ; "%lld"
STRD            R0, R1, [SP,#0xA4+var_A4]
MOVT            R2, #:upper16:(aShareSubmissio_0+0x14) ; format
ADD             R0, SP, #0xA4+s ; s
MOV             R1, #0x64 ; 'd' ; maxlen
BL              snprintf
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, R0
LDR             R3, [SP,#0xA4+arg_0]
ADD             R0, SP, #0xA4+s
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_449C8               ; jumptable 00044818 case 4
MOV             R0, R4
BL              sub_48938
MOV             R1, #0x64 ; 'd'
UBFX            R2, R7, #0xB, #5
ADD             R0, SP, #0xA4+s
BL              sub_47AB8
SUBS            R1, R0, #0
BLT             def_44818 ; jumptable 00044818 default case
ADD             R0, SP, #0xA4+s
LDR             R2, [SP,#0xA4+arg_4]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_44A08               ; jumptable 00044818 case 5
MOVW            R0, #:lower16:aTrue ; "true"
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #4
LDR             R3, [SP,#0xA4+arg_0]
MOVT            R0, #:upper16:aTrue ; "true"
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_44A30               ; jumptable 00044818 case 6
MOVW            R0, #:lower16:(aInvalidParamet_0+0x24) ; "false"
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #5
LDR             R3, [SP,#0xA4+arg_0]
MOVT            R0, #:upper16:(aInvalidParamet_0+0x24) ; "false"
BLX             R3
MOV             R6, R0
MOV             R0, R6
ADD             SP, SP, #0xA4
POP             {R4-R11,PC}

loc_44A58
MOV             R0, R4
BL              sub_48364
CMP             R8, #0
STR             R0, [SP,#0xA4+var_90]
BNE             loc_44D28
MOVW            R0, #:lower16:asc_4A4A0 ; "{"
LDR             R2, [SP,#0xA4+arg_4]
MOVT            R0, #:upper16:asc_4A4A0 ; "{"
MOV             R1, #1
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_44818 ; jumptable 00044818 default case
LDR             R3, [SP,#0xA4+var_90]
CMP             R3, #0
BEQ             loc_44CFC

loc_44A98
LDR             R2, [SP,#0xA4+arg_4]
ADD             R3, R10, #1
STR             R3, [SP,#0xA4+var_88]
MOV             R1, R3
MOV             R0, R7
LDR             R3, [SP,#0xA4+arg_0]
STR             R2, [SP,#0xA4+var_A4]
MOV             R2, #0
BL              sub_446E4
SUBS            R6, R0, #0
BNE             def_44818 ; jumptable 00044818 default case
TST             R9, #0x80
BNE             loc_44D38
MOVW            R3, #:lower16:(aUserS+0x10) ; ","
STR             R8, [SP,#0xA4+var_84]
MOVT            R3, #:upper16:(aUserS+0x10) ; ","
LDR             R8, [SP,#0xA4+var_88]
STR             R3, [SP,#0xA4+nmemb]
STR             R6, [SP,#0xA4+var_88]
LDR             R6, [SP,#0xA4+var_90]
STR             R11, [SP,#0xA4+var_90]
LDR             R11, [SP,#0xA4+var_94]
STR             R10, [SP,#0xA4+var_94]

loc_44AF4
MOV             R1, R6
MOV             R0, R4
BL              sub_483B0
MOV             R9, R0
MOV             R0, R6
BL              sub_483E4
MOV             R10, R0
BL              strlen
LDR             R3, [SP,#0xA4+arg_4]
MOV             R1, R0
LDR             R2, [SP,#0xA4+arg_0]
MOV             R0, R10
STR             R7, [SP,#0xA4+var_A4]
BL              sub_4445C
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, R11
LDR             R0, [SP,#0xA4+var_98]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_44818 ; jumptable 00044818 default case
MOV             R0, R6
BL              sub_483F0
LDR             R3, [SP,#0xA4+arg_4]
MOV             R1, R7
LDR             R2, [SP,#0xA4+arg_0]
STR             R3, [SP,#0xA4+var_A0]
MOV             R3, R5
STR             R2, [SP,#0xA4+var_A4]
MOV             R2, R8
BL              sub_447EC
CMP             R0, #0
BNE             def_44818 ; jumptable 00044818 default case
CMP             R9, #0
BEQ             loc_44F44
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
LDR             R0, [SP,#0xA4+nmemb]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_44818 ; jumptable 00044818 default case
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, #1
MOV             R1, R8
MOV             R0, R7
MOV             R6, R9
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_446E4
CMP             R0, #0
BEQ             loc_44AF4
B               def_44818 ; jumptable 00044818 default case

loc_44BC8
LDR             R3, [SP,#0xA4+arg_4]
ADD             R6, R10, #1
MOV             R1, R6
MOV             R2, #0
MOV             R0, R7
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_446E4
SUBS            R9, R0, #0
BNE             def_44818 ; jumptable 00044818 default case
MOVW            R3, #:lower16:(aUserS+0x10) ; ","
STR             R8, [SP,#0xA4+var_90]
MOVT            R3, #:upper16:(aUserS+0x10) ; ","
STR             R11, [SP,#0xA4+nmemb]
STR             R3, [SP,#0xA4+var_94]
MOV             R8, R6
LDR             R3, [SP,#0xA4+var_98]
STR             R10, [SP,#0xA4+var_98]
SUB             R2, R3, #1
MOV             R11, R3
MOV             R10, R2

loc_44C1C
MOV             R1, R9
MOV             R0, R4
BL              sub_48484
LDR             R3, [SP,#0xA4+arg_4]
MOV             R1, R7
LDR             R2, [SP,#0xA4+arg_0]
STR             R3, [SP,#0xA4+var_A0]
MOV             R3, R5
STR             R2, [SP,#0xA4+var_A4]
MOV             R2, R8
BL              sub_447EC
SUBS            R6, R0, #0
BNE             def_44818 ; jumptable 00044818 default case
CMP             R10, R9
BLS             loc_44F1C
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
LDR             R0, [SP,#0xA4+var_94]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             def_44818 ; jumptable 00044818 default case
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, #1
MOV             R1, R8
MOV             R0, R7
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_446E4
CMP             R0, #0
BNE             def_44818 ; jumptable 00044818 default case

loc_44C98
ADD             R9, R9, #1
CMP             R11, R9
BNE             loc_44C1C
LDR             R11, [SP,#0xA4+nmemb]
MOV             R0, R5  ; int
LDR             R8, [SP,#0xA4+var_90]
MOV             R1, R11 ; s
BL              sub_45B70
CMP             R8, #0
BNE             loc_4488C
MOVW            R0, #:lower16:word_5616C
LDR             R2, [SP,#0xA4+arg_4]
MOVT            R0, #:upper16:word_5616C
MOV             R1, #1
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
B               loc_4488C

loc_44CE0
LDR             R3, [SP,#0xA4+var_98]
CMP             R3, #0
BNE             loc_44BC8

loc_44CEC               ; s
MOV             R1, R11
MOV             R0, R5  ; int
BL              sub_45B70
B               loc_4488C

loc_44CFC               ; s
MOV             R1, R11
MOV             R0, R5  ; int
BL              sub_45B70
MOVW            R0, #:lower16:(aIdDMethodMinin_1+0x44) ; "}"
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
MOVT            R0, #:upper16:(aIdDMethodMinin_1+0x44) ; "}"
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
B               loc_4488C

loc_44D28
LDR             R3, [SP,#0xA4+var_90]
CMP             R3, #0
BNE             loc_44A98
B               loc_44CEC

loc_44D38
MOV             R0, R4
BL              sub_480E0
STR             R0, [SP,#0xA4+var_7C]
MOV             R0, R0,LSL#2
BL              sub_4774C
SUBS            R3, R0, #0
STR             R3, [SP,#0xA4+base]
BEQ             def_44818 ; jumptable 00044818 default case
SUB             R3, R3, #4
STR             R7, [SP,#0xA4+var_74]
STR             R5, [SP,#0xA4+var_70]
MOV             R9, R3
STR             R3, [SP,#0xA4+var_78]
MOV             R7, R6
STR             R8, [SP,#0xA4+var_84]
LDR             R5, [SP,#0xA4+var_90]
B               loc_44D80

loc_44D7C
MOV             R7, R8

loc_44D80
MOV             R0, R5
ADD             R8, R7, #1
BL              sub_483E4
MOV             R1, R5
STR             R0, [R9,#4]!
MOV             R0, R4
BL              sub_483B0
SUBS            R5, R0, #0
BNE             loc_44D7C
LDR             R2, [SP,#0xA4+var_7C]
MOV             R3, R8
STR             R5, [SP,#0xA4+var_90]
STR             R8, [SP,#0xA4+nmemb]
CMP             R2, R3
LDR             R8, [SP,#0xA4+var_84]
LDR             R5, [SP,#0xA4+var_70]
STR             R7, [SP,#0xA4+var_84]
LDR             R7, [SP,#0xA4+var_74]
BNE             loc_44FDC
LDR             R9, [SP,#0xA4+var_90]
MOV             R2, #(aUserS+0x10) ; ","
MOVW            R3, #:lower16:sub_44450
STR             R2, [SP,#0xA4+var_90]
MOVT            R3, #:upper16:sub_44450 ; compar
MOV             R2, #4  ; size
LDR             R1, [SP,#0xA4+nmemb] ; nmemb
LDR             R0, [SP,#0xA4+base] ; base
BL              qsort
STR             R8, [SP,#0xA4+var_7C]
STR             R11, [SP,#0xA4+var_74]
LDR             R8, [SP,#0xA4+var_78]
LDR             R11, [SP,#0xA4+var_88]
STR             R6, [SP,#0xA4+var_78]
MOV             R6, R9
STR             R10, [SP,#0xA4+var_88]
B               loc_44E64

loc_44E14
LDR             R2, [SP,#0xA4+arg_4]
MOV             R1, #1
LDR             R0, [SP,#0xA4+var_90]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             loc_44F0C
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, #1
MOV             R1, R11
MOV             R0, R7
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_446E4
CMP             R0, #0
BNE             loc_44F0C

loc_44E54
LDR             R3, [SP,#0xA4+nmemb]
ADD             R6, R6, #1
CMP             R6, R3
BEQ             loc_44FA8

loc_44E64
LDR             R10, [R8,#4]!
MOV             R0, R4
MOV             R1, R10
BL              sub_480FC
SUBS            R9, R0, #0
BEQ             loc_44FC0
MOV             R0, R10 ; s
BL              strlen
LDR             R3, [SP,#0xA4+arg_4]
MOV             R1, R0
LDR             R2, [SP,#0xA4+arg_0]
MOV             R0, R10
STR             R7, [SP,#0xA4+var_A4]
BL              sub_4445C
LDR             R2, [SP,#0xA4+arg_4]
LDRD            R0, R1, [SP,#0xA4+var_98]
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
CMP             R0, #0
BNE             loc_44F0C
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, R11
MOV             R0, R9
MOV             R1, R7
STR             R3, [SP,#0xA4+var_A0]
LDR             R3, [SP,#0xA4+arg_0]
STR             R3, [SP,#0xA4+var_A4]
MOV             R3, R5
BL              sub_447EC
SUBS            R2, R0, #0
BNE             loc_44F0C
LDR             R3, [SP,#0xA4+var_84]
CMP             R6, R3
BCC             loc_44E14
LDR             R3, [SP,#0xA4+arg_4]
MOV             R0, R7
LDR             R1, [SP,#0xA4+var_88]
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_446E4
CMP             R0, #0
BEQ             loc_44E54

loc_44F0C
LDR             R0, [SP,#0xA4+base]
MOV             R6, #0xFFFFFFFF
BL              sub_47764
B               loc_4488C

loc_44F1C
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, R6
LDR             R1, [SP,#0xA4+var_98]
MOV             R0, R7
STR             R3, [SP,#0xA4+var_A4]
LDR             R3, [SP,#0xA4+arg_0]
BL              sub_446E4
CMP             R0, #0
BEQ             loc_44C98
B               def_44818 ; jumptable 00044818 default case

loc_44F44
LDR             R3, [SP,#0xA4+arg_4]
MOV             R2, R9
LDRD            R10, R11, [SP,#0xA4+var_94]
MOV             R0, R7
LDR             R8, [SP,#0xA4+var_84]
STR             R3, [SP,#0xA4+var_A4]
MOV             R1, R10
LDR             R3, [SP,#0xA4+arg_0]
LDR             R6, [SP,#0xA4+var_88]
BL              sub_446E4
CMP             R0, #0
BNE             def_44818 ; jumptable 00044818 default case

loc_44F74               ; s
MOV             R1, R11
MOV             R0, R5  ; int
BL              sub_45B70
CMP             R8, #0
BNE             loc_4488C
MOVW            R0, #:lower16:(aIdDMethodMinin_1+0x44) ; "}"
LDR             R2, [SP,#0xA4+arg_4]
MOVT            R0, #:upper16:(aIdDMethodMinin_1+0x44) ; "}"
MOV             R1, #1
LDR             R3, [SP,#0xA4+arg_0]
BLX             R3
MOV             R6, R0
B               loc_4488C

loc_44FA8
LDR             R0, [SP,#0xA4+base]
LDR             R8, [SP,#0xA4+var_7C]
LDR             R6, [SP,#0xA4+var_78]
LDR             R11, [SP,#0xA4+var_74]
BL              sub_47764
B               loc_44F74

loc_44FC0
MOVW            R1, #:lower16:aDumpC ; "dump.c"
MOVW            R0, #:lower16:(aInvalidValue+8) ; "value"
MOVT            R1, #:upper16:aDumpC ; "dump.c"
MOVT            R0, #:upper16:(aInvalidValue+8) ; assertion
LDR             R3, =aDoDump ; "do_dump"
MOVW            R2, #0x16B ; line
BL              __assert_fail

loc_44FDC
MOVW            R1, #:lower16:aDumpC ; "dump.c"
MOVW            R0, #:lower16:aISize ; "i == size"
MOVT            R1, #:upper16:aDumpC ; "dump.c"
MOVT            R0, #:upper16:aISize ; "i == size"
LDR             R3, =aDoDump ; "do_dump"
MOV             R2, #0x160 ; line
BL              __assert_fail
; End of function sub_447EC

off_44FF8 DCD aDoDump   ; "do_dump"



; int __fastcall sub_44FFC(_DWORD *, int (__fastcall *)(__int16 *, int, int), int, int)
sub_44FFC

var_2C= -0x2C
var_20= -0x20

TST             R3, #0x200
PUSH            {R4-R7,LR}
SUB             SP, SP, #0x2C
BNE             loc_45020
CMP             R0, #0
BEQ             loc_4506C
LDR             R12, [R0]
CMP             R12, #1
BHI             loc_4506C

loc_45020
MOV             R4, R0
ADD             R0, SP, #0x2C+var_20
MOV             R7, R2
MOV             R6, R1
MOV             R5, R3
BL              sub_457E8
SUBS            R2, R0, #0
BNE             loc_4506C
MOV             R0, R4
STRD            R6, R7, [SP,#0x2C+var_2C]
MOV             R1, R5
ADD             R3, SP, #0x2C+var_20
BL              sub_447EC
MOV             R4, R0
ADD             R0, SP, #0x2C+var_20
BL              sub_45864

loc_45060
MOV             R0, R4
ADD             SP, SP, #0x2C ; ','
POP             {R4-R7,PC}

loc_4506C
MOV             R4, #0xFFFFFFFF
B               loc_45060
; End of function sub_44FFC




; _BYTE *__fastcall sub_45074(_DWORD *, int)
sub_45074

var_C= -0xC

PUSH            {R4-R6,LR}
SUB             SP, SP, #0x10
MOV             R5, R0
ADD             R0, SP, #0x10+var_C
MOV             R6, R1
BL              sub_47820
SUBS            R4, R0, #0
MOVNE           R4, #0
BNE             loc_450C0
MOVW            R1, #:lower16:sub_443B4
MOV             R3, R6
MOV             R0, R5
MOVT            R1, #:upper16:sub_443B4
ADD             R2, SP, #0x10+var_C
BL              sub_44FFC
CMP             R0, #0
BEQ             loc_450CC

loc_450B8
ADD             R0, SP, #0x10+var_C
BL              sub_47854

loc_450C0
MOV             R0, R4
ADD             SP, SP, #0x10
POP             {R4-R6,PC}

loc_450CC
ADD             R0, SP, #0x10+var_C
BL              sub_47894
BL              sub_477C8
MOV             R4, R0
B               loc_450B8
; End of function sub_45074

PUSH            {R4,LR}
SUB             SP, SP, #0x10
STR             R1, [SP,#0xC]
MOVW            R1, #:lower16:sub_443C8
MOV             R4, #0
MOVT            R1, #:upper16:sub_443C8
STR             R2, [SP,#4]
ADD             R2, SP, #4
STR             R4, [SP,#8]
BL              sub_44FFC
CMP             R0, R4
LDREQ           R0, [SP,#8]
MOVNE           R0, R4
ADD             SP, SP, #0x10
POP             {R4,PC}



; int __fastcall sub_4511C(_DWORD *, int, int)
sub_4511C
MOV             R3, R2
MOV             R2, R1
MOV             R1, #sub_4440C
B               sub_44FFC
; End of function sub_4511C




; int __fastcall sub_45130(_DWORD *, int, int)
sub_45130
MOV             R3, R1
MOVW            R1, #:lower16:aW ; "w"
PUSH            {R4-R6,LR}
MOVT            R1, #:upper16:aW ; "w"
MOV             R5, R0
MOV             R0, R3
MOV             R6, R2
BL              fopen64
SUBS            R4, R0, #0
BEQ             loc_4518C
MOVW            R1, #:lower16:sub_4440C
MOV             R3, R6
MOV             R0, R5
MOVT            R1, #:upper16:sub_4440C
MOV             R2, R4
BL              sub_44FFC
MOV             R5, R0
MOV             R0, R4  ; stream
BL              fclose
CMP             R0, #0
BNE             loc_4518C

loc_45184
MOV             R0, R5
POP             {R4-R6,PC}

loc_4518C
MOV             R5, #0xFFFFFFFF
B               loc_45184
; End of function sub_45130




; int __fastcall sub_45194(_DWORD *, int, int)
sub_45194

var_8= -8
var_4= -4

PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R12, SP, #0xC+var_4
MOV             R3, R2
STR             R1, [R12,#-4]!
MOVW            R1, #:lower16:sub_44428
MOV             R2, R12
MOVT            R1, #:upper16:sub_44428
BL              sub_44FFC
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_45194




; int __fastcall sub_451C0(unsigned __int16 *, unsigned int, int)
sub_451C0
MOVW            R12, #0xBEEF
TST             R0, #3
MOVT            R12, #0xDEAD
PUSH            {R4-R9,LR}
ADD             R12, R2, R12
ADD             R12, R12, R1
BNE             loc_452A4
CMP             R1, #0xC
BLS             loc_45550
ADD             R4, R0, #0xC
MOV             R3, R12
MOV             LR, R12

loc_451F0
LDR             R2, [R4,#-4]
SUB             R1, R1, #0xC
LDR             R6, [R4,#-0xC]
CMP             R1, #0xC
LDR             R5, [R4,#-8]
MOV             R0, R4
ADD             R3, R3, R2
ADD             R4, R4, #0xC
SUB             R2, R6, R3
ADD             R2, R2, R12
ADD             LR, LR, R5
EOR             R2, R2, R3,ROR#28
ADD             R3, LR, R3
SUB             LR, LR, R2
ADD             R5, R2, R3
EOR             R2, LR, R2,ROR#26
SUB             R3, R3, R2
ADD             R12, R2, R5
EOR             R2, R3, R2,ROR#24
SUB             R3, R5, R2
ADD             LR, R2, R12
EOR             R3, R3, R2,ROR#16
SUB             R2, R12, R3
ADD             R12, R3, LR
EOR             R2, R2, R3,ROR#13
SUB             R3, LR, R2
ADD             LR, R2, R12
EOR             R3, R3, R2,ROR#28
BHI             loc_451F0

loc_45264
SUB             R1, R1, #1
CMP             R1, #0xB ; switch 12 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_4526C ; jumptable 0004526C default case
                        ; jumptable 00045354 default case
                        ; jumptable 00045478 default case
jpt_4526C DCD loc_45508 ; jump table for switch statement
DCD loc_45564
DCD loc_4560C
DCD loc_45570
DCD loc_455BC
DCD loc_455D0
DCD loc_455E4
DCD loc_455F8
DCD loc_4557C
DCD loc_45598
DCD loc_455A0
DCD loc_456C8

loc_452A4
TST             R0, #1
BNE             loc_4538C
CMP             R1, #0xC
BLS             loc_456BC
ADD             R4, R0, #0xC
MOV             R3, R12
MOV             LR, R12

loc_452C0
LDRH            R6, [R4,#-2]
SUB             R1, R1, #0xC
LDRH            R5, [R4,#-4]
CMP             R1, #0xC
LDRH            R7, [R4,#-0xA]
MOV             R0, R4
LDRH            R2, [R4,#-0xC]
ADD             R4, R4, #0xC
ADD             R5, R5, R6,LSL#16
LDRH            R6, [R4,#-0x12]
ADD             R3, R5, R3
LDRH            R5, [R4,#-0x14]
ADD             R2, R2, R7,LSL#16
SUB             R2, R2, R3
ADD             R12, R2, R12
ADD             R2, R5, R6,LSL#16
EOR             R12, R12, R3,ROR#28
ADD             LR, R2, LR
SUB             R2, LR, R12
ADD             LR, LR, R3
EOR             R3, R2, R12,ROR#26
ADD             R12, R12, LR
SUB             R2, LR, R3
ADD             LR, R3, R12
EOR             R2, R2, R3,ROR#24
SUB             R12, R12, R2
ADD             R5, R2, LR
EOR             R2, R12, R2,ROR#16
SUB             R3, LR, R2
ADD             R12, R2, R5
EOR             R2, R3, R2,ROR#13
SUB             R3, R5, R2
ADD             LR, R2, R12
EOR             R3, R3, R2,ROR#28
BHI             loc_452C0

loc_4534C
SUB             R1, R1, #1
CMP             R1, #0xB ; switch 12 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_4526C ; jumptable 0004526C default case
                        ; jumptable 00045354 default case
                        ; jumptable 00045478 default case
jpt_45354 DCD loc_45508 ; jump table for switch statement
DCD loc_45564
DCD loc_4555C
DCD loc_456A8
DCD loc_456A0
DCD loc_45624
DCD loc_4561C
DCD loc_45648
DCD loc_45640
DCD loc_45674
DCD loc_4566C
DCD loc_456D0

loc_4538C
CMP             R1, #0xC
MOVLS           R3, R12
MOVLS           LR, R12
BLS             loc_45470
ADD             R4, R0, #0xC
MOV             R3, R12
MOV             LR, R12

loc_453A8
LDRB            R6, [R4,#-2]
SUB             R1, R1, #0xC
LDRB            R2, [R4,#-0xA]
CMP             R1, #0xC
LDRB            R7, [R4,#-3]
MOV             R0, R4
LDRB            R8, [R4,#-0xB]
ADD             R4, R4, #0xC
MOV             R6, R6,LSL#16
LDRB            R5, [R4,#-0x12]
MOV             R2, R2,LSL#16
LDRB            R9, [R4,#-0x18]
ADD             R6, R6, R7,LSL#8
LDRB            R7, [R4,#-0x10]
ADD             R2, R2, R8,LSL#8
LDRB            R8, [R4,#-0xD]
MOV             R5, R5,LSL#16
ADD             R6, R6, R7
LDRB            R7, [R4,#-0x15]
ADD             R2, R2, R9
ADD             R6, R6, R8,LSL#24
LDRB            R8, [R4,#-0x13]
ADD             R3, R6, R3
ADD             R2, R2, R7,LSL#24
LDRB            R6, [R4,#-0x11]
LDRB            R7, [R4,#-0x14]
ADD             R5, R5, R8,LSL#8
SUB             R2, R2, R3
ADD             R12, R2, R12
ADD             R5, R5, R7
EOR             R12, R12, R3,ROR#28
ADD             R2, R5, R6,LSL#24
ADD             LR, R2, LR
SUB             R2, LR, R12
ADD             LR, LR, R3
EOR             R3, R2, R12,ROR#26
ADD             R12, R12, LR
SUB             R2, LR, R3
ADD             LR, R3, R12
EOR             R2, R2, R3,ROR#24
SUB             R12, R12, R2
ADD             R5, R2, LR
EOR             R2, R12, R2,ROR#16
SUB             R3, LR, R2
ADD             R12, R2, R5
EOR             R2, R3, R2,ROR#13
SUB             R3, R5, R2
ADD             LR, R2, R12
EOR             R3, R3, R2,ROR#28
BHI             loc_453A8

loc_45470
SUB             R1, R1, #1
CMP             R1, #0xB ; switch 12 cases
LDRLS           PC, [PC,R1,LSL#2] ; switch jump
B               def_4526C ; jumptable 0004526C default case
                        ; jumptable 00045354 default case
                        ; jumptable 00045478 default case
jpt_45478 DCD loc_45508 ; jump table for switch statement
DCD loc_45500
DCD loc_454F8
DCD loc_454F0
DCD loc_454E8
DCD loc_454E0
DCD loc_454D8
DCD loc_454D0
DCD loc_454C8
DCD loc_454C0
DCD loc_454B8
DCD loc_454B0

loc_454B0               ; jumptable 00045478 case 11
LDRB            R2, [R0,#0xB]
ADD             R3, R3, R2,LSL#24

loc_454B8               ; jumptable 00045478 case 10
LDRB            R2, [R0,#0xA]
ADD             R3, R3, R2,LSL#16

loc_454C0               ; jumptable 00045478 case 9
LDRB            R2, [R0,#9]
ADD             R3, R3, R2,LSL#8

loc_454C8               ; jumptable 00045478 case 8
LDRB            R2, [R0,#8]
ADD             R3, R3, R2

loc_454D0               ; jumptable 00045478 case 7
LDRB            R2, [R0,#7]
ADD             LR, LR, R2,LSL#24

loc_454D8               ; jumptable 00045478 case 6
LDRB            R2, [R0,#6]
ADD             LR, LR, R2,LSL#16

loc_454E0               ; jumptable 00045478 case 5
LDRB            R2, [R0,#5]
ADD             LR, LR, R2,LSL#8

loc_454E8               ; jumptable 00045478 case 4
LDRB            R2, [R0,#4]
ADD             LR, LR, R2

loc_454F0               ; jumptable 00045478 case 3
LDRB            R2, [R0,#3]
ADD             R12, R12, R2,LSL#24

loc_454F8               ; jumptable 00045478 case 2
LDRB            R2, [R0,#2]
ADD             R12, R12, R2,LSL#16

loc_45500               ; jumptable 00045478 case 1
LDRB            R2, [R0,#1]
ADD             R12, R12, R2,LSL#8

loc_45508               ; jumptable 0004526C case 0
LDRB            R2, [R0] ; jumptable 00045354 case 0
                        ; jumptable 00045478 case 0
ADD             R12, R2, R12

loc_45510
EOR             R3, R3, LR
SUB             R3, R3, LR,ROR#18
EOR             R12, R12, R3
SUB             R12, R12, R3,ROR#21
EOR             LR, LR, R12
SUB             LR, LR, R12,ROR#7
EOR             R3, R3, LR
SUB             R3, R3, LR,ROR#16
EOR             R12, R12, R3
SUB             R12, R12, R3,ROR#28
EOR             LR, LR, R12
SUB             R12, LR, R12,ROR#18
EOR             R3, R3, R12
SUB             R3, R3, R12,ROR#8

def_4526C               ; jumptable 0004526C default case
MOV             R0, R3  ; jumptable 00045354 default case
                        ; jumptable 00045478 default case
POP             {R4-R9,PC}

loc_45550
MOV             R3, R12
MOV             LR, R12
B               loc_45264

loc_4555C               ; jumptable 00045354 case 2
LDRB            R2, [R0,#2]
ADD             R12, R12, R2,LSL#16

loc_45564               ; jumptable 0004526C case 1
LDRH            R2, [R0] ; jumptable 00045354 case 1
ADD             R12, R2, R12
B               loc_45510

loc_45570               ; jumptable 0004526C case 3
LDR             R2, [R0]
ADD             R12, R12, R2
B               loc_45510

loc_4557C               ; jumptable 0004526C case 8
LDRB            R4, [R0,#8]

loc_45580
LDR             R1, [R0,#4]
ADD             R3, R3, R4
LDR             R2, [R0]
ADD             LR, LR, R1
ADD             R12, R12, R2
B               loc_45510

loc_45598               ; jumptable 0004526C case 9
LDRH            R4, [R0,#8]
B               loc_45580

loc_455A0               ; jumptable 0004526C case 10
LDR             R2, [R0,#8]
LDM             R0, {R1,R4}
BIC             R2, R2, #0xFF000000
ADD             R3, R3, R2
ADD             LR, LR, R4
ADD             R12, R12, R1
B               loc_45510

loc_455BC               ; jumptable 0004526C case 4
LDRB            R1, [R0,#4]
LDR             R2, [R0]
ADD             LR, LR, R1
ADD             R12, R12, R2
B               loc_45510

loc_455D0               ; jumptable 0004526C case 5
LDRH            R1, [R0,#4]
LDR             R2, [R0]
ADD             LR, LR, R1
ADD             R12, R12, R2
B               loc_45510

loc_455E4               ; jumptable 0004526C case 6
LDM             R0, {R1,R2}
BIC             R2, R2, #0xFF000000
ADD             R12, R12, R1
ADD             LR, LR, R2
B               loc_45510

loc_455F8               ; jumptable 0004526C case 7
LDR             R1, [R0,#4]
LDR             R2, [R0]
ADD             LR, LR, R1
ADD             R12, R12, R2
B               loc_45510

loc_4560C               ; jumptable 0004526C case 2
LDR             R2, [R0]
BIC             R2, R2, #0xFF000000
ADD             R12, R2, R12
B               loc_45510

loc_4561C               ; jumptable 00045354 case 6
LDRB            R2, [R0,#6]
ADD             LR, LR, R2,LSL#16

loc_45624               ; jumptable 00045354 case 5
LDRH            R2, [R0]
LDRH            R4, [R0,#2]
LDRH            R1, [R0,#4]
ADD             R12, R2, R12
ADD             R12, R12, R4,LSL#16
ADD             LR, LR, R1
B               loc_45510

loc_45640               ; jumptable 00045354 case 8
LDRB            R2, [R0,#8]
ADD             R3, R3, R2

loc_45648               ; jumptable 00045354 case 7
LDRH            R1, [R0,#4]
LDRH            R4, [R0,#6]
LDRH            R2, [R0]
LDRH            R0, [R0,#2]
ADD             LR, R1, LR
ADD             R12, R2, R12
ADD             LR, LR, R4,LSL#16
ADD             R12, R12, R0,LSL#16
B               loc_45510

loc_4566C               ; jumptable 00045354 case 10
LDRB            R2, [R0,#0xA]
ADD             R3, R3, R2,LSL#16

loc_45674               ; jumptable 00045354 case 9
LDRH            R1, [R0,#4]
LDRH            R5, [R0,#6]
LDRH            R2, [R0]
LDRH            R4, [R0,#2]
ADD             LR, R1, LR
LDRH            R1, [R0,#8]
ADD             R12, R2, R12
ADD             LR, LR, R5,LSL#16
ADD             R12, R12, R4,LSL#16
ADD             R3, R3, R1
B               loc_45510

loc_456A0               ; jumptable 00045354 case 4
LDRB            R2, [R0,#4]
ADD             LR, LR, R2

loc_456A8               ; jumptable 00045354 case 3
LDRH            R2, [R0]
LDRH            R1, [R0,#2]
ADD             R12, R2, R12
ADD             R12, R12, R1,LSL#16
B               loc_45510

loc_456BC
MOV             R3, R12
MOV             LR, R12
B               loc_4534C

loc_456C8               ; jumptable 0004526C case 11
LDR             R4, [R0,#8]
B               loc_45580

loc_456D0               ; jumptable 00045354 case 11
LDRH            R2, [R0,#8]
LDRH            R5, [R0,#0xA]
LDRH            R1, [R0,#4]
ADD             R3, R2, R3
LDRH            R4, [R0,#6]
LDRH            R2, [R0]
LDRH            R0, [R0,#2]
ADD             LR, R1, LR
ADD             R3, R3, R5,LSL#16
ADD             R12, R2, R12
ADD             LR, LR, R4,LSL#16
ADD             R12, R12, R0,LSL#16
B               loc_45510
; End of function sub_451C0




; int __fastcall sub_45704(int, int *, char *s2, int)
sub_45704
PUSH            {R4-R8,LR}
ADD             R0, R0, #0xC
LDR             R4, [R1]
MOV             R5, R1
MOV             R7, R2
MOV             R6, R3
CMP             R4, R0
BNE             loc_45738
B               loc_45760

loc_45728
LDR             R2, [R5,#4]
CMP             R2, R4
BEQ             loc_4576C
LDR             R4, [R4,#4]

loc_45738
LDR             R2, [R4,#0x10]
CMP             R2, R6
BNE             loc_45728
MOV             R1, R7  ; s2
ADD             R0, R4, #0x18 ; s1
BL              strcmp
CMP             R0, #0
BNE             loc_45728
MOV             R0, R4
POP             {R4-R8,PC}

loc_45760
LDR             R3, [R1,#4]
CMP             R4, R3
BNE             loc_45738

loc_4576C
MOV             R4, #0
MOV             R0, R4
POP             {R4-R8,PC}
; End of function sub_45704




; void __fastcall sub_45778(int)
sub_45778
PUSH            {R4-R6,LR}
ADD             R6, R0, #0xC
LDR             R4, [R0,#0x10]
CMP             R4, R6
POPEQ           {R4-R6,PC}

loc_4578C
LDR             R0, [R4,#0x14]
LDR             R5, [R4,#4]
CMP             R0, #0
BEQ             loc_457D0
LDR             R2, [R0,#4]
ADD             R3, R0, #4
CMN             R2, #1
BEQ             loc_457D0
DMB             ISH

loc_457B0
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_457B0
CMP             R2, #0
BNE             loc_457D0
BL              sub_48A34

loc_457D0
MOV             R0, R4
MOV             R4, R5
BL              sub_47764
CMP             R5, R6
BNE             loc_4578C
POP             {R4-R6,PC}
; End of function sub_45778




; int __fastcall sub_457E8(_DWORD *)
sub_457E8
MOV             R2, #0
MOV             R3, #3
PUSH            {R4,LR}
MOV             R4, R0
STR             R2, [R0]
STR             R3, [R0,#8]
MOV             R0, #0x40 ; '@'
BL              sub_4774C
CMP             R0, #0
STR             R0, [R4,#4]
BEQ             loc_4585C
LDR             R12, [R4,#8]
MOV             R2, #1
ADD             R3, R4, #0xC
ADD             R1, R4, #0x14
STR             R3, [R4,#0x10]
MOVS            R2, R2,LSL R12
STR             R3, [R4,#0xC]
STR             R1, [R4,#0x18]
STR             R1, [R4,#0x14]
BEQ             loc_45854
MOV             R2, #8
ADD             R2, R0, R2,LSL R12

loc_45844
STR             R3, [R0,#4]
STR             R3, [R0],#8
CMP             R0, R2
BNE             loc_45844

loc_45854
MOV             R0, #0
POP             {R4,PC}

loc_4585C
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_457E8




; void __fastcall sub_45864(int)
sub_45864
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_45778
LDR             R0, [R4,#4]
POP             {R4,LR}
B               sub_47764
; End of function sub_45864




; int __fastcall sub_4587C(int, char *, int)
sub_4587C
PUSH            {R4-R10,LR}
MOV             R4, R0
LDR             R8, [R0,#8]
MOV             R6, R1
MOV             R7, R2
LDR             R3, [R0]
MOVS            R3, R3,LSR R8
BEQ             loc_459A0
ADD             R8, R8, #1
MOV             R0, #8
MOV             R9, R0,LSL R8
MOV             R3, #1
MOV             R10, R3,LSL R8
MOV             R0, R9
BL              sub_4774C
SUBS            R5, R0, #0
BEQ             loc_45B08
LDR             R0, [R4,#4]
BL              sub_47764
CMP             R10, #0
STMIB           R4, {R5,R8}
ADD             R1, R4, #0xC
BEQ             loc_458F0
ADD             R0, R9, R5
MOV             R3, R5

loc_458E0
STR             R1, [R3,#4]
STR             R1, [R3],#8
CMP             R0, R3
BNE             loc_458E0

loc_458F0
LDR             R3, [R4,#0x10]
MOV             R2, #0xFFFFFFFF
STR             R1, [R4,#0xC]
MVN             R8, R2,LSL R8
STR             R1, [R4,#0x10]
CMP             R3, R1
BNE             loc_45938
B               loc_459AC

loc_45910
LDR             LR, [R2]
CMP             R12, R1
STR             R2, [R3,#4]
STR             LR, [R3]
LDR             LR, [R2]
STR             R3, [LR,#4]
STR             R3, [R2]
STR             R3, [R0]
MOV             R3, R12
BEQ             loc_4598C

loc_45938
LDR             R0, [R3,#0x10]
LDR             R12, [R3,#4]
AND             R0, R0, R8
LDR             R2, [R5,R0,LSL#3]
ADD             R0, R5, R0,LSL#3
CMP             R2, R1
BNE             loc_45910
LDR             LR, [R0,#4]
CMP             R1, LR
BNE             loc_45910
LDR             R2, [R4,#0xC]
CMP             R12, R1
STR             R1, [R3,#4]
STR             R2, [R3]
LDR             R2, [R4,#0xC]
STR             R3, [R2,#4]
STR             R3, [R4,#0xC]
STR             R3, [R0,#4]
STR             R3, [R0]
MOV             R3, R12
BNE             loc_45938

loc_4598C
LDR             R3, [R4,#8]
MOV             R8, #0xFFFFFFFF
LDR             R5, [R4,#4]
MVN             R8, R8,LSL R3
B               loc_459AC

loc_459A0
MOV             R3, #0xFFFFFFFF
LDR             R5, [R0,#4]
MVN             R8, R3,LSL R8

loc_459AC               ; s
MOV             R0, R6
BL              strlen
MOVW            R3, #:lower16:dword_73108
MOV             R10, R0
MOVT            R3, #:upper16:dword_73108
MOV             R1, R10
LDR             R2, [R3]
MOV             R0, R6
BL              sub_451C0
MOV             R9, R0
MOV             R2, R6  ; s2
AND             R8, R8, R9
MOV             R0, R4  ; int
ADD             R5, R5, R8,LSL#3
MOV             R3, R9
MOV             R1, R5  ; int
BL              sub_45704
SUBS            R8, R0, #0
BEQ             loc_45A48
LDR             R0, [R8,#0x14]
CMP             R0, #0
BEQ             loc_45A34
LDR             R3, [R0,#4]
CMN             R3, #1
BEQ             loc_45A34
ADD             R3, R0, #4
DMB             ISH

loc_45A18
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_45A18
CMP             R2, #0
BEQ             loc_45A40

loc_45A34
STR             R7, [R8,#0x14]
MOV             R0, #0
POP             {R4-R10,PC}

loc_45A40
BL              sub_48A34
B               loc_45A34

loc_45A48
ADD             R0, R10, #0x19
BL              sub_4774C
SUBS            R8, R0, #0
BEQ             loc_45B08
ADD             R2, R10, #1 ; n
MOV             R1, R6  ; src
STR             R9, [R8,#0x10]
ADD             R0, R8, #0x18 ; dest
BL              strncpy
LDR             R3, [R5]
ADD             R1, R4, #0xC
ADD             R2, R8, #8
STR             R7, [R8,#0x14]
STR             R8, [R8,#4]
CMP             R3, R1
STR             R8, [R8]
STR             R2, [R8,#0xC]
STR             R2, [R8,#8]
BEQ             loc_45ADC

loc_45A94
LDR             R1, [R3]
STM             R8, {R1,R3}
LDR             R1, [R3]
STR             R8, [R1,#4]
STR             R8, [R3]
STR             R8, [R5]

loc_45AAC
LDR             R1, [R4,#0x14]
ADD             R12, R4, #0x14
LDR             R3, [R4]
MOV             R0, #0
STR             R12, [R8,#0xC]
STR             R1, [R8,#8]
LDR             R1, [R4,#0x14]
ADD             R3, R3, #1
STR             R2, [R1,#4]
STR             R2, [R4,#0x14]
STR             R3, [R4]
POP             {R4-R10,PC}

loc_45ADC
LDR             R1, [R5,#4]
CMP             R3, R1
BNE             loc_45A94
LDR             R1, [R4,#0xC]
STM             R8, {R1,R3}
LDR             R3, [R4,#0xC]
STR             R8, [R3,#4]
STR             R8, [R4,#0xC]
STR             R8, [R5,#4]
STR             R8, [R5]
B               loc_45AAC

loc_45B08
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}
; End of function sub_4587C




; int __fastcall sub_45B10(int, char *s)
sub_45B10
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R4, R1
MOV             R6, #0xFFFFFFFF
BL              strlen
MOVW            R3, #:lower16:dword_73108
MOV             R1, R0
MOVT            R3, #:upper16:dword_73108
MOV             R0, R4
LDR             R2, [R3]
BL              sub_451C0
LDR             LR, [R5,#8]
MOV             R12, R0
LDR             R1, [R5,#4]
MOV             R3, R12
MOV             R0, R5  ; int
MOV             R2, R4  ; s2
BIC             R12, R12, R6,LSL LR
ADD             R1, R1, R12,LSL#3 ; int
BL              sub_45704
CMP             R0, #0
LDRNE           R0, [R0,#0x14]
POP             {R4-R6,PC}
; End of function sub_45B10




; int __fastcall sub_45B70(_DWORD *, char *s)
sub_45B70
PUSH            {R4-R10,LR}
MOV             R6, R0
MOV             R0, R1  ; s
MOV             R4, R1
MOV             R8, #0xFFFFFFFF
BL              strlen
MOVW            R3, #:lower16:dword_73108
MOV             R1, R0
MOVT            R3, #:upper16:dword_73108
MOV             R0, R4
LDR             R2, [R3]
BL              sub_451C0
LDR             R1, [R6,#8]
MOV             R5, R0
LDR             R9, [R6,#4]
MOV             R3, R5
MOV             R2, R4  ; s2
MOV             R0, R6  ; int
BIC             R5, R5, R8,LSL R1
ADD             R7, R9, R5,LSL#3
MOV             R1, R7  ; int
BL              sub_45704
SUBS            R4, R0, #0
BEQ             loc_45C88
LDR             R3, [R9,R5,LSL#3]
LDR             R1, [R7,#4]
LDR             R2, [R4,#4]
CMP             R4, R3
LDR             R3, [R4]
BEQ             loc_45C70
CMP             R4, R1
STREQ           R3, [R7,#4]

loc_45BF0
STR             R2, [R3,#4]
LDR             R1, [R4,#4]
LDR             R2, [R4,#0xC]
LDR             R0, [R4,#0x14]
STR             R3, [R1]
LDR             R3, [R4,#8]
CMP             R0, #0
STR             R2, [R3,#4]
LDR             R2, [R4,#0xC]
STR             R3, [R2]
BEQ             loc_45C28
LDR             R3, [R0,#4]
CMN             R3, #1
BNE             loc_45C44

loc_45C28
MOV             R0, R4
BL              sub_47764
LDR             R3, [R6]
MOV             R0, #0
SUB             R3, R3, #1
STR             R3, [R6]
POP             {R4-R10,PC}

loc_45C44
ADD             R3, R0, #4
DMB             ISH

loc_45C4C
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_45C4C
CMP             R2, #0
BNE             loc_45C28
BL              sub_48A34
B               loc_45C28

loc_45C70
CMP             R4, R1
ADDEQ           R1, R6, #0xC
STRNE           R2, [R9,R5,LSL#3]
STREQ           R1, [R7,#4]
STREQ           R1, [R9,R5,LSL#3]
B               loc_45BF0

loc_45C88
MOV             R0, R8
POP             {R4-R10,PC}
; End of function sub_45B70




; int __fastcall sub_45C90(_DWORD *)
sub_45C90
PUSH            {R4,LR}
MOV             R4, R0
BL              sub_45778
MOV             R3, #1
ADD             R2, R4, #0xC
LDR             R0, [R4,#8]
MOVS            R3, R3,LSL R0
BEQ             loc_45CCC
LDR             R3, [R4,#4]
MOV             R1, #8
ADD             R1, R3, R1,LSL R0

loc_45CBC
STR             R2, [R3,#4]
STR             R2, [R3],#8
CMP             R3, R1
BNE             loc_45CBC

loc_45CCC
ADD             R3, R4, #0x14
MOV             R1, #0
STR             R2, [R4,#0x10]
STR             R2, [R4,#0xC]
STR             R3, [R4,#0x18]
STR             R3, [R4,#0x14]
STR             R1, [R4]
POP             {R4,PC}
; End of function sub_45C90




; int __fastcall sub_45CEC(int)
sub_45CEC
LDR             R3, [R0,#0x18]
ADD             R0, R0, #0x14
CMP             R3, R0
MOVNE           R0, R3
MOVEQ           R0, #0
BX              LR
; End of function sub_45CEC




; int __fastcall sub_45D04(int, char *s)
sub_45D04
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R0, R1  ; s
MOV             R4, R1
MOV             R6, #0xFFFFFFFF
BL              strlen
MOVW            R3, #:lower16:dword_73108
MOV             R1, R0
MOVT            R3, #:upper16:dword_73108
MOV             R0, R4
LDR             R2, [R3]
BL              sub_451C0
LDR             LR, [R5,#8]
MOV             R12, R0
LDR             R1, [R5,#4]
MOV             R3, R12
MOV             R0, R5  ; int
MOV             R2, R4  ; s2
BIC             R12, R12, R6,LSL LR
ADD             R1, R1, R12,LSL#3 ; int
BL              sub_45704
CMP             R0, #0
ADDNE           R0, R0, #8
POP             {R4-R6,PC}
; End of function sub_45D04




; int __fastcall sub_45D64(int, int)
sub_45D64
LDR             R3, [R1,#4]
ADD             R0, R0, #0x14
CMP             R3, R0
MOVNE           R0, R3
MOVEQ           R0, #0
BX              LR
; End of function sub_45D64




; int __fastcall sub_45D7C(int)
sub_45D7C
ADD             R0, R0, #0x10
BX              LR
; End of function sub_45D7C




; int __fastcall sub_45D84(int)
sub_45D84
LDR             R0, [R0,#0xC]
BX              LR
; End of function sub_45D84




; void __fastcall sub_45D8C(int, int)
sub_45D8C

var_4= -4

PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0,#0xC]
SUB             SP, SP, #8
CMP             R0, #0
BEQ             loc_45DD4
LDR             R3, [R0,#4]
CMN             R3, #1
BEQ             loc_45DD4
ADD             R3, R0, #4
DMB             ISH

loc_45DB8
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R12, R2, [R3]
CMP             R12, #0
BNE             loc_45DB8
CMP             R2, #0
BEQ             loc_45DE0

loc_45DD4
STR             R1, [R4,#0xC]
ADD             SP, SP, #8
POP             {R4,PC}

loc_45DE0
STR             R1, [SP,#8+var_4]
BL              sub_48A34
LDR             R1, [SP,#8+var_4]
STR             R1, [R4,#0xC]
ADD             SP, SP, #8
POP             {R4,PC}
; End of function sub_45D8C




; int __fastcall sub_45DF8(int result)
sub_45DF8

var_C= -0xC
var_B= -0xB
var_A= -0xA
var_9= -9

PUSH            {R4-R7,LR}
MOV             R4, #dword_73108
SUB             SP, SP, #0xC
LDR             R3, [R4]
CMP             R3, #0
BEQ             loc_45E1C

loc_45E14
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_45E1C
MOV             R1, R0
ADD             R3, R4, #4
MOV             R0, #1

loc_45E28
LDREXB          R2, [R3]
STREXB          R12, R0, [R3]
CMP             R12, #0
BNE             loc_45E28
TST             R2, #0xFF
BNE             loc_45E58
CMP             R1, #0
BEQ             loc_45E70

loc_45E48
DMB             ISH
STR             R1, [R4]
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_45E58
BL              sched_yield
LDR             R3, [R4]
DMB             ISH
CMP             R3, #0
BEQ             loc_45E58
B               loc_45E14

loc_45E70
MOVW            R0, #:lower16:aDevUrandom ; "/dev/urandom"
MOV             R6, SP
MOVT            R0, #:upper16:aDevUrandom ; "/dev/urandom"
BL              open64
CMN             R0, #1
MOV             R5, R0
BEQ             loc_45ECC
MOV             R2, #4  ; nbytes
MOV             R1, R6  ; buf
BL              read
MOV             R7, R0
MOV             R0, R5  ; fd
BL              close
CMP             R7, #4
BNE             loc_45ECC
LDRB            R0, [SP,#0xC+var_C]
LDRB            R2, [SP,#0xC+var_B]
LDRB            R3, [SP,#0xC+var_A]
LDRB            R1, [SP,#0xC+var_9]
ORR             R2, R2, R0,LSL#8
ORR             R3, R3, R2,LSL#8
ORR             R1, R1, R3,LSL#8
B               loc_45EE8

loc_45ECC               ; tz
MOV             R1, #0
MOV             R0, R6  ; tv
BL              gettimeofday
LDMFD           SP, {R1,R5}
EOR             R5, R5, R1
BL              getpid
EOR             R1, R0, R5

loc_45EE8
CMP             R1, #0
MOVEQ           R1, #1
B               loc_45E48
; End of function sub_45DF8




; int __fastcall sub_45EF4(_DWORD *)
sub_45EF4
LDR             R2, [R0,#4]
LDR             R3, [R0]
LDRB            R3, [R3,R2]
CMP             R3, #0
ADDNE           R2, R2, #1
MOVEQ           R3, #0xFFFFFFFF
STRNE           R2, [R0,#4]
MOV             R0, R3
BX              LR
; End of function sub_45EF4




; int __fastcall sub_45F18(int)
sub_45F18
LDRD            R2, R3, [R0,#4]
CMP             R3, R2
LDRCC           R1, [R0]
ADDCC           R2, R3, #1
LDRBCC          R3, [R1,R3]
STRCC           R2, [R0,#8]
MOVCC           R0, R3
MOVCS           R0, #0xFFFFFFFF
BX              LR
; End of function sub_45F18




; int __fastcall sub_45F3C(_DWORD *)
sub_45F3C
LDR             R3, [R0,#0x404]
LDR             R2, [R0,#0x400]
PUSH            {R4,LR}
MOV             R4, R0
CMP             R3, R2
BCC             loc_45F80
MOV             R2, #0
LDR             R3, [R0,#0x408]
STR             R2, [R0,#0x404]
MOV             R1, #0x400
LDR             R2, [R0,#0x40C]
BLX             R3
SUB             R3, R0, #1
STR             R0, [R4,#0x400]
CMN             R3, #3
BHI             loc_45F90
LDR             R3, [R4,#0x404]

loc_45F80
LDRB            R0, [R4,R3]
ADD             R3, R3, #1
STR             R3, [R4,#0x404]
POP             {R4,PC}

loc_45F90
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_45F3C




; int sub_45F98(int result, _DWORD *, int, const char *, ...)
sub_45F98

var_15C= -0x15C
format= -0x158
var_154= -0x154
var_148= -0x148
s= -0x144
var_A5= -0xA5
var_A4= -0xA4
var_5= -5
varg_r3=  0x20
arg=  0x24

PUSH            {R3}
PUSH            {R4-R10,LR}
SUBS            R6, R0, #0
SUB             SP, SP, #0x15C
BEQ             loc_46054
ADD             R12, SP, #0x15C+arg
MOV             R4, R1
MOV             R10, #0
MOV             R5, R2
MOV             R3, R12 ; arg
ADD             R0, SP, #0x15C+s ; s
LDR             R2, [SP,#0x15C+varg_r3] ; format
MOV             R1, #0xA0 ; maxlen
STR             R12, [SP,#0x15C+var_148]
BL              vsnprintf
CMP             R4, R10
STRB            R10, [SP,#0x15C+var_A5]
BEQ             loc_4601C
ADD             R0, R4, #0x28 ; '('
BL              sub_47894
CMP             R0, #0
LDR             R8, [R4,#0x18]
LDR             R7, [R4,#0x1C]
LDR             R9, [R4,#0x24]
BEQ             loc_46064
LDRB            R3, [R0]
CMP             R3, R10
BEQ             loc_46064
LDR             R3, [R4,#0x2C]
CMP             R3, #0x14
BLS             loc_460A0

loc_46014
ADD             R3, SP, #0x15C+s
B               loc_4602C

loc_4601C
MOV             R7, #0xFFFFFFFF
ADD             R3, SP, #0x15C+s
MOV             R9, R4
MOV             R8, R7

loc_4602C
MOVW            R12, #:lower16:(aApiMcastFromSS+0x14) ; "%s"
STR             R3, [SP,#0x15C+var_154] ; arg
MOVT            R12, #:upper16:(aApiMcastFromSS+0x14) ; "%s"
STR             R5, [SP,#0x15C+var_15C] ; int
MOV             R3, R9  ; int
MOV             R2, R7  ; int
MOV             R1, R8  ; int
MOV             R0, R6  ; int
STR             R12, [SP,#0x15C+format] ; format
BL              sub_49824

loc_46054
ADD             SP, SP, #0x15C
POP             {R4-R10,LR}
ADD             SP, SP, #4
BX              LR

loc_46064
LDR             R3, [R4,#0x14]
CMP             R5, #8
MOVEQ           R5, #6
CMN             R3, #2
BEQ             loc_46014
MOVW            R2, #:lower16:aSNearEndOfFile ; "%s near end of file"
ADD             R3, SP, #0x15C+s
MOVT            R2, #:upper16:aSNearEndOfFile ; "%s near end of file"
ADD             R0, SP, #0x15C+var_A4 ; s
MOV             R1, #0xA0 ; maxlen
BL              snprintf
MOV             R2, #0
ADD             R3, SP, #0x15C+var_A4
STRB            R2, [SP,#0x15C+var_5]
B               loc_4602C

loc_460A0
MOVW            R2, #:lower16:aSNearS ; "%s near '%s'"
STR             R0, [SP,#0x15C+var_15C]
ADD             R3, SP, #0x15C+s
ADD             R0, SP, #0x15C+var_A4 ; s
MOVT            R2, #:upper16:aSNearS ; "%s near '%s'"
MOV             R1, #0xA0 ; maxlen
BL              snprintf
ADD             R3, SP, #0x15C+var_A4
STRB            R10, [SP,#0x15C+var_5]
B               loc_4602C
; End of function sub_45F98




; void __fastcall sub_460C8(int)
sub_460C8
LDR             R3, [R0,#0x3C]
PUSH            {R4,LR}
MOV             R4, R0
CMP             R3, #0x100
BEQ             loc_460E8
ADD             R0, R4, #0x28 ; '('
POP             {R4,LR}
B               sub_47854

loc_460E8
LDR             R0, [R0,#0x40]
BL              sub_47764
MOV             R3, #0
ADD             R0, R4, #0x28 ; '('
STR             R3, [R4,#0x40]
STR             R3, [R4,#0x44]
POP             {R4,LR}
B               sub_47854
; End of function sub_460C8




; int __fastcall sub_46108(int *)
sub_46108

buf= -5

PUSH            {LR}
SUB             SP, SP, #0xC
MOV             R2, #1  ; nbytes
ADD             R1, SP, #0xC+buf ; buf
LDR             R0, [R0] ; fd
BL              read
CMP             R0, #1
LDRBEQ          R0, [SP,#0xC+buf]
MOVNE           R0, #0xFFFFFFFF
ADD             SP, SP, #0xC
POP             {PC}
; End of function sub_46108




; int __fastcall sub_46134(_BYTE *)
sub_46134
PUSH            {R4,LR}
LDRB            R3, [R0]
CMP             R3, #0x75 ; 'u'
MOVEQ           R3, R0
MOVEQ           R0, #0
ADDEQ           LR, R3, #4
BNE             loc_461A8

loc_46150
LDRB            R2, [R3,#1]!
MOV             R0, R0,LSL#4
SUB             R1, R2, #0x30 ; '0'
UXTB            R12, R1
CMP             R12, #9
ADDLS           R0, R1, R0
BLS             loc_46194
SUB             R1, R2, #0x61 ; 'a'
CMP             R1, #0x19
SUBLS           R2, R2, #0x57 ; 'W'
ADDLS           R0, R2, R0
BLS             loc_46194
SUB             R1, R2, #0x41 ; 'A'
CMP             R1, #0x19
BHI             loc_461A0
SUB             R2, R2, #0x37 ; '7'
ADD             R0, R2, R0

loc_46194
CMP             R3, LR
BNE             loc_46150
POP             {R4,PC}

loc_461A0
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_461A8
MOVW            R3, #:lower16:aDecodeUnicodeE ; "decode_unicode_escape"
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aStr0U ; "str[0] == 'u'"
MOVT            R3, #:upper16:aDecodeUnicodeE ; "decode_unicode_escape"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aStr0U ; "str[0] == 'u'"
MOVW            R2, #0x135 ; line
BL              __assert_fail
; End of function sub_46134




; _DWORD *__fastcall sub_461C8(_DWORD *result, int)
sub_461C8
ADD             R3, R1, #2
CMP             R3, #1
BXLS            LR
LDR             R3, [R0,#0x24]
CMP             R1, #0xA
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R5, R1
SUB             R3, R3, #1
STR             R3, [R0,#0x24]
BNE             loc_46248
LDR             R3, [R0,#0x18]
LDR             R2, [R0,#0x20]
SUB             R3, R3, #1
STR             R3, [R0,#0x18]
STR             R2, [R0,#0x1C]

loc_46208
LDR             R3, [R4,#0x10]
CMP             R3, #0
BEQ             loc_46264
SUB             R3, R3, #1
ADD             R2, R4, R3
STR             R3, [R4,#0x10]
LDRB            R3, [R2,#8]
CMP             R3, R5
POPEQ           {R4-R6,PC}
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aStreamBufferSt ; "stream->buffer[stream->buffer_pos] == c"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aStreamBufferSt ; "stream->buffer[stream->buffer_pos] == c"
LDR             R3, =aStreamUnget ; "stream_unget"
MOV             R2, #0xF0 ; line
BL              __assert_fail

loc_46248
UXTB            R0, R1
BL              sub_47CE4
CMP             R0, #0
LDRNE           R3, [R4,#0x1C]
SUBNE           R3, R3, #1
STRNE           R3, [R4,#0x1C]
B               loc_46208

loc_46264
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aStreamBufferPo ; "stream->buffer_pos > 0"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aStreamBufferPo ; "stream->buffer_pos > 0"
LDR             R3, =aStreamUnget ; "stream_unget"
MOV             R2, #0xEE ; line
BL              __assert_fail
; End of function sub_461C8

off_46280 DCD aStreamUnget ; "stream_unget"



; int __fastcall sub_46284(int, int)
sub_46284

arg= -8

LDR             R2, [R0,#0x10]
PUSH            {R4-R10,LR}
MOV             R4, R0
SUB             SP, SP, #8
ADD             R3, R0, R2
LDRB            R6, [R3,#8]
CMP             R6, #0
ADDNE           R1, R2, #1
BNE             loc_462EC
LDR             R3, [R0]
MOV             R7, R1
LDR             R0, [R0,#4]
BLX             R3
CMN             R0, #1
MOV             R5, R0
STREQ           R0, [R4,#0x14]
BEQ             loc_46320
SUB             R3, R0, #0x80
UXTB            R0, R0
CMP             R3, #0x7F
STR             R6, [R4,#0x10]
STRB            R0, [R4,#8]
MOVHI           R1, #1
MOVHI           R3, R4
STRBHI          R6, [R4,#9]
BLS             loc_46354

loc_462EC
STR             R1, [R4,#0x10]
LDRB            R5, [R3,#8]
LDR             R3, [R4,#0x24]
CMP             R5, #0xA
ADD             R3, R3, #1
STR             R3, [R4,#0x24]
BEQ             loc_4632C
MOV             R0, R5
BL              sub_47CE4
CMP             R0, #0
LDRNE           R3, [R4,#0x1C]
ADDNE           R3, R3, #1
STRNE           R3, [R4,#0x1C]

loc_46320
MOV             R0, R5
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_4632C
LDR             R3, [R4,#0x18]
MOV             R1, #0
LDR             R2, [R4,#0x1C]
MOV             R0, R5
STR             R1, [R4,#0x1C]
ADD             R3, R3, #1
STR             R3, [R4,#0x18]
STR             R2, [R4,#0x20]
ADD             SP, SP, #8
POP             {R4-R10,PC}

loc_46354
BL              sub_47CE4
SUBS            R8, R0, #0
BEQ             loc_463C0
CMP             R8, #1
ADDHI           R10, R4, #8
ADDHI           R6, R4, #9
ADDHI           R9, R10, R8
BLS             loc_463EC

loc_46374
LDR             R3, [R4]
LDR             R0, [R4,#4]
BLX             R3
STRB            R0, [R6],#1
CMP             R9, R6
BNE             loc_46374
MOV             R0, R10
MOV             R2, #0
MOV             R1, R8
BL              sub_47D50
CMP             R0, #0
BEQ             loc_463C0
MOV             R3, #0
ADD             R8, R4, R8
STRB            R3, [R8,#8]
LDR             R2, [R4,#0x10]
ADD             R1, R2, #1
ADD             R3, R4, R2
B               loc_462EC

loc_463C0
MOV             R2, #0xFFFFFFFE
MOVW            R3, #:lower16:aUnableToDecode ; "unable to decode byte 0x%x"
STR             R5, [SP,#8+arg] ; arg
MOV             R0, R7  ; int
MOV             R5, R2
STR             R2, [R4,#0x14]
MOV             R1, R4  ; int
MOVT            R3, #:upper16:aUnableToDecode ; "unable to decode byte 0x%x"
MOV             R2, #5  ; int
BL              sub_45F98
B               loc_46320

loc_463EC
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aCount2 ; "count >= 2"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aCount2 ; "count >= 2"
LDR             R3, =aStreamGet ; "stream_get"
MOV             R2, #0xBD ; line
BL              __assert_fail
; End of function sub_46284

off_46408 DCD aStreamGet ; "stream_get"



; int __fastcall sub_4640C(int, int)
sub_4640C
PUSH            {R4-R6,LR}
MOV             R5, R0
LDR             R4, [R0,#0x14]
CMP             R4, #0
BEQ             loc_46440

loc_46420
ADD             R3, R4, #2
CMP             R3, #1
BLS             loc_46438
ADD             R0, R5, #0x28 ; '('
UXTB            R1, R4
BL              fh_buffer_putc

loc_46438
MOV             R0, R4
POP             {R4-R6,PC}

loc_46440
BL              sub_46284
MOV             R4, R0
B               loc_46420
; End of function sub_4640C




; _DWORD *__fastcall sub_4644C(_DWORD *result, int)
sub_4644C
ADD             R12, R1, #2
CMP             R12, #1
BXLS            LR
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, R1
BL              sub_461C8
ADD             R0, R5, #0x28 ; '('
BL              sub_479A0
CMP             R0, R4
POPEQ           {R4-R6,PC}
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aCD ; "c == d"
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aCD ; "c == d"
LDR             R3, =aLexUngetUnsave ; "lex_unget_unsave"
MOVW            R2, #0x11A ; line
BL              __assert_fail
; End of function sub_4644C

off_46494 DCD aLexUngetUnsave ; "lex_unget_unsave"



; unsigned int __fastcall sub_46498(int, int)
sub_46498

arg= -0x1C
var_18= -0x18
var_14= -0x14
var_10= -0x10
endptr= -0xC

PUSH            {R4-R11,LR}
ADD             R7, R0, #0x28 ; '('
MOV             R5, R0
SUB             SP, SP, #0x1C
MOV             R0, R7
MOV             R6, R1
BL              sub_47880
LDR             R3, [R5,#0x3C]
CMP             R3, #0x100
BEQ             loc_4661C

loc_464C0
LDR             R4, [R5,#0x14]
CMP             R4, #0
BEQ             loc_465F4

loc_464CC
SUB             R3, R4, #9
CMP             R4, #0x20 ; ' '
CMPNE           R3, #1
MOVLS           R3, #1
MOVHI           R3, #0
BLS             loc_464C0
CMP             R4, #0xD
BEQ             loc_464C0
CMN             R4, #1
STREQ           R3, [R5,#0x3C]
MOVEQ           R4, R3
BEQ             loc_465E8
CMN             R4, #2
BEQ             loc_465E0
UXTB            R1, R4
MOV             R0, R7
BL              fh_buffer_putc
BIC             R3, R4, #0x20 ; ' '
SUB             R2, R3, #0x5B ; '['
BICS            R2, R2, #2
BEQ             loc_4660C
CMP             R4, #0x2C ; ','
CMPNE           R4, #0x3A ; ':'
MOVEQ           R2, #1
MOVNE           R2, #0
BEQ             loc_4660C
CMP             R4, #0x22 ; '"'
BEQ             loc_46634
SUB             R2, R4, #0x30 ; '0'
CMP             R4, #0x2D ; '-'
CMPNE           R2, #9
BLS             loc_466F0
SUB             R3, R3, #0x41 ; 'A'
CMP             R3, #0x19
BHI             loc_467A4

loc_46558
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
BIC             R3, R0, #0x20 ; ' '
SUB             R3, R3, #0x41 ; 'A'
CMP             R3, #0x19
BLS             loc_46558
MOV             R1, R0
MOV             R0, R5
BL              sub_4644C
MOV             R0, R7
BL              sub_47894
MOVW            R1, #:lower16:aTrue ; "true"
MOV             R4, R0
MOVT            R1, #:upper16:aTrue ; "true"
BL              strcmp
CMP             R0, #0
MOVWEQ          R4, #0x103
STREQ           R4, [R5,#0x3C]
BEQ             loc_465E8
MOVW            R1, #:lower16:(aInvalidParamet_0+0x24) ; "false"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:(aInvalidParamet_0+0x24) ; "false"
BL              strcmp
CMP             R0, #0
BEQ             loc_46608
MOVW            R1, #:lower16:aNull_0 ; "null"
MOV             R0, R4  ; s1
MOVT            R1, #:upper16:aNull_0 ; "null"
BL              strcmp
CMP             R0, #0
MOVWEQ          R4, #0x105
STREQ           R4, [R5,#0x3C]
BEQ             loc_465E8

loc_465E0
MOV             R4, #0xFFFFFFFF
STR             R4, [R5,#0x3C]

loc_465E8
MOV             R0, R4
ADD             SP, SP, #0x1C
POP             {R4-R11,PC}

loc_465F4
MOV             R1, R6
MOV             R0, R5
BL              sub_46284
MOV             R4, R0
B               loc_464CC

loc_46608
MOV             R4, #0x104

loc_4660C
MOV             R0, R4
STR             R4, [R5,#0x3C]
ADD             SP, SP, #0x1C
POP             {R4-R11,PC} ; arg

loc_4661C
LDR             R0, [R5,#0x40]
BL              sub_47764
MOV             R3, #0
STR             R3, [R5,#0x40]
STR             R3, [R5,#0x44]
B               loc_464C0

loc_46634
MOV             R3, #0xFFFFFFFF
STR             R2, [R5,#0x40]
STR             R3, [R5,#0x3C]

loc_46640
MOV             R1, R6
MOV             R0, R5

loc_46648
BL              sub_4640C
MOV             R4, R0

loc_46650
CMP             R4, #0x22 ; '"'
BEQ             loc_4694C
CMN             R4, #2
BEQ             loc_466D4
CMN             R4, #1
BEQ             loc_46B2C
CMP             R4, #0x1F
BLS             loc_46918
CMP             R4, #0x5C ; '\'
MOV             R1, R6
MOV             R0, R5
BNE             loc_46648
BL              sub_4640C
CMP             R0, #0x75 ; 'u'
BEQ             loc_46880
BIC             R3, R0, #0x40 ; '@'
CMP             R0, #0x5C ; '\'
CMPNE           R3, #0x22 ; '"'
BEQ             loc_46640
CMP             R0, #0x2F ; '/'
BEQ             loc_46640
BIC             R3, R0, #8
CMP             R3, #0x66 ; 'f'
BEQ             loc_46640
SUB             R0, R0, #0x72 ; 'r'
BICS            R3, R0, #2
BEQ             loc_46640

loc_466BC
MOVW            R3, #:lower16:aInvalidEscape ; "invalid escape"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aInvalidEscape ; "invalid escape"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_45F98

loc_466D4
LDR             R0, [R5,#0x40]
BL              sub_47764
MOV             R3, #0
LDR             R4, [R5,#0x3C]
STR             R3, [R5,#0x40]
STR             R3, [R5,#0x44]
B               loc_465E8

loc_466F0
CMP             R4, #0x2D ; '-'
MOV             R3, #0xFFFFFFFF
STR             R3, [R5,#0x3C]
BEQ             loc_46AA4
CMP             R4, #0x30 ; '0'
BEQ             loc_46A78

loc_46708
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_46708

loc_46720
LDR             R3, [R5,#0x34]
ANDS            R8, R3, #8
BNE             loc_467EC
CMP             R0, #0x2E ; '.'
CMPNE           R0, #0x45 ; 'E'
BEQ             loc_467EC
CMP             R0, #0x65 ; 'e'
BEQ             loc_46834
MOV             R1, R0
MOV             R0, R5
BL              sub_4644C
MOV             R0, R7
BL              sub_47894
MOV             R4, R0
BL              __errno_location
MOV             R7, R0
MOV             R2, #0xA ; base
MOV             R0, R4  ; nptr
STR             R8, [R7]
ADD             R1, SP, #0x1C+endptr ; endptr
BL              strtoll
LDR             R3, [R7]
CMP             R3, #0x22 ; '"'
BEQ             loc_46C34
LDR             R2, [R5,#0x2C]
LDR             R3, [SP,#0x1C+endptr]
ADD             R4, R4, R2
CMP             R3, R4
BNE             loc_46C18
MOVW            R4, #0x101
STRD            R0, R1, [R5,#0x40]
STR             R4, [R5,#0x3C]
B               loc_465E8

loc_467A4
LDR             R3, [R5,#0x10]
ADD             R3, R5, R3
LDRB            R1, [R3,#8]
CMP             R1, #0
BEQ             loc_465E0

loc_467B8
MOV             R0, R7
BL              fh_buffer_putc
LDR             R3, [R5,#0x10]
LDR             R2, [R5,#0x24]
ADD             R3, R3, #1
ADD             R1, R5, R3
ADD             R2, R2, #1
STR             R3, [R5,#0x10]
STR             R2, [R5,#0x24]
LDRB            R1, [R1,#8]
CMP             R1, #0
BNE             loc_467B8
B               loc_465E0

loc_467EC
CMP             R0, #0x2E ; '.'
BEQ             loc_468C8

loc_467F4
BIC             R3, R0, #0x20 ; ' '
CMP             R3, #0x45 ; 'E'
BEQ             loc_46834

loc_46800
MOV             R1, R0
MOV             R0, R5
BL              sub_4644C
MOV             R0, R7
ADD             R1, SP, #0x1C+endptr
BL              sub_479C8
CMP             R0, #0
BNE             loc_46BCC
LDRD            R2, R3, [SP,#0x1C+endptr]
MOVW            R4, #0x102
STR             R4, [R5,#0x3C]
STRD            R2, R3, [R5,#0x40]
B               loc_465E8

loc_46834
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
SUB             R3, R0, #0x2B ; '+'
BICS            R3, R3, #2
BNE             loc_46858
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C

loc_46858
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BHI             loc_46A90

loc_46864
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_46864
B               loc_46800

loc_46880
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
MOV             R8, #4
MOV             R4, R0

loc_46894
BIC             R3, R4, #0x20 ; ' '
SUB             R4, R4, #0x30 ; '0'
SUB             R3, R3, #0x41 ; 'A'
CMP             R3, #5
CMPHI           R4, #9
BHI             loc_466BC
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
SUBS            R8, R8, #1
MOV             R4, R0
BNE             loc_46894
B               loc_46650

loc_468C8
LDR             R1, [R5,#0x14]
CMP             R1, #0
BNE             loc_468E4
MOV             R1, R6
MOV             R0, R5
BL              sub_46284
MOV             R1, R0

loc_468E4
SUB             R3, R1, #0x30 ; '0'
CMP             R3, #9
BHI             loc_46BBC
UXTB            R1, R1
MOV             R0, R7
BL              fh_buffer_putc

loc_468FC
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_468FC
B               loc_467F4

loc_46918
MOV             R1, R4
MOV             R0, R5
BL              sub_4644C
CMP             R4, #0xA
BEQ             loc_46B48
MOVW            R3, #:lower16:aControlCharact ; "control character 0x%x"
STR             R4, [SP,#0x1C+arg] ; arg
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aControlCharact ; "control character 0x%x"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_45F98
B               loc_466D4

loc_4694C
LDR             R0, [R5,#0x2C]
ADD             R0, R0, #1
BL              sub_4774C
SUBS            R8, R0, #0
BEQ             loc_466D4
MOV             R0, R7
STR             R8, [R5,#0x40]
BL              sub_47894
MOV             R10, #8
ADD             R4, R0, #1
MOV             R9, #0xA
MOV             R7, #0xD

loc_4697C
LDRB            R3, [R4]
CMP             R3, #0x22 ; '"'
BEQ             loc_46B64
CMP             R3, #0x5C ; '\'
ADD             R0, R4, #1
STRBNE          R3, [R8]
MOVNE           R4, R0
ADDNE           R8, R8, #1
BNE             loc_4697C
LDRB            R3, [R4,#1]
CMP             R3, #0x75 ; 'u'
BEQ             loc_469E8
CMP             R3, #0x62 ; 'b'
BEQ             loc_46B24
BLS             loc_46AF0
CMP             R3, #0x6E ; 'n'
BEQ             loc_46AE8
BLS             loc_46AD4
CMP             R3, #0x72 ; 'r'
BEQ             loc_46ACC
CMP             R3, #0x74 ; 't'
BNE             loc_46B08
MOV             R3, #9
STRB            R3, [R8]

loc_469DC
ADD             R8, R8, #1
ADD             R4, R4, #2
B               loc_4697C

loc_469E8
BL              sub_46134
SUBS            R11, R0, #0
BLT             loc_46B9C
SUB             R1, R11, #0xD800
ADD             R2, R4, #6
CMP             R1, #0x400
STR             R1, [SP,#0x1C+var_10]
BCS             loc_46B88
LDRB            R3, [R4,#6]
STR             R2, [SP,#0x1C+var_14]
CMP             R3, #0x5C ; '\'
BNE             loc_46BF8
LDRB            R3, [R4,#7]
CMP             R3, #0x75 ; 'u'
BNE             loc_46BF8
ADD             R0, R4, #7
BL              sub_46134
CMP             R0, #0
LDR             R2, [SP,#0x1C+var_14]
LDR             R1, [SP,#0x1C+var_10]
BLT             loc_46BEC
SUB             R3, R0, #0xDC00
ADD             R4, R4, #0xC
CMP             R3, #0x400
BCS             loc_46C84
ADD             R3, R3, R1,LSL#10
ADD             R11, R3, #0x10000

loc_46A54
MOV             R0, R11
ADD             R2, SP, #0x1C+endptr
MOV             R1, R8
BL              sub_47BF8
CMP             R0, #0
BNE             loc_46C68
LDR             R3, [SP,#0x1C+endptr]
ADD             R8, R8, R3
B               loc_4697C

loc_46A78
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BHI             loc_46720

loc_46A90
MOV             R1, R0

loc_46A94
MOV             R0, R5
BL              sub_4644C
LDR             R4, [R5,#0x3C]
B               loc_465E8

loc_46AA4
MOV             R1, R6
MOV             R0, R5
BL              sub_4640C
CMP             R0, #0x30 ; '0'
MOV             R1, R0
BEQ             loc_46A78
SUB             R3, R0, #0x30 ; '0'
CMP             R3, #9
BLS             loc_46708
B               loc_46A94

loc_46ACC
STRB            R7, [R8]
B               loc_469DC

loc_46AD4
CMP             R3, #0x66 ; 'f'
BNE             loc_46B08
MOV             R3, #0xC

loc_46AE0
STRB            R3, [R8]
B               loc_469DC

loc_46AE8
STRB            R9, [R8]
B               loc_469DC

loc_46AF0
CMP             R3, #0x2F ; '/'
BEQ             loc_46AE0
CMP             R3, #0x5C ; '\'
BEQ             loc_46AE0
CMP             R3, #0x22 ; '"'
BEQ             loc_46AE0

loc_46B08
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:word_55AAC
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:word_55AAC ; assertion
LDR             R3, =aLexScanString ; "lex_scan_string"
MOV             R2, #0x1D0 ; line
BL              __assert_fail

loc_46B24
STRB            R10, [R8]
B               loc_469DC

loc_46B2C
MOVW            R3, #:lower16:aPrematureEndOf ; "premature end of input"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aPrematureEndOf ; "premature end of input"
MOV             R2, #6  ; int
MOV             R1, R5  ; int
BL              sub_45F98
B               loc_466D4

loc_46B48
MOVW            R3, #:lower16:aUnexpectedNewl ; "unexpected newline"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aUnexpectedNewl ; "unexpected newline"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_45F98
B               loc_466D4

loc_46B64
MOV             R2, #0
MOV             R3, #0x100
STRB            R2, [R8]
MOV             R4, R3
LDR             R2, [R5,#0x40]
STR             R3, [R5,#0x3C]
SUB             R8, R8, R2
STR             R8, [R5,#0x44]
B               loc_465E8

loc_46B88
SUB             R3, R11, #0xDC00
CMP             R3, #0x400
BCC             loc_46BF8
MOV             R4, R2
B               loc_46A54

loc_46B9C
MOVW            R3, #:lower16:aInvalidUnicode ; "invalid Unicode escape '%.6s'"
STR             R4, [SP,#0x1C+arg] ; arg

loc_46BA4               ; int
MOV             R0, R6
MOVT            R3, #:upper16:aInvalidUnicode ; "invalid Unicode escape '%.6s'"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_45F98
B               loc_466D4

loc_46BBC
MOV             R0, R5
BL              sub_461C8
LDR             R4, [R5,#0x3C]
B               loc_465E8

loc_46BCC
MOVW            R3, #:lower16:aRealNumberOver ; "real number overflow"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aRealNumberOver ; "real number overflow"
MOV             R2, #0xF ; int
MOV             R1, R5  ; int
BL              sub_45F98
LDR             R4, [R5,#0x3C]
B               loc_465E8

loc_46BEC
MOVW            R3, #0x66AC
STR             R2, [SP,#0x1C+arg]
B               loc_46BA4

loc_46BF8
MOVW            R3, #:lower16:aInvalidUnicode_0 ; "invalid Unicode '\\u%04X'"
STR             R11, [SP,#0x1C+arg] ; arg
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aInvalidUnicode_0 ; "invalid Unicode '\\u%04X'"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_45F98
B               loc_466D4

loc_46C18
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:aEndSavedTextLe ; "end == saved_text + lex->saved_text.len"...
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:aEndSavedTextLe ; "end == saved_text + lex->saved_text.len"...
LDR             R3, =aLexScanNumber ; "lex_scan_number"
MOVW            R2, #0x21D ; line
BL              __assert_fail

loc_46C34
CMP             R0, #0
MOV             R2, #0xF ; int
SBCS            R3, R1, #0
MOV             R1, R5  ; int
MOVWLT          R3, #0x6708
MOVWGE          R3, #0x6724
MOVLT           R0, R6
MOVTLT          R3, #5
MOVGE           R0, R6  ; int
MOVTGE          R3, #5  ; int
BL              sub_45F98
LDR             R4, [R5,#0x3C]
B               loc_465E8

loc_46C68
MOVW            R1, #:lower16:aLoadC ; "load.c"
MOVW            R0, #:lower16:word_55AAC
MOVT            R1, #:upper16:aLoadC ; "load.c"
MOVT            R0, #:upper16:word_55AAC ; assertion
LDR             R3, =aLexScanString ; "lex_scan_string"
MOV             R2, #0x1C4 ; line
BL              __assert_fail

loc_46C84
MOVW            R3, #:lower16:aInvalidUnicode_1 ; "invalid Unicode '\\u%04X\\u%04X'"
STR             R0, [SP,#0x1C+var_18]
STR             R11, [SP,#0x1C+arg] ; arg
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aInvalidUnicode_1 ; "invalid Unicode '\\u%04X\\u%04X'"
MOV             R2, #8  ; int
MOV             R1, R5  ; int
BL              sub_45F98
B               loc_466D4
; End of function sub_46498

off_46CA8 DCD aLexScanString ; "lex_scan_string"
off_46CAC DCD aLexScanNumber ; "lex_scan_number"



; _DWORD *__fastcall sub_46CB0(int, int, int)
sub_46CB0
LDR             R3, [R0,#0x38]
PUSH            {R4-R10,LR} ; arg
MOV             R4, R0
MOV             R5, R2
ADD             R3, R3, #1
CMP             R3, #0x800
STR             R3, [R0,#0x38]
BHI             loc_47054
LDR             R3, [R0,#0x3C]
MOVW            R2, #0x101
CMP             R3, R2
BEQ             loc_46F40
BLE             loc_46D2C
MOVW            R2, #0x103
CMP             R3, R2
BEQ             loc_47048
BLT             loc_47038
CMP             R3, #0x104
BEQ             loc_46D94
MOVW            R2, #0x105
CMP             R3, R2
BNE             loc_47018
BL              sub_48A28
MOV             R6, R0

loc_46D10
CMP             R6, #0
BEQ             loc_46F34

loc_46D18
LDR             R3, [R4,#0x38]
SUB             R3, R3, #1
STR             R3, [R4,#0x38]

loc_46D24
MOV             R0, R6
POP             {R4-R10,PC}

loc_46D2C
CMP             R3, #0x5B ; '['
MOV             R8, R1
BEQ             loc_46F50
BLE             loc_46F0C
CMP             R3, #0x7B ; '{'
BEQ             loc_46DA0
CMP             R3, #0x100
BNE             loc_47018
ANDS            R8, R1, #0x10
LDR             R7, [R0,#0x40]
LDR             R9, [R0,#0x44]
BNE             loc_46D74
MOV             R2, R9  ; n
MOV             R1, R8  ; c
MOV             R0, R7  ; s
BL              memchr
CMP             R0, #0
BNE             loc_47110

loc_46D74
MOV             R1, R9
MOV             R0, R7
BL              sub_485C0
MOV             R3, #0
MOV             R6, R0
STR             R3, [R4,#0x40]
STR             R3, [R4,#0x44]
B               loc_46D10

loc_46D94
BL              sub_48A1C
MOV             R6, R0
B               loc_46D10

loc_46DA0
BL              sub_48078
SUBS            R6, R0, #0
BEQ             loc_46F34
MOV             R1, R5
MOV             R0, R4
BL              sub_46498
LDR             R3, [R4,#0x3C]
CMP             R3, #0x7D ; '}'
BEQ             loc_46D18
CMP             R3, #0x100
BNE             loc_47098
LDR             R7, [R4,#0x40]
MOV             R3, #0
LDR             R2, [R4,#0x44]
STR             R3, [R4,#0x40]
CMP             R7, R3
STR             R3, [R4,#0x44]
BEQ             loc_46F34
AND             R10, R8, #1
B               loc_46EA4

loc_46DF0
CMP             R10, #0
BEQ             loc_46E04
BL              sub_480FC
CMP             R0, #0
BNE             loc_47130

loc_46E04
MOV             R1, R5
MOV             R0, R4
BL              sub_46498
LDR             R3, [R4,#0x3C]
MOV             R1, R5
MOV             R0, R4
CMP             R3, #0x3A ; ':'
BNE             loc_470B4
BL              sub_46498
MOV             R2, R5
MOV             R1, R8
MOV             R0, R4
BL              sub_46CB0
SUBS            R2, R0, #0
MOV             R1, R7
MOV             R0, R6
BEQ             loc_470D8
BL              sub_48CF4
SUBS            R9, R0, #0
MOV             R0, R7
BNE             loc_470E4
BL              sub_47764
MOV             R1, R5
MOV             R0, R4
BL              sub_46498
LDR             R3, [R4,#0x3C]
MOV             R1, R5
MOV             R0, R4
CMP             R3, #0x2C ; ','
BNE             loc_470EC
BL              sub_46498
LDR             R3, [R4,#0x3C]
CMP             R3, #0x100
BNE             loc_47098
LDR             R7, [R4,#0x40]
LDR             R2, [R4,#0x44] ; n
STR             R9, [R4,#0x40]
CMP             R7, #0
STR             R9, [R4,#0x44]
BEQ             loc_46F34

loc_46EA4               ; c
MOV             R1, #0
MOV             R0, R7  ; s
BL              memchr
CMP             R0, #0
MOV             R1, R7
MOV             R0, R6
BEQ             loc_46DF0
MOV             R0, R7
BL              sub_47764
MOVW            R3, #:lower16:aNulByteInObjec ; "NUL byte in object key not supported"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aNulByteInObjec ; "NUL byte in object key not supported"
MOV             R2, #0xD ; int
BL              sub_45F98

loc_46EE0
LDR             R3, [R6,#4]
CMN             R3, #1
BEQ             loc_46F34
ADD             R3, R6, #4
DMB             ISH

loc_46EF4
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_47000
B               loc_46EF4

loc_46F0C
CMN             R3, #1
BNE             loc_47018
MOVW            R3, #:lower16:aInvalidToken ; "invalid token"
MOV             R1, R0  ; int
MOVT            R3, #:upper16:aInvalidToken ; "invalid token"
MOV             R0, R5  ; int
MOV             R2, #8  ; int
MOV             R6, #0
BL              sub_45F98
B               loc_46D24

loc_46F34
MOV             R6, #0
MOV             R0, R6
POP             {R4-R10,PC}

loc_46F40
LDRD            R0, R1, [R0,#0x40]
BL              sub_48858
MOV             R6, R0
B               loc_46D10

loc_46F50
BL              sub_48408
SUBS            R6, R0, #0
BEQ             loc_46F34
MOV             R1, R5
MOV             R0, R4
BL              sub_46498
LDR             R3, [R4,#0x3C]
CMP             R3, #0x5D ; ']'
BEQ             loc_46D18
CMP             R3, #0
BNE             loc_46FBC
B               loc_4707C

loc_46F80
BL              sub_4935C
CMP             R0, #0
MOV             R1, R5
MOV             R0, R4
BNE             loc_46FD8
BL              sub_46498
LDR             R3, [R4,#0x3C]
MOV             R1, R5
MOV             R0, R4
CMP             R3, #0x2C ; ','
BNE             loc_47074
BL              sub_46498
LDR             R3, [R4,#0x3C]
CMP             R3, #0
BEQ             loc_4707C

loc_46FBC
MOV             R1, R8
MOV             R2, R5
MOV             R0, R4
BL              sub_46CB0
SUBS            R1, R0, #0
MOV             R0, R6
BNE             loc_46F80

loc_46FD8
LDR             R3, [R6,#4]
CMN             R3, #1
BEQ             loc_46F34
ADD             R3, R6, #4
DMB             ISH

loc_46FEC
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_46FEC

loc_47000
CMP             R2, #0
BNE             loc_46F34
MOV             R0, R6
MOV             R6, R2
BL              sub_48A34
B               loc_46D24

loc_47018
MOVW            R3, #:lower16:aUnexpectedToke ; "unexpected token"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aUnexpectedToke ; "unexpected token"
MOV             R2, #8  ; int
MOV             R6, #0
BL              sub_45F98
B               loc_46D24

loc_47038
VLDR            D0, [R0,#0x40]
BL              sub_488DC
MOV             R6, R0
B               loc_46D10

loc_47048
BL              sub_48A10
MOV             R6, R0
B               loc_46D10

loc_47054
MOVW            R3, #:lower16:aMaximumParsing ; "maximum parsing depth reached"
MOV             R1, R0  ; int
MOVT            R3, #:upper16:aMaximumParsing ; "maximum parsing depth reached"
MOV             R0, R2  ; int
MOV             R2, #2  ; int
MOV             R6, #0
BL              sub_45F98
B               loc_46D24

loc_47074
CMP             R3, #0x5D ; ']'
BEQ             loc_46D18

loc_4707C
MOVW            R3, #:lower16:aExpected ; "']' expected"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aExpected ; "']' expected"
MOV             R2, #8  ; int
BL              sub_45F98
B               loc_46FD8

loc_47098
MOVW            R3, #:lower16:aStringOrExpect ; "string or '}' expected"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aStringOrExpect ; "string or '}' expected"
MOV             R2, #8  ; int
BL              sub_45F98
B               loc_46EE0

loc_470B4
MOV             R0, R7
BL              sub_47764
MOVW            R3, #:lower16:aExpected_0 ; "':' expected"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aExpected_0 ; "':' expected"
MOV             R2, #8  ; int
BL              sub_45F98
B               loc_46EE0

loc_470D8
MOV             R0, R7
BL              sub_47764
B               loc_46EE0

loc_470E4
BL              sub_47764
B               loc_46EE0

loc_470EC
CMP             R3, #0x7D ; '}'
BEQ             loc_46D18
MOVW            R3, #:lower16:aExpected_1 ; "'}' expected"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aExpected_1 ; "'}' expected"
MOV             R2, #8  ; int
BL              sub_45F98
B               loc_46EE0

loc_47110
MOVW            R3, #:lower16:aU0000IsNotAllo ; "\\u0000 is not allowed without JSON_ALL"...
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aU0000IsNotAllo ; "\\u0000 is not allowed without JSON_ALL"...
MOV             R2, #0xB ; int
MOV             R6, R8
BL              sub_45F98
B               loc_46D24

loc_47130
MOV             R0, R7
BL              sub_47764
MOVW            R3, #:lower16:aDuplicateObjec ; "duplicate object key"
MOV             R1, R4  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aDuplicateObjec ; "duplicate object key"
MOV             R2, #0xE ; int
BL              sub_45F98
B               loc_46EE0
; End of function sub_46CB0




; _DWORD *__fastcall sub_47154(_DWORD *, int, int)
sub_47154
MOV             R3, #0
PUSH            {R4-R8,LR} ; arg
MOV             R5, R1
STR             R3, [R0,#0x38]
MOV             R1, R2
MOV             R6, R2
MOV             R4, R0
BL              sub_46498
ANDS            R7, R5, #4
BNE             loc_4718C
LDR             R3, [R4,#0x3C]
BIC             R3, R3, #0x20 ; ' '
CMP             R3, #0x5B ; '['
BNE             loc_4723C

loc_4718C
MOV             R2, R6
MOV             R1, R5
MOV             R0, R4
BL              sub_46CB0
SUBS            R7, R0, #0
BEQ             loc_471FC
TST             R5, #2
BEQ             loc_471C0

loc_471AC
CMP             R6, #0
LDRNE           R3, [R4,#0x24]
STRNE           R3, [R6,#8]

loc_471B8
MOV             R0, R7
POP             {R4-R8,PC}

loc_471C0
MOV             R1, R6
MOV             R0, R4
BL              sub_46498
LDR             R3, [R4,#0x3C]
CMP             R3, #0
BEQ             loc_471AC
MOVW            R3, #:lower16:aEndOfFileExpec ; "end of file expected"
MOV             R1, R4  ; int
MOVT            R3, #:upper16:aEndOfFileExpec ; "end of file expected"
MOV             R0, R6  ; int
MOV             R2, #7  ; int
BL              sub_45F98
LDR             R3, [R7,#4]
CMN             R3, #1
BNE             loc_47208

loc_471FC
MOV             R7, #0
MOV             R0, R7
POP             {R4-R8,PC}

loc_47208
ADD             R3, R7, #4
DMB             ISH

loc_47210
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_47210
CMP             R2, #0
BNE             loc_471FC
MOV             R0, R7
MOV             R7, R2
BL              sub_48A34
B               loc_471B8

loc_4723C
MOVW            R3, #:lower16:aOrExpected ; "'[' or '{' expected"
MOV             R1, R4  ; int
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aOrExpected ; "'[' or '{' expected"
MOV             R2, #8  ; int
BL              sub_45F98
B               loc_471B8
; End of function sub_47154




; _DWORD *__fastcall sub_47258(int, int, char *)
sub_47258

var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_10= -0x10

PUSH            {R4-R7,LR}
MOV             R7, R1
MOVW            R1, #:lower16:aString ; "<string>"
MOV             R5, R0
SUB             SP, SP, #0x54
MOVT            R1, #:upper16:aString ; "<string>"
MOV             R0, R2
MOV             R6, R2
BL              sub_497D4
CMP             R5, #0
BEQ             loc_47300
MOVW            R3, #:lower16:sub_45EF4
MOV             R4, #0
MOVT            R3, #:upper16:sub_45EF4
MOV             R2, #1
ADD             R0, SP, #0x54+var_24
STR             R5, [SP,#0x54+var_54]
STR             R3, [SP,#0x54+var_4C]
STR             R4, [SP,#0x54+var_50]
STRB            R4, [SP,#0x54+var_44]
STR             R4, [SP,#0x54+var_3C]
STR             R4, [SP,#0x54+var_38]
STR             R4, [SP,#0x54+var_30]
STR             R4, [SP,#0x54+var_28]
STR             SP, [SP,#0x54+var_48]
STR             R2, [SP,#0x54+var_34]
BL              sub_47820
CMP             R0, R4
BNE             loc_472F4
MOV             R3, #0xFFFFFFFF
MOV             R2, R6
MOV             R1, R7
ADD             R0, SP, #0x54+var_4C
STR             R7, [SP,#0x54+var_18]
STR             R3, [SP,#0x54+var_10]
BL              sub_47154
MOV             R4, R0
ADD             R0, SP, #0x54+var_4C
BL              sub_460C8

loc_472F4
MOV             R0, R4
ADD             SP, SP, #0x54 ; 'T'
POP             {R4-R7,PC} ; arg

loc_47300
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R1, R5  ; int
MOV             R4, R5
BL              sub_45F98
B               loc_472F4
; End of function sub_47258




; _DWORD *__fastcall sub_47320(int, int, int, char *)
sub_47320

var_54= -0x54
var_50= -0x50
var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_24= -0x24
var_20= -0x20
var_14= -0x14
var_C= -0xC

PUSH            {R4-R8,LR}
MOV             R8, R1
MOVW            R1, #:lower16:aBuffer ; "<buffer>"
MOV             R5, R0
SUB             SP, SP, #0x58
MOVT            R1, #:upper16:aBuffer ; "<buffer>"
MOV             R0, R3
MOV             R6, R3
MOV             R7, R2
BL              sub_497D4
CMP             R5, #0
BEQ             loc_473D4
MOVW            R3, #:lower16:sub_45F18
MOV             R4, #0
MOVT            R3, #:upper16:sub_45F18
ADD             R1, SP, #0x58+var_54
MOV             R2, #1
ADD             R0, SP, #0x58+var_20
STR             R5, [SP,#0x58+var_54]
STR             R8, [SP,#0x58+var_50]
STR             R3, [SP,#0x58+var_48]
STR             R4, [SP,#0x58+var_4C]
STRB            R4, [SP,#0x58+var_40]
STR             R4, [SP,#0x58+var_38]
STR             R4, [SP,#0x58+var_34]
STR             R4, [SP,#0x58+var_2C]
STR             R4, [SP,#0x58+var_24]
STR             R1, [SP,#0x58+var_44]
STR             R2, [SP,#0x58+var_30]
BL              sub_47820
CMP             R0, R4
BNE             loc_473C8
MOV             R3, #0xFFFFFFFF
MOV             R2, R6
MOV             R1, R7
ADD             R0, SP, #0x58+var_48
STR             R7, [SP,#0x58+var_14]
STR             R3, [SP,#0x58+var_C]
BL              sub_47154
MOV             R4, R0
ADD             R0, SP, #0x58+var_48
BL              sub_460C8

loc_473C8
MOV             R0, R4
ADD             SP, SP, #0x58 ; 'X'
POP             {R4-R8,PC} ; arg

loc_473D4
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R1, R5  ; int
MOV             R4, R5
BL              sub_45F98
B               loc_473C8
; End of function sub_47320




; _DWORD *__fastcall sub_473F4(int, int, char *)
sub_473F4

var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_3C= -0x3C
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_28= -0x28
var_24= -0x24
var_18= -0x18
var_10= -0x10

PUSH            {R4-R7,LR}
MOV             LR, #stdin
MOVW            R12, #:lower16:aStdin_0 ; "<stdin>"
MOVW            R3, #:lower16:aStream ; "<stream>"
MOVT            R12, #:upper16:aStdin_0 ; "<stdin>"
LDR             LR, [LR]
MOVT            R3, #:upper16:aStream ; "<stream>"
MOV             R7, R1
MOV             R5, R0
SUB             SP, SP, #0x4C
MOV             R6, R2
CMP             LR, R0
MOV             R0, R2
MOVEQ           R1, R12
MOVNE           R1, R3
BL              sub_497D4
CMP             R5, #0
BEQ             loc_474B4
MOVW            R3, #:lower16:fgetc
MOV             R4, #0
MOVT            R3, #:upper16:fgetc
MOV             R2, #1
ADD             R0, SP, #0x4C+var_24
STR             R5, [SP,#0x4C+var_48]
STR             R3, [SP,#0x4C+var_4C]
STRB            R4, [SP,#0x4C+var_44]
STR             R4, [SP,#0x4C+var_3C]
STR             R4, [SP,#0x4C+var_38]
STR             R4, [SP,#0x4C+var_30]
STR             R4, [SP,#0x4C+var_28]
STR             R2, [SP,#0x4C+var_34]
BL              sub_47820
CMP             R0, R4
BNE             loc_474A8
MOV             R3, #0xFFFFFFFF
MOV             R2, R6
MOV             R1, R7
MOV             R0, SP
STR             R7, [SP,#0x4C+var_18]
STR             R3, [SP,#0x4C+var_10]
BL              sub_47154
MOV             R4, R0
MOV             R0, SP
BL              sub_460C8

loc_474A8
MOV             R0, R4
ADD             SP, SP, #0x4C ; 'L'
POP             {R4-R7,PC} ; arg

loc_474B4
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R6  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R1, R5  ; int
MOV             R4, R5
BL              sub_45F98
B               loc_474A8
; End of function sub_473F4




; _DWORD *__fastcall sub_474D4(int, int, char *)
sub_474D4

var_4C= -0x4C
var_48= -0x48
var_44= -0x44
var_40= -0x40
var_38= -0x38
var_34= -0x34
var_30= -0x30
var_2C= -0x2C
var_24= -0x24
var_20= -0x20
var_14= -0x14
var_C= -0xC

MOVW            R12, #:lower16:aStdin_0 ; "<stdin>"
MOVW            R3, #:lower16:aStream ; "<stream>"
PUSH            {R4-R6,LR}
CMP             R0, #0
SUB             SP, SP, #0x50
MOVT            R3, #:upper16:aStream ; "<stream>"
MOVT            R12, #:upper16:aStdin_0 ; "<stdin>"
MOV             R6, R1
STR             R0, [SP,#0x50+var_4C]
MOVNE           R1, R3
MOVEQ           R1, R12
MOV             R0, R2
MOV             R5, R2
BL              sub_497D4
LDR             R3, [SP,#0x50+var_4C]
CMP             R3, #0
BLT             loc_47590
MOVW            R3, #:lower16:sub_46108
MOV             R4, #0
ADD             R1, SP, #0x50+var_4C
MOVT            R3, #:upper16:sub_46108
MOV             R2, #1
ADD             R0, SP, #0x50+var_20
STR             R3, [SP,#0x50+var_48]
STR             R1, [SP,#0x50+var_44]
STRB            R4, [SP,#0x50+var_40]
STR             R4, [SP,#0x50+var_38]
STR             R4, [SP,#0x50+var_34]
STR             R4, [SP,#0x50+var_2C]
STR             R4, [SP,#0x50+var_24]
STR             R2, [SP,#0x50+var_30]
BL              sub_47820
CMP             R0, R4
BNE             loc_47584
MOV             R3, #0xFFFFFFFF
MOV             R2, R5
MOV             R1, R6
ADD             R0, SP, #0x50+var_48
STR             R6, [SP,#0x50+var_14]
STR             R3, [SP,#0x50+var_C]
BL              sub_47154
MOV             R4, R0
ADD             R0, SP, #0x50+var_48
BL              sub_460C8

loc_47584
MOV             R0, R4
ADD             SP, SP, #0x50 ; 'P'
POP             {R4-R6,PC} ; arg

loc_47590
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R1, #0  ; int
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R4, R1
BL              sub_45F98
B               loc_47584
; End of function sub_474D4




; _DWORD *__fastcall sub_475B0(char *, int, char *)
sub_475B0

arg= -0xC
var_8= -8

PUSH            {R4-R7,LR}
MOV             R4, R0
SUB             SP, SP, #0xC
MOV             R6, R1
MOV             R0, R2
MOV             R1, R4
MOV             R5, R2
BL              sub_497D4
CMP             R4, #0
BEQ             loc_47614
MOVW            R1, #:lower16:aRb ; "rb"
MOV             R0, R4
MOVT            R1, #:upper16:aRb ; "rb"
BL              fopen64
SUBS            R7, R0, #0
BEQ             loc_47634
MOV             R1, R6
MOV             R2, R5
BL              sub_473F4
MOV             R6, R0
MOV             R0, R7  ; stream
BL              fclose

loc_47608
MOV             R0, R6
ADD             SP, SP, #0xC
POP             {R4-R7,PC} ; arg

loc_47614
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4  ; int
MOV             R1, R4  ; int
MOV             R6, R4
BL              sub_45F98
B               loc_47608

loc_47634
BL              __errno_location
LDR             R0, [R0] ; errnum
MOV             R6, R7
BL              strerror
MOVW            R3, #:lower16:aUnableToOpenSS ; "unable to open %s: %s"
STR             R0, [SP,#0xC+var_8]
STR             R4, [SP,#0xC+arg] ; arg
MOV             R0, R5  ; int
MOVT            R3, #:upper16:aUnableToOpenSS ; "unable to open %s: %s"
MOV             R2, #3  ; int
MOV             R1, R7  ; int
BL              sub_45F98
B               loc_47608
; End of function sub_475B0

PUSH            {R4-R7,LR}
SUB             SP, SP, #0x450
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R7, R1
MOV             R6, R2
MOV             R1, #0
MOV             R2, #0x410
ADD             R0, SP, #0x48 ; 'H'
MOV             R5, R3
BL              memset
MOVW            R1, #:lower16:aCallback ; "<callback>"
MOV             R0, R5
MOVT            R1, #:upper16:aCallback ; "<callback>"
STR             R7, [SP,#0x454]
STR             R4, [SP,#0x450]
BL              sub_497D4
CMP             R4, #0
BEQ             loc_47730
MOVW            R3, #:lower16:sub_45F3C
MOV             R4, #0
MOVT            R3, #:upper16:sub_45F3C
MOV             R2, #1
ADD             R1, SP, #0x48 ; 'H'
ADD             R0, SP, #0x28 ; '('
STR             R1, [SP,#4]
STR             R3, [SP]
STRB            R4, [SP,#8]
STR             R4, [SP,#0x10]
STR             R4, [SP,#0x14]
STR             R4, [SP,#0x1C]
STR             R4, [SP,#0x24]
STR             R2, [SP,#0x18]
BL              sub_47820
CMP             R0, R4
BNE             loc_47720
MOV             R3, #0xFFFFFFFF
MOV             R2, R5
MOV             R1, R6
MOV             R0, SP
STR             R6, [SP,#0x34]
STR             R3, [SP,#0x3C]
BL              sub_47154
MOV             R4, R0
MOV             R0, SP
BL              sub_460C8

loc_47720
MOV             R0, R4
ADD             SP, SP, #0x450
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_47730
MOVW            R3, #:lower16:aWrongArguments ; "wrong arguments"
MOV             R0, R5
MOVT            R3, #:upper16:aWrongArguments ; "wrong arguments"
MOV             R2, #4
MOV             R1, R4
BL              sub_45F98
B               loc_47720



; void *__fastcall sub_4774C(void *result)
sub_4774C
CMP             R0, #0
BXEQ            LR
MOV             R3, #off_68A44
LDR             R3, [R3] ; malloc
BX              R3 ; malloc
; End of function sub_4774C




; void __fastcall sub_47764(void *)
sub_47764
CMP             R0, #0
BXEQ            LR
MOV             R3, #0x68A44
LDR             R3, [R3,#(off_68A48 - 0x68A44)] ; free
BX              R3 ; free
; End of function sub_47764




; _BYTE *__fastcall sub_4777C(const void *, size_t)
sub_4777C
PUSH            {R4-R6,LR}
ADDS            R5, R1, #1
BEQ             loc_477C0
MOVW            R3, #:lower16:off_68A44
MOV             R6, R0
MOVT            R3, #:upper16:off_68A44
MOV             R0, R5  ; size
LDR             R3, [R3] ; malloc
MOV             R4, R1
BLX             R3      ; malloc
SUBS            R5, R0, #0
BEQ             loc_477C0
MOV             R1, R6  ; src
MOV             R2, R4  ; n
BL              memcpy
MOV             R3, #0
STRB            R3, [R5,R4]

loc_477C0
MOV             R0, R5
POP             {R4-R6,PC}
; End of function sub_4777C




; _BYTE *__fastcall sub_477C8(const char *)
sub_477C8
PUSH            {R4,LR}
MOV             R4, R0
BL              strlen
MOV             R1, R0
MOV             R0, R4
POP             {R4,LR}
B               sub_4777C
; End of function sub_477C8




; int __fastcall sub_477E4(__int64)
sub_477E4
MOV             R3, #off_68A44
STRD            R0, R1, [R3]
BX              LR
; End of function sub_477E4




; _DWORD *__fastcall sub_477F4(_DWORD *result, _DWORD *)
sub_477F4
CMP             R0, #0
MOVNE           R3, #off_68A44
LDRNE           R3, [R3] ; malloc
STRNE           R3, [R0]
CMP             R1, #0
MOVNE           R3, #off_68A44
LDRNE           R3, [R3,#(off_68A48 - 0x68A44)] ; free
STRNE           R3, [R1]
BX              LR
; End of function sub_477F4




; int __fastcall sub_47820(_DWORD *)
sub_47820
PUSH            {R4-R6,LR}
MOV             R5, R0
MOV             R4, #0
MOV             R0, #0x10
STR             R0, [R5,#8]
STR             R4, [R5,#4]
BL              sub_4774C
CMP             R0, R4
STR             R0, [R5]
STRBNE          R4, [R0]
MOVNE           R0, R4
MOVEQ           R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_47820




; void __fastcall sub_47854(int)
sub_47854
PUSH            {R4,LR}
MOV             R4, R0
LDR             R0, [R0]
CMP             R0, #0
BEQ             loc_4786C
BL              sub_47764

loc_4786C
MOV             R3, #0
STR             R3, [R4,#8]
STR             R3, [R4,#4]
STR             R3, [R4]
POP             {R4,PC}
; End of function sub_47854




; int __fastcall sub_47880(int result)
sub_47880
LDR             R2, [R0]
MOV             R3, #0
STR             R3, [R0,#4]
STRB            R3, [R2]
BX              LR
; End of function sub_47880




; int __fastcall sub_47894(int)
sub_47894
LDR             R0, [R0]
BX              LR
; End of function sub_47894




; int __fastcall sub_4789C(int *)
sub_4789C
MOV             R3, R0
MOV             R2, #0
LDR             R0, [R0]
STR             R2, [R3]
BX              LR
; End of function sub_4789C




; int __fastcall sub_478B0(const void **, void *src, size_t n)
sub_478B0
PUSH            {R4-R8,LR}
MOV             R4, R0
LDR             R3, [R0,#8]
MOV             R5, R2
MOV             R7, R1
LDR             R0, [R0,#4]
SUB             R2, R3, R0
CMP             R2, R5
LDRHI           R8, [R4]
BHI             loc_47944
CMN             R5, #1
MOVNE           R2, #0
MOVEQ           R2, #1
ORRS            R2, R2, R3,LSR#31
BNE             loc_47974
MOV             R2, #0xFFFFFFFE
SUB             R2, R2, R5
CMP             R2, R0
BCC             loc_47974
MOV             R3, R3,LSL#1
ADD             R2, R5, #1
ADD             R0, R2, R0
CMP             R0, R3
MOVCS           R6, R0
MOVCC           R6, R3
MOV             R0, R6
BL              sub_4774C
SUBS            R8, R0, #0
BEQ             loc_47974
LDM             R4, {R1,R2} ; n
BL              memcpy
LDR             R0, [R4]
BL              sub_47764
LDR             R0, [R4,#4]
STR             R8, [R4]
STR             R6, [R4,#8]

loc_47944               ; src
MOV             R1, R7
MOV             R2, R5  ; n
ADD             R0, R8, R0 ; dest
BL              memcpy
LDR             R1, [R4,#4]
MOV             R3, #0
LDR             R2, [R4]
MOV             R0, R3
ADD             R5, R5, R1
STR             R5, [R4,#4]
STRB            R3, [R2,R5]
POP             {R4-R8,PC}

loc_47974
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}
; End of function sub_478B0



; Attributes: info_from_lumina

; int __fastcall fh_buffer_putc(const void **, char)
fh_buffer_putc

var_5= -5
var_4= -4

PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R3, SP, #0xC+var_4
MOV             R2, #1  ; n
STRB            R1, [R3,#-1]!
MOV             R1, R3  ; src
BL              sub_478B0
ADD             SP, SP, #0xC
POP             {PC}
; End of function fh_buffer_putc




; int __fastcall sub_479A0(int *, char, int)
sub_479A0
LDR             R3, [R0,#4]
CMP             R3, #0
LDRNE           R2, [R0]
SUBNE           R3, R3, #1
MOVNE           R1, #0
STRNE           R3, [R0,#4]
LDRBNE          R0, [R2,R3]
MOVEQ           R0, R3
STRBNE          R1, [R2,R3]
BX              LR
; End of function sub_479A0




; int __fastcall sub_479C8(int, double *)
sub_479C8

endptr= -8

PUSH            {R4-R7,LR}
SUB             SP, SP, #0xC
MOV             R4, R0
MOV             R7, R1
BL              localeconv
LDR             R3, [R0]
LDR             R5, [R4]
LDRB            R6, [R3]
CMP             R6, #0x2E ; '.'
BEQ             loc_47A08
MOV             R0, R5  ; s
MOV             R1, #0x2E ; '.' ; c
BL              strchr
CMP             R0, #0
STRBNE          R6, [R0]
LDRNE           R5, [R4]

loc_47A08
BL              __errno_location
MOV             R3, #0
MOV             R6, R0
ADD             R1, SP, #0xC+endptr ; endptr
STR             R3, [R6]
MOV             R0, R5  ; nptr
BL              strtod
LDR             R3, [R4]
LDR             R1, [R4,#4]
LDR             R2, [SP,#0xC+endptr]
ADD             R3, R3, R1
CMP             R2, R3
BNE             loc_47A84
VLDR            D7, =1.79769313e308
VCMPE.F64       D0, D7
VMRS            APSR_nzcv, FPSCR
BLE             loc_47A68

loc_47A4C
LDR             R3, [R6]
CMP             R3, #0x22 ; '"'
BEQ             loc_47A7C

loc_47A58
MOV             R0, #0
VSTR            D0, [R7]

loc_47A60
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_47A68
VLDR            D7, =-1.79769313e308
VCMPE.F64       D0, D7
VMRS            APSR_nzcv, FPSCR
BPL             loc_47A58
B               loc_47A4C

loc_47A7C
MOV             R0, #0xFFFFFFFF
B               loc_47A60

loc_47A84
MOVW            R3, #:lower16:aJsonpStrtod ; "jsonp_strtod"
MOVW            R1, #:lower16:aStrconvC ; "strconv.c"
MOVW            R0, #:lower16:aEndStrbufferVa ; "end == strbuffer->value + strbuffer->le"...
MOVT            R3, #:upper16:aJsonpStrtod ; "jsonp_strtod"
MOVT            R1, #:upper16:aStrconvC ; "strconv.c"
MOVT            R0, #:upper16:aEndStrbufferVa ; "end == strbuffer->value + strbuffer->le"...
MOV             R2, #0x4E ; 'N' ; line
BL              __assert_fail
; End of function sub_479C8

ALIGN 8
dbl_47AA8 DCFD 1.79769313e308
dbl_47AB0 DCFD -1.79769313e308



; int __fastcall sub_47AB8(char *, size_t, int)
sub_47AB8

var_C= -0xC

CMP             R2, #0
PUSH            {R4-R7,LR}
MOVNE           R3, R2
SUB             SP, SP, #0xC
MOVW            R2, #:lower16:aG ; "%.*g"
MOVEQ           R3, #0x11
MOV             R4, R1
VSTR            D0, [SP,#0xC+var_C]
MOVT            R2, #:upper16:aG ; "%.*g"
MOV             R7, R0
BL              snprintf
CMP             R4, R0
BLS             loc_47BF0
MOV             R6, R0
BL              localeconv
LDR             R3, [R0]
LDRB            R1, [R3] ; c
CMP             R1, #0x2E ; '.'
BEQ             loc_47B18
MOV             R0, R7  ; s
BL              strchr
CMP             R0, #0
MOVNE           R3, #0x2E ; '.'
STRBNE          R3, [R0]

loc_47B18               ; c
MOV             R1, #0x2E ; '.'
MOV             R0, R7  ; s
BL              strchr
MOV             R1, #0x65 ; 'e' ; c
MOV             R5, R0
MOV             R0, R7  ; s
BL              strchr
CMP             R5, #0
BEQ             loc_47BB0

loc_47B3C
CMP             R0, #0
BEQ             loc_47B94

loc_47B44
LDRB            R2, [R0,#1]
ADD             R4, R0, #2
LDRB            R3, [R0,#2]
CMP             R2, #0x2D ; '-'
BEQ             loc_47BA0
CMP             R3, #0x30 ; '0'
ADD             R5, R0, #1
BNE             loc_47B70

loc_47B64
LDRB            R3, [R4,#1]!
CMP             R3, #0x30 ; '0'
BEQ             loc_47B64

loc_47B70
CMP             R4, R5
BEQ             loc_47B94
SUB             R2, R4, R7
MOV             R1, R4  ; src
SUB             R4, R4, R5
SUB             R2, R6, R2 ; n
SUB             R6, R6, R4
MOV             R0, R5  ; dest
BL              memmove

loc_47B94
MOV             R0, R6

loc_47B98
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_47BA0
CMP             R3, #0x30 ; '0'
MOVEQ           R5, R4
BEQ             loc_47B64
B               loc_47B94

loc_47BB0
CMP             R0, #0
BNE             loc_47B44
ADD             R3, R6, #3
CMP             R3, R4
BCS             loc_47BF0
MOV             R3, R7
MOV             R2, #0x2E ; '.'
STRB            R2, [R3,R6]!
MOV             R2, #0x30 ; '0'
ADD             R6, R6, #2
STRB            R2, [R3,#1]
MOV             R1, #0x65 ; 'e' ; c
STRB            R0, [R7,R6]
MOV             R0, R7  ; s
BL              strchr
B               loc_47B3C

loc_47BF0
MOV             R0, #0xFFFFFFFF
B               loc_47B98
; End of function sub_47AB8




; int __fastcall sub_47BF8(int, _BYTE *, _DWORD *)
sub_47BF8
CMP             R0, #0
BLT             loc_47CD4
CMP             R0, #0x7F
BLE             loc_47C8C
CMP             R0, #0x800
BLT             loc_47C64
CMP             R0, #0x10000
PUSH            {R4,LR}
BLT             loc_47CA0
CMP             R0, #0x110000
BGE             loc_47CDC
MOV             R4, R0,ASR#18
UBFX            LR, R0, #0xC, #6
UBFX            R12, R0, #6, #6
SUB             R4, R4, #0x10
AND             R0, R0, #0x3F ; '?'
SUB             R3, R0, #0x80
STRB            R4, [R1]
SUB             LR, LR, #0x80
SUB             R12, R12, #0x80
MOV             R4, #4
STRB            LR, [R1,#1]
STRB            R12, [R1,#2]
MOV             R0, #0
STRB            R3, [R1,#3]
STR             R4, [R2]
POP             {R4,PC}

loc_47C64
MOV             R12, R0,ASR#6
AND             R0, R0, #0x3F ; '?'
SUB             R3, R0, #0x80
SUB             R0, R12, #0x40 ; '@'
MOV             R12, #2
STRB            R0, [R1]
MOV             R0, #0
STRB            R3, [R1,#1]
STR             R12, [R2]
BX              LR

loc_47C8C
MOV             R3, #1
STRB            R0, [R1]
MOV             R0, #0
STR             R3, [R2]
BX              LR

loc_47CA0
MOV             LR, R0,ASR#12
UBFX            R12, R0, #6, #6
AND             R0, R0, #0x3F ; '?'
SUB             R3, R0, #0x80
SUB             LR, LR, #0x20 ; ' '
SUB             R12, R12, #0x80
MOV             R4, #3
STRB            LR, [R1]
MOV             R0, #0
STRB            R12, [R1,#1]
STRB            R3, [R1,#2]
STR             R4, [R2]
POP             {R4,PC}

loc_47CD4
MOV             R0, #0xFFFFFFFF
BX              LR

loc_47CDC
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_47BF8




; int __fastcall sub_47CE4(int)
sub_47CE4
TST             R0, #0x80
BNE             loc_47CF4
MOV             R0, #1
BX              LR

loc_47CF4
EOR             R3, R0, #0x80
CMP             R3, #0x41 ; 'A'
BLS             loc_47D40
ADD             R3, R0, #0x3E ; '>'
UXTB            R3, R3
CMP             R3, #0x1D
BLS             loc_47D38
ADD             R3, R0, #0x20 ; ' '
UXTB            R3, R3
CMP             R3, #0xF
BLS             loc_47D48
ADD             R0, R0, #0x10
UXTB            R0, R0
CMP             R0, #4
MOVHI           R0, #0
MOVLS           R0, #4
BX              LR

loc_47D38
MOV             R0, #2
BX              LR

loc_47D40
MOV             R0, #0
BX              LR

loc_47D48
MOV             R0, #3
BX              LR
; End of function sub_47CE4




; int __fastcall sub_47D50(char *, unsigned int, int *)
sub_47D50
PUSH            {R4,R5,LR}
CMP             R1, #2
LDRB            LR, [R0]
MOV             R5, R1
ANDEQ           LR, LR, #0x1F
BEQ             loc_47D88
CMP             R1, #3
ANDEQ           LR, LR, #0xF
BEQ             loc_47D88
CMP             R1, #4
ANDEQ           LR, LR, #7
BEQ             loc_47D88

loc_47D80
MOV             R0, #0
POP             {R4,R5,PC}

loc_47D88
LDRB            R3, [R0,#1]
EOR             R12, R3, #0x80
CMP             R12, #0x3F ; '?'
BHI             loc_47D80
ADD             R0, R0, #1
MOV             R12, #1
B               loc_47DB4

loc_47DA4
LDRB            R3, [R0,#1]!
EOR             R4, R3, #0x80
CMP             R4, #0x3F ; '?'
BHI             loc_47D80

loc_47DB4
ADD             R12, R12, #1
AND             R3, R3, #0x3F ; '?'
CMP             R5, R12
ADD             LR, R3, LR,LSL#6
BHI             loc_47DA4
CMP             LR, #0x110000
BGE             loc_47D80
SUB             R3, LR, #0xD800
CMP             R3, #0x800
BCC             loc_47D80
CMP             LR, #0x7F
CMPLE           R5, #2
MOVEQ           R0, #1
MOVNE           R0, #0
BEQ             loc_47D80
SUB             R3, R5, #3
CMP             LR, #0x800
CLZ             R3, R3
MOV             R3, R3,LSR#5
MOVGE           R3, #0
CMP             R3, #0
POPNE           {R4,R5,PC}
SUB             R1, R5, #4
CMP             LR, #0x10000
CLZ             R1, R1
MOV             R1, R1,LSR#5
MOVGE           R1, #0
CMP             R1, #0
BNE             loc_47D80
CMP             R2, #0
MOV             R0, #1
STRNE           LR, [R2]
POP             {R4,R5,PC}
; End of function sub_47D50




; char *__fastcall sub_47E38(char *result, int, _DWORD *)
sub_47E38

var_14= -0x14

CMP             R1, #0
BXEQ            LR
PUSH            {R4-R6,LR}
MOV             R5, R2
LDRB            R2, [R0]
SUB             SP, SP, #8
MOV             R4, R0
MOV             R0, R2
BL              sub_47CE4
SUBS            R6, R0, #0
BEQ             loc_47EA8
CMP             R6, #1
STREQ           R2, [SP,#0x18+var_14]
BEQ             loc_47E90
CMP             R1, R6
BCC             loc_47EA8
ADD             R2, SP, #0x18+var_14
MOV             R1, R6
MOV             R0, R4
BL              sub_47D50
CMP             R0, #0
BEQ             loc_47EA8

loc_47E90
CMP             R5, #0
ADD             R0, R4, R6
LDRNE           R3, [SP,#0x18+var_14]
STRNE           R3, [R5]
ADD             SP, SP, #8
POP             {R4-R6,PC}

loc_47EA8
MOV             R0, #0
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function sub_47E38




; int __fastcall sub_47EB4(int, unsigned int)
sub_47EB4
PUSH            {R4-R8,LR}
SUBS            R8, R1, #0
BEQ             loc_47F28
MOV             R7, R0
MOV             R4, #0
B               loc_47EFC

loc_47ECC
CMP             R5, #1
BLS             loc_47EF0
CMP             R3, R5
BCC             loc_47F20
BL              sub_47D50
CMP             R0, #0
ADD             R4, R5, R4
SUB             R4, R4, #1
BEQ             loc_47F20

loc_47EF0
ADD             R4, R4, #1
CMP             R8, R4
BLS             loc_47F28

loc_47EFC
LDRB            R0, [R7,R4]
ADD             R6, R7, R4
BL              sub_47CE4
SUBS            R5, R0, #0
SUB             R3, R8, R4
MOV             R2, #0
MOV             R0, R6
MOV             R1, R5
BNE             loc_47ECC

loc_47F20
MOV             R0, #0
POP             {R4-R8,PC}

loc_47F28
MOV             R0, #1
POP             {R4-R8,PC}
; End of function sub_47EB4




; _QWORD *__fastcall sub_47F30(int)
sub_47F30
CMP             R0, #0
PUSH            {R4-R6,LR}
BEQ             loc_47F48
LDR             R3, [R0]
CMP             R3, #3
BEQ             loc_47F78

loc_47F48
MOV             R4, #0
MOV             R5, #0

loc_47F50
MOV             R0, #0x10
BL              sub_4774C
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R2, #3
MOV             R3, #1
STRD            R4, R5, [R0,#8]
STR             R2, [R0]
STR             R3, [R0,#4]
POP             {R4-R6,PC}

loc_47F78
LDRD            R4, R5, [R0,#8]
B               loc_47F50
; End of function sub_47F30




; void *__fastcall sub_47F80(_DWORD *, int, int)
sub_47F80
LDR             R3, [R0,#0xC]
LDR             R12, [R0,#8]
PUSH            {R4-R8,LR}
ADD             R3, R1, R3
LDR             R5, [R0,#0x10]
CMP             R3, R12
BHI             loc_47FA4

loc_47F9C
MOV             R0, R5
POP             {R4-R8,PC}

loc_47FA4
MOV             R3, R12,LSL#1
ADD             R12, R12, R1
MOV             R4, R0
CMP             R3, R12
MOV             R6, R2
MOVCS           R7, R3
MOVCC           R7, R12
MOV             R0, R7,LSL#2
BL              sub_4774C
SUBS            R3, R0, #0
BEQ             loc_48004
CMP             R6, #0
STR             R7, [R4,#8]
STR             R3, [R4,#0x10]
BEQ             loc_47F9C
LDR             R2, [R4,#0xC]
MOV             R1, R5  ; src
MOV             R2, R2,LSL#2 ; n
BL              memcpy
MOV             R0, R5
BL              sub_47764
LDR             R5, [R4,#0x10]
MOV             R0, R5
POP             {R4-R8,PC}

loc_48004
MOV             R5, R3
B               loc_47F9C
; End of function sub_47F80




; _DWORD *__fastcall sub_4800C(_BYTE *, size_t, int)
sub_4800C
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
BEQ             loc_48060
CMP             R2, #0
MOV             R6, R1
BEQ             loc_48054

loc_48024
MOV             R0, #0x10
BL              sub_4774C
SUBS            R4, R0, #0
BEQ             loc_48068
MOV             R2, #2
MOV             R3, #1
MOV             R0, R4
STR             R5, [R4,#8]
STR             R6, [R4,#0xC]
STR             R2, [R4]
STR             R3, [R4,#4]
POP             {R4-R6,PC}

loc_48054
BL              sub_4777C
SUBS            R5, R0, #0
BNE             loc_48024

loc_48060
MOV             R0, #0
POP             {R4-R6,PC}

loc_48068
MOV             R0, R5
BL              sub_47764
MOV             R0, R4
POP             {R4-R6,PC}
; End of function sub_4800C




; _DWORD *sub_48078()
sub_48078
PUSH            {R4-R6,LR}
MOV             R0, #0x24 ; '$'
BL              sub_4774C
SUBS            R4, R0, #0
BEQ             loc_480C0
MOV             R3, #dword_73108
LDR             R0, [R3]
CMP             R0, #0
BEQ             loc_480C8

loc_480A0
MOV             R3, #1
MOV             R5, #0
STR             R3, [R4,#4]
ADD             R0, R4, #8
STR             R5, [R4]
BL              sub_457E8
CMP             R0, R5
BNE             loc_480D0

loc_480C0
MOV             R0, R4
POP             {R4-R6,PC}

loc_480C8
BL              sub_45DF8
B               loc_480A0

loc_480D0
MOV             R0, R4
MOV             R4, R5
BL              sub_47764
B               loc_480C0
; End of function sub_48078




; _DWORD *__fastcall sub_480E0(_DWORD *result)
sub_480E0
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #0
LDREQ           R0, [R0,#8]
MOVNE           R0, #0
BX              LR
; End of function sub_480E0




; int __fastcall sub_480FC(_DWORD *, char *)
sub_480FC
CMP             R0, #0
CMPNE           R1, #0
BEQ             loc_4811C
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_4811C
ADD             R0, R0, #8 ; int
B               sub_45B10

loc_4811C
MOV             R0, #0
BX              LR
; End of function sub_480FC




; bool __fastcall sub_48124(int *, int *)
sub_48124
LDR             R3, [R0]
LDR             R2, [R1]
CMP             R3, R2
BEQ             loc_4813C
MOV             R0, #0
BX              LR

loc_4813C
CMP             R0, R1
BEQ             loc_482E4
PUSH            {R4-R8,LR}
MOV             R5, R1
MOV             R4, R0
CMP             R3, #4  ; switch 5 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_48154 ; jumptable 00048154 default case
jpt_48154 DCD loc_48228 ; jump table for switch statement
DCD loc_48170
DCD loc_482B8
DCD loc_4820C
DCD loc_481F0

loc_48170               ; jumptable 00048154 case 1
LDR             R7, [R0,#0xC]
LDR             R2, [R1,#0xC]
CMP             R7, R2
BNE             def_48154 ; jumptable 00048154 default case
CMP             R7, #0
BEQ             loc_482DC
MOV             R2, R3
MOV             R6, #0
B               loc_481D4

loc_48194
LDR             R3, [R5,#0xC]
CMP             R3, R6
BLS             def_48154 ; jumptable 00048154 default case
LDR             R3, [R5,#0x10]
LDR             R1, [R3,R6,LSL#2]
CMP             R1, #0
CMPNE           R0, #0
BEQ             def_48154 ; jumptable 00048154 default case
BL              sub_48124
CMP             R0, #0
BEQ             def_48154 ; jumptable 00048154 default case
ADD             R6, R6, #1
CMP             R7, R6
BEQ             loc_482DC
LDR             R3, [R4]
LDR             R2, [R5]

loc_481D4
CMP             R3, #1
BEQ             loc_482EC

loc_481DC
MOV             R0, #0

loc_481E0
CMP             R2, #1
BEQ             loc_48194

def_48154               ; jumptable 00048154 default case
MOV             R0, #0
POP             {R4-R8,PC}

loc_481F0               ; jumptable 00048154 case 4
VLDR            D6, [R0,#8]
VLDR            D7, [R1,#8]
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
MOVEQ           R0, #1
MOVNE           R0, #0
POP             {R4-R8,PC}

loc_4820C               ; jumptable 00048154 case 3
LDRD            R0, R1, [R0,#8]
LDRD            R2, R3, [R5,#8]
CMP             R1, R3
CMPEQ           R0, R2
MOVEQ           R0, #1
MOVNE           R0, #0
POP             {R4-R8,PC}

loc_48228               ; jumptable 00048154 case 0
LDR             R2, [R0,#8]
LDR             R3, [R1,#8]
CMP             R2, R3
BNE             def_48154 ; jumptable 00048154 default case
ADD             R8, R0, #8
MOV             R0, R8
BL              sub_45CEC
CMP             R0, #0
BNE             loc_4828C
B               loc_482DC

loc_48250
BL              sub_480FC
SUBS            R1, R0, #0
MOV             R0, R6
BEQ             def_48154 ; jumptable 00048154 default case
BL              sub_48124
CMP             R0, #0
MOV             R1, R7
MOV             R0, R8
BEQ             def_48154 ; jumptable 00048154 default case
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_482DC
BL              sub_45D64
CMP             R0, #0
BEQ             loc_482DC

loc_4828C
BL              sub_45D7C
SUBS            R6, R0, #0
BEQ             loc_482DC
SUB             R7, R6, #0x10
MOV             R0, R7
BL              sub_45D84
MOV             R1, R6
SUBS            R6, R0, #0
MOV             R0, R5
BNE             loc_48250
B               loc_482DC

loc_482B8               ; jumptable 00048154 case 2
LDR             R2, [R0,#0xC]
LDR             R3, [R1,#0xC]
CMP             R2, R3
BNE             def_48154 ; jumptable 00048154 default case
LDR             R1, [R1,#8] ; s2
LDR             R0, [R0,#8] ; s1
BL              memcmp
CMP             R0, #0
BNE             def_48154 ; jumptable 00048154 default case

loc_482DC
MOV             R0, #1
POP             {R4-R8,PC}

loc_482E4
MOV             R0, #1
BX              LR

loc_482EC
LDR             R3, [R4,#0xC]
CMP             R3, R6
BLS             loc_481DC
LDR             R3, [R4,#0x10]
LDR             R0, [R3,R6,LSL#2]
B               loc_481E0
; End of function sub_48124




; int __fastcall sub_48304(_DWORD *, char *)
sub_48304
CMP             R0, #0
CMPNE           R1, #0
BEQ             loc_48324
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_48324
ADD             R0, R0, #8 ; int
B               sub_45B70

loc_48324
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_48304

CMP             R0, #0
BEQ             loc_4835C
PUSH            {R4,LR}
LDR             R4, [R0]
CMP             R4, #0
BNE             loc_48354
ADD             R0, R0, #8
BL              sub_45C90
MOV             R0, R4
POP             {R4,PC}

loc_48354
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_4835C
MOV             R0, #0xFFFFFFFF
BX              LR



; int __fastcall sub_48364(_DWORD *)
sub_48364
CMP             R0, #0
BEQ             loc_48380
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_48380
ADD             R0, R0, #8
B               sub_45CEC

loc_48380
MOV             R0, #0
BX              LR
; End of function sub_48364




; int __fastcall sub_48388(_DWORD *, char *)
sub_48388
CMP             R0, #0
CMPNE           R1, #0
BEQ             loc_483A8
LDR             R3, [R0]
CMP             R3, #0
BNE             loc_483A8
ADD             R0, R0, #8 ; int
B               sub_45D04

loc_483A8
MOV             R0, #0
BX              LR
; End of function sub_48388




; int __fastcall sub_483B0(_DWORD *, int)
sub_483B0
CMP             R0, #0
BEQ             loc_483DC
LDR             R2, [R0]
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_483DC
ADD             R0, R0, #8
B               sub_45D64

loc_483DC
MOV             R0, #0
BX              LR
; End of function sub_483B0




; int __fastcall sub_483E4(int)
sub_483E4
CMP             R0, #0
BXEQ            LR
B               sub_45D7C
; End of function sub_483E4




; int __fastcall sub_483F0(int)
sub_483F0
CMP             R0, #0
BXEQ            LR
B               sub_45D84
; End of function sub_483F0




; int __fastcall sub_483FC(int result)
sub_483FC
CMP             R0, #0
SUBNE           R0, R0, #0x10
BX              LR
; End of function sub_483FC




; _DWORD *sub_48408()
sub_48408
PUSH            {R4,LR}
MOV             R0, #0x14
BL              sub_4774C
SUBS            R4, R0, #0
BEQ             loc_48450
MOV             R3, #1
MOV             R1, #0
MOV             R2, #8
STR             R3, [R4]
STR             R3, [R4,#4]
MOV             R0, #0x20 ; ' '
STR             R1, [R4,#0xC]
STR             R2, [R4,#8]
BL              sub_4774C
CMP             R0, #0
MOV             R3, R0
STR             R0, [R4,#0x10]
BEQ             loc_48458

loc_48450
MOV             R0, R4
POP             {R4,PC}

loc_48458
MOV             R0, R4
MOV             R4, R3
BL              sub_47764
B               loc_48450
; End of function sub_48408




; _DWORD *__fastcall sub_48468(_DWORD *result)
sub_48468
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #1
LDREQ           R0, [R0,#0xC]
MOVNE           R0, #0
BX              LR
; End of function sub_48468




; _DWORD *__fastcall sub_48484(_DWORD *result, unsigned int)
sub_48484
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #1
BNE             loc_484B0
LDR             R3, [R0,#0xC]
CMP             R3, R1
BLS             loc_484B0
LDR             R3, [R0,#0x10]
LDR             R0, [R3,R1,LSL#2]
BX              LR

loc_484B0
MOV             R0, #0
BX              LR
; End of function sub_48484




; int __fastcall sub_484B8(_DWORD *, _DWORD *)
sub_484B8
PUSH            {R4-R6,LR}
SUBS            R6, R0, #0
BEQ             loc_48588
CLZ             R3, R1
LDR             R4, [R6]
MOV             R3, R3,LSR#5
CMP             R4, #1
MOVEQ           R4, R3
ORRNE           R4, R3, #1
CMP             R4, #0
BNE             loc_48588
LDR             R2, [R1]
CMP             R2, #1
BNE             loc_48588
MOV             R5, R1
LDR             R1, [R1,#0xC]
BL              sub_47F80
CMP             R0, #0
BEQ             loc_48588
LDRD            R0, R1, [R5,#0xC]
CMP             R0, #0
MOV             R2, R0
BEQ             loc_48560
MOV             R3, R4

loc_48518
LDR             R2, [R1,R3,LSL#2]
CMP             R2, #0
BEQ             loc_48550
LDR             R12, [R2,#4]
ADD             R2, R2, #4
CMN             R12, #1
BEQ             loc_48550

loc_48534
LDREX           R1, [R2]
ADD             R1, R1, #1
STREX           R0, R1, [R2]
CMP             R0, #0
BNE             loc_48534
DMB             ISH
LDRD            R0, R1, [R5,#0xC] ; src

loc_48550
ADD             R3, R3, #1
CMP             R0, R3
BHI             loc_48518
MOV             R2, R0,LSL#2 ; n

loc_48560
LDR             R3, [R6,#0x10]
LDR             R0, [R6,#0xC]
ADD             R0, R3, R0,LSL#2 ; dest
BL              memcpy
LDR             R2, [R5,#0xC]
MOV             R0, #0
LDR             R3, [R6,#0xC]
ADD             R3, R3, R2
STR             R3, [R6,#0xC]
POP             {R4-R6,PC}

loc_48588
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_484B8




; const char *__fastcall sub_48590(const char *result)
sub_48590
SUBS            R3, R0, #0
BXEQ            LR
PUSH            {R4,LR}
MOV             R4, R3
BL              strlen
MOV             R2, #0
MOV             R1, R0
MOV             R0, R4
POP             {R4,LR}
B               sub_4800C
; End of function sub_48590




; _DWORD *__fastcall sub_485B8(_BYTE *, size_t)
sub_485B8
MOV             R2, #0
B               sub_4800C
; End of function sub_485B8




; _DWORD *__fastcall sub_485C0(_BYTE *, size_t)
sub_485C0
MOV             R2, #1
B               sub_4800C
; End of function sub_485C0




; _DWORD *__fastcall sub_485C8(_BYTE *, size_t)
sub_485C8
SUBS            R3, R0, #0
BEQ             loc_48604
PUSH            {R4-R6,LR}
MOV             R5, R1
MOV             R4, R3
BL              sub_47EB4
CMP             R0, #0
BEQ             loc_485FC
MOV             R1, R5
MOV             R0, R4
MOV             R2, #0
POP             {R4-R6,LR}
B               sub_4800C

loc_485FC
MOV             R0, #0
POP             {R4-R6,PC}

loc_48604
MOV             R0, #0
BX              LR
; End of function sub_485C8



; Attributes: info_from_lumina

; const char *__fastcall BUFX_strdup(const char *result)
BUFX_strdup
SUBS            R3, R0, #0
BXEQ            LR
PUSH            {R4,LR}
MOV             R4, R3
BL              strlen
MOV             R1, R0
MOV             R0, R4
POP             {R4,LR}
B               sub_485C8
; End of function BUFX_strdup




; _DWORD *__fastcall sub_48630(_DWORD *result)
sub_48630
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #2
LDREQ           R0, [R0,#8]
MOVNE           R0, #0
BX              LR
; End of function sub_48630




; _DWORD *__fastcall sub_4864C(_DWORD *result)
sub_4864C
CMP             R0, #0
BXEQ            LR
LDR             R3, [R0]
CMP             R3, #2
LDREQ           R0, [R0,#0xC]
MOVNE           R0, #0
BX              LR
; End of function sub_4864C




; int __fastcall sub_48668(int, const void *, size_t)
sub_48668
PUSH            {R4-R8,LR}
SUBS            R5, R0, #0
BEQ             loc_486C4
CLZ             R3, R1
LDR             R4, [R5]
MOV             R3, R3,LSR#5
CMP             R4, #2
MOVEQ           R4, R3
ORRNE           R4, R3, #1
CMP             R4, #0
BNE             loc_486C4
MOV             R0, R1
MOV             R1, R2
MOV             R6, R2
BL              sub_4777C
SUBS            R7, R0, #0
BEQ             loc_486C4
LDR             R0, [R5,#8]
BL              sub_47764
MOV             R0, R4
STR             R7, [R5,#8]
STR             R6, [R5,#0xC]
POP             {R4-R8,PC}

loc_486C4
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}
; End of function sub_48668




; int __fastcall sub_486CC(int, const char *)
sub_486CC
PUSH            {R4-R6,LR}
SUBS            R4, R1, #0
BEQ             loc_486F8
MOV             R5, R0
MOV             R0, R4  ; s
BL              strlen
MOV             R1, R4
MOV             R2, R0
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_48668

loc_486F8
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_486CC




; int __fastcall sub_48700(int, const void *, size_t)
sub_48700
PUSH            {R4-R6,LR}
SUBS            R4, R1, #0
BEQ             loc_4873C
MOV             R6, R0
MOV             R1, R2
MOV             R0, R4
MOV             R5, R2
BL              sub_47EB4
CMP             R0, #0
BEQ             loc_4873C
MOV             R2, R5
MOV             R1, R4
MOV             R0, R6
POP             {R4-R6,LR}
B               sub_48668

loc_4873C
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_48700




; int __fastcall sub_48744(int, const char *)
sub_48744
PUSH            {R4-R6,LR}
SUBS            R4, R1, #0
BEQ             loc_48770
MOV             R5, R0
MOV             R0, R4  ; s
BL              strlen
MOV             R1, R4
MOV             R2, R0
MOV             R0, R5
POP             {R4-R6,LR}
B               sub_48700

loc_48770
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_48744




; _DWORD *__fastcall sub_48778(char *format, __gnuc_va_list arg)
sub_48778

arg= -8

MOV             R12, R1
MOV             R1, #0  ; maxlen
PUSH            {R4-R7,LR}
MOV             R2, R0  ; format
SUB             SP, SP, #0xC
MOV             R5, R0
MOV             R3, R12 ; arg
MOV             R0, R1  ; s
STR             R12, [SP,#0xC+arg]
BL              vsnprintf
SUBS            R4, R0, #0
BEQ             loc_487F8
ADD             R6, R4, #1
MOV             R0, R6
BL              sub_4774C
SUBS            R7, R0, #0
BEQ             loc_48810
MOV             R2, R5  ; format
MOV             R1, R6  ; maxlen
LDR             R3, [SP,#0xC+arg] ; arg
BL              vsnprintf
MOV             R1, R4
MOV             R0, R7
BL              sub_47EB4
SUBS            R5, R0, #0
BEQ             loc_48818
MOV             R1, R4
MOV             R0, R7
MOV             R2, #1
BL              sub_4800C

loc_487F0
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_487F8
MOVW            R0, #:lower16:(asc_4D5C4+4) ; ""
MOV             R1, R4
MOVT            R0, #:upper16:(asc_4D5C4+4) ; ""
BL              sub_485C8
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_48810
MOV             R0, R7
B               loc_487F0

loc_48818
MOV             R0, R7
BL              sub_47764
MOV             R0, R5
B               loc_487F0
; End of function sub_48778



; Attributes: info_from_lumina

; _DWORD *ipcomx_vprintf(char *, ...)
ipcomx_vprintf

var_8= -8
varg_r0=  4
varg_r1=  8
varg_r2=  0xC
varg_r3=  0x10

PUSH            {R0-R3}
PUSH            {LR}
SUB             SP, SP, #0xC
ADD             R3, SP, #0xC+varg_r1
MOV             R1, R3  ; arg
LDR             R0, [SP,#0xC+varg_r0] ; format
STR             R3, [SP,#0xC+var_8]
BL              sub_48778
ADD             SP, SP, #0xC
POP             {LR}
ADD             SP, SP, #0x10
BX              LR
; End of function ipcomx_vprintf




; _QWORD *__fastcall sub_48858(__int64)
sub_48858
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, #0x10
MOV             R5, R1
BL              sub_4774C
CMP             R0, #0
POPEQ           {R4-R6,PC}
MOV             R2, #3
MOV             R3, #1
STRD            R4, R5, [R0,#8]
STR             R2, [R0]
STR             R3, [R0,#4]
POP             {R4-R6,PC}
; End of function sub_48858




; __int64 __fastcall sub_4888C(int)
sub_4888C
CMP             R0, #0
BEQ             loc_488A0
LDR             R3, [R0]
CMP             R3, #3
BEQ             loc_488AC

loc_488A0
MOV             R0, #0
MOV             R1, #0
BX              LR

loc_488AC
LDRD            R0, R1, [R0,#8]
BX              LR
; End of function sub_4888C




; int __fastcall sub_488B4(int, __int64)
sub_488B4
CMP             R0, #0
BEQ             loc_488D4
LDR             R1, [R0]
CMP             R1, #3
BNE             loc_488D4
STRD            R2, R3, [R0,#8]
MOV             R0, #0
BX              LR

loc_488D4
MOV             R0, #0xFFFFFFFF
BX              LR
; End of function sub_488B4




; double *sub_488DC()
sub_488DC
VCMP.F64        D0, D0
VMRS            APSR_nzcv, FPSCR
BVS             loc_48928
VLDR            D7, =1.79769313e308
VABS.F64        D6, D0
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
BGT             loc_48928
PUSH            {R4-R6,LR}
MOV             R0, #0x10
VMOV            R4, R5, D0
BL              sub_4774C
CMP             R0, #0
MOVNE           R2, #4
MOVNE           R3, #1
STRDNE          R4, R5, [R0,#8]
STRNE           R2, [R0]
STRNE           R3, [R0,#4]
POP             {R4-R6,PC}

loc_48928
MOV             R0, #0
BX              LR
; End of function sub_488DC

dbl_48930 DCFD 1.79769313e308



; void sub_48938()
sub_48938
CMP             R0, #0
BEQ             loc_4894C
LDR             R3, [R0]
CMP             R3, #4
BEQ             loc_48954

loc_4894C
VLDR            D0, =0.0
BX              LR

loc_48954
VLDR            D0, [R0,#8]
BX              LR
; End of function sub_48938

ALIGN 0x10
dbl_48960 DCFD 0.0
SUBS            R2, R0, #0
BEQ             loc_489B4
VCMP.F64        D0, D0
LDR             R0, [R2]
VMRS            APSR_nzcv, FPSCR
MOVVS           R3, #1
MOVVC           R3, #0
CMP             R0, #4
MOVEQ           R0, R3
ORRNE           R0, R3, #1
CMP             R0, #0
BNE             loc_489B4
VLDR            D7, =1.79769313e308
VABS.F64        D6, D0
VCMP.F64        D6, D7
VMRS            APSR_nzcv, FPSCR
BGT             loc_489B4
VSTR            D0, [R2,#8]
BX              LR

loc_489B4
MOV             R0, #0xFFFFFFFF
BX              LR
ALIGN 0x10
dbl_489C0 DCFD 1.79769313e308



; int __fastcall sub_489C8(int result)
sub_489C8
CMP             R0, #0
BEQ             loc_489E4
LDR             R3, [R0]
CMP             R3, #3
BEQ             loc_489F4
CMP             R3, #4
BEQ             loc_489EC

loc_489E4
VLDR            D0, =0.0
BX              LR

loc_489EC
VLDR            D0, [R0,#8]
BX              LR

loc_489F4
PUSH            {R4,LR}
LDRD            R0, R1, [R0,#8]
BLX             sub_4A11C
VMOV            D0, R0, R1
POP             {R4,PC}
; End of function sub_489C8

dbl_48A08 DCFD 0.0



; void *sub_48A10()
sub_48A10
MOV             R0, #unk_68A4C
BX              LR
; End of function sub_48A10




; void *sub_48A1C()
sub_48A1C
LDR             R0, =unk_68A54
BX              LR
; End of function sub_48A1C

off_48A24 DCD unk_68A54



; void *sub_48A28()
sub_48A28
LDR             R0, =unk_68A5C
BX              LR
; End of function sub_48A28

off_48A30 DCD unk_68A5C



; void __fastcall sub_48A34(_DWORD *)
sub_48A34
PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
POPEQ           {R4-R6,PC}
LDR             R3, [R4]
CMP             R3, #4  ; switch 5 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_48A48 ; jumptable 00048A48 default case
jpt_48A48 DCD loc_48A7C ; jump table for switch statement
DCD loc_48A90
DCD loc_48A64
DCD loc_48A6C
DCD loc_48A6C

loc_48A64               ; jumptable 00048A48 case 2
LDR             R0, [R4,#8]

loc_48A68
BL              sub_47764

loc_48A6C               ; jumptable 00048A48 cases 3,4
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_47764

def_48A48               ; jumptable 00048A48 default case
POP             {R4-R6,PC}

loc_48A7C               ; jumptable 00048A48 case 0
ADD             R0, R4, #8
BL              sub_45864
MOV             R0, R4
POP             {R4-R6,LR}
B               sub_47764

loc_48A90               ; jumptable 00048A48 case 1
LDR             R1, [R4,#0xC]
LDR             R0, [R4,#0x10]
CMP             R1, #0
MOVNE           R5, #0
BEQ             loc_48A68

loc_48AA4
LDR             R3, [R0,R5,LSL#2]
CMP             R3, #0
BEQ             loc_48AF0
LDR             R12, [R3,#4]
ADD             R2, R3, #4
CMN             R12, #1
BEQ             loc_48AF0
DMB             ISH

loc_48AC4
LDREX           R1, [R2]
SUB             R1, R1, #1
STREX           R0, R1, [R2]
CMP             R0, #0
BNE             loc_48AC4
CMP             R1, #0
BNE             loc_48AE8
MOV             R0, R3
BL              sub_48A34

loc_48AE8
LDR             R0, [R4,#0x10]
LDR             R1, [R4,#0xC]

loc_48AF0
ADD             R5, R5, #1
CMP             R5, R1
BCC             loc_48AA4
B               loc_48A68
; End of function sub_48A34




; int __fastcall sub_48B00(_DWORD *)
sub_48B00
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
BEQ             loc_48B88
LDR             R3, [R5]
CMP             R3, #1
BNE             loc_48B88
LDR             R2, [R5,#0xC]
CMP             R2, #0
BEQ             loc_48B7C
MOV             R4, #0

loc_48B28
LDR             R3, [R5,#0x10]
LDR             R0, [R3,R4,LSL#2]
CMP             R0, #0
BEQ             loc_48B70
LDR             R1, [R0,#4]
ADD             R3, R0, #4
CMN             R1, #1
BEQ             loc_48B70
DMB             ISH

loc_48B4C
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_48B4C
CMP             R2, #0
BNE             loc_48B6C
BL              sub_48A34

loc_48B6C
LDR             R2, [R5,#0xC]

loc_48B70
ADD             R4, R4, #1
CMP             R2, R4
BHI             loc_48B28

loc_48B7C
MOV             R0, #0
STR             R0, [R5,#0xC]
POP             {R4-R6,PC}

loc_48B88
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_48B00




; int __fastcall sub_48B90(_DWORD *, int, _DWORD *)
sub_48B90
SUBS            R3, R0, #0
PUSH            {R4,LR}
BEQ             loc_48BA8
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_48BF8

loc_48BA8
CMP             R2, #0
BEQ             loc_48BBC
LDR             R3, [R2,#4]
CMN             R3, #1
BNE             loc_48BC4

loc_48BBC
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_48BC4
ADD             R3, R2, #4
DMB             ISH

loc_48BCC
LDREX           R1, [R3]
SUB             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_48BCC
CMP             R1, #0
BNE             loc_48BBC
MOV             R0, R2
BL              sub_48A34
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_48BF8
CLZ             R3, R2
CMP             R1, #0
MOV             R3, R3,LSR#5
MOVEQ           R4, #1
MOV             R0, R1
MOVNE           R4, R3
CMP             R4, #0
BNE             loc_48BA8
MOV             R1, R2
BL              sub_45D8C
MOV             R0, R4
POP             {R4,PC}
; End of function sub_48B90




; int __fastcall sub_48C28(_DWORD *, unsigned int)
sub_48C28
PUSH            {R4-R6,LR}
SUBS            R5, R0, #0
BEQ             loc_48CEC
LDR             R3, [R5]
CMP             R3, #1
BNE             loc_48CEC
LDR             R12, [R5,#0xC]
CMP             R12, R1
BLS             loc_48CEC
LDR             R3, [R5,#0x10]
MOV             R4, R1
MOV             R6, R1,LSL#2
LDR             R0, [R3,R1,LSL#2]
CMP             R0, #0
BEQ             loc_48C70
LDR             R3, [R0,#4]
CMN             R3, #1
BNE             loc_48C88

loc_48C70
SUB             R3, R12, #1
CMP             R3, R4
BHI             loc_48CC0

loc_48C7C
STR             R3, [R5,#0xC]
MOV             R0, #0
POP             {R4-R6,PC}

loc_48C88
ADD             R3, R0, #4
DMB             ISH

loc_48C90
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_48C90
CMP             R2, #0
BNE             loc_48CB0
BL              sub_48A34

loc_48CB0
LDR             R12, [R5,#0xC]
SUB             R3, R12, #1
CMP             R3, R4
BLS             loc_48C7C

loc_48CC0
LDR             R0, [R5,#0x10]
MVN             R4, R4
ADD             R2, R4, R12
ADD             R1, R6, #4
MOV             R2, R2,LSL#2 ; n
ADD             R1, R0, R1 ; src
ADD             R0, R0, R6 ; dest
BL              memmove
LDR             R3, [R5,#0xC]
SUB             R3, R3, #1
B               loc_48C7C

loc_48CEC
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}
; End of function sub_48C28




; int __fastcall sub_48CF4(_DWORD *, char *, _DWORD *)
sub_48CF4
PUSH            {R4,LR}
SUBS            R4, R2, #0
BEQ             loc_48D18
CMP             R0, #0
CMPNE           R1, #0
BNE             loc_48D20

loc_48D0C
LDR             R3, [R4,#4]
CMN             R3, #1
BNE             loc_48D7C

loc_48D18
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}

loc_48D20
LDR             R12, [R0]
SUB             R3, R4, R0
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R12, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_48D0C
ADD             R0, R0, #8
BL              sub_4587C
CMP             R0, #0
POPEQ           {R4,PC}
LDR             R3, [R4,#4]
CMN             R3, #1
BEQ             loc_48D18
ADD             R3, R4, #4
DMB             ISH

loc_48D64
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_48D98
B               loc_48D64

loc_48D7C
ADD             R3, R4, #4
DMB             ISH

loc_48D84
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_48D84

loc_48D98
CMP             R2, #0
BNE             loc_48D18
MOV             R0, R4
BL              sub_48A34
MOV             R0, #0xFFFFFFFF
POP             {R4,PC}
; End of function sub_48CF4




; int __fastcall sub_48DB0(_DWORD *, _DWORD *)
sub_48DB0
PUSH            {R4-R10,LR}
SUBS            R7, R0, #0
BEQ             loc_48E94
LDR             R2, [R7]
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_48E94
LDR             R3, [R1]
CMP             R3, #0
BNE             loc_48E94
ADD             R9, R1, #8
MOV             R6, R1
MOV             R0, R9
BL              sub_45CEC
CMP             R0, #0
BNE             loc_48E5C

loc_48DFC
MOV             R0, #0
POP             {R4-R10,PC}

loc_48E04
LDR             R2, [R8,#4]
ADD             R3, R8, #4
CMN             R2, #1
BEQ             loc_48E2C

loc_48E14
LDREX           R2, [R3]
ADD             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_48E14
DMB             ISH

loc_48E2C
MOV             R2, R8
MOV             R1, R4
MOV             R0, R7
BL              sub_48CF4

loc_48E3C
LDR             R3, [R6]
MOV             R1, R5
MOV             R0, R9
CMP             R3, #0
BNE             loc_48DFC
BL              sub_45D64
CMP             R0, #0
BEQ             loc_48DFC

loc_48E5C
BL              sub_45D7C
SUBS            R4, R0, #0
BEQ             loc_48DFC
SUB             R5, R4, #0x10
MOV             R0, R5
BL              sub_45D84
SUBS            R8, R0, #0
MOV             R1, R4
MOV             R0, R7
BEQ             loc_48DFC
BL              sub_480FC
CMP             R0, #0
BNE             loc_48E3C
B               loc_48E04

loc_48E94
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}
; End of function sub_48DB0




; int __fastcall sub_48E9C(_DWORD *, char *, _DWORD *)
sub_48E9C
PUSH            {R4-R6,LR}
SUBS            R5, R1, #0
MOV             R4, R2
BEQ             loc_48ECC
MOV             R6, R0
MOV             R0, R5  ; s
BL              strlen
MOV             R1, R0
MOV             R0, R5
BL              sub_47EB4
CMP             R0, #0
BNE             loc_48F1C

loc_48ECC
CMP             R4, #0
BEQ             loc_48EE0
LDR             R3, [R4,#4]
CMN             R3, #1
BNE             loc_48EE8

loc_48EE0
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_48EE8
ADD             R3, R4, #4
DMB             ISH

loc_48EF0
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_48EF0
CMP             R2, #0
BNE             loc_48EE0
MOV             R0, R4
BL              sub_48A34
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_48F1C
MOV             R2, R4
MOV             R1, R5
MOV             R0, R6
POP             {R4-R6,LR}
B               sub_48CF4
; End of function sub_48E9C




; int __fastcall sub_48F30(_DWORD *, _DWORD *)
sub_48F30
PUSH            {R4-R8,LR}
SUBS            R7, R0, #0
BEQ             loc_49008
LDR             R2, [R7]
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_49008
LDR             R3, [R1]
CMP             R3, #0
BNE             loc_49008
ADD             R8, R1, #8
MOV             R6, R1
MOV             R0, R8
BL              sub_45CEC
CMP             R0, #0
BNE             loc_48FDC

loc_48F7C
MOV             R0, #0
POP             {R4-R8,PC}

loc_48F84
LDR             R1, [R2,#4]
CMN             R1, #1
BEQ             loc_48FA8

loc_48F90
LDREX           R1, [R3]
ADD             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_48F90
DMB             ISH

loc_48FA8
MOV             R1, R5
MOV             R0, R7
BL              sub_48CF4
CMP             R0, #0
MOV             R1, R4
MOV             R0, R8
BNE             loc_49008
LDR             R3, [R6]
CMP             R3, #0
BNE             loc_48F7C
BL              sub_45D64
CMP             R0, #0
BEQ             loc_48F7C

loc_48FDC
BL              sub_45D7C
SUBS            R5, R0, #0
BEQ             loc_48F7C
SUB             R4, R5, #0x10
MOV             R0, R4
BL              sub_45D84
SUBS            R2, R0, #0
ADD             R3, R2, #4
BNE             loc_48F84
MOV             R0, #0
POP             {R4-R8,PC}

loc_49008
MOV             R0, #0xFFFFFFFF
POP             {R4-R8,PC}
; End of function sub_48F30




; int __fastcall sub_49010(_DWORD *, _DWORD *)
sub_49010
PUSH            {R4-R10,LR}
SUBS            R7, R0, #0
BEQ             loc_490F8
LDR             R2, [R7]
CLZ             R3, R1
MOV             R3, R3,LSR#5
CMP             R2, #0
MOVNE           R3, #1
CMP             R3, #0
BNE             loc_490F8
LDR             R3, [R1]
CMP             R3, #0
BNE             loc_490F8
ADD             R9, R1, #8
MOV             R8, R1
MOV             R0, R9
BL              sub_45CEC
CMP             R0, #0
BNE             loc_490C8

loc_4905C
MOV             R0, #0
POP             {R4-R10,PC}

loc_49064
BL              sub_480FC
CMP             R0, #0
BEQ             loc_490A8
LDR             R2, [R6,#4]
ADD             R3, R6, #4
CMN             R2, #1
BEQ             loc_49098

loc_49080
LDREX           R2, [R3]
ADD             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_49080
DMB             ISH

loc_49098
MOV             R2, R6
MOV             R1, R4
MOV             R0, R7
BL              sub_48CF4

loc_490A8
LDR             R3, [R8]
MOV             R1, R5
MOV             R0, R9
CMP             R3, #0
BNE             loc_4905C
BL              sub_45D64
CMP             R0, #0
BEQ             loc_4905C

loc_490C8
BL              sub_45D7C
SUBS            R4, R0, #0
BEQ             loc_4905C
SUB             R5, R4, #0x10
MOV             R0, R5
BL              sub_45D84
SUBS            R6, R0, #0
MOV             R1, R4
MOV             R0, R7
BNE             loc_49064
MOV             R0, #0
POP             {R4-R10,PC}

loc_490F8
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}
; End of function sub_49010




; int __fastcall sub_49100(_DWORD *, unsigned int, _DWORD *)
sub_49100
PUSH            {R4-R10,LR}
SUBS            R6, R2, #0
BEQ             loc_49148
CMP             R0, #0
MOV             R4, R0
MOV             R5, R1
BEQ             loc_4913C
SUB             R2, R6, R0
LDR             R3, [R0]
CLZ             R2, R2
MOV             R2, R2,LSR#5
CMP             R3, #1
ORRNE           R2, R2, #1
CMP             R2, #0
BEQ             loc_49184

loc_4913C
LDR             R3, [R6,#4]
CMN             R3, #1
BNE             loc_49150

loc_49148
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}

loc_49150
ADD             R3, R6, #4
DMB             ISH

loc_49158
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_49158

loc_4916C
CMP             R2, #0
BNE             loc_49148
MOV             R0, R6
BL              sub_48A34
MOV             R0, #0xFFFFFFFF
POP             {R4-R10,PC}

loc_49184
LDR             R3, [R0,#0xC]
CMP             R3, R1
BCC             loc_4913C
MOV             R1, #1
BL              sub_47F80
SUBS            R8, R0, #0
BEQ             loc_49208
LDR             R0, [R4,#0x10] ; dest
ADD             R7, R5, #1
MOV             R7, R7,LSL#2
CMP             R0, R8
SUB             R9, R7, #4
ADD             R10, R8, R9
BEQ             loc_49234
MOV             R2, R9  ; n
MOV             R1, R8  ; src
BL              memcpy
LDR             R2, [R4,#0xC]
MOV             R1, R10 ; src
LDR             R0, [R4,#0x10]
SUB             R2, R2, R5
MOV             R2, R2,LSL#2 ; n
ADD             R0, R0, R7 ; dest
BL              memcpy
MOV             R0, R8
BL              sub_47764

loc_491EC
LDR             R3, [R4,#0xC]
MOV             R0, #0
LDR             R2, [R4,#0x10]
ADD             R3, R3, #1
STR             R6, [R2,R9]
STR             R3, [R4,#0xC]
POP             {R4-R10,PC}

loc_49208
LDR             R3, [R6,#4]
CMN             R3, #1
BEQ             loc_49148
ADD             R3, R6, #4
DMB             ISH

loc_4921C
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_4916C
B               loc_4921C

loc_49234
LDR             R2, [R4,#0xC]
MOV             R1, R10 ; src
ADD             R0, R0, R7 ; dest
SUB             R2, R2, R5
MOV             R2, R2,LSL#2 ; n
BL              memmove
B               loc_491EC
; End of function sub_49100

CMP             R2, #0
BEQ             loc_49354
CMP             R0, #0
PUSH            {R4,R5,LR}
MOV             R4, R0
SUB             SP, SP, #0xC
BEQ             loc_4928C
SUB             R3, R2, R4
LDR             R0, [R0]
CLZ             R3, R3
MOV             R3, R3,LSR#5
CMP             R0, #1
ORRNE           R3, R3, #1
CMP             R3, #0
BEQ             loc_492D4

loc_4928C
LDR             R3, [R2,#4]
CMN             R3, #1
BNE             loc_492A4

loc_49298
MOV             R0, #0xFFFFFFFF

loc_4929C
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_492A4
ADD             R3, R2, #4
DMB             ISH

loc_492AC
LDREX           R1, [R3]
SUB             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_492AC
CMP             R1, #0
BNE             loc_49298
MOV             R0, R2
BL              sub_48A34
B               loc_49298

loc_492D4
LDR             R3, [R4,#0xC]
CMP             R3, R1
BLS             loc_4928C
LDR             R3, [R4,#0x10]
MOV             R5, R1,LSL#2
LDR             R0, [R3,R1,LSL#2]
ADD             R3, R3, R5
CMP             R0, #0
BEQ             loc_49304
LDR             R1, [R0,#4]
CMN             R1, #1
BNE             loc_49310

loc_49304
MOV             R0, #0
STR             R2, [R3]
B               loc_4929C

loc_49310
ADD             R3, R0, #4
DMB             ISH

loc_49318
LDREX           R1, [R3]
SUB             R1, R1, #1
STREX           R12, R1, [R3]
CMP             R12, #0
BNE             loc_49318
CMP             R1, #0
LDRNE           R3, [R4,#0x10]
ADDNE           R3, R3, R5
BNE             loc_49304
STR             R2, [SP,#4]
BL              sub_48A34
LDR             R3, [R4,#0x10]
LDR             R2, [SP,#4]
ADD             R3, R3, R5
B               loc_49304

loc_49354
MOV             R0, #0xFFFFFFFF
BX              LR



; int __fastcall sub_4935C(_DWORD *, _DWORD *)
sub_4935C
PUSH            {R4-R6,LR}
SUBS            R6, R1, #0
BEQ             loc_493A0
CMP             R0, #0
MOV             R4, R0
BEQ             loc_49394
SUB             R5, R6, R0
LDR             R3, [R0]
CLZ             R5, R5
MOV             R5, R5,LSR#5
CMP             R3, #1
ORRNE           R5, R5, #1
CMP             R5, #0
BEQ             loc_493DC

loc_49394
LDR             R3, [R6,#4]
CMN             R3, #1
BNE             loc_493A8

loc_493A0
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_493A8
ADD             R3, R6, #4
DMB             ISH

loc_493B0
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BNE             loc_493B0

loc_493C4
CMP             R2, #0
BNE             loc_493A0
MOV             R0, R6
BL              sub_48A34
MOV             R0, #0xFFFFFFFF
POP             {R4-R6,PC}

loc_493DC
MOV             R2, #1
MOV             R1, R2
BL              sub_47F80
CMP             R0, #0
BEQ             loc_4940C
LDR             R3, [R4,#0xC]
MOV             R0, R5
LDR             R1, [R4,#0x10]
ADD             R2, R3, #1
STR             R6, [R1,R3,LSL#2]
STR             R2, [R4,#0xC]
POP             {R4-R6,PC}

loc_4940C
LDR             R3, [R6,#4]
CMN             R3, #1
BEQ             loc_493A0
ADD             R3, R6, #4
DMB             ISH

loc_49420
LDREX           R2, [R3]
SUB             R2, R2, #1
STREX           R1, R2, [R3]
CMP             R1, #0
BEQ             loc_493C4
B               loc_49420
; End of function sub_4935C




; bool __fastcall sub_49438(int *, int *)
sub_49438
CMP             R1, #0
CMPNE           R0, #0
BEQ             loc_49448
B               sub_48124

loc_49448
MOV             R0, #0
BX              LR
; End of function sub_49438




; double *__fastcall sub_49450(int)
sub_49450
PUSH            {R4-R8,LR}
SUBS            R4, R0, #0
BEQ             def_49464 ; jumptable 00049464 default case
LDR             R3, [R4]
CMP             R3, #7  ; switch 8 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_49464 ; jumptable 00049464 default case
jpt_49464 DCD loc_49498 ; jump table for switch statement
DCD loc_49540
DCD loc_495DC
DCD loc_495EC
DCD loc_495F8
DCD loc_4948C
DCD loc_4948C
DCD loc_4948C

loc_4948C               ; jumptable 00049464 cases 5-7
MOV             R7, R4

loc_49490
MOV             R0, R7
POP             {R4-R8,PC}

loc_49498               ; jumptable 00049464 case 0
BL              sub_48078
SUBS            R7, R0, #0
BEQ             def_49464 ; jumptable 00049464 default case
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_49490
ADD             R8, R4, #8
MOV             R0, R8
BL              sub_45CEC
CMP             R0, #0
BNE             loc_49518
B               loc_49490

loc_494C8
LDR             R1, [R2,#4]
CMN             R1, #1
BEQ             loc_494EC

loc_494D4
LDREX           R1, [R3]
ADD             R1, R1, #1
STREX           R0, R1, [R3]
CMP             R0, #0
BNE             loc_494D4
DMB             ISH

loc_494EC
MOV             R1, R5
MOV             R0, R7
BL              sub_48CF4
LDR             R3, [R4]
MOV             R1, R6
MOV             R0, R8
CMP             R3, #0
BNE             loc_49490
BL              sub_45D64
CMP             R0, #0
BEQ             loc_49490

loc_49518
BL              sub_45D7C
SUBS            R5, R0, #0
BEQ             loc_49490
SUB             R6, R5, #0x10
MOV             R0, R6
BL              sub_45D84
SUBS            R2, R0, #0
ADD             R3, R2, #4
BNE             loc_494C8
B               loc_49490

loc_49540               ; jumptable 00049464 case 1
BL              sub_48408
SUBS            R7, R0, #0
BEQ             def_49464 ; jumptable 00049464 default case
LDR             R3, [R4]
CMP             R3, #1
BNE             loc_49490
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_49490
MOV             R5, #0
B               loc_4957C

loc_4956C
LDR             R3, [R4,#0xC]
ADD             R5, R5, #1
CMP             R5, R3
BCS             loc_49490

loc_4957C
CMP             R3, R5
MOV             R1, #0
BLS             loc_495C0
LDR             R3, [R4,#0x10]
LDR             R1, [R3,R5,LSL#2]
CMP             R1, #0
ADD             R2, R1, #4
BEQ             loc_495C0
LDR             R3, [R1,#4]
CMN             R3, #1
BEQ             loc_495C0

loc_495A8
LDREX           R3, [R2]
ADD             R3, R3, #1
STREX           R0, R3, [R2]
CMP             R0, #0
BNE             loc_495A8
DMB             ISH

loc_495C0
MOV             R0, R7
BL              sub_4935C
LDR             R3, [R4]
CMP             R3, #1
BEQ             loc_4956C
MOV             R0, R7
POP             {R4-R8,PC}

loc_495DC               ; jumptable 00049464 case 2
LDRD            R0, R1, [R4,#8]
MOV             R2, #0
POP             {R4-R8,LR}
B               sub_4800C

loc_495EC               ; jumptable 00049464 case 3
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_47F30

loc_495F8               ; jumptable 00049464 case 4
VLDR            D0, [R4,#8]
POP             {R4-R8,LR}
B               sub_488DC

def_49464               ; jumptable 00049464 default case
MOV             R7, #0
B               loc_49490
; End of function sub_49450




; double *__fastcall sub_4960C(int)
sub_4960C
PUSH            {R4-R8,LR}
SUBS            R4, R0, #0
BEQ             def_49620 ; jumptable 00049620 default case
LDR             R3, [R4]
CMP             R3, #7  ; switch 8 cases
LDRLS           PC, [PC,R3,LSL#2] ; switch jump
B               def_49620 ; jumptable 00049620 default case
jpt_49620 DCD loc_49654 ; jump table for switch statement
DCD loc_496D0
DCD loc_49740
DCD loc_49750
DCD loc_4975C
DCD loc_49648
DCD loc_49648
DCD loc_49648

loc_49648               ; jumptable 00049620 cases 5-7
MOV             R6, R4

loc_4964C
MOV             R0, R6
POP             {R4-R8,PC}

loc_49654               ; jumptable 00049620 case 0
BL              sub_48078
SUBS            R6, R0, #0
BEQ             def_49620 ; jumptable 00049620 default case
LDR             R3, [R4]
CMP             R3, #0
BNE             loc_4964C
ADD             R8, R4, #8
MOV             R0, R8
BL              sub_45CEC
SUBS            R5, R0, #0
BNE             loc_49690
B               loc_4964C

loc_49684
BL              sub_45D64
SUBS            R5, R0, #0
BEQ             loc_4964C

loc_49690
MOV             R0, R5
BL              sub_45D7C
MOV             R7, R0
MOV             R0, R5
BL              sub_45D84
BL              sub_4960C
MOV             R1, R7
MOV             R2, R0
MOV             R0, R6
BL              sub_48CF4
LDR             R3, [R4]
MOV             R1, R5
MOV             R0, R8
CMP             R3, #0
BEQ             loc_49684
B               loc_4964C

loc_496D0               ; jumptable 00049620 case 1
BL              sub_48408
SUBS            R6, R0, #0
BEQ             def_49620 ; jumptable 00049620 default case
LDR             R3, [R4]
CMP             R3, #1
BNE             loc_4964C
LDR             R3, [R4,#0xC]
CMP             R3, #0
BEQ             loc_4964C
MOV             R5, #0
B               loc_4970C

loc_496FC
LDR             R3, [R4,#0xC]
ADD             R5, R5, #1
CMP             R5, R3
BCS             loc_4964C

loc_4970C
CMP             R3, R5
MOV             R0, #0
LDRHI           R3, [R4,#0x10]
LDRHI           R0, [R3,R5,LSL#2]
BL              sub_4960C
MOV             R1, R0
MOV             R0, R6
BL              sub_4935C
LDR             R3, [R4]
CMP             R3, #1
BEQ             loc_496FC
MOV             R0, R6
POP             {R4-R8,PC}

loc_49740               ; jumptable 00049620 case 2
LDRD            R0, R1, [R4,#8]
MOV             R2, #0
POP             {R4-R8,LR}
B               sub_4800C

loc_49750               ; jumptable 00049620 case 3
MOV             R0, R4
POP             {R4-R8,LR}
B               sub_47F30

loc_4975C               ; jumptable 00049620 case 4
VLDR            D0, [R4,#8]
POP             {R4-R8,LR}
B               sub_488DC

def_49620               ; jumptable 00049620 default case
MOV             R6, #0
B               loc_4964C
; End of function sub_4960C




; char *__fastcall sub_49770(char *, char *s)
sub_49770
PUSH            {R4-R6,LR}
MOV             R4, R0
MOV             R0, R1  ; s
MOV             R5, R1
BL              strlen
CMP             R0, #0x4F ; 'O'
ADD             R12, R4, #0xC
BLS             loc_497C0
MOVW            R3, #:lower16:word_4A834
SUB             R0, R0, #0x4C ; 'L'
MOVT            R3, #:upper16:word_4A834
ADD             R1, R5, R0 ; src
LDRH            LR, [R3]
ADD             R0, R4, #0xF ; dest
LDRB            R3, [R3,#(byte_4A836 - 0x4A834)]
MOV             R2, #0x4D ; 'M' ; n
STRH            LR, [R4,#0xC]
STRB            R3, [R12,#2]
POP             {R4-R6,LR}
B               strncpy

loc_497C0               ; n
ADD             R2, R0, #1
MOV             R1, R5  ; src
MOV             R0, R12 ; dest
POP             {R4-R6,LR}
B               strncpy
; End of function sub_49770




; char *__fastcall sub_497D4(char *result, char *)
sub_497D4
SUBS            R3, R0, #0
BXEQ            LR
CMP             R1, #0
MOV             R12, #0
MOV             R2, #0xFFFFFFFF
PUSH            {LR}
MOV             LR, R1
STRB            R12, [R3,#0x5C]
STR             R12, [R3,#8]
STR             R2, [R3]
STR             R2, [R3,#4]
BNE             loc_4980C
STRB            R1, [R3,#0xC]
POP             {PC}

loc_4980C
POP             {LR}
B               sub_49770
; End of function sub_497D4




; char *__fastcall sub_49814(char *, char *s)
sub_49814
CMP             R1, #0
CMPNE           R0, #0
BXEQ            LR
B               sub_49770
; End of function sub_49814




; int sub_49824(int result, int, int, int, char, char *format, ...)
sub_49824

var_8= -8
arg_0=  0xC
format=  0x10
arg=  0x14

PUSH            {R4,R5,LR}
SUBS            R4, R0, #0
SUB             SP, SP, #0xC
ADD             R12, SP, #0xC+arg
STR             R12, [SP,#0xC+var_8]
BEQ             loc_49848
LDRB            R5, [R4,#0x5C]
CMP             R5, #0
BEQ             loc_49850

loc_49848
ADD             SP, SP, #0xC
POP             {R4,R5,PC}

loc_49850
MOV             LR, R3
STR             R1, [R4]
MOV             R3, R12 ; arg
STR             R2, [R4,#4]
STR             LR, [R4,#8]
MOV             R1, #0x9F ; maxlen
LDR             R2, [SP,#0xC+format] ; format
ADD             R0, R4, #0x5C ; '\' ; s
BL              vsnprintf
LDR             R3, [SP,#0xC+arg_0]
STRB            R5, [R4,#0xFA]
STRB            R3, [R4,#0xFB]
ADD             SP, SP, #0xC
POP             {R4,R5,PC}
; End of function sub_49824




; int __fastcall sub_49888(int result, int, int, int, char, char *format, __gnuc_va_list arg)
sub_49888

arg_0=  0x10
format=  0x14
arg=  0x18

PUSH            {R4-R6,LR}
SUBS            R4, R0, #0
POPEQ           {R4-R6,PC}
LDRB            R5, [R4,#0x5C]
CMP             R5, #0
POPNE           {R4-R6,PC}
MOV             R12, R3
STR             R1, [R4]
LDR             R3, [SP,#arg] ; arg
MOV             R1, #0x9F ; maxlen
STR             R2, [R4,#4]
ADD             R0, R4, #0x5C ; '\' ; s
LDR             R2, [SP,#format] ; format
STR             R12, [R4,#8]
BL              vsnprintf
LDR             R3, [SP,#arg_0]
STRB            R5, [R4,#0xFA]
STRB            R3, [R4,#0xFB]
POP             {R4-R6,PC}
; End of function sub_49888

ALIGN 8
CODE16


; Alternative name is '__aeabi_uidiv'
; Alternative name is '.udivsi3_skip_div0_test'
; Attributes: info_from_lumina

__udivsi3
SUBS            R2, R1, #1
IT EQ
BXEQ            LR
BCC.W           loc_49B2A
CMP             R0, R1
BLS.W           loc_49B14
TST             R1, R2
BEQ.W           loc_49B1C
CLZ.W           R3, R0
CLZ.W           R2, R1
SUB.W           R3, R2, R3
RSB.W           R3, R3, #0x1F
ADR             R2, loc_49910
ADD.W           R3, R2, R3,LSL#4
MOV.W           R2, #0
MOV             PC, R3
ALIGN 0x10

loc_49910
CMP.W           R0, R1,LSL#31
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#31
CMP.W           R0, R1,LSL#30
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#30
CMP.W           R0, R1,LSL#29
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#29
CMP.W           R0, R1,LSL#28
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#28
CMP.W           R0, R1,LSL#27
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#27
CMP.W           R0, R1,LSL#26
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#26
CMP.W           R0, R1,LSL#25
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#25
CMP.W           R0, R1,LSL#24
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#24
CMP.W           R0, R1,LSL#23
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#23
CMP.W           R0, R1,LSL#22
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#22
CMP.W           R0, R1,LSL#21
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#21
CMP.W           R0, R1,LSL#20
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#20
CMP.W           R0, R1,LSL#19
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#19
CMP.W           R0, R1,LSL#18
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#18
CMP.W           R0, R1,LSL#17
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#17
CMP.W           R0, R1,LSL#16
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#16
CMP.W           R0, R1,LSL#15
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#15
CMP.W           R0, R1,LSL#14
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#14
CMP.W           R0, R1,LSL#13
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#13
CMP.W           R0, R1,LSL#12
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#12
CMP.W           R0, R1,LSL#11
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#11
CMP.W           R0, R1,LSL#10
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#10
CMP.W           R0, R1,LSL#9
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#9
CMP.W           R0, R1,LSL#8
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#8
CMP.W           R0, R1,LSL#7
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#7
CMP.W           R0, R1,LSL#6
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#6
CMP.W           R0, R1,LSL#5
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#5
CMP.W           R0, R1,LSL#4
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#4
CMP.W           R0, R1,LSL#3
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#3
CMP.W           R0, R1,LSL#2
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#2
CMP.W           R0, R1,LSL#1
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1,LSL#1
CMP.W           R0, R1
NOP
ADC.W           R2, R2, R2
IT CS
SUBCS.W         R0, R0, R1
MOV             R0, R2
BX              LR

loc_49B14
ITE EQ
MOVEQ           R0, #1
MOVNE           R0, #0
BX              LR

loc_49B1C
CLZ.W           R2, R1
RSB.W           R2, R2, #0x1F
LSR.W           R0, R0, R2
BX              LR

loc_49B2A
CBZ             R0, loc_49B30
MOV.W           R0, #0xFFFFFFFF

loc_49B30
B.W             loc_4A1A8
; End of function __udivsi3




; int __fastcall sub_49B34(unsigned int, unsigned int)
sub_49B34
CMP             R1, #0
BEQ             loc_49B2A
PUSH.W          {R0,R1,LR}
BL              __udivsi3
POP.W           {R1,R2,LR}
MUL             R3, R2, R0
SUB.W           R1, R1, R3
BX              LR
; End of function sub_49B34

ALIGN 0x10



; int __fastcall sub_49B50(int result, unsigned int)
sub_49B50
CMP             R1, #0
BEQ.W           loc_49DD2

loc_49B56
EOR.W           R12, R0, R1
IT MI
NEGMI           R1, R1
SUBS            R2, R1, #1
BEQ.W           loc_49DA2
MOVS            R3, R0
IT MI
NEGMI           R3, R0
CMP             R3, R1
BLS.W           loc_49DAC
TST             R1, R2
BEQ.W           loc_49DBC
CLZ.W           R2, R3
CLZ.W           R0, R1
SUB.W           R2, R0, R2
RSB.W           R2, R2, #0x1F
ADR             R0, loc_49B98
ADD.W           R2, R0, R2,LSL#4
MOV.W           R0, #0
MOV             PC, R2
ALIGN 8

loc_49B98
CMP.W           R3, R1,LSL#31
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#31
CMP.W           R3, R1,LSL#30
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#30
CMP.W           R3, R1,LSL#29
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#29
CMP.W           R3, R1,LSL#28
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#28
CMP.W           R3, R1,LSL#27
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#27
CMP.W           R3, R1,LSL#26
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#26
CMP.W           R3, R1,LSL#25
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#25
CMP.W           R3, R1,LSL#24
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#24
CMP.W           R3, R1,LSL#23
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#23
CMP.W           R3, R1,LSL#22
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#22
CMP.W           R3, R1,LSL#21
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#21
CMP.W           R3, R1,LSL#20
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#20
CMP.W           R3, R1,LSL#19
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#19
CMP.W           R3, R1,LSL#18
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#18
CMP.W           R3, R1,LSL#17
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#17
CMP.W           R3, R1,LSL#16
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#16
CMP.W           R3, R1,LSL#15
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#15
CMP.W           R3, R1,LSL#14
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#14
CMP.W           R3, R1,LSL#13
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#13
CMP.W           R3, R1,LSL#12
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#12
CMP.W           R3, R1,LSL#11
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#11
CMP.W           R3, R1,LSL#10
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#10
CMP.W           R3, R1,LSL#9
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#9
CMP.W           R3, R1,LSL#8
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#8
CMP.W           R3, R1,LSL#7
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#7
CMP.W           R3, R1,LSL#6
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#6
CMP.W           R3, R1,LSL#5
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#5
CMP.W           R3, R1,LSL#4
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#4
CMP.W           R3, R1,LSL#3
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#3
CMP.W           R3, R1,LSL#2
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#2
CMP.W           R3, R1,LSL#1
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1,LSL#1
CMP.W           R3, R1
NOP
ADC.W           R0, R0, R0
IT CS
SUBCS.W         R3, R3, R1
CMP.W           R12, #0
IT MI
NEGMI           R0, R0
BX              LR

loc_49DA2
TEQ.W           R12, R0
IT MI
NEGMI           R0, R0
BX              LR

loc_49DAC
IT CC
MOVCC           R0, #0
ITT EQ
MOVEQ.W         R0, R12,ASR#31
ORREQ.W         R0, R0, #1
BX              LR

loc_49DBC
CLZ.W           R2, R1
RSB.W           R2, R2, #0x1F
CMP.W           R12, #0
LSR.W           R0, R3, R2
IT MI
NEGMI           R0, R0
BX              LR

loc_49DD2
CMP             R0, #0
IT GT
MOVGT           R0, #0x7FFFFFFF
IT LT
MOVLT.W         R0, #0x80000000
B.W             loc_4A1A8
; End of function sub_49B50

CMP             R1, #0
BEQ             loc_49DD2
PUSH.W          {R0,R1,LR}
BL              loc_49B56
POP.W           {R1,R2,LR}
MUL             R3, R2, R0
SUB.W           R1, R1, R3
BX              LR
ALIGN 0x10
EOR.W           R1, R1, #0x80000000
B               loc_49E0C
ALIGN 4
EOR.W           R3, R3, #0x80000000

loc_49E0C
PUSH            {R4,R5,LR}
MOV.W           R4, R1,LSL#1
MOV.W           R5, R3,LSL#1
TEQ.W           R4, R5
IT EQ
TEQEQ.W         R0, R2
ITTTT NE
ORRSNE.W        R12, R4, R0
ORRSNE.W        R12, R5, R2
MVNSNE.W        R12, R4,ASR#21
MVNSNE.W        R12, R5,ASR#21
BEQ.W           loc_49FFA
MOV.W           R4, R4,LSR#21
RSBS.W          R5, R4, R5,LSR#21
IT LT
NEGLT           R5, R5
BLE             loc_49E5E
ADD             R4, R5
EOR.W           R2, R0, R2
EOR.W           R3, R1, R3
EOR.W           R0, R2, R0
EOR.W           R1, R3, R1
EOR.W           R2, R0, R2
EOR.W           R3, R1, R3

loc_49E5E
CMP             R5, #0x36 ; '6'
IT HI
POPHI           {R4,R5,PC}
TST.W           R1, #0x80000000
MOV.W           R1, R1,LSL#12
MOV.W           R12, #0x100000
ORR.W           R1, R12, R1,LSR#12
BEQ             loc_49E7C
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1

loc_49E7C
TST.W           R3, #0x80000000
MOV.W           R3, R3,LSL#12
ORR.W           R3, R12, R3,LSR#12
BEQ             loc_49E90
NEGS            R2, R2
SBC.W           R3, R3, R3,LSL#1

loc_49E90
TEQ.W           R4, R5
BEQ.W           loc_49FE6

loc_49E98
SUB.W           R4, R4, #1
RSBS.W          LR, R5, #0x20 ; ' '
BLT             loc_49EBE
LSL.W           R12, R2, LR
LSR.W           R2, R2, R5
ADDS            R0, R0, R2
ADC.W           R1, R1, #0
LSL.W           R2, R3, LR
ADDS            R0, R0, R2
ASR.W           R3, R3, R5
ADCS            R1, R3
B               loc_49EDC

loc_49EBE
SUB.W           R5, R5, #0x20 ; ' '
ADD.W           LR, LR, #0x20 ; ' '
CMP             R2, #1
LSL.W           R12, R3, LR
IT CS
ORRCS.W         R12, R12, #2
ASR.W           R3, R3, R5
ADDS            R0, R0, R3
ADCS.W          R1, R1, R3,ASR#31

loc_49EDC
AND.W           R5, R1, #0x80000000
BPL             loc_49EF2
MOV.W           LR, #0
RSBS.W          R12, R12, #0
SBCS.W          R0, LR, R0
SBC.W           R1, LR, R1
; START OF FUNCTION CHUNK FOR sub_4A11C

loc_49EF2
CMP.W           R1, #0x100000
BCC             loc_49F30
CMP.W           R1, #0x200000
BCC             loc_49F18
LSRS            R1, R1, #1
MOVS.W          R0, R0,RRX
MOV.W           R12, R12,RRX
ADD.W           R4, R4, #1
MOV.W           R2, R4,LSL#21
CMN.W           R2, #0x400000
BCS.W           loc_4A04C

loc_49F18
CMP.W           R12, #0x80000000
IT EQ
MOVSEQ.W        R12, R0,LSR#1
ADCS.W          R0, R0, #0
ADC.W           R1, R1, R4,LSL#20
ORR.W           R1, R1, R5
POP             {R4,R5,PC}

loc_49F30
MOVS.W          R12, R12,LSL#1
ADCS            R0, R0
ADC.W           R1, R1, R1
TST.W           R1, #0x100000
SUB.W           R4, R4, #1
BNE             loc_49F18

loc_49F44
TEQ.W           R1, #0
ITT EQ
MOVEQ           R1, R0
MOVEQ           R0, #0
CLZ.W           R3, R1
IT EQ
ADDEQ           R3, #0x20 ; ' '
SUB.W           R3, R3, #0xB
SUBS.W          R2, R3, #0x20 ; ' '
BGE             loc_49F7A
ADDS            R2, #0xC
BLE             loc_49F76
ADD.W           R12, R2, #0x14
RSB.W           R2, R2, #0xC
LSL.W           R0, R1, R12
LSR.W           R1, R1, R2
B               loc_49F90

loc_49F76
ADD.W           R2, R2, #0x14

loc_49F7A
IT LE
RSBLE.W         R12, R2, #0x20 ; ' '
LSL.W           R1, R1, R2
LSR.W           R12, R0, R12
ITT LE
ORRLE.W         R1, R1, R12
LSLLE           R0, R2

loc_49F90
SUBS            R4, R4, R3
ITTT GE
ADDGE.W         R1, R1, R4,LSL#20
ORRGE           R1, R5
POPGE           {R4,R5,PC}
MVN.W           R4, R4
SUBS            R4, #0x1F
BGE             loc_49FDE
ADDS            R4, #0xC
BGT             loc_49FC6
ADD.W           R4, R4, #0x14
RSB.W           R2, R4, #0x20 ; ' '
LSR.W           R0, R0, R4
LSL.W           R3, R1, R2
ORR.W           R0, R0, R3
LSR.W           R3, R1, R4
ORR.W           R1, R5, R3
POP             {R4,R5,PC}

loc_49FC6
RSB.W           R4, R4, #0xC
RSB.W           R2, R4, #0x20 ; ' '
LSR.W           R0, R0, R2
LSL.W           R3, R1, R4
ORR.W           R0, R0, R3
MOV             R1, R5
POP             {R4,R5,PC}

loc_49FDE
LSR.W           R0, R1, R4
MOV             R1, R5
POP             {R4,R5,PC}
; END OF FUNCTION CHUNK FOR sub_4A11C

loc_49FE6
TEQ.W           R4, #0
EOR.W           R3, R3, #0x100000
ITTE EQ
EOREQ.W         R1, R1, #0x100000
ADDEQ           R4, #1
SUBNE           R5, #1
B               loc_49E98

loc_49FFA
MVNS.W          R12, R4,ASR#21
IT NE
MVNSNE.W        R12, R5,ASR#21
BEQ             loc_4A05A
TEQ.W           R4, R5
IT EQ
TEQEQ.W         R0, R2
BEQ             loc_4A01E
ORRS.W          R12, R4, R0
ITT EQ
MOVEQ           R1, R3
MOVEQ           R0, R2
POP             {R4,R5,PC}

loc_4A01E
TEQ.W           R1, R3
ITTT NE
MOVNE           R1, #0
MOVNE           R0, #0
POPNE           {R4,R5,PC}
MOVS.W          R12, R4,LSR#21
BNE             loc_4A03C
LSLS            R0, R0, #1
ADCS            R1, R1
IT CS
ORRCS.W         R1, R1, #0x80000000
POP             {R4,R5,PC}

loc_4A03C
ADDS.W          R4, R4, #0x400000
ITT CC
ADDCC.W         R1, R1, #0x100000
POPCC           {R4,R5,PC}
AND.W           R5, R1, #0x80000000
; START OF FUNCTION CHUNK FOR sub_4A11C

loc_4A04C
ORR.W           R1, R5, #0x7F000000
ORR.W           R1, R1, #0xF00000
MOV.W           R0, #0
POP             {R4,R5,PC}
; END OF FUNCTION CHUNK FOR sub_4A11C

loc_4A05A
MVNS.W          R12, R4,ASR#21
ITTE NE
MOVNE           R1, R3
MOVNE           R0, R2
MVNSEQ.W        R12, R5,ASR#21
ITT NE
MOVNE           R3, R1
MOVNE           R2, R0
ORRS.W          R4, R0, R1,LSL#12
ITTE EQ
ORRSEQ.W        R5, R2, R3,LSL#12
TEQEQ.W         R1, R3
ORRNE.W         R1, R1, #0x80000
POP             {R4,R5,PC}
ALIGN 4
TEQ.W           R0, #0
ITT EQ
MOVEQ           R1, #0
BXEQ            LR
PUSH            {R4,R5,LR}
MOV             R4, #0x432
MOV.W           R5, #0
MOV.W           R1, #0
B               loc_49F44
ALIGN 4
TEQ.W           R0, #0
ITT EQ
MOVEQ           R1, #0
BXEQ            LR
PUSH            {R4,R5,LR}
MOV             R4, #0x432
ANDS.W          R5, R0, #0x80000000
IT MI
NEGMI           R0, R0
MOV.W           R1, #0
B               loc_49F44
ALIGN 4
LSLS            R2, R0, #1
MOV.W           R1, R2,ASR#3
MOV.W           R1, R1,RRX
MOV.W           R0, R2,LSL#28
ITTTT NE
ANDSNE.W        R3, R2, #0xFF000000
TEQNE.W         R3, #0xFF000000
EORNE.W         R1, R1, #0x38000000
BXNE            LR
BICS.W          R2, R2, #0xFF000000
IT EQ
BXEQ            LR
TEQ.W           R3, #0xFF000000
ITT EQ
ORREQ.W         R1, R1, #0x80000
BXEQ            LR
PUSH            {R4,R5,LR}
MOV.W           R4, #0x380
AND.W           R5, R1, #0x80000000
BIC.W           R1, R1, #0x80000000
B               loc_49F44
ALIGN 4



; int __fastcall sub_4A10C(__int64)
sub_4A10C
ORRS.W          R2, R0, R1
IT EQ
BXEQ            LR
PUSH            {R4,R5,LR}
MOV.W           R5, #0
B               loc_4A132
; End of function sub_4A10C




; int __fastcall sub_4A11C(__int64)
sub_4A11C

; FUNCTION CHUNK AT 00049EF2 SIZE 000000F4 BYTES
; FUNCTION CHUNK AT 0004A04C SIZE 0000000E BYTES

ORRS.W          R2, R0, R1
IT EQ
BXEQ            LR
PUSH            {R4,R5,LR}
ANDS.W          R5, R1, #0x80000000
BPL             loc_4A132
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1

loc_4A132
MOV             R4, #0x432
MOVS.W          R12, R1,LSR#22
BEQ.W           loc_49EF2
MOV.W           R2, #3
MOVS.W          R12, R12,LSR#3
IT NE
ADDNE           R2, #3
MOVS.W          R12, R12,LSR#3
IT NE
ADDNE           R2, #3
ADD.W           R2, R2, R12,LSR#3
RSB.W           R3, R2, #0x20 ; ' '
LSL.W           R12, R0, R3
LSR.W           R0, R0, R2
LSL.W           LR, R1, R3
ORR.W           R0, R0, LR
LSR.W           R1, R1, R2
ADD             R4, R2
B               loc_49EF2
; End of function sub_4A11C

ALIGN 4



; int __fastcall sub_4A178(unsigned __int64, unsigned __int64)
sub_4A178

var_10= -0x10
var_C= -0xC
var_8= -8

CBNZ            R3, loc_4A190
CBNZ            R2, loc_4A190
CMP             R1, #0
IT EQ
CMPEQ           R0, #0
ITT NE
MOVNE.W         R1, #0xFFFFFFFF
MOVNE.W         R0, #0xFFFFFFFF
B.W             loc_4A1A8

loc_4A190
SUB.W           R12, SP, #8
STRD.W          R12, LR, [SP,#var_10]!
BL              __udivmoddi4
LDR.W           LR, [SP,#0x10+var_C]
LDRD.W          R2, R3, [SP,#0x10+var_8]
ADD             SP, SP, #0x10
BX              LR

loc_4A1A8
PUSH            {R1,LR}
MOV.W           R0, #8  ; sig
BLX             raise
POP             {R1,PC}
; End of function sub_4A178



; Alternative name is '__aeabi_d2lz'
; Attributes: info_from_lumina

; DItype __fastcall _fixdfdi(DFtype a)
__fixdfdi
VMOV            D7, R0, R1
VCMPE.F64       D7, #0.0
VMRS            APSR_nzcv, FPSCR
BMI             loc_4A1C6
B.W             __fixunsdfdi

loc_4A1C6
PUSH            {R3,LR}
EOR.W           R1, R1, #0x80000000
BL              __fixunsdfdi
NEGS            R0, R0
SBC.W           R1, R1, R1,LSL#1
POP             {R3,PC}
; End of function __fixdfdi



; Alternative name is '__aeabi_d2ulz'
; Attributes: info_from_lumina

; UDItype __fastcall _fixunsdfdi(DFtype a)
__fixunsdfdi
VLDR            D7, =2.32830644e-10
VMOV            D6, R0, R1
VLDR            D5, =4.2949673e9
VMUL.F64        D7, D6, D7
VCVT.U32.F64    S14, D7
VCVT.F64.U32    D4, S14
VMOV            R1, S14
VMLS.F64        D6, D4, D5
VCVT.U32.F64    S15, D6
VMOV            R0, S15
BX              LR
; End of function __fixunsdfdi

ALIGN 8
dbl_4A208 DCFD 2.32830644e-10
dbl_4A210 DCFD 4.2949673e9


; Attributes: info_from_lumina

; UDItype __fastcall _udivmoddi4(UDItype n, UDItype d, UDItype *rp)
__udivmoddi4

arg_0=  0x24

CMP             R1, R3
PUSH.W          {R4-R11,LR}
IT EQ
CMPEQ           R0, R2
MOV             R4, R0
IT CC
MOVCC           R0, #0
MOV             R5, R1
LDR.W           LR, [SP,#arg_0]
IT CC
MOVCC           R1, R0
BCC             loc_4A306
MOV             R10, R2
MOV             R11, R3
CLZ.W           R12, R3
CMP             R3, #0
BEQ             loc_4A31C
CLZ.W           R1, R5
CMP             R5, #0
BEQ             loc_4A314

loc_4A248
SUB.W           R12, R12, R1
SUB.W           R8, R12, #0x20 ; ' '
LSL.W           R7, R11, R12
LSL.W           R1, R10, R8
RSB.W           R9, R12, #0x20 ; ' '
LSR.W           R3, R10, R9
LSL.W           R6, R10, R12
ORRS            R7, R1
ORRS            R7, R3
CMP             R5, R7
IT EQ
CMPEQ           R4, R6
ITT CC
MOVCC           R0, #0
MOVCC           R1, R0
BCC             loc_4A28C
MOVS            R0, #1
SUBS            R4, R4, R6
LSL.W           R1, R0, R8
LSR.W           R3, R0, R9
LSL.W           R0, R0, R12
SBC.W           R5, R5, R7
ORRS            R1, R3

loc_4A28C
CMP.W           R12, #0
BEQ             loc_4A306
LSRS            R7, R7, #1
MOV.W           R6, R6,RRX
MOV             R2, R12
B               loc_4A2B2

loc_4A29C
SUBS            R3, R4, R6
SBC.W           R10, R5, R7
ADDS            R3, R3, R3
ADC.W           R10, R10, R10
ADDS            R4, R3, #1
ADC.W           R5, R10, #0
SUBS            R2, #1
BEQ             loc_4A2C2

loc_4A2B2
CMP             R5, R7
IT EQ
CMPEQ           R4, R6
BCS             loc_4A29C
ADDS            R4, R4, R4
ADCS            R5, R5
SUBS            R2, #1
BNE             loc_4A2B2

loc_4A2C2
LSR.W           R3, R4, R12
LSL.W           R9, R5, R9
LSR.W           R2, R5, R12
LSR.W           R8, R5, R8
ADDS            R0, R0, R4
ORR.W           R3, R3, R9
ORR.W           R4, R3, R8
ADC.W           R1, R5, R1
MOV             R5, R2
SUB.W           R2, R12, #0x20 ; ' '
LSL.W           R3, R5, R12
LSL.W           R6, R4, R12
LSL.W           R2, R4, R2
RSB.W           R12, R12, #0x20 ; ' '
LSR.W           R12, R4, R12
ORRS            R3, R2
SUBS            R0, R0, R6
ORR.W           R3, R3, R12
SBC.W           R1, R1, R3

loc_4A306
CMP.W           LR, #0
BEQ             locret_4A310
STRD.W          R4, R5, [LR]

locret_4A310
POP.W           {R4-R11,PC}

loc_4A314
CLZ.W           R1, R4
ADDS            R1, #0x20 ; ' '
B               loc_4A248

loc_4A31C
CLZ.W           R12, R2
CLZ.W           R1, R5
ADD.W           R12, R12, #0x20 ; ' '
CMP             R5, #0
BNE             loc_4A248
B               loc_4A314
; End of function __udivmoddi4

ALIGN 0x10



; int __fastcall init(int, int, int)
init
PUSH.W          {R3-R9,LR}
MOV             R7, R0
LDR             R6, =(off_66F04 - 0x4A342)
MOV             R8, R1
MOV             R9, R2
LDR             R5, =(off_66F00 - 0x4A348)
ADD             R6, PC  ; off_66F04
BLX             .init_proc
ADD             R5, PC  ; off_66F00
SUBS            R6, R6, R5
ASRS            R6, R6, #2
BEQ             locret_4A360
MOVS            R4, #0

loc_4A34E
ADDS            R4, #1
LDR.W           R3, [R5],#4
MOV             R2, R9
MOV             R1, R8
MOV             R0, R7
BLX             R3
CMP             R6, R4
BNE             loc_4A34E

locret_4A360
POP.W           {R3-R9,PC}
; End of function init

off_4A364 DCD off_66F04 - 0x4A342
off_4A368 DCD off_66F00 - 0x4A348
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_10]
ALIGN 0x10
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x4A370
CODE32



; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x4A378
DCB    1
DCB    0
DCB    2
DCB    0
aEscapeString DCB "escape_string",0
ALIGN 4
aPoolChange DCB "pool_change",0
aAddItemBuf DCB "add_item_buf",0
ALIGN 4
aNumascs DCB "numascs",0
aAscdevice DCB "ascdevice",0
ALIGN 4
aTidyup DCB "tidyup",0
ALIGN 4
aQuitThread DCB "quit_thread",0
aRestartThread_0 DCB "restart_thread",0
ALIGN 0x10
aPrintData DCB "print_data",0
ALIGN 4
aAscenable DCB "ascenable",0
ALIGN 4
aSwitchpool DCB "switchpool",0
ALIGN 4
aMinecoin DCB "minecoin",0
ALIGN 0x10
aSummary_1 DCB "summary",0
DCD aThreadFailedTo     ; "Thread failed to init"
DCD aThreadGotZeroH     ; "Thread got zero hashes"
DCD aThreadFailedTo_0   ; "Thread failed to queue work"
DCD aDeviceIdleFor6     ; "Device idle for 60s"
DCD aDeviceDeadIdle     ; "Device dead - idle for 600s"
DCD aDeviceFailedTo     ; "Device failed to start"
DCD aDeviceOverHeat     ; "Device over heated"
DCD aDeviceReachedT     ; "Device reached thermal cutoff"
DCD aDeviceCommsErr     ; "Device comms error"
; const char aApi_0[]
aApi_0 DCB "api",0
DCB 0x7B ; {
DCB 0x22 ; "
DCB 0x53 ; S
DCB 0x54 ; T
DCB 0x41 ; A
DCB 0x54 ; T
DCB 0x55 ; U
DCB 0x53 ; S
DCB 0x22 ; "
DCB 0x3A ; :
DCB 0x22 ; "
DCB 0x42 ; B
DCB 0x59 ; Y
DCB 0x45 ; E
DCB 0x22 ; "
DCB    0
unk_4A450 DCB 0x42 ; B
DCB 0x59 ; Y
DCB 0x45 ; E
DCB    0
DCB 0x7B ; {
DCB 0x22 ; "
DCB 0x53 ; S
DCB 0x54 ; T
DCB 0x41 ; A
DCB 0x54 ; T
DCB 0x55 ; U
DCB 0x53 ; S
DCB 0x22 ; "
DCB 0x3A ; :
DCB 0x22 ; "
DCB 0x52 ; R
DCB 0x45 ; E
DCB 0x53 ; S
DCB 0x54 ; T
DCB 0x41 ; A
DCB 0x52 ; R
DCB 0x54 ; T
DCB 0x22 ; "
DCB    0
aRestart DCB "RESTART",0
aFailedToMalloc_0 DCB "Failed to malloc escape buf %d in "
DCB "%s %s():%d",0
ALIGN 0x10
asc_4A4A0 DCB "{",0
ALIGN 4
aCmd DCB "CMD=",0
ALIGN 4
asc_4A4AC DCB "|",0
ALIGN 0x10
aExecSStart DCB "<<<<<<<<<<<<<<<<<<<<exec %s start>"
DCB ">>>>>>>>>>>>>>>",0
ALIGN 4
aExecSEnd DCB "<<<<<<<<<<<<<<<<<<<<exec %s end>>>"
DCB ">>>>>>>>>>>>>>>",0
ALIGN 4
aFfffS DCB "::ffff:%s",0
ALIGN 4
a127001 DCB "127.0.0.1",0
ALIGN 0x10
aAccepted DCB "Accepted",0
ALIGN 4
aIgnored DCB "Ignored",0
aInvalidApiMult DCB "Invalid API Multicast Address",0
ALIGN 4
aApiMcastCouldN DCB "API mcast could not open socket",0
aApiMcastSetsoc DCB "API mcast setsockopt SO_REUSEADDR "
DCB "failed (%s)%s",0
aApiMulticastLi DCB " - API multicast listener will not"
DCB " be available",0
aApiMcastBindTo DCB "API mcast bind to port %d failed ("
DCB "%s)%s",0
aApiMcastJoinFa DCB "API mcast join failed (%s)%s",0
ALIGN 4
aFailedToMalloc_2 DCB "Failed to malloc mcast expect_code"
DCB 0
ALIGN 0x10
aSS_0 DCB "%s%s-",0
ALIGN 4
aApiMcastFailed DCB "API mcast failed count=%d (%s) (%d"
DCB ")",0
aApiMcastFromSS DCB "API mcast from %s - %s",0
ALIGN 4
aApiMcastReques_1 DCB "API mcast request rep=%d (%s) from"
DCB " [%s]:%s",0
ALIGN 0x10
aApiMcastReques_0 DCB "API mcast request ignored - invali"
DCB "d port (%s)",0
ALIGN 0x10
aApiMcastReques_2 DCB "API mcast request OK port %s=%d",0
aInvalidClientA DCB "Invalid client address %s",0
ALIGN 4
aApiMcastCouldN_0 DCB "API mcast could not open socket to"
DCB " client %s",0
ALIGN 4
aCgmFtwDS DCB "cgm-FTW-%d-%s",0
ALIGN 4
aApiMcastSendRe_0 DCB "API mcast send reply failed (%s) ("
DCB "%d)",0
ALIGN 4
aApiMcastSendRe DCB "API mcast send reply (%s) succeede"
DCB "d (%d) (%d)",0
ALIGN 4
aApiMcastReques DCB "API mcast request was no good",0
ALIGN 4
aBmminer DCB "bmminer-",0
ALIGN 0x10
aApimcast DCB "APIMcast",0
ALIGN 4
aId1 DCB ",",0x22,"id",0x22,":1}",0
ALIGN 4
aOomBufSizDTotD DCB "OOM buf siz=%d tot=%d ext=%d in %s"
DCB " %s():%d",0
ALIGN 4
word_4A834 DCW 0x2E2E
byte_4A836 DCB 0x2E
ALIGN 4
aApiSendReplyD1 DCB "API: send reply: (%d) '%.10s%s'",0
aApiSendSelectF DCB "API: send select failed (%d)",0
ALIGN 4
aApiSendDDFaile DCB "API: send (%d:%d) failed: %s",0
ALIGN 4
aApiSentAllOfDF DCB "API: sent all of %d first go",0
ALIGN 4
aApiSentDOfDFir DCB "API: sent %d of %d first go",0
aApiSentAllOfRe DCB "API: sent all of remaining %d (sen"
DCB "dc=%d)",0
ALIGN 0x10
aApiSentDOfRema DCB "API: sent %d of remaining %d (send"
DCB "c=%d)",0
aFailedToMalloc DCB "Failed to malloc pooldetails buf",0
ALIGN 4
aWtfRdlockError DCB "WTF RDLOCK ERROR ON LOCK! errno=%d"
DCB " in %s %s():%d",0
ALIGN 0x10
aWtfMutexErrorO_0 DCB "WTF MUTEX ERROR ON LOCK! errno=%d "
DCB "in %s %s():%d",0
aWtfMutexErrorO DCB "WTF MUTEX ERROR ON UNLOCK! errno=%"
DCB "d in %s %s():%d",0
ALIGN 4
aWtfRwlockError DCB "WTF RWLOCK ERROR ON UNLOCK! errno="
DCB "%d in %s %s():%d",0
ALIGN 4
aApiKillingBmmi DCB "API: killing bmminer",0
ALIGN 0x10
aApiRestartingB DCB "API: restarting bmminer",0
aTrue DCB "true",0
ALIGN 0x10
aWtfWrlockError DCB "WTF WRLOCK ERROR ON LOCK! errno=%d"
DCB " in %s %s():%d",0
ALIGN 4
a0x08x DCB "0x%08x",0
ALIGN 4
aLlu DCB "%llu",0
ALIGN 4
aF DCB "%f",0
ALIGN 4
a0f DCB "%.0f",0
ALIGN 0x10
a2f DCB "%.2f",0
ALIGN 4
a3f DCB "%.3f",0
ALIGN 0x10
a4f DCB "%.4f",0
ALIGN 4
a15f DCB "%.15f",0
ALIGN 0x10
a8f DCB "%.8f",0
ALIGN 4
aLd06ld DCB "%ld.%06ld",0
ALIGN 4
aApiUnknown2Dat DCB "API: unknown2 data type %d ignored"
DCB 0
ALIGN 4
aUnknown DCB "Unknown",0
asc_4AB00 DCB "=",0
ALIGN 4
aNull DCB "(null)",0
ALIGN 4
aApiUnknown1Dat DCB "API: unknown1 data type %d ignored"
DCB 0
ALIGN 0x10
aStatus_0 DCB "{",0x22,"STATUS",0x22,":[",0
aStatus DCB "STATUS",0
ALIGN 4
aWhen DCB "When",0
ALIGN 4
aCode DCB "Code",0
ALIGN 4
aMsg DCB "Msg",0
aDescription DCB "Description",0
aF_0 DCB "F",0
ALIGN 4
aW DCB "w",0
ALIGN 4
aHelp DCB "help",0
ALIGN 4
aApiRequestToAs DCB "API: request to ascdisable ascid %"
DCB "d device %d %s%u",0
ALIGN 4
aApiRequestToAs_0 DCB "API: request to ascenable ascid %d"
DCB " device %d %s%u",0
ALIGN 4
aApiPushingSemP DCB "API: Pushing sem post to thread %d"
DCB 0
ALIGN 0x10
aAll DCB "All",0
aBestshare DCB "BestShare",0
ALIGN 0x10
aAll_0 DCB "all",0
aBestshare_0 DCB "bestshare",0
ALIGN 0x10
aScantime_0 DCB "scantime",0
ALIGN 4
aExpiry_0 DCB "expiry",0
ALIGN 4
aAscs DCB ",",0x22,"ASCS",0x22,":[",0
ALIGN 0x10
aAscs_0 DCB "ASCS,",0
ALIGN 4
aDebug DCB ",",0x22,"DEBUG",0x22,":[",0
ALIGN 4
aSilent DCB "Silent",0
ALIGN 4
aQuiet DCB "Quiet",0
ALIGN 4
aVerbose DCB "Verbose",0
aDebug_0 DCB "Debug",0
ALIGN 4
aRpcproto DCB "RPCProto",0
ALIGN 0x10
aPerdevice DCB "PerDevice",0
ALIGN 4
aWorktime DCB "WorkTime",0
ALIGN 4
aDebug_1 DCB "DEBUG,",0
ALIGN 0x10
aY DCB "Y",0
ALIGN 4
aN DCB "N",0
ALIGN 4
aS_1 DCB "|%s|",0
ALIGN 0x10
aCheck_0 DCB ",",0x22,"CHECK",0x22,":[",0
ALIGN 4
aCheck DCB "CHECK,",0
ALIGN 4
aAccess_0 DCB "Access",0
ALIGN 4
aExists DCB "Exists",0
ALIGN 4
aDevdetails_0 DCB ",",0x22,"DEVDETAILS",0x22,":[",0
aDevdetails DCB "DEVDETAILS",0
ALIGN 0x10
aName DCB "Name",0
ALIGN 4
aId DCB "ID",0
ALIGN 4
aDriver DCB "Driver",0
ALIGN 4
aKernel DCB "Kernel",0
ALIGN 4
aModel DCB "Model",0
ALIGN 4
aDevicePath DCB "Device Path",0
aPgas DCB ",",0x22,"PGAS",0x22,":[",0
ALIGN 4
aPgas_0 DCB "PGAS,",0
ALIGN 4
aNoncenum DCB ",",0x22,"NONCENUM",0x22,":[",0
ALIGN 4
a10minNonce DCB "10min nonce",0
a30minNonce DCB "30min nonce",0
a60minNonce DCB "60min nonce",0
aNoncenum_0 DCB "NONCENUM,",0
ALIGN 4
aConfig_0 DCB ",",0x22,"CONFIG",0x22,":[",0
aConfig DCB "CONFIG,",0
aAscCount DCB "ASC Count",0
ALIGN 4
aPgaCount DCB "PGA Count",0
ALIGN 0x10
aPoolCount DCB "Pool Count",0
ALIGN 4
aStrategy DCB "Strategy",0
ALIGN 4
aLogInterval DCB "Log Interval",0
ALIGN 4
aDeviceCode DCB "Device Code",0
aLinux DCB "Linux",0
ALIGN 4
aOs DCB "OS",0
ALIGN 0x10
aFailoverOnly DCB "Failover-Only",0
ALIGN 0x10
aScantime DCB "ScanTime",0
ALIGN 4
aQueue DCB "Queue",0
ALIGN 4
aExpiry DCB "Expiry",0
ALIGN 4
aNone DCB "None",0
ALIGN 4
aHotplug DCB "Hotplug",0
aVersion DCB ",",0x22,"VERSION",0x22,":[",0
ALIGN 4
aBmminer_0 DCB "BMMiner",0
a31 DCB "3.1",0
aApi DCB "API",0
aMiner DCB "Miner",0
ALIGN 4
aCompiletime DCB "CompileTime",0
aType DCB "Type",0
ALIGN 4
aVersion_0 DCB "VERSION,",0
ALIGN 4
aCoin_0 DCB ",",0x22,"COIN",0x22,":[",0
ALIGN 0x10
aCoin DCB "COIN,",0
ALIGN 4
aSha256 DCB "sha256",0
ALIGN 0x10
aHashMethod DCB "Hash Method",0
aCurrentBlockTi DCB "Current Block Time",0
ALIGN 0x10
aCurrentBlockHa DCB "Current Block Hash",0
ALIGN 4
aLp DCB "LP",0
ALIGN 4
aNetworkDifficu DCB "Network Difficulty",0
ALIGN 4
aAlive DCB "Alive",0
ALIGN 4
aSick DCB "Sick",0
ALIGN 4
aDead DCB "Dead",0
ALIGN 4
aNostart DCB "NoStart",0
aInitialising DCB "Initialising",0
ALIGN 4
aAsc_0 DCB "ASC",0
aEnabled DCB "Enabled",0
aStatus_1 DCB "Status",0
ALIGN 0x10
aTemperature DCB "Temperature",0
aMhsAv DCB "MHS av",0
ALIGN 4
aMhsDs DCB "MHS %ds",0
aRejected DCB "Rejected",0
ALIGN 4
aHardwareErrors DCB "Hardware Errors",0
aUtility DCB "Utility",0
aLastSharePool DCB "Last Share Pool",0
aLastShareTime DCB "Last Share Time",0
aTotalMh DCB "Total MH",0
ALIGN 4
aDiff1Work DCB "Diff1 Work",0
ALIGN 4
aDifficultyAcce DCB "Difficulty Accepted",0
aDifficultyReje DCB "Difficulty Rejected",0
aLastShareDiffi DCB "Last Share Difficulty",0
ALIGN 4
aLastValidWork DCB "Last Valid Work",0
aDeviceHardware DCB "Device Hardware%",0
ALIGN 4
aDeviceRejected DCB "Device Rejected%",0
ALIGN 0x10
aDeviceElapsed DCB "Device Elapsed",0
ALIGN 0x10
aAsc DCB ",",0x22,"ASC",0x22,":[",0
ALIGN 4
aDevs DCB ",",0x22,"DEVS",0x22,":[",0
ALIGN 4
aDisabled DCB "Disabled",0
ALIGN 4
aRejecting DCB "Rejecting",0
ALIGN 0x10
aPools DCB ",",0x22,"POOLS",0x22,":[",0
ALIGN 4
aD02d02d DCB "%d:%02d:%02d",0
ALIGN 4
aPool_0 DCB "POOL",0
ALIGN 4
aPriority DCB "Priority",0
ALIGN 0x10
aQuota DCB "Quota",0
ALIGN 4
aLongPoll DCB "Long Poll",0
ALIGN 4
aGetworks DCB "Getworks",0
ALIGN 0x10
aDiscarded DCB "Discarded",0
ALIGN 4
aStale DCB "Stale",0
ALIGN 4
aGetFailures DCB "Get Failures",0
ALIGN 4
aRemoteFailures DCB "Remote Failures",0
aUser_0 DCB "User",0
ALIGN 4
aDiff DCB "Diff",0
ALIGN 4
aDiff1Shares DCB "Diff1 Shares",0
ALIGN 4
aProxyType DCB "Proxy Type",0
ALIGN 0x10
aProxy DCB "Proxy",0
ALIGN 4
aDifficultyStal DCB "Difficulty Stale",0
ALIGN 4
aHasStratum DCB "Has Stratum",0
aStratumActive DCB "Stratum Active",0
ALIGN 4
aStratumUrl DCB "Stratum URL",0
aHasGbt DCB "Has GBT",0
aBestShare DCB "Best Share",0
ALIGN 4
aPoolRejected DCB "Pool Rejected%",0
ALIGN 4
aPoolStale DCB "Pool Stale%",0
aLcd DCB "LCD",0
aGhs5s DCB "GHS5s",0
ALIGN 0x10
aGhsavg DCB "GHSavg",0
ALIGN 4
aFan DCB "fan",0
aTemp DCB "temp",0
ALIGN 4
dword_4B184 DCD 0x6F6E
aPool DCB "pool",0
ALIGN 0x10
aUser DCB "user",0
ALIGN 4
aStats DCB "STATS",0
ALIGN 0x10
aElapsed DCB "Elapsed",0
aCalls DCB "Calls",0
ALIGN 0x10
aWait DCB "Wait",0
ALIGN 4
aMax DCB "Max",0
aMin DCB "Min",0
aGhs5s_0 DCB "GHS 5s",0
ALIGN 4
aGhsAv DCB "GHS av",0
ALIGN 0x10
aGhs30m DCB "GHS 30m",0
aMode DCB "Mode",0
ALIGN 0x10
aStats_0 DCB ",",0x22,"STATS",0x22,":[",0
ALIGN 4
aSD_2 DCB "%s%d",0
ALIGN 4
aSummary DCB ",",0x22,"SUMMARY",0x22,":[",0
ALIGN 4
aSummary_0 DCB "SUMMARY,",0
ALIGN 0x10
aFoundBlocks DCB "Found Blocks",0
ALIGN 0x10
aLocalWork DCB "Local Work",0
ALIGN 4
aNetworkBlocks DCB "Network Blocks",0
ALIGN 4
aWorkUtility DCB "Work Utility",0
ALIGN 4
aLastGetwork DCB "Last getwork",0
ALIGN 4
a1418974 DCB "14189.74",0
ALIGN 4
aRootD DCB "root %d",0
aUnknownReasonC DCB "Unknown reason - code bug",0
ALIGN 4
aNotify DCB "NOTIFY",0
ALIGN 4
aLastWell DCB "Last Well",0
ALIGN 0x10
aLastNotWell DCB "Last Not Well",0
ALIGN 0x10
aReasonNotWell DCB "Reason Not Well",0
aThreadFailInit DCB "*Thread Fail Init",0
ALIGN 4
aThreadZeroHash DCB "*Thread Zero Hash",0
ALIGN 4
aThreadFailQueu DCB "*Thread Fail Queue",0
ALIGN 4
aDevSickIdle60s DCB "*Dev Sick Idle 60s",0
ALIGN 0x10
aDevDeadIdle600 DCB "*Dev Dead Idle 600s",0
aDevNostart DCB "*Dev Nostart",0
ALIGN 4
aDevOverHeat DCB "*Dev Over Heat",0
ALIGN 4
aDevThermalCuto DCB "*Dev Thermal Cutoff",0
aDevCommsError DCB "*Dev Comms Error",0
ALIGN 4
aDevThrottle DCB "*Dev Throttle",0
ALIGN 4
aNotify_0 DCB ",",0x22,"NOTIFY",0x22,":[",0
aFailedToCalloc_6 DCB "Failed to calloc mcast thr",0
ALIGN 4
aApiMcastThread DCB "API mcast thread create failed",0
ALIGN 4
aQuit DCB "QUIT",0
ALIGN 4
aUnknown_0 DCB "UNKNOWN!",0
ALIGN 4
aApiWillNotBeAv DCB " - API will not be available",0
ALIGN 4
aApiNotRunningS DCB "API not running%s",0
ALIGN 4
aFailedToPthrea_4 DCB "Failed to pthread_mutex_init errno"
DCB "=%d in %s %s():%d",0
aFailedToMalloc_6 DCB "Failed to malloc ipgroups buf",0
ALIGN 0x10
aApiInvalidGrou DCB "API invalid group name '%s'",0
aApiInvalidGrou_0 DCB "API invalid group name '%c'",0
aApiGroupNameCa DCB "API group name can't be '%c'",0
ALIGN 4
aApiDuplicateGr DCB "API duplicate group name '%c'",0
ALIGN 4
aFailedToMalloc_3 DCB "Failed to malloc group commands bu"
DCB "f",0
aFailedToMalloc_5 DCB "Failed to malloc noprivgroup comma"
DCB "nds buf",0
ALIGN 4
aFailedToMalloc_4 DCB "Failed to malloc ipaccess buf",0
ALIGN 4
aFailedToCalloc_7 DCB "Failed to calloc ipaccess",0
ALIGN 4
aApiNotRunningN DCB "API not running (no valid IPs spec"
DCB "ified)%s",0
ALIGN 0x10
aApiFailedToRes DCB "API failed to resolve %s",0
ALIGN 4
aApiInitialisat DCB "API initialisation failed (%s)%s",0
ALIGN 0x10
aApiSetsockoptS DCB "API setsockopt SO_REUSEADDR failed"
DCB " (ignored): %s",0
ALIGN 4
aApiBindToPortD DCB "API bind to port %d failed - tryin"
DCB "g again in 30sec",0
ALIGN 4
aApiBindToPortD_0 DCB "API bind to port %d failed (%s)%s",0
ALIGN 4
aApi3Initialisa DCB "API3 initialisation failed (%s)%s",0
ALIGN 0x10
aApiRunningInIp DCB "API running in IP access mode on p"
DCB "ort %d (%d)",0
ALIGN 0x10
aApiRunningInUn DCB "API running in UNRESTRICTED read a"
DCB "ccess mode on port %d (%d)",0
ALIGN 0x10
aApiRunningInLo DCB "API running in local read access m"
DCB "ode on port %d (%d)",0
ALIGN 4
aStrbufs DCB "StrBufs",0
aApiFailedSSD DCB "API failed (%s)%s (%d)",0
ALIGN 4
aApiConnectionF DCB "API: connection from %s - %s",0
ALIGN 4
aApiRecvFailedS DCB "API: recv failed: %s",0
ALIGN 0x10
aApiRecvCommand DCB "API: recv command: (%d) '%s'",0
ALIGN 0x10
aOomCmdsbufInSS DCB "OOM cmdsbuf in %s %s():%d",0
ALIGN 4
aPoolChange_0 DCB "pool_change",0
aApiAccessDenie DCB "API: access denied to '%s' for '%s"
DCB "' command",0
aApiTerminating DCB "API: terminating due to: %s",0
aApiFailedToIni_0 DCB "API failed to initiate a restart -"
DCB " aborting",0
aApiFailedToIni DCB "API failed to initiate a clean qui"
DCB "t - aborting",0
ALIGN 4
aApiUnknownComm DCB "API unknown command '%s' in group "
DCB "'%c'",0
ALIGN 4
aThreadFailedTo DCB "Thread failed to init",0
ALIGN 4
aThreadGotZeroH DCB "Thread got zero hashes",0
ALIGN 4
aThreadFailedTo_0 DCB "Thread failed to queue work",0
aDeviceIdleFor6 DCB "Device idle for 60s",0
aDeviceDeadIdle DCB "Device dead - idle for 600s",0
aDeviceFailedTo DCB "Device failed to start",0
ALIGN 4
aDeviceOverHeat DCB "Device over heated",0
ALIGN 4
aDeviceReachedT DCB "Device reached thermal cutoff",0
ALIGN 4
aDeviceCommsErr DCB "Device comms error",0
ALIGN 0x10
aDevs_0 DCB "devs",0
ALIGN 4
aEdevs DCB "edevs",0
ALIGN 0x10
aPools_1 DCB "pools",0
ALIGN 4
aNoncenum_1 DCB "noncenum",0
ALIGN 4
aPgacount DCB "pgacount",0
ALIGN 0x10
aSwitchpool_0 DCB "switchpool",0
ALIGN 4
aAddpool DCB "addpool",0
aPoolpriority DCB "poolpriority",0
ALIGN 4
aPoolquota DCB "poolquota",0
ALIGN 0x10
aEnablepool DCB "enablepool",0
ALIGN 4
aDisablepool DCB "disablepool",0
aRemovepool DCB "removepool",0
ALIGN 4
aSave DCB "save",0
ALIGN 4
aQuit_0 DCB "quit",0
ALIGN 4
aPrivileged DCB "privileged",0
ALIGN 0x10
aDevdetails_1 DCB "devdetails",0
ALIGN 4
aEstats DCB "estats",0
ALIGN 4
aCheck_1 DCB "check",0
ALIGN 4
aFailoverOnly_0 DCB "failover-only",0
ALIGN 4
aDebug_2 DCB "debug",0
ALIGN 4
aSetconfig DCB "setconfig",0
ALIGN 0x10
aUsbstats DCB "usbstats",0
ALIGN 4
aZero DCB "zero",0
ALIGN 4
aHotplug_0 DCB "hotplug",0
aAsc_1 DCB "asc",0
aAscenable_0 DCB "ascenable",0
ALIGN 4
aAscdisable DCB "ascdisable",0
ALIGN 4
aAscidentify DCB "ascidentify",0
aAsccount DCB "asccount",0
ALIGN 0x10
aLcd_0 DCB "lcd",0
aLockstats DCB "lockstats",0
ALIGN 0x10
aDPoolS DCB "%d Pool(s)",0
ALIGN 4
aNoPools DCB "No pools",0
ALIGN 4
aDAscS DCB "%d ASC(s)",0
ALIGN 4
aNoAscs DCB "No ASCs",0
aSummary_2 DCB "Summary",0
aNonceNum DCB "Nonce num",0
ALIGN 0x10
aInvalidCommand DCB "Invalid command",0
aMissingDeviceI DCB "Missing device id parameter",0
aPgaCount_0 DCB "PGA count",0
ALIGN 4
aAscCount_0 DCB "ASC count",0
ALIGN 4
aCgminerVersion DCB "CGMiner versions",0
ALIGN 4
aInvalidJson DCB "Invalid JSON",0
ALIGN 4
aMissingJsonS DCB "Missing JSON '%s'",0
ALIGN 4
aMissingPoolIdP DCB "Missing pool id parameter",0
ALIGN 4
aInvalidPoolIdD DCB "Invalid pool id %d - range is 0 - "
DCB "%d",0
ALIGN 0x10
aSwitchingToPoo_1 DCB "Switching to pool %d:'%s'",0
ALIGN 4
aCgminerConfig DCB "CGMiner config",0
ALIGN 4
aMissingSaveFil DCB "Missing save filename parameter",0
aCanTOpenOrCrea DCB "Can't open or create save file '%s"
DCB "'",0
aConfigurationS DCB "Configuration saved to file '%s'",0
ALIGN 4
aAccessDeniedTo DCB "Access denied to '%s' command",0
ALIGN 4
aPrivilegedAcce DCB "Privileged access OK",0
ALIGN 4
aEnablingPoolDS DCB "Enabling pool %d:'%s'",0
ALIGN 4
aChangedPoolPri DCB "Changed pool priorities",0
aDuplicatePoolS DCB "Duplicate pool specified %d",0
aDisablingPoolD DCB "Disabling pool %d:'%s'",0
ALIGN 0x10
aPoolDSAlreadyE DCB "Pool %d:'%s' already enabled",0
ALIGN 0x10
aPoolDSAlreadyD DCB "Pool %d:'%s' already disabled",0
ALIGN 0x10
aCannotDisableL DCB "Cannot disable last active pool %d"
DCB ":'%s'",0
aMissingAddpool DCB "Missing addpool details",0
aInvalidAddpool DCB "Invalid addpool details '%s'",0
ALIGN 0x10
aReachedMaximum DCB "Reached maximum number of pools (%"
DCB "d)",0
ALIGN 4
aAddedPoolDS DCB "Added pool %d: '%s'",0
aCannotRemoveLa DCB "Cannot remove last pool %d:'%s'",0
aCannotRemoveAc DCB "Cannot remove active pool %d:'%s'",0
ALIGN 0x10
aRemovedPoolDS DCB "Removed pool %d:'%s'",0
ALIGN 4
aNotify_1 DCB "Notify",0
ALIGN 0x10
aDeviceDetails DCB "Device Details",0
ALIGN 0x10
aCgminerStats DCB "CGMiner stats",0
ALIGN 0x10
aMissingCheckCm DCB "Missing check cmd",0
ALIGN 4
aCheckCommand DCB "Check command",0
ALIGN 4
aMissingParamet DCB "Missing parameter: true/false",0
ALIGN 4
aInvalidParamet_0 DCB "Invalid parameter should be true o"
DCB "r false",0
ALIGN 0x10
aFailoverOnlySe DCB "Failover-Only set to %s",0
aCgminerCoin DCB "CGMiner coin",0
ALIGN 4
aDebugSettings DCB "Debug settings",0
ALIGN 4
aSetConfigSToD DCB "Set config '%s' to %d",0
ALIGN 0x10
aUnknownConfigS DCB "Unknown config '%s'",0
aInvalidNumberD DCB "Invalid number (%d) for '%s' range"
DCB " is 0-9999",0
ALIGN 4
aInvalidNegativ_0 DCB "Invalid negative number (%d) for '"
DCB "%s'",0
ALIGN 4
aSetPoolSToQuot DCB "Set pool '%s' to quota %d'",0
ALIGN 4
aMissingConfigP DCB "Missing config parameters 'name,N'"
DCB 0
ALIGN 4
aMissingConfigV DCB "Missing config value N for '%s,N'",0
ALIGN 0x10
aUsbStatistics DCB "USB Statistics",0
ALIGN 0x10
aNoUsbStatistic DCB "No USB Statistics",0
ALIGN 4
aMissingZeroPar DCB "Missing zero parameters",0
aInvalidZeroPar DCB "Invalid zero parameter '%s'",0
aZeroedSStatsWi DCB "Zeroed %s stats with summary",0
ALIGN 4
aZeroedSStatsWi_0 DCB "Zeroed %s stats without summary",0
aInvalidValueFo DCB "Invalid value for hotplug (%s) mus"
DCB "t be 0..9999",0
ALIGN 4
aHotplugCheckSe DCB "Hotplug check set to %ds",0
ALIGN 4
aHotplugDisable DCB "Hotplug disabled",0
ALIGN 4
aHotplugIsNotAv DCB "Hotplug is not available",0
ALIGN 4
aMissingHotplug DCB "Missing hotplug parameter",0
ALIGN 0x10
aAscD DCB "ASC%d",0
ALIGN 4
aInvalidAscIdDR DCB "Invalid ASC id %d - range is 0 - %"
DCB "d",0
aAscDAlreadyEna DCB "ASC %d already enabled",0
ALIGN 4
aAscDAlreadyDis DCB "ASC %d already disabled",0
aAscDSentEnable DCB "ASC %d sent enable message",0
ALIGN 4
aAscDSetDisable DCB "ASC %d set disable flag",0
aAscDIsNotFlagg DCB "ASC %d is not flagged WELL, cannot"
DCB " enable",0
ALIGN 4
aIdentifyComman DCB "Identify command sent to ASC%d",0
ALIGN 4
aAscDDoesNotSup DCB "ASC%d does not support identify",0
aMissingOptionA DCB "Missing option after ASC number",0
aAscDDoesNotSup_0 DCB "ASC %d does not support ascset",0
ALIGN 4
aAscDSetHelpS DCB "ASC %d set help: %s",0
aAscDSetOk DCB "ASC %d set OK",0
ALIGN 0x10
aAscDSetFailedS DCB "ASC %d set failed: %s",0
ALIGN 4
aLockStatsCreat DCB "Lock stats created",0
ALIGN 4
aLockStatsNotEn DCB "Lock stats not enabled",0
ALIGN 4
aKAllocItems DCB "k_alloc_items",0
ALIGN 4
aKNewStore DCB "k_new_store",0
aKNewList DCB "_k_new_list",0
aKUnlinkTail DCB "_k_unlink_tail",0
ALIGN 4
aKAddHead DCB "_k_add_head",0
aKAddTail DCB "_k_add_tail",0
aKInsertBefore DCB "_k_insert_before",0
ALIGN 4
aKInsertAfter DCB "_k_insert_after",0
aKUnlinkItem DCB "_k_unlink_item",0
ALIGN 4
aKListTransferT DCB "_k_list_transfer_to_head",0
ALIGN 4
aKListTransferT_0 DCB "_k_list_transfer_to_tail",0
ALIGN 0x10
aKFreeList DCB "_k_free_list",0
ALIGN 0x10
aKFreeStore DCB "_k_free_store",0
ALIGN 0x10
aListSStoreCanT DCB "List %s store can't %s() - from %s"
DCB " %s() line %d in %s %s():%d",0
ALIGN 0x10
aKlistC DCB "klist.c",0
aListSItemMemor DCB "List %s item_memory failed to real"
DCB "loc count=%d in %s %s():%d",0
ALIGN 4
aListSFailedToC_0 DCB "List %s failed to calloc %d new it"
DCB "ems - total was %d, limit was %d i"
DCB "n %s %s():%d",0
ALIGN 4
aListSDataMemor DCB "List %s data_memory failed to real"
DCB "loc count=%d in %s %s():%d",0
ALIGN 4
aListSFailedToC DCB "List %s failed to calloc item data"
DCB " in %s %s():%d",0
ALIGN 0x10
aFailedToCalloc_0 DCB "Failed to calloc store for %s in %"
DCB "s %s():%d",0
aInvalidNewList DCB "Invalid new list %s with allocate "
DCB "%d must be > 0 in %s %s():%d",0
ALIGN 4
aInvalidNewList_0 DCB "Invalid new list %s with limit %d "
DCB "must be >= 0 in %s %s():%d",0
ALIGN 4
aFailedToCalloc_2 DCB "Failed to calloc list %s in %s %s("
DCB "):%d",0
ALIGN 4
aFailedToCalloc_1 DCB "Failed to calloc lock for list %s "
DCB "in %s %s():%d",0
aFailedToPthrea_3 DCB "Failed to pthread_rwlock_init errn"
DCB "o=%d in %s %s():%d",0
ALIGN 4
aListSCanTSDoTa DCB "List %s can't %s() - do_tail is fa"
DCB "lse - from %s %s() line %d in %s %"
DCB "s():%d",0
ALIGN 4
aListSCanTSASIt DCB "List %s can't %s() a %s item - fro"
DCB "m %s %s() line %d in %s %s():%d",0
ALIGN 4
aSSCanTBeforeAN DCB "%s() (%s) can't before a null item"
DCB " - from %s %s() line %d in %s %s()"
DCB ":%d",0
aSSCanTAfterANu DCB "%s() (%s) can't after a null item "
DCB "- from %s %s() line %d in %s %s():"
DCB "%d",0
ALIGN 4
aListSCanTSToAS DCB "List %s can't %s() to a %s list - "
DCB "from %s %s() line %d in %s %s():%d"
DCB 0
ALIGN 4
aListSCanTSASto DCB "List %s can't %s() a store - from "
DCB "%s %s() line %d in %s %s():%d",0
aStoreSCanTSThe DCB "Store %s can't %s() the list - fro"
DCB "m %s %s() line %d in %s %s():%d",0
ALIGN 4
aMyLogCurses DCB "my_log_curses",0
ALIGN 4
aD02d02d02d02d0 DCB " [%d-%02d-%02d %02d:%02d:%02d.%03d"
DCB "] ",0
ALIGN 0x10
aSS_1 DCB "%s%s",0xA,0
ALIGN 4
aLoggingC DCB "logging.c",0
ALIGN 4
; const char asc_4C844[]
asc_4C844 DCB "                    "
word_4C858 DCW 0xA
ALIGN 4
aDupalloc DCB "dupalloc",0
ALIGN 4
aIsdupnonce DCB "isdupnonce",0
ALIGN 4
aNoncedupC DCB "noncedup.c",0
ALIGN 0x10
aFailedToCalloc_3 DCB "Failed to calloc dupdata in %s %s("
DCB "):%d",0
ALIGN 4
aNonces DCB "Nonces",0
ALIGN 0x10
aSDDuplicateNon DCB "%s%d: Duplicate nonce %08x",0
ALIGN 4
; _DWORD dword_4C8CC[256]
dword_4C8CC DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xA, 0xB, 0xC
DCD 0xD, 0xE, 0xF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
aClearSock DCB "clear_sock",0
ALIGN 4
aTqFreezethaw DCB "tq_freezethaw",0
ALIGN 4
off_4CCE8 DCD aHttp     ; "http:"
ALIGN 0x10
DCD aHttp0              ; "http0:"
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xF8
DCB 0xE9
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xEA
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    8
DCB 0xEA
DCB    4
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB 0xEA
DCB    4
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0x32 ; 2
DCB 0x33 ; 3
DCB 0x34 ; 4
DCB 0x35 ; 5
DCB 0x36 ; 6
DCB 0x37 ; 7
DCB 0x38 ; 8
DCB 0x39 ; 9
DCB 0x61 ; a
DCB 0x62 ; b
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x66 ; f
aBin2hex DCB "bin2hex",0
a000000000 DCB "000000000",0
ALIGN 4
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    5
DCB    0
DCB    0
DCB    0
DCB    6
DCB    0
DCB    0
DCB    0
DCB    7
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB    9
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB  0xD
DCB    0
DCB    0
DCB    0
DCB  0xE
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x11
DCB    0
DCB    0
DCB    0
DCB 0x12
DCB    0
DCB    0
DCB    0
DCB 0x13
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB    0
DCB    0
DCB    0
DCB 0x15
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x16
DCB    0
DCB    0
DCB    0
DCB 0x17
DCB    0
DCB    0
DCB    0
DCB 0x18
DCB    0
DCB    0
DCB    0
DCB 0x19
DCB    0
DCB    0
DCB    0
DCB 0x1A
DCB    0
DCB    0
DCB    0
DCB 0x1B
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB    0
DCB    0
DCB    0
DCB 0x1D
DCB    0
DCB    0
DCB    0
DCB 0x1E
DCB    0
DCB    0
DCB    0
DCB 0x1F
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x21 ; !
DCB    0
DCB    0
DCB    0
DCB 0x22 ; "
DCB    0
DCB    0
DCB    0
DCB 0x23 ; #
DCB    0
DCB    0
DCB    0
DCB 0x24 ; $
DCB    0
DCB    0
DCB    0
DCB 0x25 ; %
DCB    0
DCB    0
DCB    0
DCB 0x26 ; &
DCB    0
DCB    0
DCB    0
DCB 0x27 ; '
DCB    0
DCB    0
DCB    0
DCB 0x28 ; (
DCB    0
DCB    0
DCB    0
DCB 0x29 ; )
DCB    0
DCB    0
DCB    0
DCB 0x2A ; *
DCB    0
DCB    0
DCB    0
DCB 0x2B ; +
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x2C ; ,
DCB    0
DCB    0
DCB    0
DCB 0x2D ; -
DCB    0
DCB    0
DCB    0
DCB 0x2E ; .
DCB    0
DCB    0
DCB    0
DCB 0x2F ; /
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB 0x31 ; 1
DCB    0
DCB    0
DCB    0
DCB 0x32 ; 2
DCB    0
DCB    0
DCB    0
DCB 0x33 ; 3
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB    0
DCB    0
DCB    0
DCB 0x35 ; 5
DCB    0
DCB    0
DCB    0
DCB 0x36 ; 6
DCB    0
DCB    0
DCB    0
DCB 0x37 ; 7
DCB    0
DCB    0
DCB    0
DCB 0x38 ; 8
DCB    0
DCB    0
DCB    0
DCB 0x39 ; 9
DCB    0
DCB    0
DCB    0
aTqNew DCB "tq_new",0
ALIGN 4
aTqPush DCB "tq_push",0
aTqPop DCB "tq_pop",0
ALIGN 4
aGetProxy DCB "get_proxy",0
ALIGN 4
aSuspendStratum DCB "suspend_stratum",0
aStratumSend DCB "stratum_send",0
ALIGN 4
aRecallocSock DCB "recalloc_sock",0
ALIGN 4
aReallocStrcat DCB "realloc_strcat",0
ALIGN 4
aStrText DCB "str_text",0
ALIGN 0x10
aThrInfoCreate DCB "thr_info_create",0
aCompletionThre DCB "completion_thread",0
ALIGN 4
aCgCompletionTi DCB "cg_completion_timeout",0
ALIGN 4
aAddressToPubke DCB "address_to_pubkeyhash",0
ALIGN 4
aSerString DCB "ser_string",0
ALIGN 0x10
aCopyTime DCB "copy_time",0
ALIGN 4
aParseNotify DCB "parse_notify",0
ALIGN 4
aSocks4Negotiat DCB "socks4_negotiate",0
ALIGN 0x10
aSetupStratumSo DCB "setup_stratum_socket",0
ALIGN 4
aSocks5Negotiat DCB "socks5_negotiate",0
ALIGN 4
aInitiateStratu_0 DCB "initiate_stratum",0
ALIGN 0x10
aParseReconnect DCB "parse_reconnect",0
aParseDiff DCB "parse_diff",0
ALIGN 4
aParseExtranonc DCB "parse_extranonce",0
ALIGN 0x10
DCB    2
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    3
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    4
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    5
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    6
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    7
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    8
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    9
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xA
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xB
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xC
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xD
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xE
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB  0xF
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x10
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x11
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x12
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x13
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x14
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x15
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x16
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x17
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x18
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x19
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1A
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1B
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1C
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1D
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1E
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x1F
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB    1
DCB 0x20
DCB    0
DCB    0
DCB    0
DCB    2
DCB    1
DCB    1
DCB    1
DCB    3
DCB    1
DCB    1
DCB    1
DCB    4
DCB    1
DCB    1
DCB    1
DCB    5
DCB    1
DCB    1
DCB    1
DCB    6
DCB    1
DCB    1
DCB    1
DCB    7
DCB    1
DCB    1
DCB    1
DCB    8
DCB    1
DCB    1
DCB    1
DCB    9
DCB    1
DCB    1
DCB    1
DCB  0xA
DCB    1
DCB    1
DCB    1
DCB  0xB
DCB    1
DCB    1
DCB    1
DCB  0xC
DCB    1
DCB    1
DCB    1
DCB  0xD
DCB    1
DCB    1
DCB    1
DCB  0xE
DCB    1
DCB    1
DCB    1
DCB  0xF
DCB    1
DCB    1
DCB    1
DCB 0x10
DCB    1
DCB    1
DCB    1
DCB 0x11
DCB    1
DCB    1
DCB    1
DCB 0x12
DCB    1
DCB    1
DCB    1
DCB 0x13
DCB    1
DCB    1
DCB    1
DCB 0x14
DCB    1
DCB    1
DCB    1
DCB 0x15
DCB    1
DCB    1
DCB    1
DCB 0x16
DCB    1
DCB    1
DCB    1
DCB 0x17
DCB    1
DCB    1
DCB    1
DCB 0x18
DCB    1
DCB    1
DCB    1
DCB 0x19
DCB    1
DCB    1
DCB    1
DCB 0x1A
DCB    1
DCB    1
DCB    1
DCB 0x1B
DCB    1
DCB    1
DCB    1
DCB 0x1C
DCB    1
DCB    1
DCB    1
DCB 0x1D
DCB    1
DCB    1
DCB    1
DCB 0x1E
DCB    1
DCB    1
DCB    1
DCB 0x1F
DCB    1
DCB    1
DCB    1
DCB 0x20
DCB    1
DCB    1
DCB    1
DCB 0x21 ; !
DCB    1
DCB    1
DCB    1
DCB 0x22 ; "
DCB    1
DCB    1
DCB    1
DCB 0x23 ; #
DCB    1
DCB    1
DCB    1
DCB 0x24 ; $
DCB    1
DCB    1
DCB    1
DCB 0x25 ; %
DCB    1
DCB    1
DCB    1
DCB 0x26 ; &
DCB    1
DCB    1
DCB    1
DCB 0x27 ; '
DCB    1
DCB    1
DCB    1
DCB 0x28 ; (
DCB    1
DCB    1
DCB    1
DCB 0x29 ; )
DCB    1
DCB    1
DCB    1
DCB 0x2A ; *
DCB    1
DCB    1
DCB    1
DCB 0x2B ; +
DCB    1
DCB    1
DCB    1
DCB 0x2C ; ,
DCB    1
DCB    1
DCB    1
DCB 0x2D ; -
DCB    1
DCB    1
DCB    1
DCB 0x2E ; .
DCB    1
DCB    1
DCB    1
DCB 0x2F ; /
DCB    1
DCB    1
DCB    1
DCB 0x30 ; 0
DCB    1
DCB    1
DCB    1
DCB 0x31 ; 1
DCB    1
DCB    1
DCB    1
DCB 0x32 ; 2
DCB    1
DCB    1
DCB    1
DCB 0x33 ; 3
DCB    1
DCB    1
DCB    1
DCB 0x34 ; 4
DCB    1
DCB    1
DCB    1
DCB 0x35 ; 5
DCB    1
DCB    1
DCB    1
DCB 0x36 ; 6
DCB    1
DCB    1
DCB    1
DCB 0x37 ; 7
DCB    1
DCB    1
DCB    1
DCB 0x38 ; 8
DCB    1
DCB    1
DCB    1
DCB 0x39 ; 9
DCB    1
DCB    1
DCB    1
DCB 0x3A ; :
DCB    1
DCB    1
DCB    1
DCB 0x3B ; ;
DCB    1
DCB    1
DCB    1
DCB 0x3C ; <
DCB    1
DCB    1
DCB    1
DCB 0x3D ; =
DCB    1
DCB    1
DCB    1
DCB 0x3E ; >
DCB    1
DCB    1
DCB    1
DCB 0x3F ; ?
DCB    1
DCB    1
DCB    1
DCB 0x40 ; @
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    1
DCB 0xC0
DCB 0x80
DCB 0x41 ; A
DCB    0
DCB 0xC1
DCB 0x81
DCB 0x40 ; @
DCB    0
DCB 0xC0
DCB 0xC1
DCB    1
DCB 0xC3
DCB    3
DCB    2
DCB 0xC2
DCB 0xC6
DCB    6
DCB    7
DCB 0xC7
DCB    5
DCB 0xC5
DCB 0xC4
DCB    4
DCB 0xCC
DCB  0xC
DCB  0xD
DCB 0xCD
DCB  0xF
DCB 0xCF
DCB 0xCE
DCB  0xE
DCB  0xA
DCB 0xCA
DCB 0xCB
DCB  0xB
DCB 0xC9
DCB    9
DCB    8
DCB 0xC8
DCB 0xD8
DCB 0x18
DCB 0x19
DCB 0xD9
DCB 0x1B
DCB 0xDB
DCB 0xDA
DCB 0x1A
DCB 0x1E
DCB 0xDE
DCB 0xDF
DCB 0x1F
DCB 0xDD
DCB 0x1D
DCB 0x1C
DCB 0xDC
DCB 0x14
DCB 0xD4
DCB 0xD5
DCB 0x15
DCB 0xD7
DCB 0x17
DCB 0x16
DCB 0xD6
DCB 0xD2
DCB 0x12
DCB 0x13
DCB 0xD3
DCB 0x11
DCB 0xD1
DCB 0xD0
DCB 0x10
DCB 0xF0
DCB 0x30 ; 0
DCB 0x31 ; 1
DCB 0xF1
DCB 0x33 ; 3
DCB 0xF3
DCB 0xF2
DCB 0x32 ; 2
DCB 0x36 ; 6
DCB 0xF6
DCB 0xF7
DCB 0x37 ; 7
DCB 0xF5
DCB 0x35 ; 5
DCB 0x34 ; 4
DCB 0xF4
DCB 0x3C ; <
DCB 0xFC
DCB 0xFD
DCB 0x3D ; =
DCB 0xFF
DCB 0x3F ; ?
DCB 0x3E ; >
DCB 0xFE
DCB 0xFA
DCB 0x3A ; :
DCB 0x3B ; ;
DCB 0xFB
DCB 0x39 ; 9
DCB 0xF9
DCB 0xF8
DCB 0x38 ; 8
DCB 0x28 ; (
DCB 0xE8
DCB 0xE9
DCB 0x29 ; )
DCB 0xEB
DCB 0x2B ; +
DCB 0x2A ; *
DCB 0xEA
DCB 0xEE
DCB 0x2E ; .
DCB 0x2F ; /
DCB 0xEF
DCB 0x2D ; -
DCB 0xED
DCB 0xEC
DCB 0x2C ; ,
DCB 0xE4
DCB 0x24 ; $
DCB 0x25 ; %
DCB 0xE5
DCB 0x27 ; '
DCB 0xE7
DCB 0xE6
DCB 0x26 ; &
DCB 0x22 ; "
DCB 0xE2
DCB 0xE3
DCB 0x23 ; #
DCB 0xE1
DCB 0x21 ; !
DCB 0x20
DCB 0xE0
DCB 0xA0
DCB 0x60 ; `
DCB 0x61 ; a
DCB 0xA1
DCB 0x63 ; c
DCB 0xA3
DCB 0xA2
DCB 0x62 ; b
DCB 0x66 ; f
DCB 0xA6
DCB 0xA7
DCB 0x67 ; g
DCB 0xA5
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0xA4
DCB 0x6C ; l
DCB 0xAC
DCB 0xAD
DCB 0x6D ; m
DCB 0xAF
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0xAE
DCB 0xAA
DCB 0x6A ; j
DCB 0x6B ; k
DCB 0xAB
DCB 0x69 ; i
DCB 0xA9
DCB 0xA8
DCB 0x68 ; h
DCB 0x78 ; x
DCB 0xB8
DCB 0xB9
DCB 0x79 ; y
DCB 0xBB
DCB 0x7B ; {
DCB 0x7A ; z
DCB 0xBA
DCB 0xBE
DCB 0x7E ; ~
DCB 0x7F ; 
DCB 0xBF
DCB 0x7D ; }
DCB 0xBD
DCB 0xBC
DCB 0x7C ; |
DCB 0xB4
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0xB5
DCB 0x77 ; w
DCB 0xB7
DCB 0xB6
DCB 0x76 ; v
DCB 0x72 ; r
DCB 0xB2
DCB 0xB3
DCB 0x73 ; s
DCB 0xB1
DCB 0x71 ; q
DCB 0x70 ; p
DCB 0xB0
DCB 0x50 ; P
DCB 0x90
DCB 0x91
DCB 0x51 ; Q
DCB 0x93
DCB 0x53 ; S
DCB 0x52 ; R
DCB 0x92
DCB 0x96
DCB 0x56 ; V
DCB 0x57 ; W
DCB 0x97
DCB 0x55 ; U
DCB 0x95
DCB 0x94
DCB 0x54 ; T
DCB 0x9C
DCB 0x5C ; \
DCB 0x5D ; ]
DCB 0x9D
DCB 0x5F ; _
DCB 0x9F
DCB 0x9E
DCB 0x5E ; ^
DCB 0x5A ; Z
DCB 0x9A
DCB 0x9B
DCB 0x5B ; [
DCB 0x99
DCB 0x59 ; Y
DCB 0x58 ; X
DCB 0x98
DCB 0x88
DCB 0x48 ; H
DCB 0x49 ; I
DCB 0x89
DCB 0x4B ; K
DCB 0x8B
DCB 0x8A
DCB 0x4A ; J
DCB 0x4E ; N
DCB 0x8E
DCB 0x8F
DCB 0x4F ; O
DCB 0x8D
DCB 0x4D ; M
DCB 0x4C ; L
DCB 0x8C
DCB 0x44 ; D
DCB 0x84
DCB 0x85
DCB 0x45 ; E
DCB 0x87
DCB 0x47 ; G
DCB 0x46 ; F
DCB 0x86
DCB 0x82
DCB 0x42 ; B
DCB 0x43 ; C
DCB 0x83
DCB 0x41 ; A
DCB 0x81
DCB 0x80
DCB 0x40 ; @
aSendS DCB "SEND: %s",0
ALIGN 4
aConnectSSHttp1 DCB "CONNECT %s:%s HTTP/1.0",0xD,0xA
DCB 0xD,0xA,0
ALIGN 4
aConnectSSHttp1_0 DCB "CONNECT %s:%s HTTP/1.1",0xD,0xA
DCB "Host: %s:%s",0xD,0xA
DCB 0xD,0xA,0
aSendingProxySS DCB "Sending proxy %s:%s - %s",0
ALIGN 4
aCouldnTReadFro DCB "Couldn't read from proxy %s:%s aft"
DCB "er sending CONNECT",0
ALIGN 4
aReceivedFromPr DCB "Received from proxy %s:%s - %s",0
ALIGN 4
aHttp11200 DCB "HTTP/1.1 200",0
ALIGN 4
aHttp10200 DCB "HTTP/1.0 200",0
ALIGN 4
aHttpErrorFromP DCB "HTTP Error from proxy %s:%s - %s",0
ALIGN 4
aCouldnTReadHtt DCB "Couldn't read HTTP byte from proxy"
DCB " %s:%s",0
ALIGN 4
asc_4D5C4 DCB 0xD,0xA
DCB 0xD,0xA,0
ALIGN 4
aSuccessNegotia DCB "Success negotiating with %s:%s HTT"
DCB "P proxy",0
ALIGN 4
aFailedToSemPos DCB "Failed to sem_post errno=%d cgsem="
DCB "0x%p in %s %s():%d",0
ALIGN 0x10
aUtilC DCB "util.c",0
ALIGN 4
aNullStringPass DCB "Null string passed to valid_hex fr"
DCB "om in %s %s():%d",0
ALIGN 4
aInvalidChar0xX DCB "Invalid char 0x%x passed to valid_"
DCB "hex from in %s %s():%d",0
ALIGN 4
aFailedToMalloc_1 DCB "Failed to malloc size %d from %s %"
DCB "s:%d",0
ALIGN 0x10
aFailedToCalloc_4 DCB "Failed to calloc memb %d size %d f"
DCB "rom %s %s:%d",0
ALIGN 0x10
aFailedToReallo DCB "Failed to realloc size %d from %s "
DCB "%s:%d",0
aHttp0 DCB "http0:",0
ALIGN 0x10
aHttp DCB "http:",0
ALIGN 4
aHex2binStrTrun DCB "hex2bin str truncated",0
ALIGN 0x10
aHex2binScanFai DCB "hex2bin scan failed",0
aPoolDRollingMa DCB "Pool %d rolling mask do not match!"
DCB 0
ALIGN 4
aYesHashTarget DCB "YES (hash <= target)",0
ALIGN 0x10
aNoFalsePositiv DCB "no (false positive; hash > target)"
DCB 0
ALIGN 4
aProofSTargetST DCB " Proof: %s",0xA
DCB "Target: %s",0xA
DCB "TrgVal? %s",0
ALIGN 4
aS DCB "%.*s",0
ALIGN 0x10
asc_4D7F0 DCB "/#",0
ALIGN 4
dword_4D7F4 DCD 0x3038
aJsonDecodeFail DCB "JSON decode failed(%d): %s",0
ALIGN 4
aResult DCB "result",0
ALIGN 4
aVersionRolling_0 DCB "version-rolling",0
aPoolDDonTSuppo DCB "Pool %d don't support ab!",0
ALIGN 4
aPoolDSupportAb DCB "POOL %d support ab mode!",0
ALIGN 4
aVersionRolling DCB "version-rolling.mask",0
ALIGN 4
aJsonRpcUnexpec DCB "JSON-RPC unexpected mining.configu"
DCB "re value: %s",0
ALIGN 4
aClosingSocketF DCB "Closing socket for stratum pool %d"
DCB 0
ALIGN 0x10
aWriteSelectFai DCB "Write select failed on pool %d soc"
DCB "k",0
aFailedToSendIn DCB "Failed to send in stratum_send",0
ALIGN 4
aStratumSendFai DCB "Stratum send failed due to no pool"
DCB " stratum_active",0
ALIGN 4
aTimedOutWaitin DCB "Timed out waiting for data on sock"
DCB "et_full",0
ALIGN 4
aSocketClosedWa DCB "Socket closed waiting in recv_line"
DCB 0
ALIGN 4
aFailedToRecvSo DCB "Failed to recv sock in recv_line",0
ALIGN 4
aFailedToParseA DCB "Failed to parse a \n terminated st"
DCB "ring in recv_line",0
aRecvdS DCB "RECVD: %s",0
ALIGN 4
a0x02x DCB "0x%02x",0
ALIGN 4
aFailedToMalloc_7 DCB "Failed to malloc null in %s %s():%"
DCB "d",0
aCgS DCB "cg@%s",0
ALIGN 0x10
aFailedToSemIni DCB "Failed to sem_init ret=%d errno=%d"
DCB " in %s %s():%d",0
ALIGN 4
aFailedToSemWai DCB "Failed to sem_wait errno=%d cgsem="
DCB "0x%p in %s %s():%d",0
ALIGN 4
aFailedToSemTim DCB "Failed to sem_timedwait errno=%d c"
DCB "gsem=0x%p in %s %s():%d",0
ALIGN 4
aErrAskedToMemc DCB "ERR: Asked to memcpy %u bytes from"
DCB " %s %s():%d",0
ALIGN 4
aErrAskedToMemc_0 DCB "ERR: Asked to memcpy %u bytes to N"
DCB "ULL from %s %s():%d",0
ALIGN 0x10
aErrAskedToMemc_1 DCB "ERR: Asked to memcpy %u bytes from"
DCB " NULL from %s %s():%d",0
aYes DCB "yes",0
aMerkleDS DCB "merkle %d: %s",0
ALIGN 4
aFailedToConver DCB "Failed to convert merkle to merkle"
DCB "_bin in parse_notify",0
ALIGN 4
aNullStringPass_0 DCB "Null string passed to valid_ascii "
DCB "from in %s %s():%d",0
ALIGN 4
aZeroLengthStri DCB "Zero length string passed to valid"
DCB "_ascii from in %s %s():%d",0
aInvalidChar0xX_0 DCB "Invalid char 0x%x passed to valid_"
DCB "ascii from in %s %s():%d",0
ALIGN 4
aSSSSSSS DCB "%s%s%s%s%s%s%s",0
ALIGN 4
a00000000000000 DCB "0000000000000000000000000000000000"
DCB "000000000000000000000000000000",0
ALIGN 4
aFailedToConver_0 DCB "Failed to convert header to header"
DCB "_bin in parse_notify",0
ALIGN 0x10
unk_4DD00 DCB 0x46 ; F
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x74 ; t
DCB 0x20
DCB 0x63 ; c
DCB 0x62 ; b
DCB 0x31 ; 1
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x62 ; b
DCB 0x31 ; 1
DCB 0x5F ; _
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x20
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x20
DCB 0x70 ; p
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x66 ; f
DCB 0x79 ; y
dword_4DD30 DCD 0
unk_4DD34 DCB 0x46 ; F
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x74 ; t
DCB 0x20
DCB 0x63 ; c
DCB 0x62 ; b
DCB 0x32 ; 2
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x62 ; b
DCB 0x32 ; 2
DCB 0x5F ; _
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x20
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x20
DCB 0x70 ; p
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x74 ; t
DCB 0x69 ; i
DCB 0x66 ; f
DCB 0x79 ; y
dword_4DD64 DCD 0
aPoolDCoinbaseS DCB "Pool %d coinbase %s",0
aJobIdS DCB "job_id: %s",0
ALIGN 4
aPrevHashS DCB "prev_hash: %s",0
ALIGN 4
aCoinbase1S DCB "coinbase1: %s",0
ALIGN 4
aCoinbase2S DCB "coinbase2: %s",0
ALIGN 4
aBbversionS DCB "bbversion: %s",0
ALIGN 4
aNbitS DCB "nbit: %s",0
ALIGN 4
aNtimeS DCB "ntime: %s",0
ALIGN 0x10
aCleanS DCB "clean: %s",0
ALIGN 4
aCgminer DCB "CGMINER",0
aInvalidIpAddre DCB "Invalid IP address specified for s"
DCB "ocks4 proxy: %s",0
ALIGN 4
aBadResponseFro DCB "Bad response from %s:%s SOCKS4 ser"
DCB "ver",0
ALIGN 0x10
aFailedToResolv DCB "Failed to resolve (?wrong URL) %s:"
DCB "%s",0
ALIGN 4
aFailedToGetadd DCB "Failed to getaddrinfo for %s:%s",0
aFailedSocket DCB "Failed socket",0
ALIGN 4
aFailedSockConn DCB "Failed sock connect",0
aSucceededDelay DCB "Succeeded delayed connect",0
ALIGN 4
aSelectTimeoutF DCB "Select timeout/failed connect",0
ALIGN 4
aSucceededImmed DCB "Succeeded immediate connect",0
aFailedToConnec DCB "Failed to connect to stratum on %s"
DCB ":%s",0
ALIGN 4
aAttemptingToNe DCB "Attempting to negotiate with %s:%s"
DCB " SOCKS5 proxy",0
aBadResponseFro_0 DCB "Bad response from %s:%s SOCKS5 ser"
DCB "ver",0
ALIGN 4
aSuccessNegotia_0 DCB "Success negotiating with %s:%s SOC"
DCB "KS5 proxy",0
aUnsupportedPro DCB "Unsupported proxy type for %s:%s",0
ALIGN 4
aIdDMethodMinin_0 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.subs"
DCB "cribe",0x22,", ",0x22,"params",0x22
DCB ": []}",0
ALIGN 4
aIdDMethodMinin DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.subs"
DCB "cribe",0x22,", ",0x22,"params",0x22
DCB ": [",0x22,"cgminer/1.0.0",0x22,", "
DCB 0x22,"%s",0x22,"]}",0
aIdDMethodMinin_1 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.subs"
DCB "cribe",0x22,", ",0x22,"params",0x22
DCB ": [",0x22,"cgminer/1.0.0",0x22,"]}"
DCB 0
ALIGN 0x10
aFailedToSendSI DCB "Failed to send s in initiate_strat"
DCB "um",0
ALIGN 4
aTimedOutWaitin_0 DCB "Timed out waiting for response in "
DCB "initiate_stratum",0
ALIGN 4
aUnknownReason DCB "(unknown reason)",0
ALIGN 0x10
aJsonRpcDecodeF DCB "JSON-RPC decode failed: %s",0
ALIGN 4
aMiningNotify DCB "mining.notify",0
ALIGN 4
aFailedToGetSes DCB "Failed to get sessionid in initiat"
DCB "e_stratum",0
aFailedToGetVal DCB "Failed to get valid nonce1 in init"
DCB "iate_stratum",0
ALIGN 4
aFailedToGetVal_0 DCB "Failed to get valid n2size in init"
DCB "iate_stratum",0
ALIGN 4
aPoolDSuccessfu DCB "Pool %d successfully negotiated re"
DCB "sume with the same session ID",0
aPoolDStratumSe DCB "Pool %d stratum session id: %s",0
ALIGN 4
aPoolDConfirmed DCB "Pool %d confirmed mining.subscribe"
DCB " with extranonce1 %s extran2size %"
DCB "d",0
ALIGN 0x10
aFailedToResume DCB "Failed to resume stratum, trying a"
DCB "fresh",0
aInitiateStratu DCB "Initiate stratum failed",0
aDeniedStratumR DCB "Denied stratum reconnect request f"
DCB "or pool without domain '%s'",0
ALIGN 0x10
aDeniedStratumR_1 DCB "Denied stratum reconnect request t"
DCB "o url without domain '%s'",0
aDeniedStratumR_0 DCB "Denied stratum reconnect request t"
DCB "o non-matching domain url '%s'",0
ALIGN 0x10
aStratumReconne DCB "Stratum reconnect requested from p"
DCB "ool %d to %s",0
ALIGN 0x10
aMethod DCB "method",0
ALIGN 4
aParams DCB "params",0
ALIGN 0x10
aJsonRpcMethodD DCB "JSON-RPC method decode failed: %s",0
ALIGN 4
aMiningMultiVer DCB "mining.multi_version",0
ALIGN 4
aPoolSupportMul DCB "Pool support multi version",0
ALIGN 4
aMiningSetVersi DCB "mining.set_version_mask",0
aMiningSetDiffi DCB "mining.set_difficulty",0
ALIGN 4
aPoolDDifficult DCB "Pool %d difficulty changed to %d",0
ALIGN 4
aPoolDDifficult_1 DCB "Pool %d difficulty changed to %.1f"
DCB 0
ALIGN 0x10
aPoolDDifficult_0 DCB "Pool %d difficulty set to %f",0
ALIGN 0x10
aMiningSetExtra DCB "mining.set_extranonce",0
ALIGN 4
aFailedToGetVal_1 DCB "Failed to get valid nonce1 in pars"
DCB "e_extranonce",0
ALIGN 4
aFailedToGetVal_2 DCB "Failed to get valid n2size in pars"
DCB "e_extranonce",0
ALIGN 4
aFailedToCalloc_5 DCB "Failed to calloc pool->nonce1bin i"
DCB "n %s %s():%d",0
ALIGN 4
aPoolDExtranonc DCB "Pool %d extranonce change requeste"
DCB "d",0
aClientReconnec DCB "client.reconnect",0
ALIGN 0x10
aClientGetVersi DCB "client.get_version",0
ALIGN 4
aId_0 DCB "id",0
ALIGN 4
aIdDResultCgmin DCB "{",0x22,"id",0x22,": %d, ",0x22,"r"
DCB "esult",0x22,": ",0x22,"cgminer/1.0"
DCB ".0",0x22,", ",0x22,"error",0x22,":"
DCB " null}",0
ALIGN 0x10
aClientShowMess DCB "client.show_message",0
aPoolDMessageS DCB "Pool %d message: %s",0
aMiningPing DCB "mining.ping",0
aPoolDPing DCB "Pool %d ping",0
ALIGN 4
aIdDResultPongE DCB "{",0x22,"id",0x22,": %d, ",0x22,"r"
DCB "esult",0x22,": ",0x22,"pong",0x22,","
DCB " ",0x22,"error",0x22,": null}",0
aIdDMethodMinin_2 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.extr"
DCB "anonce.subscribe",0x22,", ",0x22,"p"
DCB "arams",0x22,": []}",0
ALIGN 4
aTimedOutWaitin_1 DCB "Timed out waiting for response ext"
DCB "ranonce.subscribe",0
aMethodSubscrib DCB "Method 'subscribe' not found for s"
DCB "ervice 'mining.extranonce'",0
ALIGN 4
aCannotSubscrib DCB "Cannot subscribe to mining.extrano"
DCB "nce for pool %d",0
ALIGN 4
aUnrecognizedRe DCB "Unrecognized request provided",0
ALIGN 4
aPoolDJsonExtra DCB "Pool %d JSON extranonce subscribe "
DCB "failed: %s",0
ALIGN 4
aStratumExtrano DCB "Stratum extranonce subscribe for p"
DCB "ool %d",0
ALIGN 4
aIdDMethodMinin_3 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.auth"
DCB "orize",0x22,", ",0x22,"params",0x22
DCB ": [",0x22,"%s",0x22,", ",0x22,"%s",0x22
DCB "]}",0
ALIGN 4
aPoolDJsonStrat DCB "pool %d JSON stratum auth failed: "
DCB "%s",0
ALIGN 4
aStratumAuthori DCB "Stratum authorisation success for "
DCB "pool %d",0
ALIGN 0x10
aIdDMethodMinin_5 DCB "{",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.sugg"
DCB "est_difficulty",0x22,", ",0x22,"pa"
DCB "rams",0x22,": [%d]}",0
ALIGN 4
aLowPowerMode DCB "LOW POWER MODE!",0
aIdDMethodMinin_4 DCB "{",0x22,"id",0x22,":%d, ",0x22,"me"
DCB "thod",0x22,":",0x22,"mining.config"
DCB "ure",0x22,", ",0x22,"params",0x22,":"
DCB "[[",0x22,"version-rolling",0x22,"]"
DCB ",{",0x22,"version-rolling.mask",0x22
DCB ":",0x22,"%08x",0x22,",",0x22,"vers"
DCB "ion-rolling.min-bit-count",0x22,":"
DCB "%d}]}",0
ALIGN 0x10
aO DCB "o",0
ALIGN 4
aS08xMidstateSD DCB "%s %08x midstate %s data %s nonce "
DCB "%s hash %s diff %lld",0
ALIGN 4
aScreen DCB "screen",0
ALIGN 4
aS08xWorkSMidst DCB "%s %08x work %s midstate %s data %"
DCB "s nonce %s hash %s diff %lld",0
ALIGN 4
aMidstateSDataS DCB "midstate %s data %s nonce %s hash "
DCB "%s",0
ALIGN 4
aWorkDiffLldDif DCB "work diff %lld diffnum %d",0
ALIGN 4
aSocks4 DCB "socks4:",0
aSocks5 DCB "socks5:",0
aSocks4a DCB "socks4a:",0
ALIGN 4
aSocks5h DCB "socks5h:",0
ALIGN 0x10
aJsonEscape DCB "json_escape",0
aCalcMidstate DCB "calc_midstate",0
ALIGN 4
aMinerThread DCB "miner_thread",0
ALIGN 4
aLoadConfig DCB "load_config",0
; const char function[]
function DCB "parse_config",0
ALIGN 4
aMtDisable DCB "mt_disable",0
ALIGN 4
aSetupUrl DCB "setup_url",0
ALIGN 0x10
aCopyWork DCB "_copy_work",0
ALIGN 4
aLoadDefaultCon DCB "load_default_config",0
aSetTarget DCB "set_target",0
ALIGN 4
aGetStatline DCB "get_statline",0
ALIGN 4
; _DWORD dword_4EABC[10]
dword_4EABC DCD 1, 0x55AB0, 0x40, 0x55AB8, 0x40, 0x55AC4
DCD 8, 0x55AD0, 0xA, 0x520CC
aPoolTset DCB "pool_tset",0
ALIGN 0x10
aIncDevStatus DCB "inc_dev_status",0
ALIGN 0x10
aPoolTclear DCB "pool_tclear",0
aWakeGws DCB "wake_gws",0
ALIGN 4
aRestartWait DCB "restart_wait",0
ALIGN 4
aTotalWorkInc DCB "total_work_inc",0
ALIGN 4
aMakeWork DCB "make_work",0
ALIGN 4
aAddQueued DCB "add_queued",0
ALIGN 0x10
aWorkCompleted DCB "work_completed",0
ALIGN 0x10
aTakeQueuedWork DCB "take_queued_work_bymidstate",0
aAgeQueuedWork DCB "age_queued_work",0
aCloneQueuedWor DCB "clone_queued_work_byid",0
ALIGN 4
aCloneQueuedWor_0 DCB "clone_queued_work_bymidstate",0
ALIGN 4
aFindQueuedWork DCB "find_queued_work_byid",0
ALIGN 4
aFindQueuedWork_0 DCB "find_queued_work_bymidstate",0
aGetDevices DCB "get_devices",0
aGetThread DCB "get_thread",0
ALIGN 0x10
aCurrentPool DCB "current_pool",0
ALIGN 0x10
aIncWorkStats DCB "inc_work_stats",0
ALIGN 0x10
aCpPrio DCB "cp_prio",0
aAddPool DCB "add_pool",0
ALIGN 4
aFlushQueue DCB "flush_queue",0
aZeroStats DCB "zero_stats",0
ALIGN 4
aIncHwErrors DCB "inc_hw_errors",0
ALIGN 4
aIncHwErrorsWit DCB "inc_hw_errors_with_diff",0
aShareDiff DCB "share_diff",0
ALIGN 0x10
aUpdateWorkStat DCB "update_work_stats",0
ALIGN 4
aClearPoolWork DCB "clear_pool_work",0
aClearStratumSh DCB "clear_stratum_shares",0
ALIGN 4
aSwitchPools DCB "switch_pools",0
ALIGN 4
aReapCurl DCB "reap_curl",0
ALIGN 4
aPruneStratumSh DCB "prune_stratum_shares",0
ALIGN 0x10
aHashPop DCB "hash_pop",0
ALIGN 4
aSharelog DCB "sharelog",0
ALIGN 4
aTestPoolThread DCB "test_pool_thread",0
ALIGN 4
aGenStratumWork DCB "gen_stratum_work",0
ALIGN 0x10
aGetWorkByNonce DCB "get_work_by_nonce2",0
ALIGN 4
aStaleWork DCB "stale_work",0
ALIGN 0x10
aGetWork DCB "get_work",0
ALIGN 4
aSetBenchmarkWo DCB "set_benchmark_work",0
ALIGN 0x10
aGetQueued DCB "__get_queued",0
ALIGN 0x10
aGetQueued_0 DCB "get_queued",0
ALIGN 4
aDiscardStale DCB "discard_stale",0
ALIGN 4
aRestartThread DCB "restart_thread",0
ALIGN 4
aHashmeter DCB "hashmeter",0
ALIGN 4
aFillQueue DCB "fill_queue",0
ALIGN 4
aHashDriverWork DCB "hash_driver_work",0
ALIGN 4
aHashSoleWork DCB "hash_sole_work",0
ALIGN 4
aWatchdogThread_0 DCB "watchdog_thread",0
aStratumSthread DCB "stratum_sthread",0
aStratumSthread_0 DCB "stratum_sthread",0
aTestWorkCurren DCB "test_work_current",0
ALIGN 4
aBlockExists DCB "block_exists",0
ALIGN 4
aSetCurblock DCB "set_curblock",0
ALIGN 4
aWaitLpcurrent DCB "wait_lpcurrent",0
ALIGN 4
aSupportsResume DCB "supports_resume",0
aParseStratumRe DCB "parse_stratum_response",0
ALIGN 4
aShareResult DCB "share_result",0
ALIGN 4
aReject DCB "reject",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aStratumRthread DCB "stratum_rthread",0
aHashPush DCB "hash_push",0
ALIGN 4
aSubmitWorkAsyn DCB "submit_work_async",0
ALIGN 4
aSubmitTestedWo DCB "submit_tested_work",0
ALIGN 4
aSubmitNoffsetN DCB "submit_noffset_nonce",0
ALIGN 4
aAddPoolDetails DCB "add_pool_details",0
ALIGN 4
aEnableDevice DCB "enable_device",0
ALIGN 4
aAddCgpu DCB "add_cgpu",0
ALIGN 4
aCopyDrv DCB "copy_drv",0
ALIGN 0x10
aReadVersionFil DCB "read_version_file",0
ALIGN 4
aLoadDefaultCon_0 DCB "load_default_config_new",0
aMain DCB "main",0
ALIGN 4
aLoadTempCutoff DCB "load_temp_cutoffs",0
ALIGN 4
aSignalWorkUpda DCB "signal_work_update",0
ALIGN 4
aGetBenchmarkWo DCB "get_benchmark_work",0
ALIGN 0x10
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0x5F ; _
DCB    0
DCB    0
DCB    0
a00000002c01f50 DCB "00000002c01f502cb3e9fdb053230ec12a"
DCB "4954c1021a6b35862b5e29000000000000"
DCB "000084d1b83ae44057025e8c5b5756b44f"
DCB "04df5fffe4a7a30e5c12d12a97a7a4c2ea"
DCB "536dce431900896cb6d60e000000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000d08f7e14c50dad77"
DCB "dc238b4db2901a0578e657b1954779ab9c"
DCB "d82a73829edf7f",0
ALIGN 4
a000000023bf53e DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "0000c1a174254a6593ffba987f68fe26e7"
DCB "16e3c129a7f33a9c43ae7ecf90c8cd0d2c"
DCB "536dc4e61900896c8f8100100000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200006700aeedada2b387"
DCB "7900b58a183c42c40949956bb8b4a8d214"
DCB "81f8936b572922",0
ALIGN 0x10
a00000002138cf4 DCB "00000002138cf4b61dff74e3c26b2d8004"
DCB "5064e8ab4802521bab2cda000000000000"
DCB "000071eef64a7ef4e47cda16e96673197d"
DCB "36c7235a4aadd23c21a38ce53827d1f8bc"
DCB "536dc4d71900896ce96b00200000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200000730cf7a6b8a85eb"
DCB "1cc017b109d23c392464f99aa8c020ea10"
DCB "7c525b671adde0",0
ALIGN 4
a000000023bf53e_0 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "0000fe2c6b926468565e524ab7c2f11103"
DCB "5dcde7c60955842111930589eccb410f83"
DCB "536dc66b1900896cf42900300000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000027dbb374a97f15c5"
DCB "9587256662f36904d075d0e61f74961818"
DCB "2711288ac617c7",0
ALIGN 4
a000000023bf53e_1 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "000003073385e05c29f0435a6001c8eca9"
DCB "c8d5602890aeff9d4d103d3383cf80dae5"
DCB "536dc57c1900896c821d00400000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200007da3b97e82c0c312"
DCB "5a58dad8a0d1d0369244731f3b096e9724"
DCB "84298d15b843d9",0
ALIGN 4
a000000029ca55e DCB "000000029ca55e5f1bc0328c84f358fdda"
DCB "dc13cb232599bc2ca9dbe1000000000000"
DCB "0000b5b4d19c20a7fc2b174ff673c006ed"
DCB "d2247c4b2336571864df93eb7ec0c8c276"
DCB "536dfe041900896ce63c00500000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001514bd586511e531"
DCB "e2b6277a6d112b171f9e008d56ef4a971e"
DCB "619acf22e75072",0
ALIGN 0x10
a000000023bf53e_2 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "00003e3030629ff4258056dc9efaf922bd"
DCB "173a65f65ee799b0c765097d3deeddef10"
DCB "536dc4d81900896c144300600000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000dcb77a9c36d894d2"
DCB "dbc31437e5c2a1564e927937848ea2eb20"
DCB "b38638afc64b96",0
ALIGN 4
a000000023bf53e_3 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "00005513c22bb99e9daa9936b0df5dce64"
DCB "d7737e3706be99e5098d112002492cf81b"
DCB "536dc5691900896cd44100700000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200000d896267fda5dda0"
DCB "f85308e77f754c8b94b7b88e3cb315475c"
DCB "d9efd16401e3ce",0
ALIGN 4
a00000002e155f0 DCB "00000002e155f07e652e4d671ca4db51bb"
DCB "de14d2b5ae34ee67ecc744000000000000"
DCB "00004af5cffd7e5a7087f1b484b526c735"
DCB "0c86d8389283509ca878502f792115e8dc"
DCB "536dc6ad1900896c999d00800000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000339354568f506ac3"
DCB "cd69bb427b1af83a0473b87c16bf3b562a"
DCB "93d0a2ffc53e54",0
ALIGN 4
a000000029ca55e_0 DCB "000000029ca55e5f1bc0328c84f358fdda"
DCB "dc13cb232599bc2ca9dbe1000000000000"
DCB "00005925a624e5c84f96d2c34dce3b6a73"
DCB "6addb891724b48a36320c7494435f9c915"
DCB "536dfe621900896c14fb00900000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200008362009c07cf4824"
DCB "9f481be6b79e67247cab1d20050cf11c27"
DCB "6085b90732110c",0
ALIGN 0x10
a00000002e155f0_0 DCB "00000002e155f07e652e4d671ca4db51bb"
DCB "de14d2b5ae34ee67ecc744000000000000"
DCB "00001e69f1d6507f4b7b50980930f7d808"
DCB "9834fbe65f0980b8592d53cdda08e50d24"
DCB "536dc7da1900896c5eeb00a00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000021e4f654d26ab8c9"
DCB "164ff311657a9f9c4cdc0e8a09334925f7"
DCB "c02138819d7e61",0
ALIGN 4
a000000023bf53e_4 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "000064923b63f53c72c04ebe6c1c9140b6"
DCB "377132b6e50865814fe562291bd023d348"
DCB "536dc65a1900896cc52e00b00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000055db91a25401a89d"
DCB "af9ff7d7954bab722b894ba480fefaf1f0"
DCB "a95aaf5f600567",0
ALIGN 4
a000000023bf53e_5 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "0000ee9817160e35d4410601c8dc741c1a"
DCB "810c485f3b40a0859be5f58f0bf6ef1694"
DCB "536dc6321900896c6e1f00c00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000ae215785178ff635"
DCB "0064060ebbb219a71716a10e88528fc4bb"
DCB "1cb5c8fdd0cf60",0
ALIGN 4
a000000029ca55e_1 DCB "000000029ca55e5f1bc0328c84f358fdda"
DCB "dc13cb232599bc2ca9dbe1000000000000"
DCB "00001e514cf738455a54f004ec86edafcf"
DCB "d9fd2022017bb31c245340353911744fb7"
DCB "536dfe1f1900896c265f00d00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000dcafaa86defe850b"
DCB "057ae74f7218a79b0ede086a196f18f0e7"
DCB "c585eb88d1139a",0
ALIGN 0x10
a000000023bf53e_6 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "00005edbd53fcc64850b5334678199d769"
DCB "514818fbcc79861fc77e572bb4753b7fe2"
DCB "536dc5d91900896c938900e00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200005e653df5956ece51"
DCB "8a78a5d11297431af94ce8ba91d80cfb2a"
DCB "a8c5b3095fa256",0
ALIGN 4
a000000023bf53e_7 DCB "000000023bf53ef343a50f7599601f849c"
DCB "93ecce63530b0b449a4463000000000000"
DCB "0000596fc4aa5da839ba267c36aa1a5b29"
DCB "d813747b2273dc03aa9e404c4da0238e2b"
DCB "536dc4cc1900896c9e7000f00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200000e23806a533bd956"
DCB "787eef52dd8edee456c60d6cecbb617545"
DCB "8ee53fc8c6c813",0
ALIGN 4
a000000029c6bf4 DCB "000000029c6bf469abe4ad37605c097a86"
DCB "0cff3cf5c1ef4377618f74000000000000"
DCB "000082b1514e7b6565941e5824f0842921"
DCB "64ec5f97e7ea20c494bd96e524d478977b"
DCB "536dd2261900896c8b1002000000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000064e4e3becc01064d"
DCB "808269b330f40f4de82dc92e894d635025"
DCB "daa3e2e2c410b4",0
ALIGN 4
a00000002e790c2 DCB "00000002e790c23987181950eeb144591c"
DCB "3ac4d06c0705f2801d0976000000000000"
DCB "00009ebbce2f5f0d6cc0aca284ecb1059c"
DCB "856ef2f7f42e7edd403d246754ee4c905a"
DCB "536dd2a91900896ccfda03100000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200004a78daf1b5eb3397"
DCB "af1c00dbd9b06659cdc04183c8baaf5be1"
DCB "dbf32f79e00459",0
ALIGN 0x10
a000000023e91fc DCB "000000023e91fce7300a792bfbaa0c76e1"
DCB "aa5f9b546c1db582aee4ff000000000000"
DCB "0000f04650a8e748d2e6fde86a8a920b28"
DCB "5f3e22398f583700236958323ef9ea8321"
DCB "536dcf431900896cb4570e200000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200000a1d654ae2b06f21"
DCB "9ccf4601933fab408de1c3b7c8c9c85e03"
DCB "231d4aaf5a26cd",0
ALIGN 4
a000000023e91fc_0 DCB "000000023e91fce7300a792bfbaa0c76e1"
DCB "aa5f9b546c1db582aee4ff000000000000"
DCB "000074b39134c2930d2f2e7339f9d502c7"
DCB "76c44d6ee599f7efebec6c9bbd04787aae"
DCB "536dce561900896ce2710f300000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000094e60c1180022f33"
DCB "7232ab3d298f838304b6008ab237cf7e17"
DCB "17f1933407e592",0
ALIGN 4
a000000023e91fc_1 DCB "000000023e91fce7300a792bfbaa0c76e1"
DCB "aa5f9b546c1db582aee4ff000000000000"
DCB "0000c5b821fb0b26d63b00cc26e7ac4d6c"
DCB "fd1d3fc109b0db188e7e792e3d18342919"
DCB "536dce501900896ced4805400000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000a290eac61642949c"
DCB "00d17f7cd5980abedb8647fc5df9955dcf"
DCB "e4d56a50a0c564",0
ALIGN 4
a00000002e790c2_0 DCB "00000002e790c23987181950eeb144591c"
DCB "3ac4d06c0705f2801d0976000000000000"
DCB "00006e9d94bf5a0ab7b202d39e1200af96"
DCB "074e4f641f4e55e3e9e3aee72aa00a70e9"
DCB "536dd2ae1900896c60f701500000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001477ca8536702eac"
DCB "bd65a6a162cfe90d62016a14ffe58d52b7"
DCB "dd4c3628a27e5b",0
ALIGN 0x10
a00000002194bb5 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "000003bbb250f2dc23717e8192c0b8bec6"
DCB "a175cd059e4089d325006eaee3446254c9"
DCB "536dd39e1900896c16980c600000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000068db599d6b7a55fd"
DCB "61d4244a3dfa465055ead6b5c0a37c7a3d"
DCB "4555b58e99065e",0
ALIGN 4
a000000023e91fc_2 DCB "000000023e91fce7300a792bfbaa0c76e1"
DCB "aa5f9b546c1db582aee4ff000000000000"
DCB "000072e17babd4089b204797cebda7dc6e"
DCB "277950eab1b2908991ae1d72335f82d204"
DCB "536dcf441900896c5f2d09700000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000c7d601ce3b01e569"
DCB "a49508d541bbcba9b3c8394b1834523ef1"
DCB "e5cb2c60bd34a3",0
ALIGN 4
a000000029c6bf4_0 DCB "000000029c6bf469abe4ad37605c097a86"
DCB "0cff3cf5c1ef4377618f74000000000000"
DCB "000022388b6f022144db134af1bc8e61b3"
DCB "85ca37cae038c1d165ae98c496b3b41e8b"
DCB "536dd2101900896ca8ea0e800000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000410761e97e67b494"
DCB "fd547cfe9ffbb36893da7aec75c6b51b8d"
DCB "5f38f87b5d63cf",0
ALIGN 4
a000000029c6bf4_1 DCB "000000029c6bf469abe4ad37605c097a86"
DCB "0cff3cf5c1ef4377618f74000000000000"
DCB "00000e1f0cfdf5ad8248fc4520f3bb0b20"
DCB "40226430348cddeff5ca9181beeb78870d"
DCB "536dd2161900896c0d600f900000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000ad1a8d354a7e8b13"
DCB "ec47f4c3d907d00945a61e86059f4943e4"
DCB "2c1e52398eba5d",0
ALIGN 0x10
a00000002194bb5_0 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "00002232a16d38cc0e13e4b16d917bff4c"
DCB "34727deb3b5c50e424fb8453ff9b2adcb4"
DCB "536dd4231900896cbf1002a00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000adc67d38f31f589b"
DCB "18b9d8e531b994ce5733c021a03d88d386"
DCB "11ee6b4c2710a5",0
ALIGN 4
a00000002194bb5_1 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "0000a2860471277b4a93fea2a8b6d8c281"
DCB "fab7bde3b78f2acd1bfdc89d464ed3bb3c"
DCB "536dd35e1900896c9d3004b00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "000000000080020000537686c611aae439"
DCB "7c7c04b2c190708453d00e8c9563525610"
DCB "c31ba46e80dbc2",0
ALIGN 4
a00000002194bb5_2 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "0000f370230607998fbbd10275c5890885"
DCB "fcd81b68018ba2373abf0f93a06d02ab28"
DCB "536dd33e1900896c37750bc00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001fdda952da6abd70"
DCB "022a6e5f2b9dc5e1b66011128c3fa249f0"
DCB "b7439f00d5943e",0
ALIGN 4
a00000002c0a2c9 DCB "00000002c0a2c91fc41254539a5b2a27be"
DCB "28de2a6187e2af3f129d63000000000000"
DCB "00005e45ffc512d5ca3bc4d2063dd3af16"
DCB "69c296ae126a5a2ef896d1e190cedf67b9"
DCB "536dd46b1900896cd55b00d00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "00000000008002000007094d6cbe76538a"
DCB "88612624fc5e655cc405cb8198dcad516b"
DCB "88dbac5bf8b906",0
ALIGN 0x10
a00000002194bb5_3 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "000027c548815127c125147af91c356c29"
DCB "3f0defbd2771f8dc3b1142b367528656db"
DCB "536dd37c1900896c96770ae00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001bdbb3b1be721687"
DCB "2ea787627b03c389a527451f6dd832d854"
DCB "0874306f9c07c6",0
ALIGN 4
a00000002194bb5_4 DCB "00000002194bb5b4f8ac3392fbd66f3dd3"
DCB "e9dcdb22370e380837fe44000000000000"
DCB "0000adef758770bb90c5b13769c5b61aff"
DCB "b322b24c747573b38ebe2ee81748d0b557"
DCB "536dd4071900896c29f001f00000008000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000800200001ac8eea632853539"
DCB "44e40eec54d2dd6cd0994b447429bb0ed0"
DCB "598d38f42da0e2",0
ALIGN 4
aFailedToOpenFd DCB "Failed to open fd %u for share log"
DCB 0
ALIGN 4
aStandardOutput DCB "Standard output missing for share "
DCB "log",0
ALIGN 4
aFailedToOpenSF DCB "Failed to open %s for share log",0
aCgminerC DCB "cgminer.c",0
ALIGN 0x10
aSBuiltWithBitm DCB "%s",0xA
DCB "Built with bitmain_c5 mining suppo"
DCB "rt.",0xA,0
ALIGN 4
a3gS DCB "%.3g%s",0
ALIGN 4
aDS DCB "%d%s",0
ALIGN 4
aFS DCB "%*.*f%s",0
aCreateTestPool DCB "create test_pool_thread pool[%d]",0xA
DCB 0
ALIGN 4
aDMiner DCB "%d/Miner",0
ALIGN 4
aWaitingOnSemIn DCB "Waiting on sem in miner thread",0
ALIGN 4
aWtfNoPoolDFoun DCB "WTF No pool %d found!",0
ALIGN 4
aInvalidTimeSet DCB "Invalid time set, should be HH:MM",0
ALIGN 0x10
aInvalidTimeSet_0 DCB "Invalid time set.",0
ALIGN 4
aDD DCB "%d:%d",0
ALIGN 4
aTooManyLevelsO DCB "Too many levels of JSON includes ("
DCB "limit 10) or a loop",0
ALIGN 4
aJsonDecodeOfFi DCB "JSON decode of file '%s' failed",0xA
DCB " %s",0
aInvalidValue DCB "Invalid value",0
ALIGN 4
aInclude DCB "include",0
aOptTypeOptSubt DCB "!(opt->type & OPT_SUBTABLE)",0
aInvalidConfigO DCB "Invalid config option %s: %s",0
ALIGN 4
aParsingJsonOpt DCB "Parsing JSON option %s: %s",0
ALIGN 4
aValueOutOfRang DCB "Value out of range",0
ALIGN 4
aThreadDBeingDi DCB "Thread %d being disabled",0
ALIGN 4
aThreadDBeingRe DCB "Thread %d being re-enabled",0
ALIGN 4
aUnableToSetThr_0 DCB "Unable to set thread to low priori"
DCB "ty",0
ALIGN 4
aFreeWorkCalled DCB "Free work called with NULL work fr"
DCB "om %s %s:%d",0
ALIGN 4
aD02d02d02d02d0_0 DCB "[%d-%02d-%02d %02d:%02d:%02d.%03d]"
DCB 0
ALIGN 0x10
aGlobalQuotaGre DCB "Global quota greatest common denom"
DCB "inator set to %lu",0
aDD_0 DCB "%d-%d",0
ALIGN 4
aStratumTcp DCB "stratum+tcp://",0
ALIGN 4
aHttp_0 DCB "http://",0
aHttps DCB "https://",0
ALIGN 0x10
aInvalidParamet DCB "Invalid parameters for set temp cu"
DCB "toff",0
ALIGN 4
aInvalidValuePa DCB "Invalid value passed to set temp c"
DCB "utoff",0
aBenchfileNonce DCB "BENCHFILE nonce %u=0x%08x for work"
DCB "=%s",0
ALIGN 4
aDiscardWorkCal DCB "Discard work called with NULL work"
DCB " from %s %s:%d",0
ALIGN 4
aDiscardedWork DCB "Discarded work",0
ALIGN 4
aDiscardedClone DCB "Discarded cloned or rolled work",0
aPools_0 DCB "{",0xA
DCB 0x22,"pools",0x22," : [",0
ALIGN 4
aSQuotaSSSDS DCB "%s",0xA
DCB 9,"{",0xA
DCB 9,9,0x22,"quota",0x22," : ",0x22,"%"
DCB "s%s%s%d;%s",0x22,",",0
ALIGN 0x10
aSUrlSSSS DCB "%s",0xA
DCB 9,"{",0xA
DCB 9,9,0x22,"url",0x22," : ",0x22,"%s%"
DCB "s%s%s",0x22,",",0
unk_51CDC DCB  0xA
DCB    9
DCB    9
DCB 0x22 ; "
byte_51CE0 DCB 0x65
aXtranonceSubsc DCB "xtranonce-subscribe",0x22," : true"
DCB ",",0
ALIGN 0x10
aUserS DCB 0xA
DCB 9,9,0x22,"user",0x22," : ",0x22,"%s"
DCB 0x22,",",0
ALIGN 4
aPassS DCB 0xA
DCB 9,9,0x22,"pass",0x22," : ",0x22,"%s"
DCB 0x22,0xA
DCB 9,"}",0
asc_51D28 DCB 0xA
DCB "]",0xA,0
aSTrue DCB ",",0xA
DCB 0x22,"%s",0x22," : true",0
ALIGN 4
aSD_1 DCB ",",0xA
DCB 0x22,"%s",0x22," : ",0x22,"%d",0x22
DCB 0
ALIGN 4
aS1f DCB ",",0xA
DCB 0x22,"%s",0x22," : ",0x22,"%.1f",0x22
DCB 0
aSS_2 DCB ",",0xA
DCB 0x22,"%s",0x22," : ",0x22,"%s",0x22
DCB 0
ALIGN 4
aBalanceTrue DCB ",",0xA
DCB 0x22,"balance",0x22," : true",0
ALIGN 0x10
aLoadBalanceTru DCB ",",0xA
DCB 0x22,"load-balance",0x22," : true",0
aRoundRobinTrue DCB ",",0xA
DCB 0x22,"round-robin",0x22," : true",0
ALIGN 0x10
aRotateD DCB ",",0xA
DCB 0x22,"rotate",0x22," : ",0x22,"%d",0x22
DCB 0
ALIGN 4
asc_51DC4 DCB 0xA
DCB "}",0xA,0
aHome DCB "HOME",0
ALIGN 0x10
unk_51DD0 DCB 0x2E ; .
DCB 0x62 ; b
DCB 0x6D ; m
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x72 ; r
word_51DD8 DCW 0x2F
ALIGN 4
aBmminerConf DCB "bmminer.conf",0
ALIGN 4
aDiffZeroPassed DCB "Diff zero passed to set_target",0
ALIGN 4
aGeneratedTarge DCB "Generated target %s",0
aSDDuplicateSha DCB "%s %d duplicate share detected as "
DCB "HW error",0
ALIGN 4
aWb DCB "wb",0
ALIGN 0x10
aNvdataWorklogT DCB "/nvdata/worklog.txt",0
aMidstateSDataS_0 DCB "midstate %s data %s nonce %s versi"
DCB "on %s ",0xD,0xA,0
ALIGN 0x10
aShutdownSignal DCB "Shutdown signal received.",0
ALIGN 4
aSD DCB "%s%d ",0
ALIGN 4
aDsSAvgShSA0fR0 DCB "(%ds):%s (avg):%sh/s | A:%.0f R:%."
DCB "0f HW:%d WU:%.1f/m",0
ALIGN 4
aTailsprintfBuf DCB "tailsprintf buffer overflow in %s "
DCB "%s line %d",0
ALIGN 4
aFailedToCreate_2 DCB "Failed to create restart thread",0
aBenchfileInval DCB "BENCHFILE Invalid benchfile NULL",0
ALIGN 0x10
aBenchfileFaile_0 DCB "BENCHFILE Failed to open benchfile"
DCB " '%s'",0
aBenchfileFaile DCB "BENCHFILE Failed to read benchfile"
DCB " '%s'",0
aBenchfileNoWor DCB "BENCHFILE No work in benchfile '%s"
DCB "'",0
aBenchfileInval_1 DCB "BENCHFILE Invalid input file line "
DCB "%d - field count is %d but should "
DCB "be %d",0
ALIGN 0x10
aBenchfileInval_0 DCB "BENCHFILE Invalid input file line "
DCB "%d field %d (%s) length is %d but "
DCB "should be %d",0
ALIGN 4
aBenchfileInval_2 DCB "BENCHFILE Invalid input file line "
DCB "%d field %d (%s) length is %d but "
DCB "should be least %d",0
ALIGN 4
aNoncetime DCB "NonceTime",0
ALIGN 4
a0000000C DCB "0000000%c",0
ALIGN 4
a8s DCB "%.8s",0
ALIGN 4
a08lx DCB "%08lx",0
ALIGN 4
aRetrievingBloc DCB "Retrieving block template from poo"
DCB "l %s",0
ALIGN 4
aTestingPoolS DCB "Testing pool %s",0
unk_5212C DCB 0x46 ; F
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x20
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0x6D ; m
DCB 0x20
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x64 ; d
dword_5214C DCD 0
unk_52150 DCB 0x46 ; F
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x64 ; d
DCB 0x20
DCB 0x74 ; t
DCB 0x6F ; o
DCB 0x20
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x20
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0x6D ; m
DCB 0x20
DCB 0x72 ; r
DCB 0x74 ; t
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x64 ; d
dword_52170 DCD 0
aCurlInitialisa DCB "CURL initialisation failed",0
ALIGN 0x10
aProbingForGbtS DCB "Probing for GBT support",0
aGbtCoinbaseApp DCB "GBT coinbase + append support foun"
DCB "d, switching to GBT protocol",0
ALIGN 4
aGbtCoinbaseWit DCB "GBT coinbase without append found,"
DCB " switching to GBT solo protocol",0
ALIGN 4
aNoGbtCoinbaseA DCB "No GBT coinbase + append support f"
DCB "ound, pool unusable if it has no s"
DCB "tratum",0
ALIGN 4
aTestingPoolDSt DCB "Testing pool %d stratum %s",0
ALIGN 4
aSwitchingPoolD DCB "Switching pool %d %s to %s",0
ALIGN 0x10
aNoStratumGbtOr DCB "No Stratum, GBT or Solo support in"
DCB " pool %d %s unable to use",0
aFailedToRetrie DCB "FAILED to retrieve work from pool "
DCB "%u %s",0
aPoolUSlowDownO DCB "Pool %u slow/down or URL or creden"
DCB "tials invalid",0
aSuccessfullyRo DCB "Successfully rolled work",0
ALIGN 0x10
aFailedToCalloc DCB "Failed to calloc work in make_work"
DCB 0
ALIGN 4
aSummaryOfRunti DCB 0xA
DCB "Summary of runtime statistics:",0xA
DCB 0
ALIGN 4
aStartedAtS DCB "Started at %s",0
ALIGN 4
aPoolS DCB "Pool: %s",0
ALIGN 4
aRuntimeDHrsDMi DCB "Runtime: %d hrs : %d mins : %d sec"
DCB "s",0
aAverageHashrat DCB "Average hashrate: %.1f Mhash/s",0
ALIGN 4
aSolvedBlocksD DCB "Solved blocks: %d",0
ALIGN 4
aBestShareDiffi DCB "Best share difficulty: %s",0
ALIGN 4
aShareSubmissio DCB "Share submissions: %lld",0
aAcceptedShares DCB "Accepted shares: %lld",0
ALIGN 4
aRejectedShares DCB "Rejected shares: %lld",0
ALIGN 0x10
aAcceptedDiffic DCB "Accepted difficulty shares: %1.f",0
ALIGN 4
aRejectedDiffic DCB "Rejected difficulty shares: %1.f",0
ALIGN 4
aRejectRatio1f DCB "Reject ratio: %.1f%%",0
ALIGN 0x10
aHardwareErrors_0 DCB "Hardware errors: %d",0
aUtilityAccepte DCB "Utility (accepted shares / min): %"
DCB ".2f/min",0
ALIGN 0x10
aWorkUtilityDif DCB "Work Utility (diff1 shares solved "
DCB "/ min): %.2f/min",0xA,0
aStaleSubmissio DCB "Stale submissions discarded due to"
DCB " new blocks: %lld",0
aUnableToGetWor DCB "Unable to get work from server occ"
DCB "asions: %d",0
ALIGN 4
aWorkItemsGener DCB "Work items generated locally: %d",0
ALIGN 4
aSubmittingWork DCB "Submitting work remotely delay occ"
DCB "asions: %d",0
ALIGN 4
aNewBlocksDetec DCB "New blocks detected on network: %d"
DCB 0xA,0
aSolvedDBlockS DCB "SOLVED %d BLOCK%s!",0
ALIGN 4
aShareSubmissio_0 DCB " Share submissions: %lld",0
ALIGN 0x10
aAcceptedShares_0 DCB " Accepted shares: %lld",0
ALIGN 4
aRejectedShares_0 DCB " Rejected shares: %lld",0
ALIGN 0x10
aAcceptedDiffic_0 DCB " Accepted difficulty shares: %1.f",0
ALIGN 4
aRejectedDiffic_0 DCB " Rejected difficulty shares: %1.f",0
ALIGN 4
aRejectRatio1f_0 DCB " Reject ratio: %.1f%%",0
ALIGN 0x10
aItemsWorkedOnD DCB " Items worked on: %d",0
ALIGN 4
aStaleSubmissio_0 DCB " Stale submissions discarded due t"
DCB "o new blocks: %d",0
ALIGN 4
aUnableToGetWor_0 DCB " Unable to get work from server oc"
DCB "casions: %d",0
ALIGN 4
aSubmittingWork_0 DCB " Submitting work remotely delay oc"
DCB "casions: %d",0xA,0
ALIGN 4
aSummaryOfPerDe DCB "Summary of per device statistics:",0xA
DCB 0
ALIGN 0x10
aMined0fAccepte DCB "Mined %.0f accepted shares of %d r"
DCB "equested",0xA,0
aWarningMinedOn DCB "WARNING - Mined only %.0f shares o"
DCB "f %d requested.",0
ALIGN 0x10
aFailedToGetSys DCB "Failed to get sysinfo, errno:%u, r"
DCB "eason:%s",0xA,0
aAttemptingToRe DCB "Attempting to restart %s",0
ALIGN 4
aFailedToRestar DCB "Failed to restart application",0
ALIGN 4
aReceivedKillMe DCB "Received kill message",0
ALIGN 0x10
aKillingOffWatc DCB "Killing off watchpool thread",0
ALIGN 0x10
aKillingOffWatc_0 DCB "Killing off watchdog thread",0
aShuttingDownMi DCB "Shutting down mining threads",0
ALIGN 4
aKillingOffApiT DCB "Killing off API thread",0
ALIGN 4
aKillingOffMini DCB "Killing off mining threads",0
ALIGN 0x10
aPoolDSAliveTes DCB "Pool %d %s alive, testing stabilit"
DCB "y",0
aPoolDSAlive DCB "Pool %d %s alive",0
ALIGN 4
aStratumConnect DCB "Stratum connection to pool %d resu"
DCB "med",0
ALIGN 0x10
aFailedToPthrea DCB "Failed to pthread_cond_init in add"
DCB "_pool",0
aMethodGetworkP DCB "{",0x22,"method",0x22,": ",0x22,"g"
DCB "etwork",0x22,", ",0x22,"params",0x22
DCB ": [], ",0x22,"id",0x22,":0}",0xA,0
ALIGN 4
aUseOnlyUserPas DCB "Use only user + pass or userpass, "
DCB "but not both",0
ALIGN 4
aFailedToFindDe DCB "Failed to find : delimited user in"
DCB "fo",0
ALIGN 0x10
aNicehashCom DCB ".nicehash.com",0
ALIGN 0x10
aXnsub DCB "#xnsub",0
ALIGN 4
aPoolDExtranonc_0 DCB "Pool %d extranonce subscribing ena"
DCB "bled.",0
aNoSemicolonSep DCB "No semicolon separated quota;URL p"
DCB "air found",0
aNoParameterFor DCB "No parameter for quota found",0
ALIGN 4
aNoParameterFor_0 DCB "No parameter for URL found",0
ALIGN 4
aInvalidNegativ DCB "Invalid negative parameter for quo"
DCB "ta set",0
ALIGN 4
aSettingPoolDTo DCB "Setting pool %d to quota %d",0
aEnableExtranon DCB "Enable extranonce subscribe on %d",0
ALIGN 4
aDiscardedQueue DCB "Discarded queued work item",0
ALIGN 0x10
aSDInvalidNonce DCB "%s %d: invalid nonce - HW error",0
aSDInvalidNonce_0 DCB "%s%d: invalid nonce - HW error",0
ALIGN 0x10
aNewBestShareS DCB "New best share: %s",0
ALIGN 4
aFoundBlockForP DCB "Found block for pool %d!",0
ALIGN 0x10
aShareAboveTarg DCB "Share above target",0
ALIGN 4
aClearedDWorkIt DCB "Cleared %d work items due to strat"
DCB "um disconnect on pool %d",0
ALIGN 0x10
aLostDSharesDue DCB "Lost %d shares due to stratum disc"
DCB "onnect on pool %d",0
aSwitchingToPoo DCB "Switching to pool %d %s",0
aLastPoolPoolNo DCB "last_pool->pool_no = %d, last_pool"
DCB "->pool->rpc_url = %s",0
ALIGN 4
aPoolDSNotRespo DCB "Pool %d %s not responding!",0
ALIGN 0x10
aPoolDSFailedTo DCB "Pool %d %s failed to return work",0
ALIGN 4
aBeforeAddPoolP DCB "before add pool, pool->pool_no = %"
DCB "d, pool->rpc_url = %s",0xA,0
ALIGN 0x10
aInputPoolError DCB "Input pool error, try again",0xA,0
ALIGN 0x10
aTotalPoolsDNee DCB "total_pools = %d, need to remove %"
DCB "d pools",0xA,0
ALIGN 4
aAfterAddPoolPo DCB "after add pool, pool->pool_no = %d"
DCB ", pool->rpc_url = %s",0xA,0
aTotalPoolsAfte DCB "total_pools after removed = %d",0xA
DCB 0
aAfterRemovePoo DCB "after remove pool, pool->pool_no ="
DCB " %d, pool->rpc_url = %s",0xA,0
ALIGN 0x10
aErrorPoolInput DCB "error pool input",0
ALIGN 4
aPoolDUrlSUserS_0 DCB "pool%d, url = %s, user = %s, pass "
DCB "= %s",0xA,0
aWatchpoolThrea DCB "watchpool thread create failed",0
ALIGN 4
aWatchpool DCB "Watchpool",0
ALIGN 4
aReapedDCurlSFr DCB "Reaped %d curl%s from pool %d",0
ALIGN 4
aLostDSharesDue_0 DCB "Lost %d shares due to no stratum s"
DCB "hare response from pool %d",0
ALIGN 4
aPoolDSStableFo DCB "Pool %d %s stable for >%d seconds",0
ALIGN 4
aWaitingForWork DCB "Waiting for work to be available f"
DCB "rom pools.",0
ALIGN 4
aWorkAvailableF DCB "Work available from pools, resumin"
DCB "g.",0
ALIGN 4
aLuSSSSUUSS DCB "%lu,%s,%s,%s,%s%u,%u,%s,%s",0xA,0
aSharelogPrintf DCB "sharelog printf error",0
ALIGN 4
aSharelogFwrite DCB "sharelog fwrite error",0
ALIGN 0x10
aSwitchingToPoo_0 DCB "Switching to pool %d %s - first al"
DCB "ive pool",0
ALIGN 4
aSPoolDUrlSRetr DCB "%s pool[%d] url = %s retry",0xA,0
aEndTestPoolThr DCB "end test_pool_thread pool[%d]",0xA
DCB 0
ALIGN 4
aGeneratedStrat_0 DCB "Generated stratum merkle %s",0
aGeneratedStrat_1 DCB "Generated stratum header %s",0
aWorkJobIdSNonc DCB "Work job_id %s nonce2 %llu ntime %"
DCB "s",0
aWorkStaleDueTo DCB "Work stale due to block mismatch",0
ALIGN 4
aWorkStaleDueTo_0 DCB "Work stale due to stratum inactive"
DCB 0
ALIGN 4
aWorkStaleDueTo_3 DCB "Work stale due to stratum job_id m"
DCB "ismatch",0
ALIGN 4
aWorkStaleDueTo_1 DCB "Work stale due to expiry",0
ALIGN 4
aWorkStaleDueTo_2 DCB "Work stale due to fail only pool m"
DCB "ismatch",0
ALIGN 0x10
aPoppingWorkFro DCB "Popping work from get queue to get"
DCB " work",0
aGetWorkBlocked DCB "Get work blocked for %ld seconds",0
ALIGN 4
aGotWorkFromGet DCB "Got work from get queue to get wor"
DCB "k for thread %d",0
ALIGN 0x10
aDiscardedDStal DCB "Discarded %d stales that didn't ma"
DCB "tch current hash",0
ALIGN 4
aThreadDLluHash DCB "[thread %d: %llu hashes, %.1f mhas"
DCB "h/sec]",0
ALIGN 0x10
aS_0 DCB "%s          ",0xD,0
ALIGN 0x10
aCgminerTimeErr DCB "cgminer time error total_secs = %f"
DCB " last_total_secs = %f",0
aDsS1mS5mS15mSA DCB "(%ds):%s (1m):%s (5m):%s (15m):%s "
DCB "(avg):%sh/s",0
ALIGN 4
aSDFailureDisab DCB "%s %d failure, disabling!",0
ALIGN 4
aWorkPrepareFai DCB "work prepare failed, exiting minin"
DCB "g thread %d",0
ALIGN 4
aWatchdog DCB "Watchdog",0
ALIGN 0x10
aPausingExecuti DCB "Pausing execution as per stop time"
DCB " %02d:%02d scheduled",0
ALIGN 4
aTerminatingExe DCB "Terminating execution as planned",0
ALIGN 4
aWillRestartExe DCB "Will restart execution as schedule"
DCB "d at %02d:%02d",0
ALIGN 0x10
aRestartingExec DCB "Restarting execution as per start "
DCB "time %02d:%02d scheduled",0
ALIGN 4
aWillPauseExecu DCB "Will pause execution as scheduled "
DCB "at %02d:%02d",0
ALIGN 4
aPushingSemPost DCB "Pushing sem post to thread %d",0
ALIGN 4
aSD_0 DCB "%s %d",0
ALIGN 4
aSRecoveredDecl DCB "%s: Recovered, declaring WELL!",0
ALIGN 4
aSIdleForMoreTh DCB "%s: Idle for more than 60 seconds,"
DCB " declaring SICK!",0
ALIGN 4
aSAttemptingToR DCB "%s: Attempting to restart",0
ALIGN 4
aSNotRespondedF DCB "%s: Not responded for more than 10"
DCB " minutes, declaring DEAD!",0
aDSstratum DCB "%d/SStratum",0
aFailedToCreate DCB "Failed to create stratum_q in stra"
DCB "tum_sthread",0
ALIGN 4
aInSPoolDPoolUr DCB "in %s , pool: %d, pool_url: %s",0
ALIGN 4
aStratumQReturn DCB "Stratum q returned empty work",0
ALIGN 4
aPoolDAskingFor DCB "Pool %d asking for inappropriately"
DCB " long nonce2 length %d",0
ALIGN 4
aNotAttemptingT DCB "Not attempting to submit shares",0
aFilteringDupli DCB "Filtering duplicate share to pool "
DCB "%d",0
ALIGN 0x10
aParamsSSSSS08x DCB "{",0x22,"params",0x22,": [",0x22,"%"
DCB "s",0x22,", ",0x22,"%s",0x22,", ",0x22
DCB "%s",0x22,", ",0x22,"%s",0x22,", ",0x22
DCB "%s",0x22,", ",0x22,"%08x",0x22,"],"
DCB " ",0x22,"id",0x22,": %d, ",0x22,"m"
DCB "ethod",0x22,": ",0x22,"mining.subm"
DCB "it",0x22,"}",0
aParamsSSSSSIdD DCB "{",0x22,"params",0x22,": [",0x22,"%"
DCB "s",0x22,", ",0x22,"%s",0x22,", ",0x22
DCB "%s",0x22,", ",0x22,"%s",0x22,", ",0x22
DCB "%s",0x22,"], ",0x22,"id",0x22,": %"
DCB "d, ",0x22,"method",0x22,": ",0x22,"m"
DCB "ining.submit",0x22,"}",0
aSubmittingShar DCB "Submitting share %08lx to pool %d",0
ALIGN 4
aPoolDCommunica DCB "Pool %d communication resumed, sub"
DCB "mitting work",0
ALIGN 4
aSuccessfullySu DCB "Successfully submitted, adding to "
DCB "stratum_shares db",0
aPoolDStratumSh DCB "Pool %d stratum share submission f"
DCB "ailure",0
ALIGN 4
aLowmemOptionPr DCB "Lowmem option prevents resubmittin"
DCB "g stratum share",0
ALIGN 0x10
aNoMatchingSess DCB "No matching session id for resubmi"
DCB "tting stratum share",0
ALIGN 4
aFailedToSubmit DCB "Failed to submit stratum share, di"
DCB "scarding",0
ALIGN 4
aPoolDStratumSh_0 DCB "Pool %d stratum share submission l"
DCB "ag time %d seconds",0
ALIGN 4
aGbt DCB "GBT ",0
ALIGN 4
aBlockExistsOom DCB "block_exists OOM",0
ALIGN 4
aNetworkDiffSet DCB "Network diff set to %s",0
ALIGN 0x10
aDeletedBlockDF DCB "Deleted block %d from database",0
ALIGN 0x10
a02d02d02d03d DCB "[%02d:%02d:%02d.%03d]",0
ALIGN 4
aNewBlockSDiffS DCB "New block: %s... diff %s",0
ALIGN 4
aStratumFromPoo_0 DCB "Stratum from pool %d detected new "
DCB "block at height %d",0
ALIGN 4
aSlongpollFromP_0 DCB "%sLONGPOLL from pool %d detected n"
DCB "ew block",0
ALIGN 4
aNewBlockDetect DCB "New block detected on network befo"
DCB "re pool notification",0
ALIGN 0x10
aNewBlockDetect_0 DCB "New block detected on network",0
ALIGN 0x10
aStaleDataFromP DCB "Stale data from pool %d at height "
DCB "%d",0
ALIGN 4
aPoolDNowUpToDa DCB "Pool %d now up to date at height %"
DCB "d",0
aStratumFromPoo DCB "Stratum from pool %d requested wor"
DCB "k restart",0
aSlongpollFromP DCB "%sLONGPOLL from pool %d requested "
DCB "work restart",0
ALIGN 4
aBlock DCB " BLOCK!",0
aDRstratum DCB "%d/RStratum",0
aStratumSelectF DCB "Stratum select failed on pool %d w"
DCB "ith value %d",0
ALIGN 4
aStratumConnect_0 DCB "Stratum connection to pool %d inte"
DCB "rrupted",0
ALIGN 4
aJsonRpcNonMeth DCB "JSON-RPC non method decode failed:"
DCB " %s",0
ALIGN 0x10
aMiningConfigur DCB "mining.configure",0
ALIGN 4
aAcceptedUntrac DCB "Accepted untracked stratum share f"
DCB "rom pool %d",0
ALIGN 4
aRejectedUntrac DCB "Rejected untracked stratum share f"
DCB "rom pool %d",0
ALIGN 4
aPoolDStratumSh_1 DCB "Pool %d stratum share result lag t"
DCB "ime %d seconds",0
ALIGN 4
a08lxDiffSLluS DCB "%08lx Diff %s/%llu%s",0
ALIGN 0x10
aProofOfWorkRes_0 DCB "PROOF OF WORK RESULT: true (yay!!!"
DCB ")",0
aAcceptedSSDPoo DCB "Accepted %s %s %d pool %d %s%s",0
ALIGN 4
aAcceptedSSDSS DCB "Accepted %s %s %d %s%s",0
ALIGN 4
aAccept_0 DCB "accept",0
ALIGN 4
aSuccessfullyMi DCB "Successfully mined %d accepted sha"
DCB "res as requested and exiting.",0
aRejectingPoolD DCB "Rejecting pool %d now accepting sh"
DCB "ares, re-enabling!",0
ALIGN 4
aProofOfWorkRes DCB "PROOF OF WORK RESULT: false (boooo"
DCB "o)",0
ALIGN 4
aRejectReason DCB "reject-reason",0
ALIGN 4
aRejectedSSDSSS DCB "Rejected %s %s %d %s%s %s%s versio"
DCB "n 0x%x",0
ALIGN 0x10
aPoolDRejectedD DCB "Pool %d rejected %d sequential sha"
DCB "res, disabling!",0
ALIGN 4
aUnknownStratum DCB "Unknown stratum msg: %s",0
aPushingWorkFro DCB "Pushing work from pool %d to hash "
DCB "queue",0
aAcceptedSDBenc DCB "Accepted %s %d benchmark share non"
DCB "ce %08x",0
ALIGN 0x10
aPoolDStaleShar DCB "Pool %d stale share detected, subm"
DCB "itting as user requested",0
ALIGN 4
aPoolDStaleShar_0 DCB "Pool %d stale share detected, subm"
DCB "itting as pool requested",0
ALIGN 4
aPoolDStaleShar_1 DCB "Pool %d stale share detected, disc"
DCB "arding",0
ALIGN 4
aDiscard DCB "discard",0
aPushingPoolDWo DCB "Pushing pool %d work to stratum qu"
DCB "eue",0
ALIGN 4
aDiscardingWork DCB "Discarding work from removed pool",0
ALIGN 4
aPushingSubmitW DCB "Pushing submit work to work thread"
DCB 0
ALIGN 4
aFailedToCreate_0 DCB "Failed to create submit_work_threa"
DCB "d",0
aSSDShareAboveT DCB "%s %s %d: Share above target",0
ALIGN 0x10
aSDShareAboveTa DCB "%s %d: Share above target",0
ALIGN 4
aSetStartTimePo DCB "set_start_time_point total_tv_star"
DCB "t_sys=%ld total_tv_end_sys=%ld",0xA
DCB 0
ALIGN 0x10
aRb DCB "rb",0
ALIGN 4
aOpenMinerVersi DCB "Open miner version file %s error",0
ALIGN 4
aReadMinerVersi DCB "Read miner version file %s error %"
DCB "d",0
aMinerCompileTi DCB "Miner compile time: %s type: %s",0
aStartS DCB "START %s",0
ALIGN 4
aFailedToCreate_3 DCB "Failed to create pool_change_threa"
DCB "d",0
aConfigTooFastP DCB "config too fast, pool is changing,"
DCB " please wait",0xA,0
aPidofS DCB "pidof %s",0
ALIGN 4
aPidofSCommandR DCB "pidof %s command result is: %s",0xA
DCB 0
aStrlenIsD DCB "strlen is: %d",0xA,0
ALIGN 4
aParsedProcIdIs DCB "Parsed proc id is: %d",0xA,0
ALIGN 0x10
aAppServiceSNot DCB " app-service:%s Not Found!!!",0
ALIGN 0x10
aDInstanceOfSIs DCB " %d instance of %s is  already Run"
DCB "ning on this machine",0
ALIGN 4
aSIsForbiddenTo DCB "%s is forbidden to start twice, wi"
DCB "ll exit immediately!",0
ALIGN 0x10
aBmminerLog DCB "bmminer.log",0
word_5406C DCW 0x2B61
byte_5406E DCB 0
ALIGN 0x10
aFailedToPthrea_0 DCB "Failed to pthread_cond_init lp_con"
DCB "d",0
aFailedToPthrea_1 DCB "Failed to pthread_cond_init restar"
DCB "t_cond",0
ALIGN 0x10
aFailedToPthrea_2 DCB "Failed to pthread_cond_init gws_co"
DCB "nd",0
ALIGN 4
aFailedToCreate_1 DCB "Failed to create getq",0
ALIGN 0x10
aCgminer_0 DCB "cgminer",0
aSS DCB "%s %s",0
ALIGN 0x10
aUsrBin DCB "/usr/bin",0
ALIGN 4
aOptionsForBoth DCB "Options for both config file and c"
DCB "ommand line",0
ALIGN 4
aOptionsForComm DCB "Options for command line only",0
ALIGN 4
aUnexpectedExtr DCB "Unexpected extra commandline argum"
DCB "ents",0
ALIGN 4
aBenchfile DCB "Benchfile",0
ALIGN 0x10
aBenchmark DCB "Benchmark",0
ALIGN 4
asc_541AC DCB "?",0
ALIGN 0x10
aLogFilePathSOp DCB "Log file path: %s Open flag: %s",0
aLogWorkAsicNum_0 DCB "Log work asic num empty",0
aLogWorkAsicNum DCB "Log work asic num must be 1, 32, 6"
DCB "4",0
aLogWorkPathSAs DCB "Log work path: %s Asic num: %s",0
ALIGN 4
aLogWorkPathS DCB "Log work path: %s",0
ALIGN 0x10
aSTxt DCB "%s.txt",0
ALIGN 4
aLogWorkOpenFil DCB "Log work open file %s",0
ALIGN 0x10
aS02dTxt DCB "%s%02d.txt",0
ALIGN 4
aLogWorkOpenAsi DCB "Log work open asic %d file %s",0
ALIGN 4
aS02d02dTxt DCB "%s%02d_%02d.txt",0
aSDiff02dTxt DCB "%s_diff_%02d.txt",0
ALIGN 0x10
aLogWorkOpenDif DCB "Log work open diff file %s",0
ALIGN 4
aStartedS DCB "Started %s",0
ALIGN 4
aLoadedConfigur DCB "Loaded configuration file %s",0
ALIGN 4
aFatalJsonError DCB "Fatal JSON error in configuration "
DCB "file.",0
aConfigurationF DCB "Configuration file could not be us"
DCB "ed.",0
ALIGN 4
aErrorInConfigu DCB "Error in configuration file, parti"
DCB "ally loaded.",0
ALIGN 4
aStartCgminerWi DCB "Start cgminer with -T to see what "
DCB "failed to load.",0
ALIGN 4
aAllDevicesDisa DCB "All devices disabled, cannot mint!"
DCB 0
ALIGN 0x10
aTooManyValuesP DCB "Too many values passed to set temp"
DCB " cutoff",0
ALIGN 4
aNeedToSpecifyA DCB "Need to specify at least one pool "
DCB "server.",0
ALIGN 4
aPoolSetupFaile DCB "Pool setup failed",0
ALIGN 4
aNoLoginCredent DCB "No login credentials supplied for "
DCB "pool %u %s",0
ALIGN 4
aPipeFailedToCr DCB "pipe - failed to create pipe for -"
DCB "-monitor",0
ALIGN 4
aDup2FailedToAl DCB "dup2 - failed to alias stderr to w"
DCB "rite end of pipe for --monitor",0
ALIGN 4
aCloseFailedToC_0 DCB "close - failed to close write end "
DCB "of pipe for --monitor",0
aSignalFailedTo DCB "signal - failed to edit signal mas"
DCB "k for --monitor",0
ALIGN 4
aForkFailedToFo DCB "fork - failed to fork child proces"
DCB "s for --monitor",0
ALIGN 4
aDup2InChildFai DCB "dup2 - in child, failed to alias r"
DCB "ead end of pipe to stdin for --mon"
DCB "itor",0
ALIGN 4
aC DCB "-c",0
ALIGN 4
aBinBash DCB "/bin/bash",0
ALIGN 4
aExeclInChildFa DCB "execl - in child failed to exec us"
DCB "er specified command for --monitor"
DCB 0
ALIGN 0x10
aCloseFailedToC DCB "close - failed to close read end o"
DCB "f pipe for --monitor",0
ALIGN 4
aThreadDCreateF DCB "thread %d create failed",0
aProbingForAnAl DCB "Probing for an alive pool",0
ALIGN 4
aNoServersWereF DCB "No servers were found that could b"
DCB "e used to get work from.",0
ALIGN 4
aPleaseCheckThe DCB "Please check the details from the "
DCB "list below of the servers you have"
DCB " input",0
ALIGN 4
aMostLikelyYouH DCB "Most likely you have input the wro"
DCB "ng URL, forgotten to add a port, o"
DCB "r have not set up workers",0
ALIGN 4
aPoolDUrlSUserS DCB "Pool: %d  URL: %s  User: %s  Passw"
DCB "ord: %s",0
ALIGN 0x10
aNoServersCould DCB "No servers could be used! Exiting."
DCB 0
ALIGN 4
aPressAnyKeyToE DCB "Press any key to exit, or cgminer "
DCB "will wait indefinitely for an aliv"
DCB "e pool.",0
aWatchdogThread DCB "watchdog thread create failed",0
ALIGN 0x10
aApiThreadCreat DCB "API thread create failed",0
ALIGN 4
aIncorrectTotal DCB "incorrect total_control_threads (%"
DCB "d) should be 8",0
ALIGN 0x10
aUnableToSetThr DCB "Unable to set thread to high prior"
DCB "ity",0
ALIGN 4
aWorkUpdateMess DCB "Work update message received",0
ALIGN 4
aSelectingPoolD DCB "Selecting pool %d for work",0
ALIGN 4
aGeneratedStrat DCB "Generated stratum work",0
ALIGN 4
aGeneratedBench_0 DCB "Generated benchfile work",0
ALIGN 4
aGeneratedBench DCB "Generated benchmark work",0
ALIGN 4
a00000080000000 DCB "0000008000000000000000000000000000"
DCB "0000000000000000000000000000000000"
DCB "0000000000000000000080020000",0
ALIGN 4
aConfigC DCB "--config|-c",0
aLoadAJsonForma DCB "Load a JSON-format configuration f"
DCB "ile",0xA
DCB "See example-S7.conf or S9.conf for"
DCB " an example configuration.",0
ALIGN 4
aDefaultConfig DCB "--default-config",0
ALIGN 4
aSpecifyTheFile DCB "Specify the filename of the defaul"
DCB "t config file",0xA
DCB "Loaded at start and used when savi"
DCB "ng without a name.",0
ALIGN 4
aHelpH DCB "--help|-h",0
ALIGN 0x10
aPrintThisMessa DCB "Print this message",0
ALIGN 4
aVersionV DCB "--version|-V",0
ALIGN 4
aDisplayVersion DCB "Display version and exit",0
ALIGN 0x10
aVersionFile DCB "--version-file",0
ALIGN 0x10
aSetMinerVersio DCB "Set miner version file",0
ALIGN 4
aLogfileOpenfla DCB "--logfile-openflag",0
ALIGN 4
aSetLogFileOpen DCB "Set log file open flag, default: a"
DCB "+",0
aLogwork DCB "--logwork",0
ALIGN 4
aSetLogWorkFile DCB "Set log work file path, following:"
DCB " minertext",0
ALIGN 4
aLogworkAsicnum DCB "--logwork-asicnum",0
ALIGN 0x10
aSetLogWorkAsic DCB "Set log work asic num, following: "
DCB "1, 32, 64",0
aLogworkDiff DCB "--logwork-diff",0
ALIGN 4
aAllowLogWorkDi DCB "Allow log work diff",0
aLogfile DCB "--logfile",0
ALIGN 4
aSetLogFileDefa DCB "Set log file, default: bmminer.log"
DCB 0
ALIGN 0x10
aApiAllow DCB "--api-allow",0
aAllowApiAccess DCB "Allow API access only to the given"
DCB " list of [G:]IP[/Prefix] addresses"
DCB "[/subnets]",0
ALIGN 4
aApiDescription DCB "--api-description",0
ALIGN 0x10
aDescriptionPla DCB "Description placed in the API stat"
DCB "us header, default: cgminer versio"
DCB "n",0
ALIGN 4
aApiGroups DCB "--api-groups",0
ALIGN 4
aApiOneLetterGr DCB "API one letter groups G:cmd:cmd[,P"
DCB ":cmd:*...] defining the cmds a gro"
DCB "ups can use",0
aApiListen DCB "--api-listen",0
ALIGN 4
aEnableApiDefau DCB "Enable API, default: disabled",0
ALIGN 4
aApiMcast DCB "--api-mcast",0
aEnableApiMulti DCB "Enable API Multicast listener, def"
DCB "ault: disabled",0
ALIGN 4
aApiMcastAddr DCB "--api-mcast-addr",0
ALIGN 4
aApiMulticastLi_0 DCB "API Multicast listen address",0
ALIGN 4
aApiMcastCode DCB "--api-mcast-code",0
ALIGN 0x10
aCodeExpectedIn DCB "Code expected in the API Multicast"
DCB " message, don't use '-'",0
ALIGN 4
aApiMcastDes DCB "--api-mcast-des",0
aDescriptionApp DCB "Description appended to the API Mu"
DCB "lticast reply, default: ''",0
ALIGN 4
aApiMcastPort DCB "--api-mcast-port",0
ALIGN 0x10
aApiMulticastLi_1 DCB "API Multicast listen port",0
ALIGN 4
aApiNetwork DCB "--api-network",0
ALIGN 4
aAllowApiIfEnab DCB "Allow API (if enabled) to listen o"
DCB "n/for any address, default: only 1"
DCB "27.0.0.1",0
ALIGN 4
aApiPort DCB "--api-port",0
ALIGN 4
aPortNumberOfMi DCB "Port number of miner API",0
ALIGN 4
aApiHost DCB "--api-host",0
ALIGN 0x10
aSpecifyApiList DCB "Specify API listen address, defaul"
DCB "t: 0.0.0.0",0
ALIGN 0x10
aBalance DCB "--balance",0
ALIGN 4
aChangeMultipoo DCB "Change multipool strategy from fai"
DCB "lover to even share balance",0
ALIGN 4
aBenchfile_0 DCB "--benchfile",0
aRunCgminerInBe DCB "Run cgminer in benchmark mode usin"
DCB "g a work file - produces no shares"
DCB 0
ALIGN 0x10
aBenchfileDispl DCB "--benchfile-display",0
aDisplayEachBen DCB "Display each benchfile nonce found"
DCB 0
ALIGN 4
aBenchmark_0 DCB "--benchmark",0
aRunCgminerInBe_0 DCB "Run cgminer in benchmark mode - pr"
DCB "oduces no shares",0
ALIGN 4
aDebugD DCB "--debug|-D",0
ALIGN 4
aEnableDebugOut DCB "Enable debug output",0
aDisableRejecti DCB "--disable-rejecting",0
aAutomaticallyD DCB "Automatically disable pools that c"
DCB "ontinually reject shares",0
ALIGN 4
aExpiryE DCB "--expiry|-E",0
aUpperBoundOnHo DCB "Upper bound on how many seconds af"
DCB "ter getting work we consider a sha"
DCB "re from it stale",0
ALIGN 4
aExtranonceSubs DCB "--extranonce-subscribe",0
ALIGN 4
aEnableExtranon_0 DCB "Enable 'extranonce' stratum subscr"
DCB "ibe for MinToRRo by Zwilla",0
ALIGN 4
aFailoverOnly_1 DCB "--failover-only",0
aDonTLeakWorkTo DCB "Don't leak work to backup pools wh"
DCB "en primary pool is lagging",0
ALIGN 4
aFixProtocol DCB "--fix-protocol",0
ALIGN 4
aDoNotRedirectT DCB "Do not redirect to a different get"
DCB "work protocol (eg. stratum)",0
ALIGN 4
aFallbackTime DCB "--fallback-time",0
aSetTimeInSecon DCB "Set time in seconds to fall back t"
DCB "o a higher priority pool after per"
DCB "iod of instability",0
ALIGN 4
aHotplug_1 DCB "--hotplug",0
ALIGN 4
aLoadBalance DCB "--load-balance",0
ALIGN 4
aChangeMultipoo_0 DCB "Change multipool strategy from fai"
DCB "lover to quota based balance",0
ALIGN 4
aLogL DCB "--log|-l",0
ALIGN 4
aIntervalInSeco DCB "Interval in seconds between log ou"
DCB "tput",0
ALIGN 4
aLowmem DCB "--lowmem",0
ALIGN 4
aMinimiseCachin DCB "Minimise caching of shares for low"
DCB " memory applications",0
ALIGN 0x10
aMonitorM DCB "--monitor|-m",0
ALIGN 0x10
aUseCustomPipeC DCB "Use custom pipe cmd for output mes"
DCB "sages",0
aNetDelay DCB "--net-delay",0
aImposeSmallDel DCB "Impose small delays in networking "
DCB "to not overload slow routers",0
ALIGN 4
aNoPoolDisable DCB "--no-pool-disable",0
ALIGN 4
aNoSubmitStale DCB "--no-submit-stale",0
ALIGN 4
aDonTSubmitShar DCB "Don't submit shares if they are de"
DCB "tected as stale",0
ALIGN 0x10
aPassP DCB "--pass|-p",0
ALIGN 4
aPasswordForBit DCB "Password for bitcoin JSON-RPC serv"
DCB "er",0
ALIGN 4
aPerDeviceStats DCB "--per-device-stats",0
ALIGN 4
aForceVerboseMo DCB "Force verbose mode and output per-"
DCB "device statistics",0
aPools_2 DCB "--pools",0
aProtocolDumpP DCB "--protocol-dump|-P",0
ALIGN 4
aVerboseDumpOfP DCB "Verbose dump of protocol-level act"
DCB "ivities",0
ALIGN 4
aQueueQ DCB "--queue|-Q",0
ALIGN 0x10
aMaximumNumberO DCB "Maximum number of work items to ha"
DCB "ve queued",0
aQuietQ DCB "--quiet|-q",0
ALIGN 4
aDisableLogging DCB "Disable logging output, display st"
DCB "atus and errors",0
ALIGN 4
aQuotaU DCB "--quota|-U",0
ALIGN 4
aQuotaUrlCombin DCB "quota;URL combination for server w"
DCB "ith load-balance strategy quotas",0
ALIGN 4
aRealQuiet DCB "--real-quiet",0
ALIGN 4
aDisableAllOutp DCB "Disable all output",0
ALIGN 0x10
aRetries DCB "--retries",0
ALIGN 4
aRetryPause DCB "--retry-pause",0
ALIGN 4
aRotate DCB "--rotate",0
ALIGN 4
aChangeMultipoo_1 DCB "Change multipool strategy from fai"
DCB "lover to regularly rotate at N min"
DCB "utes",0
ALIGN 4
aRoundRobin DCB "--round-robin",0
ALIGN 4
aChangeMultipoo_2 DCB "Change multipool strategy from fai"
DCB "lover to round robin on failure",0
ALIGN 4
aScanTimeS DCB "--scan-time|-s",0
ALIGN 4
aUpperBoundOnTi DCB "Upper bound on time spent scanning"
DCB " current work, in seconds",0
aSchedStart DCB "--sched-start",0
ALIGN 4
aSetATimeOfDayI DCB "Set a time of day in HH:MM to star"
DCB "t mining (a once off without a sto"
DCB "p time)",0
aSchedStop DCB "--sched-stop",0
ALIGN 0x10
aSetATimeOfDayI_0 DCB "Set a time of day in HH:MM to stop"
DCB " mining (will quit without a start"
DCB " time)",0
ALIGN 4
aSharelog_0 DCB "--sharelog",0
ALIGN 4
aAppendShareLog DCB "Append share log to file",0
ALIGN 4
aShares DCB "--shares",0
ALIGN 0x10
aQuitAfterMinin DCB "Quit after mining N shares (defaul"
DCB "t: unlimited)",0
aSocksProxy DCB "--socks-proxy",0
ALIGN 0x10
aSetSocks4Proxy DCB "Set socks4 proxy (host:port)",0
ALIGN 0x10
aSuggestDiff DCB "--suggest-diff",0
ALIGN 0x10
aSuggestMinerDi DCB "Suggest miner difficulty for pool "
DCB "to user (default: none)",0
ALIGN 4
aMultiVersion DCB "--multi-version",0
aMultiVersionMi DCB "Multi version mining!",0
ALIGN 4
aSyslog_0 DCB "--syslog",0
ALIGN 0x10
aUseSystemLogFo DCB "Use system log for output messages"
DCB " (default: standard error)",0
ALIGN 0x10
aTextOnlyT DCB "--text-only|-T",0
ALIGN 0x10
aUrlO DCB "--url|-o",0
ALIGN 4
aUrlForBitcoinJ DCB "URL for bitcoin JSON-RPC server",0
aUserU DCB "--user|-u",0
ALIGN 4
aUsernameForBit DCB "Username for bitcoin JSON-RPC serv"
DCB "er",0
ALIGN 0x10
aUserpassO DCB "--userpass|-O",0
ALIGN 0x10
aUsernamePasswo DCB "Username:Password pair for bitcoin"
DCB " JSON-RPC server",0
ALIGN 4
aVerbose_0 DCB "--verbose",0
ALIGN 0x10
aLogVerboseOutp DCB "Log verbose output to stderr as we"
DCB "ll as status output",0
ALIGN 4
aWidescreen DCB "--widescreen",0
ALIGN 4
aUseExtraWideDi DCB "Use extra wide display without tog"
DCB "gling",0
aWorktime_0 DCB "--worktime",0
ALIGN 4
aDisplayExtraWo DCB "Display extra work time debug info"
DCB "rmation",0
ALIGN 4
aFtw DCB "FTW",0
a2240075 DCB "224.0.0.75",0
ALIGN 4
a0000 DCB "0.0.0.0",0
unk_55AA0 DCB 0x63 ; c
DCB 0x67 ; g
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x20
; const char a10[]
a10 DCB "1.0."
word_55AAC DCW 0x30
ALIGN 0x10
aVersion_1 DCB "Version",0
aMerkleroot DCB "MerkleRoot",0
ALIGN 4
aPrevhash DCB "PrevHash",0
ALIGN 0x10
aDifficultybits DCB "DifficultyBits",0
ALIGN 0x10
aFailover DCB "Failover",0
ALIGN 4
aRoundRobin_0 DCB "Round Robin",0
aRotate_0 DCB "Rotate",0
ALIGN 0x10
aLoadBalance_0 DCB "Load Balance",0
ALIGN 0x10
aBalance_0 DCB "Balance",0
aD DCB ":D",0
ALIGN 4
aSIsNotANumber DCB "'%s' is not a number",0
ALIGN 4
aSIsOutOfRange DCB "'%s' is out of range",0
ALIGN 4
aSIsNegative DCB "'%s' is negative",0
ALIGN 0x10
aI DCB "%i",0
ALIGN 4
a1f DCB "%.1f",0
ALIGN 4
aLi DCB "%li",0
asc_55B70 DCB "|= ",0
aOptionSUnknown DCB "Option %s: unknown entry type %u",0
ALIGN 4
aOptionSDescrip DCB "Option %s: description cannot be N"
DCB "ULL",0
ALIGN 0x10
aOptionSDoesNot_0 DCB "Option %s: does not begin with '-'"
DCB 0
ALIGN 4
aOptionSInvalid_0 DCB "Option %s: invalid long option '--"
DCB "'",0
aOptionSInvalid DCB "Option %s: invalid short option '%"
DCB ".*s'",0
ALIGN 0x10
aOptionSDoesNot DCB "Option %s: does not take arguments"
DCB " '%s'",0
aInvalidArgumen DCB "Invalid argument '%s'",0
ALIGN 0x10
aParseOne DCB "parse_one",0
ALIGN 4
aPosixlyCorrect DCB "POSIXLY_CORRECT",0
aCcanOptParseC DCB "ccan/opt/parse.c",0
ALIGN 0x10
aOffset0 DCB "*offset == 0",0
ALIGN 0x10
aSSS_0 DCB "%s: %.*s: %s",0
ALIGN 0x10
aDoesnTAllowAnA DCB "doesn't allow an argument",0
ALIGN 4
aRequiresAnArgu DCB "requires an argument",0
ALIGN 4
aUnrecognizedOp DCB "unrecognized option",0
aUsageS DCB "Usage: %s",0
ALIGN 4
asc_55D14 DCB " [-",0
aS_2 DCB "%s:",0xA,0
ALIGN 0x10
aArg DCB " <arg>",0
ALIGN 4
asc_55D28 DCB "                    ",0
ALIGN 0x10
aDefaultS DCB " (default: %s)",0
ALIGN 0x10
aCbBitmainSubmi DCB "cb_bitmain_submit_nonce",0
aCbBitmainApiSt DCB "cb_bitmain_api_stats",0
ALIGN 0x10
aCbBitmainApiSt_0 DCB "cb_bitmain_api_stats",0
ALIGN 4
aCgminerSocketI_2 DCB "cgminer_socket_init",0
off_55DAC DCD sub_41FA8
aBitmainApiStat_1 DCB "bitmain_api_status",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0x1D
DCB    4
DCB    0
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x5F ; _
DCB 0x73 ; s
DCB 0x75 ; u
DCB 0x62 ; b
DCB 0x6D ; m
DCB 0x69 ; i
DCB 0x74 ; t
DCB 0x5F ; _
DCB 0x6E ; n
DCB 0x6F ; o
DCB 0x6E ; n
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
aCgminerSocketI_1 DCB "cgminer_socket_init",0
aGotNonceSzD DCB "got nonce sz %d",0
aSNonceSubmited DCB "%s nonce submited",0
ALIGN 4
aGotApiLenD DCB "got api len %d",0
ALIGN 4
aSInputErrDataP DCB "%s input err: data @ %p; len is %d"
DCB 0
ALIGN 4
aSocketaApiC DCB "socketa_api.c",0
ALIGN 4
aSAllocFailed DCB "%s, alloc failed",0
ALIGN 4
aSHash0xLlx DCB "[%s], hash 0x%llx",0
ALIGN 0x10
aSHwerrD DCB "[%s], hwerr %d",0
ALIGN 0x10
aAboutToSendDet DCB "about to send detect",0
ALIGN 4
aAboutToSendJob DCB "about to send job, size is %d",0
ALIGN 4
aAboutToSendShu DCB "about to send shutdown",0
ALIGN 0x10
aSTransInitFail DCB "%s trans init failed: %d",0
ALIGN 4
aSRegSReturnD DCB "%s reg %s return: %d",0
ALIGN 4
aSRegFailedWait DCB "%s reg failed wait 5s",0
ALIGN 4
aBitmainC5Detec DCB "bitmain_c5_detect",0
ALIGN 0x10
aBitmainC5Shutd DCB "bitmain_c5_shutdown",0
aBitmainC5Prepa DCB "bitmain_c5_prepare",0
ALIGN 4
aBitmainC5Scanh DCB "bitmain_c5_scanhash",0
aBitmainApiStat_0 DCB "bitmain_api_stats",0
ALIGN 0x10
aBitmainApiStat DCB "bitmain_api_stats",0
ALIGN 4
aBitmainC5Updat DCB "bitmain_c5_update",0
ALIGN 4
aBitmainC5Updat_0 DCB "bitmain_c5_update",0
ALIGN 4
aDriverBtmC5Soc DCB "driver-btm-c5_socketa.c",0
aCgpu DCB "cgpu",0
ALIGN 4
aCgminerSocketI DCB "cgminer socket init succeeds.",0
ALIGN 4
aCgminerSocketI_0 DCB "cgminer socket init failes.",0
aAddCgpuCgpu DCB "add_cgpu(cgpu)",0
ALIGN 4
aSBitmainShutdo DCB "%s: bitmain_shutdown failed.",0
ALIGN 4
aSApiDetectFail DCB "%s: api detect failed.",0
ALIGN 0x10
unk_56150 DCB 0x5B ; [
DCB 0x25 ; %
DCB 0x64 ; d
DCB 0x2D ; -
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
DCB 0x2D ; -
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
DCB 0x20
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
DCB 0x3A ; :
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
DCB 0x3A ; :
DCB 0x25 ; %
DCB 0x30 ; 0
DCB 0x32 ; 2
DCB 0x64 ; d
word_5616C DCW 0x5D
ALIGN 0x10
aBitmainOpensou DCB "BITMAIN_OPENSOURCE",0
ALIGN 4
aSUpdateSTypeDV DCB "[%s], update %s type %d value 0x%x"
DCB 0
ALIGN 4
aShouldNotHappy DCB "Should not happy for unknown data "
DCB "type %d",0
ALIGN 4
aLengthMismatch DCB "length mismatch; sckt %d; actual %"
DCB "d",0
aMallocTempJobD DCB "malloc temp job data buf failed: %"
DCB "d",0xA,0
ALIGN 0x10
aJobBufTotalLen DCB "job buf total len:%d, offset:%d",0xA
DCB 0
ALIGN 4
aUpdateJob DCB "update job",0
ALIGN 0x10
aBitmainS9HasTo DCB "Bitmain S9 has to use stratum pool"
DCB "s",0
aSUpdateJobFail DCB "%s: update job failed.",0
ALIGN 4
aBitmainSoc DCB "Bitmain_SOC",0
aBtmSoc DCB "BTM_SOC",0
aFunc1Func2Func DCB "func1 func2 func3 func4",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aCtAMain DCB "ct_a/main",0
ALIGN 4
aXSS DCB "%x%s%s",0
ALIGN 4
aRegist DCB "regist",0
ALIGN 4
aXDSSS DCB "%x %d %s %s %s",0
ALIGN 4
aNoName DCB "no_name",0
aRegResp DCB "reg_resp",0
ALIGN 0x10
aOk DCB "OK",0
ALIGN 4
aCtAFcbD DCB "ct_a/fcb/%d",0
aSocketError DCB "socket error",0
ALIGN 0x10
aSetSockoptErr DCB "set sockopt err",0
aBindError DCB "bind error",0
ALIGN 4
aListenError DCB "listen error",0
ALIGN 4
aAcceptError DCB "accept error",0
ALIGN 4
aXS DCB "%x %s",0xA,0
ALIGN 4
aXDSS DCB "%x %d %s %s",0
aSocketErr DCB "socket err:",0
aConnectErr DCB "connect err:",0
ALIGN 4
a3fHeartBeats22 DCB "3f heart-beats 22027",0
ALIGN 4
aXRegistS DCB "%x regist %s",0
ALIGN 4
aXDSSS_0 DCB "%x%d%s%s%s",0
ALIGN 0x10
aXDSS_0 DCB "%x%d%s%s",0
ALIGN 4
asc_564AC DCB "                                ",0
ALIGN 0x10
; const char aDoDump[]
aDoDump DCB "do_dump",0
asc_564D8 DCB "\\",0
ALIGN 4
asc_564DC DCB "\",0x22,0
ALIGN 0x10
aB DCB "\b",0
ALIGN 4
aF_1 DCB "\f",0
ALIGN 4
aN_0 DCB "\n",0
ALIGN 4
aR DCB "\r",0
ALIGN 0x10
aT DCB "\t",0
ALIGN 4
asc_564F4 DCB "\/",0
ALIGN 4
aU04x DCB "\u%04X",0
ALIGN 0x10
aU04xU04x DCB "\u%04X\u%04X",0
ALIGN 0x10
aP DCB "%p",0
ALIGN 4
asc_56514 DCB ": ",0
ALIGN 4
aNull_0 DCB "null",0
ALIGN 0x10
aDumpC DCB "dump.c",0
ALIGN 4
aISize DCB "i == size",0
ALIGN 4
aDevUrandom DCB "/dev/urandom",0
ALIGN 4
aDecodeUnicodeE DCB "decode_unicode_escape",0
ALIGN 4
; const char aStreamUnget[]
aStreamUnget DCB "stream_unget",0
ALIGN 4
; const char aStreamGet[]
aStreamGet DCB "stream_get",0
ALIGN 4
; const char aLexUngetUnsave[]
aLexUngetUnsave DCB "lex_unget_unsave",0
ALIGN 4
; const char aLexScanString[]
aLexScanString DCB "lex_scan_string",0
; const char aLexScanNumber[]
aLexScanNumber DCB "lex_scan_number",0
aSNearS DCB "%s near '%s'",0
ALIGN 4
aSNearEndOfFile DCB "%s near end of file",0
aLoadC DCB "load.c",0
ALIGN 4
aStr0U DCB "str[0] == 'u'",0
ALIGN 4
aStreamBufferPo DCB "stream->buffer_pos > 0",0
ALIGN 0x10
aStreamBufferSt DCB "stream->buffer[stream->buffer_pos]"
DCB " == c",0
aCount2 DCB "count >= 2",0
ALIGN 4
aUnableToDecode DCB "unable to decode byte 0x%x",0
ALIGN 0x10
aCD DCB "c == d",0
ALIGN 4
aPrematureEndOf DCB "premature end of input",0
ALIGN 0x10
aUnexpectedNewl DCB "unexpected newline",0
ALIGN 4
aControlCharact DCB "control character 0x%x",0
ALIGN 4
aInvalidEscape DCB "invalid escape",0
ALIGN 4
aInvalidUnicode DCB "invalid Unicode escape '%.6s'",0
ALIGN 4
aInvalidUnicode_1 DCB "invalid Unicode '\u%04X\u%04X'",0
ALIGN 4
aInvalidUnicode_0 DCB "invalid Unicode '\u%04X'",0
ALIGN 4
aTooBigNegative DCB "too big negative integer",0
ALIGN 4
aTooBigInteger DCB "too big integer",0
aEndSavedTextLe DCB "end == saved_text + lex->saved_tex"
DCB "t.length",0
ALIGN 0x10
aRealNumberOver DCB "real number overflow",0
ALIGN 4
aMaximumParsing DCB "maximum parsing depth reached",0
ALIGN 4
aU0000IsNotAllo DCB "\u0000 is not allowed without JSON"
DCB "_ALLOW_NUL",0
ALIGN 4
aStringOrExpect DCB "string or '}' expected",0
ALIGN 0x10
aNulByteInObjec DCB "NUL byte in object key not support"
DCB "ed",0
ALIGN 4
aDuplicateObjec DCB "duplicate object key",0
ALIGN 0x10
aExpected_0 DCB "':' expected",0
ALIGN 0x10
aExpected_1 DCB "'}' expected",0
ALIGN 0x10
aInvalidToken DCB "invalid token",0
ALIGN 0x10
aUnexpectedToke DCB "unexpected token",0
ALIGN 4
aExpected DCB "']' expected",0
ALIGN 4
aOrExpected DCB "'[' or '{' expected",0
aEndOfFileExpec DCB "end of file expected",0
ALIGN 0x10
aString DCB "<string>",0
ALIGN 4
aWrongArguments DCB "wrong arguments",0
aBuffer DCB "<buffer>",0
ALIGN 4
aStdin_0 DCB "<stdin>",0
aStream DCB "<stream>",0
ALIGN 4
aUnableToOpenSS DCB "unable to open %s: %s",0
ALIGN 4
aCallback DCB "<callback>",0
ALIGN 0x10
aJsonpStrtod DCB "jsonp_strtod",0
ALIGN 0x10
aStrconvC DCB "strconv.c",0
ALIGN 4
aEndStrbufferVa DCB "end == strbuffer->value + strbuffe"
DCB "r->length",0
aG DCB "%.*g",0
ALIGN 0x10
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x56950
unk_56950 DCB 0xF0
DCB 0xF0
DCB 0xFB
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x56958
DCB    0
DCB    0
DCB    0
DCB    0
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x66F00
off_66F00 DCD j_register_tm_clones+1
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x66F04
off_66F04 DCD sub_15AE4+1
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x66F08
stru_66F08 Elf32_Dyn <1, <1>> ; DT_NEEDED libpthread.so.0
Elf32_Dyn <1, <0x30D>>  ; DT_NEEDED libm.so.6
Elf32_Dyn <1, <0x342>>  ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x11E64>> ; DT_INIT
Elf32_Dyn <0xD, <0x4A370>> ; DT_FINI
Elf32_Dyn <0x19, <0x66F00>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x66F04>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x110C0>> ; DT_STRTAB
Elf32_Dyn <6, <0x10660>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0x6C0>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x67000>> ; DT_PLTGOT
Elf32_Dyn <2, <0x4F8>>  ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x1196C>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x1194C>> ; DT_REL
Elf32_Dyn <0x12, <0x20>> ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x118CC>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <3>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x11780>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x67000
_GLOBAL_OFFSET_TABLE_ DCD stru_66F08
DCD 0
off_67008 DCD 0
pthread_mutex_unlock_ptr DCD __imp_pthread_mutex_unlock
fdopen_ptr DCD __imp_fdopen
calloc_ptr DCD __imp_calloc
strstr_ptr DCD __imp_strstr
raise_ptr DCD __imp_raise
pthread_cond_broadcast_ptr DCD __imp_pthread_cond_broadcast
sem_wait_ptr DCD __imp_sem_wait
__pthread_register_cancel_ptr DCD __imp___pthread_register_cancel
strcmp_ptr DCD __imp_strcmp
strtol_ptr DCD __imp_strtol
sem_post_ptr DCD __imp_sem_post
setsockopt_ptr DCD __imp_setsockopt
strcspn_ptr DCD __imp_strcspn
printf_ptr DCD __imp_printf
read_ptr DCD __imp_read
pthread_mutex_destroy_ptr DCD __imp_pthread_mutex_destroy
fflush_ptr DCD __imp_fflush
memmove_ptr DCD __imp_memmove
pthread_rwlock_init_ptr DCD __imp_pthread_rwlock_init
free_ptr DCD __imp_free
fgets_ptr DCD __imp_fgets
pthread_mutex_lock_ptr DCD __imp_pthread_mutex_lock
pthread_detach_ptr DCD __imp_pthread_detach
nanosleep_ptr DCD __imp_nanosleep
inet_pton_ptr DCD __imp_inet_pton
clock_gettime_ptr DCD __imp_clock_gettime
pthread_self_ptr DCD __imp_pthread_self
memcpy_ptr DCD __imp_memcpy
pthread_mutex_init_ptr DCD __imp_pthread_mutex_init
signal_ptr DCD __imp_signal
time_ptr DCD __imp_time
setlogmask_ptr DCD __imp_setlogmask
pthread_mutex_trylock_ptr DCD __imp_pthread_mutex_trylock
memcmp_ptr DCD __imp_memcmp
select_ptr DCD __imp_select
sleep_ptr DCD __imp_sleep
stpcpy_ptr DCD __imp_stpcpy
pthread_rwlock_wrlock_ptr DCD __imp_pthread_rwlock_wrlock
recvfrom_ptr DCD __imp_recvfrom
pthread_setcancelstate_ptr DCD __imp_pthread_setcancelstate
pthread_rwlock_rdlock_ptr DCD __imp_pthread_rwlock_rdlock
pthread_cond_init_ptr DCD __imp_pthread_cond_init
sysconf_ptr DCD __imp_sysconf
dup2_ptr DCD __imp_dup2
realloc_ptr DCD __imp_realloc
pthread_cond_destroy_ptr DCD __imp_pthread_cond_destroy
strcasecmp_ptr DCD __imp_strcasecmp
perror_ptr DCD __imp_perror
accept_ptr DCD __imp_accept
sigaction_ptr DCD __imp_sigaction
fwrite_ptr DCD __imp_fwrite
strcat_ptr DCD __imp_strcat
getsockopt_ptr DCD __imp_getsockopt
strtoll_ptr DCD __imp_strtoll
usleep_ptr DCD __imp_usleep
strcpy_ptr DCD __imp_strcpy
gettimeofday_ptr DCD __imp_gettimeofday
fread_ptr DCD __imp_fread
sched_yield_ptr DCD __imp_sched_yield
pthread_create_ptr DCD __imp_pthread_create
floor_ptr DCD __imp_floor
strtof_ptr DCD __imp_strtof
open64_ptr DCD __imp_open64
getenv_ptr DCD __imp_getenv
puts_ptr DCD __imp_puts
sysinfo_ptr DCD __imp_sysinfo
malloc_ptr DCD __imp_malloc
log10_ptr DCD __imp_log10
__libc_start_main_ptr DCD __imp___libc_start_main
strerror_ptr DCD __imp_strerror
localtime_ptr DCD __imp_localtime
__ctype_tolower_loc_ptr DCD __imp___ctype_tolower_loc
dirname_ptr DCD __imp_dirname
__ctype_toupper_loc_ptr DCD __imp___ctype_toupper_loc
__gmon_start___ptr DCD __imp___gmon_start__
sem_trywait_ptr DCD __imp_sem_trywait
kill_ptr DCD __imp_kill
__ctype_b_loc_ptr DCD __imp___ctype_b_loc
getpid_ptr DCD __imp_getpid
exit_ptr DCD __imp_exit
sem_timedwait_ptr DCD __imp_sem_timedwait
strlen_ptr DCD __imp_strlen
round_ptr DCD __imp_round
strchr_ptr DCD __imp_strchr
pthread_setcanceltype_ptr DCD __imp_pthread_setcanceltype
nice_ptr DCD __imp_nice
fprintf_ptr DCD __imp_fprintf
fcntl_ptr DCD __imp_fcntl
execv_ptr DCD __imp_execv
__errno_location_ptr DCD __imp___errno_location
strncasecmp_ptr DCD __imp_strncasecmp
snprintf_ptr DCD __imp_snprintf
__isoc99_sscanf_ptr DCD __imp___isoc99_sscanf
__strdup_ptr DCD __imp___strdup
mkdir_ptr DCD __imp_mkdir
bind_ptr DCD __imp_bind
sem_init_ptr DCD __imp_sem_init
memset_ptr DCD __imp_memset
__pthread_unregister_cancel_ptr DCD __imp___pthread_unregister_cancel
pthread_rwlock_unlock_ptr DCD __imp_pthread_rwlock_unlock
strncpy_ptr DCD __imp_strncpy
pthread_cancel_ptr DCD __imp_pthread_cancel
fgetc_ptr DCD __imp_fgetc
prctl_ptr DCD __imp_prctl
strtod_ptr DCD __imp_strtod
write_ptr DCD __imp_write
fileno_ptr DCD __imp_fileno
__pthread_unwind_next_ptr DCD __imp___pthread_unwind_next
memchr_ptr DCD __imp_memchr
access_ptr DCD __imp_access
fclose_ptr DCD __imp_fclose
pipe_ptr DCD __imp_pipe
strtok_ptr DCD __imp_strtok
pthread_cond_timedwait_ptr DCD __imp_pthread_cond_timedwait
sendto_ptr DCD __imp_sendto
shutdown_ptr DCD __imp_shutdown
sigemptyset_ptr DCD __imp_sigemptyset
popen_ptr DCD __imp_popen
pthread_rwlock_destroy_ptr DCD __imp_pthread_rwlock_destroy
fork_ptr DCD __imp_fork
errx_ptr DCD __imp_errx
getnameinfo_ptr DCD __imp_getnameinfo
execl_ptr DCD __imp_execl
listen_ptr DCD __imp_listen
vfprintf_ptr DCD __imp_vfprintf
pthread_join_ptr DCD __imp_pthread_join
__sigsetjmp_ptr DCD __imp___sigsetjmp
lldiv_ptr DCD __imp_lldiv
fputc_ptr DCD __imp_fputc
syslog_ptr DCD __imp_syslog
sscanf_ptr DCD __imp_sscanf
localeconv_ptr DCD __imp_localeconv
sprintf_ptr DCD __imp_sprintf
openlog_ptr DCD __imp_openlog
exp_ptr DCD __imp_exp
vsnprintf_ptr DCD __imp_vsnprintf
fopen64_ptr DCD __imp_fopen64
qsort_ptr DCD __imp_qsort
strpbrk_ptr DCD __imp_strpbrk
pthread_rwlock_trywrlock_ptr DCD __imp_pthread_rwlock_trywrlock
pthread_cond_wait_ptr DCD __imp_pthread_cond_wait
freeaddrinfo_ptr DCD __imp_freeaddrinfo
getaddrinfo_ptr DCD __imp_getaddrinfo
socket_ptr DCD __imp_socket
clock_nanosleep_ptr DCD __imp_clock_nanosleep
inet_addr_ptr DCD __imp_inet_addr
pthread_testcancel_ptr DCD __imp_pthread_testcancel
strncat_ptr DCD __imp_strncat
sem_destroy_ptr DCD __imp_sem_destroy
isatty_ptr DCD __imp_isatty
strncmp_ptr DCD __imp_strncmp
pthread_cond_signal_ptr DCD __imp_pthread_cond_signal
abort_ptr DCD __imp_abort
recv_ptr DCD __imp_recv
close_ptr DCD __imp_close
send_ptr DCD __imp_send
connect_ptr DCD __imp_connect
__assert_fail_ptr DCD __imp___assert_fail
pclose_ptr DCD __imp_pclose
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x6728C
ALIGN 0x10
; LOAD ends


; Segment type: Pure data
AREA .data, DATA, ALIGN=3
; ORG 0x67290
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; int dword_67298[]
dword_67298 DCD 3
dword_6729C DCD 7
DCB    5
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0xBA
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xBA
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB    7
DCB    0
DCB    0
DCB    0
DCB 0xC8
DCB 0xBA
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xD4
DCB 0xBA
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xDC
DCB 0xBA
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0xBA
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xE
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB 0xBA
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBB
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x3B ; ;
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB 0xBB
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x28 ; (
DCB 0xBB
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x16
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x17
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x18
DCB    0
DCB    0
DCB    0
DCB    8
DCB    0
DCB    0
DCB    0
DCB 0x58 ; X
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x19
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x6C ; l
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x1A
DCB    0
DCB    0
DCB    0
DCB    6
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB 0xBB
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x1B
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0xBB
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x21 ; !
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xCC
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x2A ; *
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xDC
DCB 0xBB
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x2B ; +
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0xBB
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x2C ; ,
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB 0xBC
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x2D ; -
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0xBC
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x2E ; .
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0xBC
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x2F ; /
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0x7C ; |
DCB 0xBC
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x49 ; I
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x94
DCB 0xBC
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4A ; J
DCB    0
DCB    0
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0xAC
DCB 0xBC
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0xC8
DCB 0xBC
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x31 ; 1
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0xBC
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x32 ; 2
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBD
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x33 ; 3
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB 0xBD
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB 0xBD
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x35 ; 5
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0xBD
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x36 ; 6
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0xBD
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x37 ; 7
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0xA8
DCB 0xBD
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x42 ; B
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xBD
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x43 ; C
DCB    0
DCB    0
DCB    0
DCB    9
DCB    0
DCB    0
DCB    0
DCB 0xDC
DCB 0xBD
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBE
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x3C ; <
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x18
DCB 0xBE
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x45 ; E
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB 0xBE
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x46 ; F
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x30 ; 0
DCB 0xBE
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x47 ; G
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x40 ; @
DCB 0xBE
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0xBE
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4B ; K
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0xBE
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x84
DCB 0xBE
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x4D ; M
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB    0
DCB    0
DCB    0
DCB 0xB0
DCB 0xBE
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x4E ; N
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xC8
DCB 0xBE
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x4F ; O
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xBE
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x52 ; R
DCB    0
DCB    0
DCB    0
DCB  0xD
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0xBE
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x53 ; S
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBF
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB 0xBF
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x79 ; y
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0xBF
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x7A ; z
DCB    0
DCB    0
DCB    0
DCB  0xD
DCB    0
DCB    0
DCB    0
DCB 0x6C ; l
DCB 0xBF
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x55 ; U
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB 0xBF
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x56 ; V
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0xAC
DCB 0xBF
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x57 ; W
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0xBF
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x58 ; X
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0xBF
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5E ; ^
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xF4
DCB 0xBF
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5F ; _
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB 0xC0
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0x28 ; (
DCB 0xC0
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x61 ; a
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB 0xC0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x63 ; c
DCB    0
DCB    0
DCB    0
DCB  0xA
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB 0xC0
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB  0xE
DCB    0
DCB    0
DCB    0
DCB 0x98
DCB 0xC0
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xB4
DCB 0xC0
DCB    4
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x66 ; f
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xC8
DCB 0xC0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x67 ; g
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0xC0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x69 ; i
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xD4
DCB 0xBA
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x6A ; j
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    8
DCB 0xC1
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x6C ; l
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x2C ; ,
DCB 0xC1
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x6D ; m
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0xC1
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x5C ; \
DCB 0xC1
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x6F ; o
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x78 ; x
DCB 0xC1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x90
DCB 0xC1
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x71 ; q
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xC1
DCB    4
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x72 ; r
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xDC
DCB 0xC1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x74 ; t
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0xC1
DCB    4
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x75 ; u
DCB    0
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB 0xC2
DCB    4
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB 0x76 ; v
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0xC2
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x77 ; w
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0xC2
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x78 ; x
DCB    0
DCB    0
DCB    0
DCB  0xB
DCB    0
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0xC2
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x7D ; }
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0xB1
DCB    4
DCB    0
DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x7B ; {
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x78 ; x
DCB 0xC2
DCB    4
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x7C ; |
DCB    0
DCB    0
DCB    0
DCB  0xF
DCB    0
DCB    0
DCB    0
DCB 0x8C
DCB 0xC2
DCB    4
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_677C8 DCD aMultiVersion+8 ; "version"
DCD sub_1B294
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0xD4
DCB 0xBB
DCB    4
DCB    0
DCB 0xAC
DCB 0xB0
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0xB9
DCB    4
DCB    0
DCB 0x5C ; \
DCB 0xBC
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x78 ; x
DCB 0xB9
DCB    4
DCB    0
DCB 0x94
DCB 0xBB
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x80
DCB 0xB9
DCB    4
DCB    0
DCB 0x24 ; $
DCB 0xBD
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x60 ; `
DCB 0xC0
DCB    4
DCB    0
DCB 0x54 ; T
DCB 0xCB
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x88
DCB 0xB9
DCB    4
DCB    0
DCB 0x64 ; d
DCB 0xAF
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0xBC
DCB 0xB7
DCB    4
DCB    0
DCB 0x14
DCB 0x5F ; _
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x94
DCB 0xB9
DCB    4
DCB    0
DCB 0x90
DCB 0xAE
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0xA0
DCB 0xB9
DCB    4
DCB    0
DCB 0xE4
DCB 0xA3
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xAC
DCB 0xB9
DCB    4
DCB    0
DCB 0xDC
DCB 0xA2
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xB4
DCB 0xB9
DCB    4
DCB    0
DCB 0x7C ; |
DCB 0xA0
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xC4
DCB 0xB9
DCB    4
DCB    0
DCB 0x34 ; 4
DCB 0x9F
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0xB9
DCB    4
DCB    0
DCB 0x14
DCB 0x9E
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xDC
DCB 0xB9
DCB    4
DCB    0
DCB 0xD0
DCB 0x9C
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0xB9
DCB    4
DCB    0
DCB 0x4C ; L
DCB 0x9B
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xF4
DCB 0xB9
DCB    4
DCB    0
DCB    4
DCB 0x8F
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xFC
DCB 0xB9
DCB    4
DCB    0
DCB 0x94
DCB 0x5B ; [
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    4
DCB 0xBA
DCB    4
DCB    0
DCB 0xF0
DCB 0x8E
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0xDB
DCB    4
DCB    0
DCB 0x9C
DCB 0xDB
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x10
DCB 0xBA
DCB    4
DCB    0
DCB 0xB4
DCB 0xAC
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x80
DCB 0x39 ; 9
DCB    5
DCB    0
DCB 0xE0
DCB 0x5B ; [
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x38 ; 8
DCB 0xBE
DCB    4
DCB    0
DCB 0x30 ; 0
DCB 0xC9
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x1C
DCB 0xBA
DCB    4
DCB    0
DCB 0x20
DCB 0xC8
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x24 ; $
DCB 0xBA
DCB    4
DCB    0
DCB 0x3C ; <
DCB 0xAA
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x2C ; ,
DCB 0xBA
DCB    4
DCB    0
DCB 0xA4
DCB 0x9A
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0xBE
DCB    4
DCB    0
DCB 0x4C ; L
DCB 0xB4
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0xBA
DCB    4
DCB    0
DCB 0x78 ; x
DCB 0xA6
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0xBA
DCB    4
DCB    0
DCB 0x54 ; T
DCB 0x99
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0xBA
DCB    4
DCB    0
DCB 0x40 ; @
DCB 0x99
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0x5C ; \
DCB 0xBA
DCB    4
DCB    0
DCB 0xB4
DCB 0x97
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0xBA
DCB    4
DCB    0
DCB 0xA0
DCB 0x97
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x6C ; l
DCB 0xBA
DCB    4
DCB    0
DCB 0x60 ; `
DCB 0xBA
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0xBA
DCB    4
DCB    0
DCB 0xD4
DCB 0x94
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x7C ; |
DCB 0xBA
DCB    4
DCB    0
DCB 0x10
DCB 0x93
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB 0xBA
DCB    4
DCB    0
DCB 0xF0
DCB 0x91
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0xC2
DCB    4
DCB    0
DCB 0xFC
DCB 0x8F
DCB    1
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x94
DCB 0xBA
DCB    4
DCB    0
DCB 0x98
DCB 0xA5
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0xA0
DCB 0xBA
DCB    4
DCB    0
DCB 0x4C ; L
DCB 0xC3
DCB    1
DCB    0
DCB    0
DCB    1
DCB    0
DCB    0
DCB 0xA4
DCB 0xBA
DCB    4
DCB    0
DCB 0xE8
DCB 0x8F
DCB    1
DCB    0
DCB    1
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_679B4 DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x21 ; !
DCB 0x10
DCB    0
DCB    0
DCB 0x42 ; B
DCB 0x20
DCB    0
DCB    0
DCB 0x63 ; c
DCB 0x30 ; 0
DCB    0
DCB    0
DCB 0x84
DCB 0x40 ; @
DCB    0
DCB    0
DCB 0xA5
DCB 0x50 ; P
DCB    0
DCB    0
DCB 0xC6
DCB 0x60 ; `
DCB    0
DCB    0
DCB 0xE7
DCB 0x70 ; p
DCB    0
DCB    0
DCB    8
DCB 0x81
DCB    0
DCB    0
DCB 0x29 ; )
DCB 0x91
DCB    0
DCB    0
DCB 0x4A ; J
DCB 0xA1
DCB    0
DCB    0
DCB 0x6B ; k
DCB 0xB1
DCB    0
DCB    0
DCB 0x8C
DCB 0xC1
DCB    0
DCB    0
DCB 0xAD
DCB 0xD1
DCB    0
DCB    0
DCB 0xCE
DCB 0xE1
DCB    0
DCB    0
DCB 0xEF
DCB 0xF1
DCB    0
DCB    0
DCB 0x31 ; 1
DCB 0x12
DCB    0
DCB    0
DCB 0x10
DCB    2
DCB    0
DCB    0
DCB 0x73 ; s
DCB 0x32 ; 2
DCB    0
DCB    0
DCB 0x52 ; R
DCB 0x22 ; "
DCB    0
DCB    0
DCB 0xB5
DCB 0x52 ; R
DCB    0
DCB    0
DCB 0x94
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0xF7
DCB 0x72 ; r
DCB    0
DCB    0
DCB 0xD6
DCB 0x62 ; b
DCB    0
DCB    0
DCB 0x39 ; 9
DCB 0x93
DCB    0
DCB    0
DCB 0x18
DCB 0x83
DCB    0
DCB    0
DCB 0x7B ; {
DCB 0xB3
DCB    0
DCB    0
DCB 0x5A ; Z
DCB 0xA3
DCB    0
DCB    0
DCB 0xBD
DCB 0xD3
DCB    0
DCB    0
DCB 0x9C
DCB 0xC3
DCB    0
DCB    0
DCB 0xFF
DCB 0xF3
DCB    0
DCB    0
DCB 0xDE
DCB 0xE3
DCB    0
DCB    0
DCB 0x62 ; b
DCB 0x24 ; $
DCB    0
DCB    0
DCB 0x43 ; C
DCB 0x34 ; 4
DCB    0
DCB    0
DCB 0x20
DCB    4
DCB    0
DCB    0
DCB    1
DCB 0x14
DCB    0
DCB    0
DCB 0xE6
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0xC7
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0xA4
DCB 0x44 ; D
DCB    0
DCB    0
DCB 0x85
DCB 0x54 ; T
DCB    0
DCB    0
DCB 0x6A ; j
DCB 0xA5
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0xB5
DCB    0
DCB    0
DCB 0x28 ; (
DCB 0x85
DCB    0
DCB    0
DCB    9
DCB 0x95
DCB    0
DCB    0
DCB 0xEE
DCB 0xE5
DCB    0
DCB    0
DCB 0xCF
DCB 0xF5
DCB    0
DCB    0
DCB 0xAC
DCB 0xC5
DCB    0
DCB    0
DCB 0x8D
DCB 0xD5
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x36 ; 6
DCB    0
DCB    0
DCB 0x72 ; r
DCB 0x26 ; &
DCB    0
DCB    0
DCB 0x11
DCB 0x16
DCB    0
DCB    0
DCB 0x30 ; 0
DCB    6
DCB    0
DCB    0
DCB 0xD7
DCB 0x76 ; v
DCB    0
DCB    0
DCB 0xF6
DCB 0x66 ; f
DCB    0
DCB    0
DCB 0x95
DCB 0x56 ; V
DCB    0
DCB    0
DCB 0xB4
DCB 0x46 ; F
DCB    0
DCB    0
DCB 0x5B ; [
DCB 0xB7
DCB    0
DCB    0
DCB 0x7A ; z
DCB 0xA7
DCB    0
DCB    0
DCB 0x19
DCB 0x97
DCB    0
DCB    0
DCB 0x38 ; 8
DCB 0x87
DCB    0
DCB    0
DCB 0xDF
DCB 0xF7
DCB    0
DCB    0
DCB 0xFE
DCB 0xE7
DCB    0
DCB    0
DCB 0x9D
DCB 0xD7
DCB    0
DCB    0
DCB 0xBC
DCB 0xC7
DCB    0
DCB    0
DCB 0xC4
DCB 0x48 ; H
DCB    0
DCB    0
DCB 0xE5
DCB 0x58 ; X
DCB    0
DCB    0
DCB 0x86
DCB 0x68 ; h
DCB    0
DCB    0
DCB 0xA7
DCB 0x78 ; x
DCB    0
DCB    0
DCB 0x40 ; @
DCB    8
DCB    0
DCB    0
DCB 0x61 ; a
DCB 0x18
DCB    0
DCB    0
DCB    2
DCB 0x28 ; (
DCB    0
DCB    0
DCB 0x23 ; #
DCB 0x38 ; 8
DCB    0
DCB    0
DCB 0xCC
DCB 0xC9
DCB    0
DCB    0
DCB 0xED
DCB 0xD9
DCB    0
DCB    0
DCB 0x8E
DCB 0xE9
DCB    0
DCB    0
DCB 0xAF
DCB 0xF9
DCB    0
DCB    0
DCB 0x48 ; H
DCB 0x89
DCB    0
DCB    0
DCB 0x69 ; i
DCB 0x99
DCB    0
DCB    0
DCB  0xA
DCB 0xA9
DCB    0
DCB    0
DCB 0x2B ; +
DCB 0xB9
DCB    0
DCB    0
DCB 0xF5
DCB 0x5A ; Z
DCB    0
DCB    0
DCB 0xD4
DCB 0x4A ; J
DCB    0
DCB    0
DCB 0xB7
DCB 0x7A ; z
DCB    0
DCB    0
DCB 0x96
DCB 0x6A ; j
DCB    0
DCB    0
DCB 0x71 ; q
DCB 0x1A
DCB    0
DCB    0
DCB 0x50 ; P
DCB  0xA
DCB    0
DCB    0
DCB 0x33 ; 3
DCB 0x3A ; :
DCB    0
DCB    0
DCB 0x12
DCB 0x2A ; *
DCB    0
DCB    0
DCB 0xFD
DCB 0xDB
DCB    0
DCB    0
DCB 0xDC
DCB 0xCB
DCB    0
DCB    0
DCB 0xBF
DCB 0xFB
DCB    0
DCB    0
DCB 0x9E
DCB 0xEB
DCB    0
DCB    0
DCB 0x79 ; y
DCB 0x9B
DCB    0
DCB    0
DCB 0x58 ; X
DCB 0x8B
DCB    0
DCB    0
DCB 0x3B ; ;
DCB 0xBB
DCB    0
DCB    0
DCB 0x1A
DCB 0xAB
DCB    0
DCB    0
DCB 0xA6
DCB 0x6C ; l
DCB    0
DCB    0
DCB 0x87
DCB 0x7C ; |
DCB    0
DCB    0
DCB 0xE4
DCB 0x4C ; L
DCB    0
DCB    0
DCB 0xC5
DCB 0x5C ; \
DCB    0
DCB    0
DCB 0x22 ; "
DCB 0x2C ; ,
DCB    0
DCB    0
DCB    3
DCB 0x3C ; <
DCB    0
DCB    0
DCB 0x60 ; `
DCB  0xC
DCB    0
DCB    0
DCB 0x41 ; A
DCB 0x1C
DCB    0
DCB    0
DCB 0xAE
DCB 0xED
DCB    0
DCB    0
DCB 0x8F
DCB 0xFD
DCB    0
DCB    0
DCB 0xEC
DCB 0xCD
DCB    0
DCB    0
DCB 0xCD
DCB 0xDD
DCB    0
DCB    0
DCB 0x2A ; *
DCB 0xAD
DCB    0
DCB    0
DCB  0xB
DCB 0xBD
DCB    0
DCB    0
DCB 0x68 ; h
DCB 0x8D
DCB    0
DCB    0
DCB 0x49 ; I
DCB 0x9D
DCB    0
DCB    0
DCB 0x97
DCB 0x7E ; ~
DCB    0
DCB    0
DCB 0xB6
DCB 0x6E ; n
DCB    0
DCB    0
DCB 0xD5
DCB 0x5E ; ^
DCB    0
DCB    0
DCB 0xF4
DCB 0x4E ; N
DCB    0
DCB    0
DCB 0x13
DCB 0x3E ; >
DCB    0
DCB    0
DCB 0x32 ; 2
DCB 0x2E ; .
DCB    0
DCB    0
DCB 0x51 ; Q
DCB 0x1E
DCB    0
DCB    0
DCB 0x70 ; p
DCB  0xE
DCB    0
DCB    0
DCB 0x9F
DCB 0xFF
DCB    0
DCB    0
DCB 0xBE
DCB 0xEF
DCB    0
DCB    0
DCB 0xDD
DCB 0xDF
DCB    0
DCB    0
DCB 0xFC
DCB 0xCF
DCB    0
DCB    0
DCB 0x1B
DCB 0xBF
DCB    0
DCB    0
DCB 0x3A ; :
DCB 0xAF
DCB    0
DCB    0
DCB 0x59 ; Y
DCB 0x9F
DCB    0
DCB    0
DCB 0x78 ; x
DCB 0x8F
DCB    0
DCB    0
DCB 0x88
DCB 0x91
DCB    0
DCB    0
DCB 0xA9
DCB 0x81
DCB    0
DCB    0
DCB 0xCA
DCB 0xB1
DCB    0
DCB    0
DCB 0xEB
DCB 0xA1
DCB    0
DCB    0
DCB  0xC
DCB 0xD1
DCB    0
DCB    0
DCB 0x2D ; -
DCB 0xC1
DCB    0
DCB    0
DCB 0x4E ; N
DCB 0xF1
DCB    0
DCB    0
DCB 0x6F ; o
DCB 0xE1
DCB    0
DCB    0
DCB 0x80
DCB 0x10
DCB    0
DCB    0
DCB 0xA1
DCB    0
DCB    0
DCB    0
DCB 0xC2
DCB 0x30 ; 0
DCB    0
DCB    0
DCB 0xE3
DCB 0x20
DCB    0
DCB    0
DCB    4
DCB 0x50 ; P
DCB    0
DCB    0
DCB 0x25 ; %
DCB 0x40 ; @
DCB    0
DCB    0
DCB 0x46 ; F
DCB 0x70 ; p
DCB    0
DCB    0
DCB 0x67 ; g
DCB 0x60 ; `
DCB    0
DCB    0
DCB 0xB9
DCB 0x83
DCB    0
DCB    0
DCB 0x98
DCB 0x93
DCB    0
DCB    0
DCB 0xFB
DCB 0xA3
DCB    0
DCB    0
DCB 0xDA
DCB 0xB3
DCB    0
DCB    0
DCB 0x3D ; =
DCB 0xC3
DCB    0
DCB    0
DCB 0x1C
DCB 0xD3
DCB    0
DCB    0
DCB 0x7F ; 
DCB 0xE3
DCB    0
DCB    0
DCB 0x5E ; ^
DCB 0xF3
DCB    0
DCB    0
DCB 0xB1
DCB    2
DCB    0
DCB    0
DCB 0x90
DCB 0x12
DCB    0
DCB    0
DCB 0xF3
DCB 0x22 ; "
DCB    0
DCB    0
DCB 0xD2
DCB 0x32 ; 2
DCB    0
DCB    0
DCB 0x35 ; 5
DCB 0x42 ; B
DCB    0
DCB    0
DCB 0x14
DCB 0x52 ; R
DCB    0
DCB    0
DCB 0x77 ; w
DCB 0x62 ; b
DCB    0
DCB    0
DCB 0x56 ; V
DCB 0x72 ; r
DCB    0
DCB    0
DCB 0xEA
DCB 0xB5
DCB    0
DCB    0
DCB 0xCB
DCB 0xA5
DCB    0
DCB    0
DCB 0xA8
DCB 0x95
DCB    0
DCB    0
DCB 0x89
DCB 0x85
DCB    0
DCB    0
DCB 0x6E ; n
DCB 0xF5
DCB    0
DCB    0
DCB 0x4F ; O
DCB 0xE5
DCB    0
DCB    0
DCB 0x2C ; ,
DCB 0xD5
DCB    0
DCB    0
DCB  0xD
DCB 0xC5
DCB    0
DCB    0
DCB 0xE2
DCB 0x34 ; 4
DCB    0
DCB    0
DCB 0xC3
DCB 0x24 ; $
DCB    0
DCB    0
DCB 0xA0
DCB 0x14
DCB    0
DCB    0
DCB 0x81
DCB    4
DCB    0
DCB    0
DCB 0x66 ; f
DCB 0x74 ; t
DCB    0
DCB    0
DCB 0x47 ; G
DCB 0x64 ; d
DCB    0
DCB    0
DCB 0x24 ; $
DCB 0x54 ; T
DCB    0
DCB    0
DCB    5
DCB 0x44 ; D
DCB    0
DCB    0
DCB 0xDB
DCB 0xA7
DCB    0
DCB    0
DCB 0xFA
DCB 0xB7
DCB    0
DCB    0
DCB 0x99
DCB 0x87
DCB    0
DCB    0
DCB 0xB8
DCB 0x97
DCB    0
DCB    0
DCB 0x5F ; _
DCB 0xE7
DCB    0
DCB    0
DCB 0x7E ; ~
DCB 0xF7
DCB    0
DCB    0
DCB 0x1D
DCB 0xC7
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0xD7
DCB    0
DCB    0
DCB 0xD3
DCB 0x26 ; &
DCB    0
DCB    0
DCB 0xF2
DCB 0x36 ; 6
DCB    0
DCB    0
DCB 0x91
DCB    6
DCB    0
DCB    0
DCB 0xB0
DCB 0x16
DCB    0
DCB    0
DCB 0x57 ; W
DCB 0x66 ; f
DCB    0
DCB    0
DCB 0x76 ; v
DCB 0x76 ; v
DCB    0
DCB    0
DCB 0x15
DCB 0x46 ; F
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0x56 ; V
DCB    0
DCB    0
DCB 0x4C ; L
DCB 0xD9
DCB    0
DCB    0
DCB 0x6D ; m
DCB 0xC9
DCB    0
DCB    0
DCB  0xE
DCB 0xF9
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0xE9
DCB    0
DCB    0
DCB 0xC8
DCB 0x99
DCB    0
DCB    0
DCB 0xE9
DCB 0x89
DCB    0
DCB    0
DCB 0x8A
DCB 0xB9
DCB    0
DCB    0
DCB 0xAB
DCB 0xA9
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0x58 ; X
DCB    0
DCB    0
DCB 0x65 ; e
DCB 0x48 ; H
DCB    0
DCB    0
DCB    6
DCB 0x78 ; x
DCB    0
DCB    0
DCB 0x27 ; '
DCB 0x68 ; h
DCB    0
DCB    0
DCB 0xC0
DCB 0x18
DCB    0
DCB    0
DCB 0xE1
DCB    8
DCB    0
DCB    0
DCB 0x82
DCB 0x38 ; 8
DCB    0
DCB    0
DCB 0xA3
DCB 0x28 ; (
DCB    0
DCB    0
DCB 0x7D ; }
DCB 0xCB
DCB    0
DCB    0
DCB 0x5C ; \
DCB 0xDB
DCB    0
DCB    0
DCB 0x3F ; ?
DCB 0xEB
DCB    0
DCB    0
DCB 0x1E
DCB 0xFB
DCB    0
DCB    0
DCB 0xF9
DCB 0x8B
DCB    0
DCB    0
DCB 0xD8
DCB 0x9B
DCB    0
DCB    0
DCB 0xBB
DCB 0xAB
DCB    0
DCB    0
DCB 0x9A
DCB 0xBB
DCB    0
DCB    0
DCB 0x75 ; u
DCB 0x4A ; J
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0x5A ; Z
DCB    0
DCB    0
DCB 0x37 ; 7
DCB 0x6A ; j
DCB    0
DCB    0
DCB 0x16
DCB 0x7A ; z
DCB    0
DCB    0
DCB 0xF1
DCB  0xA
DCB    0
DCB    0
DCB 0xD0
DCB 0x1A
DCB    0
DCB    0
DCB 0xB3
DCB 0x2A ; *
DCB    0
DCB    0
DCB 0x92
DCB 0x3A ; :
DCB    0
DCB    0
DCB 0x2E ; .
DCB 0xFD
DCB    0
DCB    0
DCB  0xF
DCB 0xED
DCB    0
DCB    0
DCB 0x6C ; l
DCB 0xDD
DCB    0
DCB    0
DCB 0x4D ; M
DCB 0xCD
DCB    0
DCB    0
DCB 0xAA
DCB 0xBD
DCB    0
DCB    0
DCB 0x8B
DCB 0xAD
DCB    0
DCB    0
DCB 0xE8
DCB 0x9D
DCB    0
DCB    0
DCB 0xC9
DCB 0x8D
DCB    0
DCB    0
DCB 0x26 ; &
DCB 0x7C ; |
DCB    0
DCB    0
DCB    7
DCB 0x6C ; l
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0x5C ; \
DCB    0
DCB    0
DCB 0x45 ; E
DCB 0x4C ; L
DCB    0
DCB    0
DCB 0xA2
DCB 0x3C ; <
DCB    0
DCB    0
DCB 0x83
DCB 0x2C ; ,
DCB    0
DCB    0
DCB 0xE0
DCB 0x1C
DCB    0
DCB    0
DCB 0xC1
DCB  0xC
DCB    0
DCB    0
DCB 0x1F
DCB 0xEF
DCB    0
DCB    0
DCB 0x3E ; >
DCB 0xFF
DCB    0
DCB    0
DCB 0x5D ; ]
DCB 0xCF
DCB    0
DCB    0
DCB 0x7C ; |
DCB 0xDF
DCB    0
DCB    0
DCB 0x9B
DCB 0xAF
DCB    0
DCB    0
DCB 0xBA
DCB 0xBF
DCB    0
DCB    0
DCB 0xD9
DCB 0x8F
DCB    0
DCB    0
DCB 0xF8
DCB 0x9F
DCB    0
DCB    0
DCB 0x17
DCB 0x6E ; n
DCB    0
DCB    0
DCB 0x36 ; 6
DCB 0x7E ; ~
DCB    0
DCB    0
DCB 0x55 ; U
DCB 0x4E ; N
DCB    0
DCB    0
DCB 0x74 ; t
DCB 0x5E ; ^
DCB    0
DCB    0
DCB 0x93
DCB 0x2E ; .
DCB    0
DCB    0
DCB 0xB2
DCB 0x3E ; >
DCB    0
DCB    0
DCB 0xD1
DCB  0xE
DCB    0
DCB    0
DCB 0xF0
DCB 0x1E
DCB    0
DCB    0
dword_67DB4 DCD 5
; _DWORD dword_67DB8[63]
dword_67DB8 DCD 0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5
DCD 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5
DCD 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3
DCD 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174
DCD 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC
DCD 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA
DCD 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7
DCD 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967
DCD 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13
DCD 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85
DCD 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3
DCD 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070
DCD 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5
DCD 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3
DCD 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208
DCD 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7
unk_67EB4 DCB 0xF2
DCB 0x78 ; x
DCB 0x71 ; q
DCB 0xC6
DCB 0x67 ; g
DCB 0xE6
DCB    9
DCB 0x6A ; j
DCB 0x85
DCB 0xAE
DCB 0x67 ; g
DCB 0xBB
DCB 0x72 ; r
DCB 0xF3
DCB 0x6E ; n
DCB 0x3C ; <
DCB 0x3A ; :
DCB 0xF5
DCB 0x4F ; O
DCB 0xA5
DCB 0x7F ; 
DCB 0x52 ; R
DCB  0xE
DCB 0x51 ; Q
DCB 0x8C
DCB 0x68 ; h
DCB    5
DCB 0x9B
DCB 0xAB
DCB 0xD9
DCB 0x83
DCB 0x1F
unk_67ED4 DCB 0x19
DCB 0xCD
DCB 0xE0
DCB 0x5B ; [
; int (*off_67ED8)()
off_67ED8 DCD sub_21C98
DCB    0
DCB 0x80
DCB 0x40 ; @
DCB 0xC0
DCB 0x20
DCB 0xA0
DCB 0x60 ; `
DCB 0xE0
DCB 0x10
DCB 0x90
DCB 0x50 ; P
DCB 0xD0
DCB 0x30 ; 0
DCB 0xB0
DCB 0x70 ; p
DCB 0xF0
DCB    8
DCB 0x88
DCB 0x48 ; H
DCB 0xC8
DCB 0x28 ; (
DCB 0xA8
DCB 0x68 ; h
DCB 0xE8
DCB 0x18
DCB 0x98
DCB 0x58 ; X
DCB 0xD8
DCB 0x38 ; 8
DCB 0xB8
DCB 0x78 ; x
DCB 0xF8
DCB    4
DCB 0x84
DCB 0x44 ; D
DCB 0xC4
DCB 0x24 ; $
DCB 0xA4
DCB 0x64 ; d
DCB 0xE4
DCB 0x14
DCB 0x94
DCB 0x54 ; T
DCB 0xD4
DCB 0x34 ; 4
DCB 0xB4
DCB 0x74 ; t
DCB 0xF4
DCB  0xC
DCB 0x8C
DCB 0x4C ; L
DCB 0xCC
DCB 0x2C ; ,
DCB 0xAC
DCB 0x6C ; l
DCB 0xEC
DCB 0x1C
DCB 0x9C
DCB 0x5C ; \
DCB 0xDC
DCB 0x3C ; <
DCB 0xBC
DCB 0x7C ; |
DCB 0xFC
DCB    2
DCB 0x82
DCB 0x42 ; B
DCB 0xC2
DCB 0x22 ; "
DCB 0xA2
DCB 0x62 ; b
DCB 0xE2
DCB 0x12
DCB 0x92
DCB 0x52 ; R
DCB 0xD2
DCB 0x32 ; 2
DCB 0xB2
DCB 0x72 ; r
DCB 0xF2
DCB  0xA
DCB 0x8A
DCB 0x4A ; J
DCB 0xCA
DCB 0x2A ; *
DCB 0xAA
DCB 0x6A ; j
DCB 0xEA
DCB 0x1A
DCB 0x9A
DCB 0x5A ; Z
DCB 0xDA
DCB 0x3A ; :
DCB 0xBA
DCB 0x7A ; z
DCB 0xFA
DCB    6
DCB 0x86
DCB 0x46 ; F
DCB 0xC6
DCB 0x26 ; &
DCB 0xA6
DCB 0x66 ; f
DCB 0xE6
DCB 0x16
DCB 0x96
DCB 0x56 ; V
DCB 0xD6
DCB 0x36 ; 6
DCB 0xB6
DCB 0x76 ; v
DCB 0xF6
DCB  0xE
DCB 0x8E
DCB 0x4E ; N
DCB 0xCE
DCB 0x2E ; .
DCB 0xAE
DCB 0x6E ; n
DCB 0xEE
DCB 0x1E
DCB 0x9E
DCB 0x5E ; ^
DCB 0xDE
DCB 0x3E ; >
DCB 0xBE
DCB 0x7E ; ~
DCB 0xFE
DCB    1
DCB 0x81
DCB 0x41 ; A
DCB 0xC1
DCB 0x21 ; !
DCB 0xA1
DCB 0x61 ; a
DCB 0xE1
DCB 0x11
DCB 0x91
DCB 0x51 ; Q
DCB 0xD1
DCB 0x31 ; 1
DCB 0xB1
DCB 0x71 ; q
DCB 0xF1
DCB    9
DCB 0x89
DCB 0x49 ; I
DCB 0xC9
DCB 0x29 ; )
DCB 0xA9
DCB 0x69 ; i
DCB 0xE9
DCB 0x19
DCB 0x99
DCB 0x59 ; Y
DCB 0xD9
DCB 0x39 ; 9
DCB 0xB9
DCB 0x79 ; y
DCB 0xF9
DCB    5
DCB 0x85
DCB 0x45 ; E
DCB 0xC5
DCB 0x25 ; %
DCB 0xA5
DCB 0x65 ; e
DCB 0xE5
DCB 0x15
DCB 0x95
DCB 0x55 ; U
DCB 0xD5
DCB 0x35 ; 5
DCB 0xB5
DCB 0x75 ; u
DCB 0xF5
DCB  0xD
DCB 0x8D
DCB 0x4D ; M
DCB 0xCD
DCB 0x2D ; -
DCB 0xAD
DCB 0x6D ; m
DCB 0xED
DCB 0x1D
DCB 0x9D
DCB 0x5D ; ]
DCB 0xDD
DCB 0x3D ; =
DCB 0xBD
DCB 0x7D ; }
DCB 0xFD
DCB    3
DCB 0x83
DCB 0x43 ; C
DCB 0xC3
DCB 0x23 ; #
DCB 0xA3
DCB 0x63 ; c
DCB 0xE3
DCB 0x13
DCB 0x93
DCB 0x53 ; S
DCB 0xD3
DCB 0x33 ; 3
DCB 0xB3
DCB 0x73 ; s
DCB 0xF3
DCB  0xB
DCB 0x8B
DCB 0x4B ; K
DCB 0xCB
DCB 0x2B ; +
DCB 0xAB
DCB 0x6B ; k
DCB 0xEB
DCB 0x1B
DCB 0x9B
DCB 0x5B ; [
DCB 0xDB
DCB 0x3B ; ;
DCB 0xBB
DCB 0x7B ; {
DCB 0xFB
DCB    7
DCB 0x87
DCB 0x47 ; G
DCB 0xC7
DCB 0x27 ; '
DCB 0xA7
DCB 0x67 ; g
DCB 0xE7
DCB 0x17
DCB 0x97
DCB 0x57 ; W
DCB 0xD7
DCB 0x37 ; 7
DCB 0xB7
DCB 0x77 ; w
DCB 0xF7
DCB  0xF
DCB 0x8F
DCB 0x4F ; O
DCB 0xCF
DCB 0x2F ; /
DCB 0xAF
DCB 0x6F ; o
DCB 0xEF
DCB 0x1F
DCB 0x9F
DCB 0x5F ; _
DCB 0xDF
DCB 0x3F ; ?
DCB 0xBF
DCB 0x7F ; 
DCB 0xFF
DCB    0
DCB    0
DCB    0
DCB    0
off_67FE0 DCD aVersionFile ; "--version-file"
dword_67FE4 DCD 2
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x38 ; 8
DCB 0xAB
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB 0xE0
DCB 0x4A ; J
DCB    5
DCB    0
unk_67FFC DCB 0xF8
DCB 0x4A ; J
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB 0xAB
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB  0xC
DCB 0x4B ; K
DCB    5
DCB    0
DCB 0x30 ; 0
DCB 0x4B ; K
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    8
DCB 0xAB
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB 0x3C ; <
DCB 0x4B ; K
DCB    5
DCB    0
DCB 0x6C ; l
DCB 0x4B ; K
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB 0xAA
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB 0x80
DCB 0x4B ; K
DCB    5
DCB    0
DCB 0xAC
DCB 0x4B ; K
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x7C ; |
DCB 0xAA
DCB    6
DCB    0
DCB 0xBC
DCB 0x4B ; K
DCB    5
DCB    0
DCB 0xD0
DCB 0x4B ; K
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xAA
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB 0xDC
DCB 0x4B ; K
DCB    5
DCB    0
DCB    0
DCB 0x4C ; L
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC8
DCB 0xAC
DCB    6
DCB    0
DCB  0xC
DCB 0x4C ; L
DCB    5
DCB    0
DCB 0x5C ; \
DCB 0x4C ; L
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x1C
DCB 0x88
DCB    6
DCB    0
DCB 0x70 ; p
DCB 0x4C ; L
DCB    5
DCB    0
DCB 0xB8
DCB 0x4C ; L
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0x32 ; 2
DCB    7
DCB    0
DCB 0xC8
DCB 0x4C ; L
DCB    5
DCB    0
DCB 0x18
DCB 0x4D ; M
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x85
DCB 0x56 ; V
DCB    7
DCB    0
DCB 0x28 ; (
DCB 0x4D ; M
DCB    5
DCB    0
DCB 0x48 ; H
DCB 0x4D ; M
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x7D ; }
DCB 0x34 ; 4
DCB    7
DCB    0
DCB 0x54 ; T
DCB 0x4D ; M
DCB    5
DCB    0
DCB 0x88
DCB 0x4D ; M
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB 0x88
DCB    6
DCB    0
DCB 0x9C
DCB 0x4D ; M
DCB    5
DCB    0
DCB 0xBC
DCB 0x4D ; M
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB 0x88
DCB    6
DCB    0
DCB 0xD0
DCB 0x4D ; M
DCB    5
DCB    0
DCB  0xC
DCB 0x4E ; N
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    8
DCB 0x88
DCB    6
DCB    0
DCB 0x1C
DCB 0x4E ; N
DCB    5
DCB    0
DCB 0x5C ; \
DCB 0x4E ; N
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0xC2
DCB    2
DCB    0
DCB 0x50 ; P
DCB    4
DCB    4
DCB    0
DCB    4
DCB 0x88
DCB    6
DCB    0
DCB 0x70 ; p
DCB 0x4E ; N
DCB    5
DCB    0
DCB 0x8C
DCB 0x4E ; N
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBC
DCB 0x67 ; g
DCB    7
DCB    0
DCB 0x9C
DCB 0x4E ; N
DCB    5
DCB    0
DCB 0xEC
DCB 0x4E ; N
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x64 ; d
DCB 0xC2
DCB    2
DCB    0
DCB 0x50 ; P
DCB    4
DCB    4
DCB    0
DCB 0x18
DCB 0x88
DCB    6
DCB    0
DCB 0xF8
DCB 0x4E ; N
DCB    5
DCB    0
DCB 0x14
DCB 0x4F ; O
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x14
DCB 0x88
DCB    6
DCB    0
DCB 0x20
DCB 0x4F ; O
DCB    5
DCB    0
DCB 0x50 ; P
DCB 0x4F ; O
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB 0xA9
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0x8F
DCB    6
DCB    0
DCB 0x5C ; \
DCB 0x4F ; O
DCB    5
DCB    0
DCB 0x9C
DCB 0x4F ; O
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC0
DCB 0x66 ; f
DCB    7
DCB    0
DCB 0xA8
DCB 0x4F ; O
DCB    5
DCB    0
DCB 0xF0
DCB 0x4F ; O
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9D
DCB 0x44 ; D
DCB    7
DCB    0
DCB    4
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0x28 ; (
DCB 0x50 ; P
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x7C ; |
DCB 0x91
DCB    6
DCB    0
DCB 0x34 ; 4
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0x68 ; h
DCB 0x50 ; P
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x20
DCB 0xAA
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD5
DCB 0x8B
DCB    6
DCB    0
DCB 0x74 ; t
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0x88
DCB 0x50 ; P
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0x66 ; f
DCB    7
DCB    0
DCB 0x9C
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0xD8
DCB 0x50 ; P
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0xC2
DCB    2
DCB    0
DCB 0x50 ; P
DCB    4
DCB    4
DCB    0
DCB 0x58 ; X
DCB 0x87
DCB    6
DCB    0
DCB 0xE4
DCB 0x50 ; P
DCB    5
DCB    0
DCB 0x3C ; <
DCB 0x51 ; Q
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x2B ; +
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x54 ; T
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0x94
DCB 0x51 ; Q
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD4
DCB 0x55 ; U
DCB    7
DCB    0
DCB 0xA4
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0xE4
DCB 0x51 ; Q
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB  0xC
DCB 0x90
DCB    6
DCB    0
DCB 0xF4
DCB 0x51 ; Q
DCB    5
DCB    0
DCB 0x34 ; 4
DCB 0x52 ; R
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    2
DCB    4
DCB    0
DCB 0x50 ; P
DCB    4
DCB    4
DCB    0
DCB 0x50 ; P
DCB 0x87
DCB    6
DCB    0
DCB 0x44 ; D
DCB 0x52 ; R
DCB    5
DCB    0
DCB 0x9C
DCB 0x52 ; R
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0xC2
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF8
DCB 0x87
DCB    6
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB 0xA8
DCB 0x52 ; R
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xAA
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0x8F
DCB    6
DCB    0
DCB 0xB8
DCB 0x52 ; R
DCB    5
DCB    0
DCB 0xF8
DCB 0x52 ; R
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0xC2
DCB    2
DCB    0
DCB 0x50 ; P
DCB    4
DCB    4
DCB    0
DCB 0x30 ; 0
DCB 0x87
DCB    6
DCB    0
DCB    4
DCB 0x53 ; S
DCB    5
DCB    0
DCB 0x2C ; ,
DCB 0x53 ; S
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x84
DCB 0x56 ; V
DCB    7
DCB    0
DCB 0x38 ; 8
DCB 0x53 ; S
DCB    5
DCB    0
DCB 0x70 ; p
DCB 0x53 ; S
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB 0xAB
DCB    6
DCB    0
DCB 0x80
DCB 0x53 ; S
DCB    5
DCB    0
DCB 0xA8
DCB 0x53 ; S
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    1
DCB 0x45 ; E
DCB    7
DCB    0
DCB 0xB4
DCB 0x53 ; S
DCB    5
DCB    0
DCB 0xF4
DCB 0x53 ; S
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE0
DCB 0x66 ; f
DCB    7
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB    8
DCB 0x54 ; T
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5D ; ]
DCB 0x87
DCB    6
DCB    0
DCB 0x1C
DCB 0x54 ; T
DCB    5
DCB    0
DCB 0x50 ; P
DCB 0x54 ; T
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD4
DCB 0x2A ; *
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x5C ; \
DCB 0x54 ; T
DCB    5
DCB    0
DCB 0x84
DCB 0x54 ; T
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB 0x33 ; 3
DCB    7
DCB    0
DCB 0x98
DCB 0x54 ; T
DCB    5
DCB    0
DCB 0xCC
DCB 0x54 ; T
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB 0xD4
DCB 0x54 ; T
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x98
DCB 0x33 ; 3
DCB    7
DCB    0
DCB 0xE8
DCB 0x54 ; T
DCB    5
DCB    0
DCB 0x14
DCB 0x55 ; U
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0xC2
DCB    2
DCB    0
DCB 0x50 ; P
DCB    4
DCB    4
DCB    0
DCB 0x24 ; $
DCB 0x88
DCB    6
DCB    0
DCB 0x20
DCB 0x55 ; U
DCB    5
DCB    0
DCB 0x4C ; L
DCB 0x55 ; U
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x78 ; x
DCB 0x33 ; 3
DCB    7
DCB    0
DCB 0x58 ; X
DCB 0x55 ; U
DCB    5
DCB    0
DCB 0x8C
DCB 0x55 ; U
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xA4
DCB 0x29 ; )
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x98
DCB 0x55 ; U
DCB    5
DCB    0
DCB 0xDC
DCB 0x55 ; U
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9C
DCB 0x55 ; U
DCB    7
DCB    0
DCB 0xEC
DCB 0x55 ; U
DCB    5
DCB    0
DCB    0
DCB 0x56 ; V
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0xAA
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB  0xC
DCB 0x56 ; V
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0xAA
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB 0x1C
DCB 0x56 ; V
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xEC
DCB 0xC1
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x28 ; (
DCB 0x56 ; V
DCB    5
DCB    0
DCB 0x74 ; t
DCB 0x56 ; V
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB 0xAA
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD0
DCB 0x8F
DCB    6
DCB    0
DCB 0x84
DCB 0x56 ; V
DCB    5
DCB    0
DCB 0xC8
DCB 0x56 ; V
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0xC2
DCB    2
DCB    0
DCB 0x50 ; P
DCB    4
DCB    4
DCB    0
DCB 0x54 ; T
DCB 0x87
DCB    6
DCB    0
DCB 0xD8
DCB 0x56 ; V
DCB    5
DCB    0
DCB 0x14
DCB 0x57 ; W
DCB    5
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xA4
DCB 0xC5
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x98
DCB 0xAB
DCB    6
DCB    0
DCB 0x24 ; $
DCB 0x57 ; W
DCB    5
DCB    0
DCB 0x70 ; p
DCB 0x57 ; W
DCB    5
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x24 ; $
DCB 0xB8
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x94
DCB 0xAB
DCB    6
DCB    0
DCB 0x80
DCB 0x57 ; W
DCB    5
DCB    0
DCB 0xCC
DCB 0x57 ; W
DCB    5
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB 0xAB
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x90
DCB 0xAB
DCB    6
DCB    0
DCB 0xD8
DCB 0x57 ; W
DCB    5
DCB    0
DCB 0xF4
DCB 0x57 ; W
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    2
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0x90
DCB    6
DCB    0
DCB    0
DCB 0x58 ; X
DCB    5
DCB    0
DCB 0x30 ; 0
DCB 0x58 ; X
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4C ; L
DCB    1
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9C
DCB 0xAB
DCB    6
DCB    0
DCB 0x40 ; @
DCB 0x58 ; X
DCB    5
DCB    0
DCB 0x60 ; `
DCB 0x58 ; X
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    2
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x80
DCB 0x34 ; 4
DCB    7
DCB    0
DCB 0x70 ; p
DCB 0x58 ; X
DCB    5
DCB    0
DCB 0xAC
DCB 0x58 ; X
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    2
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB 0x87
DCB    6
DCB    0
DCB 0xBC
DCB 0x58 ; X
DCB    5
DCB    0
DCB 0xD4
DCB 0x58 ; X
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x45 ; E
DCB    7
DCB    0
DCB 0xE0
DCB 0x58 ; X
DCB    5
DCB    0
DCB 0x20
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x88
DCB 0x44 ; D
DCB    7
DCB    0
DCB 0x70 ; p
DCB 0x68 ; h
DCB    7
DCB    0
DCB 0x30 ; 0
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB8
DCB 0x28 ; (
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x3C ; <
DCB 0x59 ; Y
DCB    5
DCB    0
DCB 0x5C ; \
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB 0x27 ; '
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x68 ; h
DCB 0x59 ; Y
DCB    5
DCB    0
DCB 0x90
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    4
DCB 0x27 ; '
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0xA0
DCB 0x59 ; Y
DCB    5
DCB    0
DCB 0xD4
DCB 0x59 ; Y
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD4
DCB 0x8B
DCB    6
DCB    0
DCB 0xE0
DCB 0x59 ; Y
DCB    5
DCB    0
DCB 0x18
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xCC
DCB 0xAC
DCB    6
DCB    0
DCB 0x28 ; (
DCB 0x5A ; Z
DCB    5
DCB    0
DCB 0x50 ; P
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x68 ; h
DCB    0
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9C
DCB 0x44 ; D
DCB    7
DCB    0
DCB 0x5C ; \
DCB 0x5A ; Z
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
dword_68718 DCD 1
ALIGN 0x10
dbl_68720 DCFD 1.0
; char dword_68728[]
dword_68728 DCD 0x30
dword_6872C DCD 0
dword_68730 DCD 5
off_68734 DCD aD        ; ":D"
dbl_68738 DCFD 1.0
dbl_68740 DCFD 1.0
dbl_68748 DCFD 1.84467441e19
dword_68750 DCD 0x78
dword_68754 DCD 0xFFFFFFFF
dword_68758 DCD 0x78
byte_6875C DCB 1
byte_6875D DCB 1
ALIGN 0x10
off_68760 DCD aConfigC  ; "--config|-c"
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x90
DCB 0xB8
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0xA4
DCB 0x49 ; I
DCB    5
DCB    0
DCB    8
DCB 0x4A ; J
DCB    5
DCB    0
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x50 ; P
DCB 0xAB
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE8
DCB 0x8F
DCB    6
DCB    0
DCB 0x1C
DCB 0x4A ; J
DCB    5
DCB    0
DCB 0x84
DCB 0x4A ; J
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x34 ; 4
DCB 0xAE
DCB    2
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x90
DCB 0x4A ; J
DCB    5
DCB    0
DCB 0xA4
DCB 0x4A ; J
DCB    5
DCB    0
DCB    1
DCB    0
DCB    0
DCB    0
DCB 0x48 ; H
DCB    3
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF4
DCB 0x8D
DCB    6
DCB    0
DCB 0xB4
DCB 0x4A ; J
DCB    5
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
off_687EC DCD a00000080000000 ; "000000800000000000000000000000000000000"...
DCB    1
DCB    0
DCB    0
DCB    0
; int dword_687F4[4]
dword_687F4 DCD 2
DCB    5
DCB    0
DCB    0
DCB    0
DCB    8
DCB    7
DCB    0
DCB    0
DCB 0x26 ; &
DCB    2
DCB    0
DCB    0
dword_68804 DCD 0xFBC
off_68808 DCD asc_4D5C4+4 ; ""
off_6880C DCD aFtw      ; "FTW"
off_68810 DCD a2240075  ; "224.0.0.75"
off_68814 DCD a0000     ; "0.0.0.0"
dword_68818 DCD 0xFBC
off_6881C DCD unk_55AA0
byte_68820 DCB 1
ALIGN 4
dword_68824 DCD 1
off_68828 DCD aFailover ; "Failover"
DCD aRoundRobin_0       ; "Round Robin"
DCD aRotate_0           ; "Rotate"
DCD aLoadBalance_0      ; "Load Balance"
DCD aBalance_0          ; "Balance"
aBitmainApiDete DCB "bitmain_api_detect",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aBitmainUpdateJ DCB "bitmain_update_job",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
aBitmainShutdow DCB "bitmain_shutdown",0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
unk_689C8 DCB    3
DCB    0
DCB    0
DCB    0
DCB 0x8C
DCB 0x62 ; b
DCB    5
DCB    0
DCB 0x98
DCB 0x62 ; b
DCB    5
DCB    0
off_689D4 DCD sub_42A18
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x3C ; <
DCB 0x2F ; /
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x8C
DCB 0x2C ; ,
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x44 ; D
DCB 0x84
DCB    3
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xB4
DCB 0x2E ; .
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0x35 ; 5
DCB    4
DCB    0
DCB 0xE4
DCB 0x35 ; 5
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE4
DCB 0x2B ; +
DCB    4
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
dword_68A40 DCD 0x61A8
; void *(*off_68A44)(size_t size)
off_68A44 DCD malloc
; void (*off_68A48)(void *ptr)
off_68A48 DCD free
unk_68A4C DCB    5
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
unk_68A54 DCB    6
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
unk_68A5C DCB    7
DCB    0
DCB    0
DCB    0
DCB 0xFF
DCB 0xFF
DCB 0xFF
DCB 0xFF
; .data ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x68A64
% 1
% 1
% 1
% 1
; LOAD ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=3
; ORG 0x68A68
EXPORT stderr
stderr % 4              ; Copy of shared data
ALIGN 0x10
EXPORT stdin
stdin % 4               ; Copy of shared data
EXPORT stdout
stdout % 4              ; Copy of shared data
byte_68A78 % 1
ALIGN 4
byte_68A7C % 1
byte_68A7D % 1
byte_68A7E % 1
ALIGN 0x10
dword_68A80 % 4
dword_68A84 % 4
; pthread_mutex_t stru_68A88
stru_68A88 pthread_mutex_t <?>
dword_68AA0 % 4
dword_68AA4 % 4
dword_68AA8 % 4
byte_68AAC % 1
ALIGN 0x10
dword_68AB0 % 4
word_68AB4 % 2
byte_68AB6 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_68AD4 % 4
dword_68AD8 % 4
dword_68ADC % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
byte_68BD4 % 1
byte_68BD5 % 1
byte_68BD6 % 1
ALIGN 4
; char byte_68BD8[512]
byte_68BD8 % 0x200
dword_68DD8 % 4
dword_68DDC % 4
dword_68DE0 % 4
dword_68DE4 % 4
dword_68DE8 % 4
dword_68DEC % 4
dword_68DF0 % 4
; char s[256]
s % 0x100
dword_68EF4 % 4
dword_68EF8 % 4
byte_68EFC % 1
ALIGN 0x10
; char byte_68F00[200]
byte_68F00 % 0xC8
dword_68FC8 % 4
dword_68FCC % 4
dword_68FD0 % 4
dword_68FD4 % 4
; struct timeval stru_68FD8
stru_68FD8 timeval <?>
; struct timeval stru_68FE0
stru_68FE0 timeval <?>
unk_68FE8 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
qword_68FF0 % 8
dword_68FF8 % 4
dword_68FFC % 4
dword_69000 % 4
dword_69004 % 4
dword_69008 % 4
byte_6900C % 1
ALIGN 0x10
dword_69010 % 4
dword_69014 % 4
dword_69018 % 4
dword_6901C % 4
dword_69020 % 4
dword_69024 % 4
; char byte_69028[40]
byte_69028 % 0x28
dword_69050 % 4
dword_69054 % 4
dword_69058 % 4
dword_6905C % 4
dword_69060 % 4
byte_69064 % 1
ALIGN 4
dword_69068 % 4
dword_6906C % 4
dword_69070 % 4
dword_69074 % 4
dword_69078 % 4
; struct timeval stru_6907C
stru_6907C timeval <?>
% 1
% 1
% 1
% 1
; double dbl_69088[12]
dbl_69088 % 0x60
dword_690E8 % 4
dword_690EC % 4
; pthread_mutex_t stru_690F0
stru_690F0 pthread_mutex_t <?>
dword_69108 % 4
; pthread_mutex_t stru_6910C
stru_6910C pthread_mutex_t <?>
ALIGN 8
; pthread_cond_t cond
cond pthread_cond_t <?>
; pthread_mutex_t mutex
mutex pthread_mutex_t <?>
byte_69170 % 1
ALIGN 4
; pthread_t newthread
newthread % 4
dword_69178 % 4
byte_6917C % 1
ALIGN 0x10
dword_69180 % 4
ALIGN 8
dword_69188 % 4
; pthread_mutex_t stru_6918C
stru_6918C pthread_mutex_t <?>
dword_691A4 % 4
dword_691A8 % 4
dword_691AC % 4
unk_691B0 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_69BB0 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_6A5B0 % 4
ALIGN 8
dbl_6A5B8 % 8
; char byte_6A5C0[256]
byte_6A5C0 % 0x100
; pthread_rwlock_t stru_6A6C0
stru_6A6C0 pthread_rwlock_t <?>
dword_6A6E0 % 4
; char byte_6A6E4[8]
byte_6A6E4 % 8
unk_6A6EC % 1
% 1
% 1
% 1
unk_6A6F0 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; char byte_6A70C[32]
byte_6A70C % 0x20
; char dest[8]
dest % 8
byte_6A734 % 1
ALIGN 4
dword_6A738 % 4
dword_6A73C % 4
dword_6A740 % 4
dword_6A744 % 4
dword_6A748 % 4
; char byte_6A74C[4]
byte_6A74C % 4
unk_6A750 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; char byte_6A84C[256]
byte_6A84C % 0x100
dword_6A94C % 4
unk_6A950 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_6A970 % 4
dword_6A974 % 4
; int dword_6A978[65]
dword_6A978 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
byte_6AA7C % 1
ALIGN 0x10
unk_6AA80 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_6AB84 % 4
dword_6AB88 % 4
dword_6AB8C % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_6AB9C % 4
flt_6ABA0 % 4
dword_6ABA4 % 4
dword_6ABA8 % 4
dword_6ABAC % 4
dword_6ABB0 % 4
ALIGN 8
dbl_6ABB8 % 8
; char byte_6ABC0[16]
byte_6ABC0 % 0x10
; unsigned __int8 byte_6ABD0[248]
byte_6ABD0 % 0xF8
dword_6ACC8 % 4
ALIGN 0x10
dword_6ACD0 % 4
dword_6ACD4 % 4
qword_6ACD8 % 8
dword_6ACE0 % 4
dword_6ACE4 % 4
dword_6ACE8 % 4
; pthread_mutex_t stru_6ACEC
stru_6ACEC pthread_mutex_t <?>
dword_6AD04 % 4
unk_6AD08 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_6ED08 % 1
% 1
% 1
% 1
; char s2[17404]
s2 % 0x43FC
dword_73108 % 4
algn_7310C ALIGN 0x10
unk_73110 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
off_7311C % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_73188 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_731F0 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
off_731FC % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
unk_73268 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
; int (__fastcall *off_73274)(_DWORD)
off_73274 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_732E0 % 4
byte_732E4 % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_732EC % 4
dword_732F0 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
qword_73318 % 8
dword_73320 % 4
; char byte_73324[68]
byte_73324 % 0x44
dword_73368 % 4
ALIGN 0x10
dbl_73370 % 8
byte_73378 % 1
ALIGN 0x10
qword_73380 % 8
byte_73388 % 1
ALIGN 0x10
dbl_73390 % 8
byte_73398 % 1
ALIGN 4
byte_7339C % 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_733A4 % 4
dword_733A8 % 4
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dword_733CC % 4
; struct sigaction stru_733D0
stru_733D0 sigaction <?>
dword_7345C % 4
byte_73460 % 1
ALIGN 4
dword_73464 % 4
% 1
% 1
% 1
% 1
dword_7346C % 4
dword_73470 % 4
% 4
dword_73478 % 4
byte_7347C % 1
byte_7347D % 1
ALIGN 0x10
dword_73480 % 4
; char byte_73484[4096]
byte_73484 % 0x1000
dword_74484 % 4
byte_74488 % 1
ALIGN 4
dword_7448C % 4
% 1
% 1
% 1
% 1
dword_74494 % 4
dword_74498 % 4
byte_7449C % 1
byte_7449D % 1
ALIGN 0x10
dword_744A0 % 4
dword_744A4 % 4
; pthread_rwlock_t stru_744A8
stru_744A8 pthread_rwlock_t <?>
dword_744C8 % 4
ALIGN 0x10
; pthread_cond_t stru_744D0
stru_744D0 pthread_cond_t <?>
byte_74500 % 1
byte_74501 % 1
byte_74502 % 1
ALIGN 4
; pthread_mutex_t stru_74504
stru_74504 pthread_mutex_t <?>
; pthread_rwlock_t stru_7451C
stru_7451C pthread_rwlock_t <?>
; pthread_mutex_t stru_7453C
stru_7453C pthread_mutex_t <?>
; pthread_rwlock_t rwlock
rwlock pthread_rwlock_t <?>
ALIGN 8
dword_74578 % 4
; char byte_7457C[4096]
byte_7457C % 0x1000
dword_7557C % 4
dword_75580 % 4
dword_75584 % 4
dword_75588 % 4
ALIGN 0x10
dbl_75590 % 8
dword_75598 % 4
byte_7559C % 1
ALIGN 0x10
; pthread_rwlock_t stru_755A0
stru_755A0 pthread_rwlock_t <?>
dword_755C0 % 4
dword_755C4 % 4
ALIGN 0x10
dword_755D0 % 4
byte_755D4 % 1
ALIGN 4
qword_755D8 % 8
dword_755E0 % 4
ALIGN 8
dword_755E8 % 4
dword_755EC % 4
dword_755F0 % 4
dword_755F4 % 4
; struct sigaction stru_755F8
stru_755F8 sigaction <?>
byte_75684 % 1
byte_75685 % 1
ALIGN 4
dbl_75688 % 8
dbl_75690 % 8
dbl_75698 % 8
% 1
% 1
% 1
% 1
% 1
% 1
% 1
% 1
dbl_756A8 % 8
byte_756B0 % 1
ALIGN 4
; char byte_756B4[4100]
byte_756B4 % 0x1004
dbl_766B8 % 8
dword_766C0 % 4
; pthread_mutex_t stru_766C4
stru_766C4 pthread_mutex_t <?>
dword_766DC % 4
byte_766E0 % 1
ALIGN 4
; pthread_mutex_t stru_766E4
stru_766E4 pthread_mutex_t <?>
% 1
% 1
% 1
% 1
; pthread_cond_t stru_76700
stru_76700 pthread_cond_t <?>
; struct sigaction stru_76730
stru_76730 sigaction <?>
byte_767BC % 1
ALIGN 0x10
dword_767C0 % 4
dword_767C4 % 4
; pthread_mutex_t stru_767C8
stru_767C8 pthread_mutex_t <?>
dword_767E0 % 4
ALIGN 8
qword_767E8 % 8
byte_767F0 % 1
ALIGN 4
; pthread_mutex_t stru_767F4
stru_767F4 pthread_mutex_t <?>
; pthread_rwlock_t stru_7680C
stru_7680C pthread_rwlock_t <?>
% 1
% 1
% 1
% 1
dbl_76830 % 8
; pthread_mutex_t stru_76838
stru_76838 pthread_mutex_t <?>
qword_76850 % 8
dword_76858 % 4
dword_7685C % 4
dword_76860 % 4
dword_76864 % 4
dword_76868 % 4
dword_7686C % 4
unk_76870 % 1
% 1
% 1
% 1
; pthread_mutex_t stru_76874
stru_76874 pthread_mutex_t <?>
; pthread_mutex_t stru_7688C
stru_7688C pthread_mutex_t <?>
; .bss ends


; Segment type: Externs
; int pthread_mutex_unlock(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_unlock
; FILE *fdopen(int fd, const char *modes)
IMPORT __imp_fdopen
; void *calloc(size_t nmemb, size_t size)
IMPORT __imp_calloc
; char *strstr(const char *haystack, const char *needle)
IMPORT __imp_strstr
; int raise(int sig)
IMPORT __imp_raise
; int pthread_cond_broadcast(pthread_cond_t *cond)
IMPORT __imp_pthread_cond_broadcast
; int sem_wait(sem_t *sem)
IMPORT __imp_sem_wait
; void __pthread_register_cancel(__pthread_unwind_buf_t *buf)
IMPORT __imp___pthread_register_cancel
; int strcmp(const char *s1, const char *s2)
IMPORT __imp_strcmp
; int strtol(const char *nptr, char **endptr, int base)
IMPORT __imp_strtol
; int sem_post(sem_t *sem)
IMPORT __imp_sem_post
; int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen)
IMPORT __imp_setsockopt
; size_t strcspn(const char *s, const char *reject)
IMPORT __imp_strcspn
; int printf(const char *format, ...)
IMPORT __imp_printf
; ssize_t read(int fd, void *buf, size_t nbytes)
IMPORT __imp_read
; int pthread_mutex_destroy(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_destroy
; int fflush(FILE *stream)
IMPORT __imp_fflush
; void *memmove(void *dest, const void *src, size_t n)
IMPORT __imp_memmove
; int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr)
IMPORT __imp_pthread_rwlock_init
; void free(void *ptr)
IMPORT __imp_free
; char *fgets(char *s, int n, FILE *stream)
IMPORT __imp_fgets
; int pthread_mutex_lock(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_lock
; int pthread_detach(pthread_t th)
IMPORT __imp_pthread_detach
; int nanosleep(const struct timespec *requested_time, struct timespec *remaining)
IMPORT __imp_nanosleep
; int inet_pton(int af, const char *cp, void *buf)
IMPORT __imp_inet_pton
; int clock_gettime(clockid_t clock_id, struct timespec *tp)
IMPORT __imp_clock_gettime
; pthread_t pthread_self(void)
IMPORT __imp_pthread_self
; void *memcpy(void *dest, const void *src, size_t n)
IMPORT __imp_memcpy
; int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr)
IMPORT __imp_pthread_mutex_init
; __sighandler_t signal(int sig, __sighandler_t handler)
IMPORT __imp_signal
; time_t time(time_t *timer)
IMPORT __imp_time
; int setlogmask(int mask)
IMPORT __imp_setlogmask
; int pthread_mutex_trylock(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_trylock
; int memcmp(const void *s1, const void *s2, size_t n)
IMPORT __imp_memcmp
; int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
IMPORT __imp_select
; unsigned int sleep(unsigned int seconds)
IMPORT __imp_sleep
IMPORT __imp_stpcpy
; int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_wrlock
; ssize_t recvfrom(int fd, void *buf, size_t n, int flags, struct sockaddr *addr, socklen_t *addr_len)
IMPORT __imp_recvfrom
; int pthread_setcancelstate(int state, int *oldstate)
IMPORT __imp_pthread_setcancelstate
; int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_rdlock
; int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *cond_attr)
IMPORT __imp_pthread_cond_init
; int sysconf(int name)
IMPORT __imp_sysconf
; int dup2(int fd, int fd2)
IMPORT __imp_dup2
; void *realloc(void *ptr, size_t size)
IMPORT __imp_realloc
; int pthread_cond_destroy(pthread_cond_t *cond)
IMPORT __imp_pthread_cond_destroy
; int strcasecmp(const char *s1, const char *s2)
IMPORT __imp_strcasecmp
; void perror(const char *s)
IMPORT __imp_perror
; int accept(int fd, struct sockaddr *addr, socklen_t *addr_len)
IMPORT __imp_accept
; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
IMPORT __imp_sigaction
; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
IMPORT __imp_fwrite
; char *strcat(char *dest, const char *src)
IMPORT __imp_strcat
; int getsockopt(int fd, int level, int optname, void *optval, socklen_t *optlen)
IMPORT __imp_getsockopt
; __int64 strtoll(const char *nptr, char **endptr, int base)
IMPORT __imp_strtoll
; int usleep(__useconds_t useconds)
IMPORT __imp_usleep
; char *strcpy(char *dest, const char *src)
IMPORT __imp_strcpy
; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
IMPORT __imp_gettimeofday
; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
IMPORT __imp_fread
; int sched_yield(void)
IMPORT __imp_sched_yield
; int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg)
IMPORT __imp_pthread_create
; double floor(double x)
IMPORT __imp_floor
IMPORT __imp_strtof
IMPORT __imp_open64
; char *getenv(const char *name)
IMPORT __imp_getenv
; int puts(const char *s)
IMPORT __imp_puts
; int sysinfo(struct sysinfo *info)
IMPORT __imp_sysinfo
; void *malloc(size_t size)
IMPORT __imp_malloc
; double log10(double x)
IMPORT __imp_log10
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; char *strerror(int errnum)
IMPORT __imp_strerror
; struct tm *localtime(const time_t *timer)
IMPORT __imp_localtime
; const __int32_t **__ctype_tolower_loc(void)
IMPORT __imp___ctype_tolower_loc
; char *dirname(char *path)
IMPORT __imp_dirname
; const __int32_t **__ctype_toupper_loc(void)
IMPORT __imp___ctype_toupper_loc
; int sem_trywait(sem_t *sem)
IMPORT __imp_sem_trywait
; int kill(__pid_t pid, int sig)
IMPORT __imp_kill
; const unsigned __int16 **__ctype_b_loc(void)
IMPORT __imp___ctype_b_loc
; __pid_t getpid(void)
IMPORT __imp_getpid
; void exit(int status)
IMPORT __imp_exit
; int sem_timedwait(sem_t *sem, const struct timespec *abstime)
IMPORT __imp_sem_timedwait
; size_t strlen(const char *s)
IMPORT __imp_strlen
IMPORT __imp_round
; char *strchr(const char *s, int c)
IMPORT __imp_strchr
; int pthread_setcanceltype(int type, int *oldtype)
IMPORT __imp_pthread_setcanceltype
; int nice(int inc)
IMPORT __imp_nice
; int fprintf(FILE *stream, const char *format, ...)
IMPORT __imp_fprintf
; int fcntl(int fd, int cmd, ...)
IMPORT __imp_fcntl
; int execv(const char *path, char *const argv[])
IMPORT __imp_execv
; int *__errno_location(void)
IMPORT __imp___errno_location
; int strncasecmp(const char *s1, const char *s2, size_t n)
IMPORT __imp_strncasecmp
; int snprintf(char *s, size_t maxlen, const char *format, ...)
IMPORT __imp_snprintf
IMPORT __imp___isoc99_sscanf
; char *__strdup(const char *s)
IMPORT __imp___strdup
; int mkdir(const char *path, __mode_t mode)
IMPORT __imp_mkdir
; int bind(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_bind
; int sem_init(sem_t *sem, int pshared, unsigned int value)
IMPORT __imp_sem_init
; void *memset(void *s, int c, size_t n)
IMPORT __imp_memset
; void __pthread_unregister_cancel(__pthread_unwind_buf_t *buf)
IMPORT __imp___pthread_unregister_cancel
; int pthread_rwlock_unlock(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_unlock
; char *strncpy(char *dest, const char *src, size_t n)
IMPORT __imp_strncpy
; int pthread_cancel(pthread_t th)
IMPORT __imp_pthread_cancel
; int fgetc(FILE *stream)
IMPORT __imp_fgetc
; int prctl(int option, ...)
IMPORT __imp_prctl
; double strtod(const char *nptr, char **endptr)
IMPORT __imp_strtod
; ssize_t write(int fd, const void *buf, size_t n)
IMPORT __imp_write
; int fileno(FILE *stream)
IMPORT __imp_fileno
; void __pthread_unwind_next(__pthread_unwind_buf_t *buf)
IMPORT __imp___pthread_unwind_next, WEAK
; void *memchr(const void *s, int c, size_t n)
IMPORT __imp_memchr
; int access(const char *name, int type)
IMPORT __imp_access
; int fclose(FILE *stream)
IMPORT __imp_fclose
; int pipe(int pipedes[2])
IMPORT __imp_pipe
; char *strtok(char *s, const char *delim)
IMPORT __imp_strtok
; int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime)
IMPORT __imp_pthread_cond_timedwait
; ssize_t sendto(int fd, const void *buf, size_t n, int flags, const struct sockaddr *addr, socklen_t addr_len)
IMPORT __imp_sendto
; int shutdown(int fd, int how)
IMPORT __imp_shutdown
; int sigemptyset(sigset_t *set)
IMPORT __imp_sigemptyset
; FILE *popen(const char *command, const char *modes)
IMPORT __imp_popen
; int pthread_rwlock_destroy(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_destroy
; __pid_t fork(void)
IMPORT __imp_fork
; void errx(int status, const char *format, ...)
IMPORT __imp_errx
; int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen, char *serv, socklen_t servlen, unsigned int flags)
IMPORT __imp_getnameinfo
; int execl(const char *path, const char *arg, ...)
IMPORT __imp_execl
; int listen(int fd, int n)
IMPORT __imp_listen
; int vfprintf(FILE *s, const char *format, __gnuc_va_list arg)
IMPORT __imp_vfprintf
; int pthread_join(pthread_t th, void **thread_return)
IMPORT __imp_pthread_join
; int __sigsetjmp(struct __jmp_buf_tag *env, int savemask)
IMPORT __imp___sigsetjmp
IMPORT __imp_lldiv
; int fputc(int c, FILE *stream)
IMPORT __imp_fputc
; void syslog(int pri, const char *fmt, ...)
IMPORT __imp_syslog
; int sscanf(const char *s, const char *format, ...)
IMPORT __imp_sscanf
; struct lconv *localeconv(void)
IMPORT __imp_localeconv
; int sprintf(char *s, const char *format, ...)
IMPORT __imp_sprintf
; void openlog(const char *ident, int option, int facility)
IMPORT __imp_openlog
; double exp(double x)
IMPORT __imp_exp
; int vsnprintf(char *s, size_t maxlen, const char *format, __gnuc_va_list arg)
IMPORT __imp_vsnprintf
IMPORT __imp_fopen64
; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
IMPORT __imp_qsort
; char *strpbrk(const char *s, const char *accept)
IMPORT __imp_strpbrk
; int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock)
IMPORT __imp_pthread_rwlock_trywrlock
; int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)
IMPORT __imp_pthread_cond_wait
; void freeaddrinfo(struct addrinfo *ai)
IMPORT __imp_freeaddrinfo
; int getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)
IMPORT __imp_getaddrinfo
; int socket(int domain, int type, int protocol)
IMPORT __imp_socket
; int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *req, struct timespec *rem)
IMPORT __imp_clock_nanosleep
; in_addr_t inet_addr(const char *cp)
IMPORT __imp_inet_addr
; void pthread_testcancel(void)
IMPORT __imp_pthread_testcancel
; char *strncat(char *dest, const char *src, size_t n)
IMPORT __imp_strncat
; int sem_destroy(sem_t *sem)
IMPORT __imp_sem_destroy
; int isatty(int fd)
IMPORT __imp_isatty
; int strncmp(const char *s1, const char *s2, size_t n)
IMPORT __imp_strncmp
; int pthread_cond_signal(pthread_cond_t *cond)
IMPORT __imp_pthread_cond_signal
; void abort(void)
IMPORT __imp_abort
; ssize_t recv(int fd, void *buf, size_t n, int flags)
IMPORT __imp_recv
; int close(int fd)
IMPORT __imp_close
; ssize_t send(int fd, const void *buf, size_t n, int flags)
IMPORT __imp_send
; int connect(int fd, const struct sockaddr *addr, socklen_t len)
IMPORT __imp_connect
; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
IMPORT __imp___assert_fail
; int pclose(FILE *stream)
IMPORT __imp_pclose
IMPORT _ITM_deregisterTMCloneTable, WEAK
IMPORT __imp___gmon_start__, WEAK
IMPORT _ITM_registerTMCloneTable, WEAK

END _start
